[
  {
    "id": "8099ff24-8ade-48d5-a54a-8d2d1831d806",
    "endpoints": {
      "endpoint_chats.createStream": {
        "id": "endpoint_chats.createStream",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Get a chat response by providing details of the model configuration in the request.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateStreamRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
              },
              {
                "key": "tool_call",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateStreamRequestToolCall"
                      }
                    }
                  }
                },
                "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                "availability": "Deprecated"
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "model_config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ModelConfigChatRequest"
                  }
                },
                "description": "The model configuration used to create a chat response."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ChatResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/chat",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config": {
                  "model": "string"
                }
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config\": {\n    \"model\": \"string\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/chat",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config": {
                  "model": "string"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config\": {\n    \"model\": \"string\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create": {
        "id": "endpoint_chats.create",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Get a chat response by providing details of the model configuration in the request.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
              },
              {
                "key": "tool_call",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateRequestToolCall"
                      }
                    }
                  }
                },
                "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                "availability": "Deprecated"
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "model_config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ModelConfigChatRequest"
                  }
                },
                "description": "The model configuration used to create a chat response."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ChatResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/chat",
            "responseStatusCode": 200,
            "name": "Simple",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "messages": [
                  {
                    "role": "user",
                    "content": "What really happened at Roswell?"
                  }
                ],
                "model_config": {
                  "model": "gpt-4o",
                  "max_tokens": 200,
                  "chat_template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                    }
                  ]
                },
                "project": "persona",
                "inputs": {
                  "person": "Trump"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "data_fIfEb1SoKZooqeFbi9IFs",
                    "index": 0,
                    "output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "raw_output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "model_config_id": "prv_Wu6zx1lAWJRqOyL8nWuZk",
                    "output_message": {
                      "role": "assistant",
                      "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!"
                    },
                    "inputs": {
                      "person": "Trump"
                    },
                    "finish_reason": "stop",
                    "tool_results": [],
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are Trump. Answer any questions as this person. Do not break character."
                      },
                      {
                        "role": "user",
                        "content": "What really happened at Roswell?"
                      }
                    ]
                  }
                ],
                "provider_responses": [
                  {
                    "id": "chatcmpl-9TbTAC1WFnAlRNY3yzVGGPQbLOXFY",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "message": {
                          "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time. People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                          "role": "assistant"
                        }
                      }
                    ],
                    "created": 1716842572,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_43dfabdef1",
                    "usage": {
                      "completion_tokens": 125,
                      "prompt_tokens": 34,
                      "total_tokens": 159
                    }
                  }
                ],
                "project_id": "pr_3usCu3dAkgrXTlufrvPs7",
                "num_samples": 1,
                "usage": {
                  "prompt_tokens": 34,
                  "generation_tokens": 125,
                  "total_tokens": 159
                },
                "provider_request": {
                  "messages": [
                    {
                      "content": "You are Trump. Answer any questions as this person. Do not break character.",
                      "role": "system"
                    },
                    {
                      "content": "What really happened at Roswell?",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 1,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "max_tokens": 200
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What really happened at Roswell?\"\n    }\n  ],\n  \"model_config\": {\n    \"model\": \"gpt-4o\",\n    \"max_tokens\": 200,\n    \"chat_template\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are {{person}}. Answer any questions as this person. Do not break character.\"\n      }\n    ]\n  },\n  \"project\": \"persona\",\n  \"inputs\": {\n    \"person\": \"Trump\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/chat",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config": {
                  "model": "string"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config\": {\n    \"model\": \"string\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create_deployed_stream": {
        "id": "endpoint_chats.create_deployed_stream",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Get a chat response using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat-deployed"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateDeployedStreamRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
              },
              {
                "key": "tool_call",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateDeployedStreamRequestToolCall"
                      }
                    }
                  }
                },
                "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                "availability": "Deprecated"
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The environment name used to create a chat response. If not specified, the default environment will be used."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ChatResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/chat-deployed",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "messages": [
                  {
                    "role": "user"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/chat-deployed",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "messages": [
                  {
                    "role": "user"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create_deployed": {
        "id": "endpoint_chats.create_deployed",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Get a chat response using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat-deployed"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateDeployedRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
              },
              {
                "key": "tool_call",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateDeployedRequestToolCall"
                      }
                    }
                  }
                },
                "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                "availability": "Deprecated"
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The environment name used to create a chat response. If not specified, the default environment will be used."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ChatResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/chat-deployed",
            "responseStatusCode": 200,
            "name": "ai-assistant-with-tools",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "messages": [
                  {
                    "role": "user",
                    "content": "What is the weather in SF?"
                  }
                ],
                "project": "ai-assistant",
                "inputs": {
                  "persona": "helpful but will *always* tell a joke first before calling tools"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "data_lwWadasRw0vT4XDarZuNQ",
                    "index": 0,
                    "output": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                    "raw_output": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                    "model_config_id": "prv_rlwVnPhRsiMKfnTusferP",
                    "output_message": {
                      "role": "assistant",
                      "content": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                      "tool_calls": [
                        {
                          "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                          "type": "function",
                          "function": {
                            "name": "get_current_weather",
                            "arguments": "{\"location\":\"San Francisco, CA\"}"
                          }
                        }
                      ]
                    },
                    "inputs": {
                      "persona": "helpful but will *always* tell a joke first before calling tools"
                    },
                    "finish_reason": "tool_call",
                    "tool_results": [],
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are a helpful assistant with persona helpful but will *always* tell a joke first before calling tools. \nUse tools to respond to user's queries.\n"
                      },
                      {
                        "role": "user",
                        "content": "What is the weather in SF?"
                      }
                    ],
                    "tool_calls": [
                      {
                        "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                        "type": "function",
                        "function": {
                          "name": "get_current_weather",
                          "arguments": "{\"location\":\"San Francisco, CA\"}"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "get_current_weather",
                      "arguments": "{\"location\":\"San Francisco, CA\"}"
                    }
                  }
                ],
                "provider_responses": [
                  {
                    "id": "chatcmpl-9TbcxkvnK9Q0VTCO89GGPsgWiI7LY",
                    "choices": [
                      {
                        "finish_reason": "tool_calls",
                        "index": 0,
                        "message": {
                          "content": "Why did the weather report go to school? To become a little brighter!\n\nLet me check the current weather in San Francisco for you.",
                          "role": "assistant",
                          "tool_calls": [
                            {
                              "id": "call_1b6yHTGiB51P2I75T6yZrm63",
                              "function": {
                                "arguments": "{\"location\":\"San Francisco, CA\"}",
                                "name": "get_current_weather"
                              },
                              "type": "function"
                            }
                          ]
                        }
                      }
                    ],
                    "created": 1716843179,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_43dfabdef1",
                    "usage": {
                      "completion_tokens": 46,
                      "prompt_tokens": 137,
                      "total_tokens": 183
                    }
                  }
                ],
                "project_id": "pr_TfhDgggIsPi3cgmhq2yeA",
                "num_samples": 1,
                "usage": {
                  "prompt_tokens": 137,
                  "generation_tokens": 46,
                  "total_tokens": 183
                },
                "provider_request": {
                  "messages": [
                    {
                      "content": "You are a helpful assistant with persona helpful but will *always* tell a joke first before calling tools. \nUse tools to respond to user's queries.\n",
                      "role": "system"
                    },
                    {
                      "content": "What is the weather in SF?",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "tools": [
                    {
                      "type": "function",
                      "function": {
                        "name": "get_current_weather",
                        "description": "Get the current weather in a given location",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "location": {
                              "type": "string",
                              "name": "Location",
                              "description": "The city and state, e.g. San Francisco, CA"
                            },
                            "unit": {
                              "type": "string",
                              "name": "Unit",
                              "enum": [
                                "celsius",
                                "fahrenheit"
                              ]
                            }
                          },
                          "required": [
                            "location"
                          ]
                        }
                      }
                    },
                    {
                      "type": "function",
                      "function": {
                        "name": "get_stock_price",
                        "description": "Get current stock price",
                        "parameters": {
                          "type": "object",
                          "properties": {
                            "ticker_symbol": {
                              "type": "string",
                              "name": "Ticker Symbol",
                              "description": "Ticker symbol of the stock"
                            }
                          },
                          "required": []
                        }
                      }
                    }
                  ],
                  "tool_choice": "auto"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What is the weather in SF?\"\n    }\n  ],\n  \"project\": \"ai-assistant\",\n  \"inputs\": {\n    \"persona\": \"helpful but will *always* tell a joke first before calling tools\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/chat-deployed",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "messages": [
                  {
                    "role": "user"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create_config_stream": {
        "id": "endpoint_chats.create_config_stream",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Get chat response for a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat-model-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateConfigStreamRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
              },
              {
                "key": "tool_call",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateConfigStreamRequestToolCall"
                      }
                    }
                  }
                },
                "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                "availability": "Deprecated"
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "model_config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identifies the model configuration used to create a chat response."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ChatResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/chat-model-config",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config_id": "string"
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/chat-model-config",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create_config": {
        "id": "endpoint_chats.create_config",
        "namespace": [
          "subpackage_chats"
        ],
        "description": "Get chat response for a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat-model-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessageWithToolCall"
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateConfigRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
              },
              {
                "key": "tool_call",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_chats:ChatsCreateConfigRequestToolCall"
                      }
                    }
                  }
                },
                "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
                "availability": "Deprecated"
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "model_config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identifies the model configuration used to create a chat response."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ChatResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/chat-model-config",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config_id": "model_config_id"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "model_config_id": "model_config_id",
                    "output_message": {
                      "role": "user"
                    },
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id",
                "tool_choice": "none"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config_id\": \"model_config_id\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/chat-model-config",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "messages": [
                  {
                    "role": "user"
                  }
                ],
                "model_config_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"messages\": [\n    {\n      \"role\": \"user\"\n    }\n  ],\n  \"model_config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create_experiment_stream": {
        "id": "endpoint_chats.create_experiment_stream",
        "namespace": [
          "subpackage_chats"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat-experiment"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ChatResponse"
              }
            }
          }
        },
        "examples": [
          {
            "path": "/chat-experiment",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ],
                      "messages": [
                        {
                          "content": "string",
                          "name": "string",
                          "tool_call_id": "string",
                          "role": "user",
                          "tool_calls": [
                            {
                              "id": "string",
                              "type": "function",
                              "function": {
                                "name": "string",
                                "arguments": "string"
                              }
                            }
                          ],
                          "tool_call": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "tool_call": {
                        "name": "string",
                        "arguments": "string"
                      },
                      "tool_calls": [
                        {
                          "id": "string",
                          "type": "function",
                          "function": {
                            "name": "string",
                            "arguments": "string"
                          }
                        }
                      ],
                      "output_message": {
                        "content": "string",
                        "name": "string",
                        "tool_call_id": "string",
                        "role": "user",
                        "tool_calls": [
                          {
                            "id": "string",
                            "type": "function",
                            "function": {
                              "name": "string",
                              "arguments": "string"
                            }
                          }
                        ],
                        "tool_call": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string",
                  "tool_choice": "none"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-experiment",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_chats.create_experiment": {
        "id": "endpoint_chats.create_experiment",
        "namespace": [
          "subpackage_chats"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/chat-experiment"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ChatResponse"
            }
          }
        },
        "examples": [
          {
            "path": "/chat-experiment",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "model_config_id": "model_config_id",
                    "output_message": {
                      "role": "user"
                    },
                    "inputs": {
                      "key": "value"
                    },
                    "finish_reason": "finish_reason",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id",
                "tool_choice": "none"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/chat-experiment",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.createStream": {
        "id": "endpoint_completions.createStream",
        "namespace": [
          "subpackage_completions"
        ],
        "description": "Create a completion by providing details of the model configuration in the request.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              },
              {
                "key": "model_config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ModelConfigCompletionRequest"
                  }
                },
                "description": "The model configuration used to generate."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CompletionResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/completion",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "model_config": {
                  "model": "string"
                }
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"model_config\": {\n    \"model\": \"string\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "model_config": {
                  "model": "string"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"model_config\": {\n    \"model\": \"string\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create": {
        "id": "endpoint_completions.create",
        "namespace": [
          "subpackage_completions"
        ],
        "description": "Create a completion by providing details of the model configuration in the request.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              },
              {
                "key": "model_config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ModelConfigCompletionRequest"
                  }
                },
                "description": "The model configuration used to generate."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CompletionResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/completion",
            "responseStatusCode": 200,
            "name": "Simple",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "model_config": {
                  "model": "gpt-4o",
                  "endpoint": "complete",
                  "prompt_template": "write a limerick about {{topic}}"
                },
                "project": "limerick",
                "inputs": {
                  "topic": "AI"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "data_hdsujCtCep4W5L7XwYpnn",
                    "index": 0,
                    "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "inputs": {
                      "topic": "AI"
                    },
                    "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                    "finish_reason": "stop",
                    "tool_results": []
                  }
                ],
                "provider_responses": [
                  {
                    "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "message": {
                          "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                          "role": "assistant"
                        }
                      }
                    ],
                    "created": 1716591324,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_3196d36131",
                    "usage": {
                      "completion_tokens": 36,
                      "prompt_tokens": 14,
                      "total_tokens": 50
                    }
                  }
                ],
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "num_samples": 1,
                "usage": {
                  "prompt_tokens": 14,
                  "generation_tokens": 36,
                  "total_tokens": 50
                },
                "provider_request": {
                  "messages": [
                    {
                      "content": "write a limerick about AI",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"model_config\": {\n    \"model\": \"gpt-4o\",\n    \"endpoint\": \"complete\",\n    \"prompt_template\": \"write a limerick about {{topic}}\"\n  },\n  \"project\": \"limerick\",\n  \"inputs\": {\n    \"topic\": \"AI\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion",
            "responseStatusCode": 200,
            "name": "Using ID and session",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "model_config": {
                  "model": "gpt-4o",
                  "endpoint": "complete",
                  "prompt_template": "write a limerick about {{topic}}"
                },
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "session_reference_id": "my_external_session_id",
                "inputs": {
                  "topic": "AI"
                },
                "user": "jordan@humanloop.com"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "data_hdsujCtCep4W5L7XwYpnn",
                    "index": 0,
                    "output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "raw_output": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                    "inputs": {
                      "topic": "AI"
                    },
                    "model_config_id": "prv_AkObw2O2rquayfWHyJbqw",
                    "finish_reason": "stop",
                    "tool_results": []
                  }
                ],
                "provider_responses": [
                  {
                    "id": "chatcmpl-9SY6mNMWrL5gxtyL7xUOTIYZOjguD",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "message": {
                          "content": "There once was an AI so keen,\nWith circuits and code all pristine.\nIt learned how to chat,\nAnd got clever at that,\nNow it talks like a true human being!",
                          "role": "assistant"
                        }
                      }
                    ],
                    "created": 1716591324,
                    "model": "gpt-4o-2024-05-13",
                    "object": "chat.completion",
                    "system_fingerprint": "fp_3196d36131",
                    "usage": {
                      "completion_tokens": 36,
                      "prompt_tokens": 14,
                      "total_tokens": 50
                    }
                  }
                ],
                "project_id": "pr_eJgRt5K1zivoFgHVlRnFv",
                "num_samples": 1,
                "user": "jordan@humanloop.com",
                "usage": {
                  "prompt_tokens": 14,
                  "generation_tokens": 36,
                  "total_tokens": 50
                },
                "provider_request": {
                  "messages": [
                    {
                      "content": "write a limerick about AI",
                      "role": "user"
                    }
                  ],
                  "stream": false,
                  "n": 1,
                  "model": "gpt-4o",
                  "temperature": 0.7,
                  "top_p": 1,
                  "presence_penalty": 0,
                  "frequency_penalty": 0,
                  "user": "jordan@humanloop.com"
                },
                "session_id": "sesh_YuzHoIpqfcs15KoDmfuGb"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"model_config\": {\n    \"model\": \"gpt-4o\",\n    \"endpoint\": \"complete\",\n    \"prompt_template\": \"write a limerick about {{topic}}\"\n  },\n  \"project_id\": \"pr_eJgRt5K1zivoFgHVlRnFv\",\n  \"session_reference_id\": \"my_external_session_id\",\n  \"inputs\": {\n    \"topic\": \"AI\"\n  },\n  \"user\": \"jordan@humanloop.com\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "model_config": {
                  "model": "string"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"model_config\": {\n    \"model\": \"string\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create_deployed_stream": {
        "id": "endpoint_completions.create_deployed_stream",
        "namespace": [
          "subpackage_completions"
        ],
        "description": "Create a completion using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion-deployed"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The environment name used to create a chat response. If not specified, the default environment will be used."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CompletionResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/completion-deployed",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion-deployed",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create_deployed": {
        "id": "endpoint_completions.create_deployed",
        "namespace": [
          "subpackage_completions"
        ],
        "description": "Create a completion using the project's active deployment.\n\nThe active deployment can be a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion-deployed"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The environment name used to create a chat response. If not specified, the default environment will be used."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CompletionResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/completion-deployed",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "model_config_id": "model_config_id",
                    "finish_reason": "finish_reason",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ]
                  }
                ],
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion-deployed",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-deployed \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create_config_stream": {
        "id": "endpoint_completions.create_config_stream",
        "namespace": [
          "subpackage_completions"
        ],
        "description": "Create a completion for a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion-model-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              },
              {
                "key": "model_config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identifies the model configuration used to create a chat response."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CompletionResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/completion-model-config",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "model_config_id": "string"
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"model_config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion-model-config",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true,
                "model_config_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true,\n  \"model_config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create_config": {
        "id": "endpoint_completions.create_config",
        "namespace": [
          "subpackage_completions"
        ],
        "description": "Create a completion for a specific model configuration.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion-model-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If no project exists with this name, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
              },
              {
                "key": "session_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the session to associate the datapoint."
              },
              {
                "key": "session_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID associated to the parent datapoint in a session."
              },
              {
                "key": "parent_reference_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID passed through to provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Deprecated field: the seed is instead set as part of the request.config object.",
                "availability": "Deprecated"
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              },
              {
                "key": "model_config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identifies the model configuration used to create a chat response."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CompletionResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/completion-model-config",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "model_config_id": "model_config_id"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "model_config_id": "model_config_id",
                    "finish_reason": "finish_reason",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ]
                  }
                ],
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"model_config_id\": \"model_config_id\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/completion-model-config",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "model_config_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-model-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"model_config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create_experiment_stream": {
        "id": "endpoint_completions.create_experiment_stream",
        "namespace": [
          "subpackage_completions"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion-experiment"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CompletionResponse"
              }
            }
          }
        },
        "examples": [
          {
            "path": "/completion-experiment",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                },
                {
                  "project_id": "string",
                  "num_samples": 0,
                  "logprobs": 0,
                  "suffix": "string",
                  "user": "string",
                  "data": [
                    {
                      "id": "string",
                      "index": 0,
                      "output": "string",
                      "raw_output": "string",
                      "inputs": {
                        "string": {}
                      },
                      "finish_reason": "string",
                      "model_config_id": "string",
                      "tool_results": [
                        {
                          "id": "string",
                          "name": "string",
                          "signature": "string",
                          "result": "string"
                        }
                      ]
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 0,
                    "generation_tokens": 0,
                    "total_tokens": 0
                  },
                  "metadata": {
                    "string": {}
                  },
                  "provider_responses": [
                    {}
                  ],
                  "provider_request": {
                    "string": {}
                  },
                  "session_id": "string"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-experiment",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_completions.create_experiment": {
        "id": "endpoint_completions.create_experiment",
        "namespace": [
          "subpackage_completions"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/completion-experiment"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CompletionResponse"
            }
          }
        },
        "examples": [
          {
            "path": "/completion-experiment",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "id": "id",
                    "index": 1,
                    "output": "output",
                    "raw_output": "raw_output",
                    "inputs": {
                      "key": "value"
                    },
                    "model_config_id": "model_config_id",
                    "finish_reason": "finish_reason",
                    "tool_results": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ]
                  }
                ],
                "provider_responses": [
                  {
                    "key": "value"
                  }
                ],
                "project_id": "project_id",
                "num_samples": 1,
                "logprobs": 1,
                "suffix": "suffix",
                "user": "user",
                "usage": {
                  "prompt_tokens": 1,
                  "generation_tokens": 1,
                  "total_tokens": 1
                },
                "metadata": {
                  "key": "value"
                },
                "provider_request": {
                  "key": "value"
                },
                "session_id": "session_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/completion-experiment",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datapoints.get": {
        "id": "endpoint_datapoints.get",
        "namespace": [
          "subpackage_datapoints"
        ],
        "description": "Get a datapoint by ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datapoints/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of datapoint."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatapointResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datapoints/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "dataset_id": "dataset_id",
                "inputs": {
                  "key": "value"
                },
                "messages": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "target": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datapoints/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datapoints/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datapoints/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datapoints.update": {
        "id": "endpoint_datapoints.update",
        "namespace": [
          "subpackage_datapoints"
        ],
        "description": "Edit the input, messages and criteria fields of a datapoint.\n\nWARNING: This endpoint has been decommissioned and no longer works. Please use the v5 datasets API instead.",
        "availability": "Deprecated",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/datapoints/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of datapoint."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatapointResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datapoints/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "dataset_id": "dataset_id",
                "inputs": {
                  "key": "value"
                },
                "messages": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "target": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/datapoints/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datapoints/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/datapoints/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datapoints.delete": {
        "id": "endpoint_datapoints.delete",
        "namespace": [
          "subpackage_datapoints"
        ],
        "description": "Delete a list of datapoints by their IDs.\n\nWARNING: This endpoint has been decommissioned and no longer works. Please use the v5 datasets API instead.",
        "availability": "Deprecated",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/datapoints"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datapoints",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/datapoints \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datapoints",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/datapoints \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.list_datasets": {
        "id": "endpoint_projects.list_datasets",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Get all datasets for a project.",
        "availability": "Deprecated",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "project_id"
          },
          {
            "type": "literal",
            "value": "/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/project_id/datasets",
            "responseStatusCode": 200,
            "pathParameters": {
              "project_id": "project_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/project_id/datasets \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:project_id/datasets",
            "responseStatusCode": 422,
            "pathParameters": {
              "project_id": ":project_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/:project_id/datasets \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.list_evaluations": {
        "id": "endpoint_projects.list_evaluations",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Get all the evaluations associated with your project.\n\nDeprecated: This is a legacy unpaginated endpoint. Use `/evaluations` instead, with appropriate\nsorting, filtering and pagination options.",
        "availability": "Deprecated",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "project_id"
          },
          {
            "type": "literal",
            "value": "/evaluations"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "queryParameters": [
          {
            "key": "evaluatee_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`."
          },
          {
            "key": "evaluator_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Whether to include evaluator aggregates in the response."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluationResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/project_id/evaluations",
            "responseStatusCode": 200,
            "pathParameters": {
              "project_id": "project_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "status": "pending",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "evaluators": [
                    {
                      "name": "name",
                      "description": "description",
                      "arguments_type": "target_free",
                      "return_type": "boolean",
                      "type": "python",
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "dataset": {
                    "id": "id",
                    "name": "name",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "description": "description"
                  },
                  "dataset_version_id": "dataset_version_id",
                  "dataset_snapshot": {
                    "id": "id",
                    "name": "name",
                    "datapoint_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "project_id": "project_id",
                    "description": "description"
                  },
                  "evaluator_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/project_id/evaluations \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:project_id/evaluations",
            "responseStatusCode": 422,
            "pathParameters": {
              "project_id": ":project_id"
            },
            "queryParameters": {
              "evaluatee_id": "string",
              "evaluator_aggregates": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/projects/:project_id/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d evaluatee_id=string \\\n     -d evaluator_aggregates=true",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.list": {
        "id": "endpoint_projects.list",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Get a paginated list of files.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page offset for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of projects to fetch."
          },
          {
            "key": "filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for project name."
          },
          {
            "key": "user_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for users in the project. This filter matches against both email address and name of users."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort projects by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataProjectResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "id",
                    "name": "name",
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "name": "config",
                        "status": "config"
                      }
                    },
                    "config_type": "generic",
                    "active_evaluators": [
                      {
                        "name": "name",
                        "description": "description",
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "type": "python",
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "directory_id": "directory_id"
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/projects \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.create": {
        "id": "endpoint_projects.create",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Create a new project.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/projects"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Unique project name."
              },
              {
                "key": "directory_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of directory to assign project to. Starts with `dir_`. If not provided, the project will be created in the root directory."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ProjectResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                },
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    }
                  }
                ],
                "directory_id": "directory_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.get": {
        "id": "endpoint_projects.get",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Get a specific project.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ProjectResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                },
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    }
                  }
                ],
                "directory_id": "directory_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.delete": {
        "id": "endpoint_projects.delete",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Delete a specific file.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/projects/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/projects/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.update": {
        "id": "endpoint_projects.update",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Update a specific project.\n\nSet the project's active model config by passing `active_model_config_id`.\nThese will be set to the Default environment unless a list of environments\nare also passed in specifically detailing which environments to assign the\nactive config.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The new unique project name. Caution, if you are using the project name as the unique identifier in your API calls, changing the name will break the calls."
              },
              {
                "key": "active_config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for a config to set as the project's active deployment. Starts with 'config_'. "
              },
              {
                "key": "directory_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of directory to assign project to. Starts with `dir_`."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ProjectResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                },
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    }
                  }
                ],
                "directory_id": "directory_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/projects/id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/projects/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.list_configs": {
        "id": "endpoint_projects.list_configs",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Get an array of versions associated to your file.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/configs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "queryParameters": [
          {
            "key": "evaluation_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ProjectConfigResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/configs",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/id/configs \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/configs",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "evaluation_aggregates": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/projects/:id/configs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d evaluation_aggregates=true",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.create_feedback_type": {
        "id": "endpoint_projects.create_feedback_type",
        "namespace": [
          "subpackage_projects"
        ],
        "availability": "Deprecated",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/feedback-types"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The type of feedback to update."
              },
              {
                "key": "class",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:FeedbackClass"
                  }
                },
                "description": "The data type associated to this feedback type; whether it is a 'text'/'select'/'multi_select'."
              },
              {
                "key": "values",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:FeedbackLabelRequest"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The feedback values to be available. This field should only be populated when updating a 'select' or 'multi_select' feedback class."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FeedbackTypeModel"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/feedback-types",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "type": "type",
                "class": "select"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "type": "rating",
                "values": [
                  {
                    "value": "value",
                    "sentiment": "positive"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/id/feedback-types \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"type\": \"type\",\n  \"class\": \"select\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/feedback-types",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "type": "string",
                "class": "select"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/:id/feedback-types \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"type\": \"string\",\n  \"class\": \"select\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.update_feedback_types": {
        "id": "endpoint_projects.update_feedback_types",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Update feedback types.\n\nWARNING: This endpoint has been decommissioned and no longer works. Please use the v5 Human Evaluators API instead.",
        "availability": "Deprecated",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/feedback-types"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "unknown"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/feedback-types",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "key": "value"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/projects/id/feedback-types \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/feedback-types",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/projects/:id/feedback-types \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects.export": {
        "id": "endpoint_projects.export",
        "namespace": [
          "subpackage_projects"
        ],
        "description": "Export all logged datapoints associated to your project.\n\nResults are paginated and sorts the datapoints based on `created_at` in\ndescending order.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/export"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page offset for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of logs to export."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/export",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "id",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "name": "config",
                      "status": "config"
                    },
                    "evaluation_results": [
                      {
                        "id": "id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "log_id": "log_id",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "observability_status": "pending",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "project": "project",
                    "project_id": "project_id",
                    "session_id": "session_id",
                    "session_reference_id": "session_reference_id",
                    "parent_id": "parent_id",
                    "parent_reference_id": "parent_reference_id",
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "save": true,
                    "source_datapoint_id": "source_datapoint_id",
                    "reference_id": "reference_id",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "output": "output",
                    "judgment": true,
                    "config_id": "config_id",
                    "environment": "environment",
                    "feedback": [
                      {
                        "type": "rating",
                        "value": true,
                        "id": "id"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "stdout": "stdout",
                    "duration": 1.1,
                    "output_message": {
                      "role": "user"
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "user": "user",
                    "provider_latency": 1.1,
                    "tokens": 1,
                    "raw_output": "raw_output",
                    "finish_reason": "finish_reason",
                    "tools": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "tool_choice": "none",
                    "batch_ids": [
                      "batch_ids"
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/id/export \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/export",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v4/projects/:id/export?page=0&size=0\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.create": {
        "id": "endpoint_datasets.create",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Create a new dataset for a project.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "project_id"
          },
          {
            "type": "literal",
            "value": "/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The name of the dataset."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The description of the dataset."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/project_id/datasets",
            "responseStatusCode": 200,
            "pathParameters": {
              "project_id": "project_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name",
                "description": "description"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "datapoint_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "project_id": "project_id",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/project_id/datasets \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\",\n  \"description\": \"description\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:project_id/datasets",
            "responseStatusCode": 422,
            "pathParameters": {
              "project_id": ":project_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string",
                "description": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/:project_id/datasets \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\",\n  \"description\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list": {
        "id": "endpoint_datasets.list",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Get all Datasets for an organization.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datasets \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datasets \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.get": {
        "id": "endpoint_datasets.get",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Get a single dataset by ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of dataset. Starts with `evts_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "datapoint_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "project_id": "project_id",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datasets/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datasets/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.delete": {
        "id": "endpoint_datasets.delete",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Delete a dataset by ID.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of dataset. Starts with `evts_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "unknown"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "key": "value"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/datasets/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/datasets/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.update": {
        "id": "endpoint_datasets.update",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Update a testset by ID.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of testset. Starts with `evts_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the dataset."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The description of the dataset."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "datapoint_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "project_id": "project_id",
                "description": "description"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/datasets/id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/datasets/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.list_datapoints": {
        "id": "endpoint_datasets.list_datapoints",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Get datapoints for a dataset.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "dataset_id"
          },
          {
            "type": "literal",
            "value": "/datapoints"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of dataset. Starts with `evts_`."
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataDatapointResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/dataset_id/datapoints",
            "responseStatusCode": 200,
            "pathParameters": {
              "dataset_id": "dataset_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "id",
                    "dataset_id": "dataset_id",
                    "inputs": {
                      "key": "value"
                    },
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "target": {
                      "key": "value"
                    }
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/datasets/dataset_id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:dataset_id/datapoints",
            "responseStatusCode": 422,
            "pathParameters": {
              "dataset_id": ":dataset_id"
            },
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/datasets/:dataset_id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_datasets.create_datapoint": {
        "id": "endpoint_datasets.create_datapoint",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Create a new datapoint for a dataset.\n\nHere in the v4 API, this has the following behaviour:\n\n- Retrieve the current latest version of the dataset.\n- Construct a new version of the dataset with the new testcases added.\n- Store that latest version as a committed version with an autogenerated commit\n  message and return the new datapoints",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "dataset_id"
          },
          {
            "type": "literal",
            "value": "/datapoints"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "dataset_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of dataset. Starts with `evts_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_datasets:Request"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatapointResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/dataset_id/datapoints",
            "responseStatusCode": 200,
            "pathParameters": {
              "dataset_id": "dataset_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "log_ids": [
                  "log_ids"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "dataset_id": "dataset_id",
                  "inputs": {
                    "key": "value"
                  },
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "target": {
                    "key": "value"
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/datasets/dataset_id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"log_ids\": [\n    \"log_ids\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:dataset_id/datapoints",
            "responseStatusCode": 422,
            "pathParameters": {
              "dataset_id": ":dataset_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "log_ids": [
                  "string"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/datasets/:dataset_id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"log_ids\": [\n    \"string\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.get": {
        "id": "endpoint_evaluations.get",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Get evaluation by ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of evaluation run. Starts with `ev_`."
          }
        ],
        "queryParameters": [
          {
            "key": "evaluator_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Whether to include evaluator aggregates in the response."
          },
          {
            "key": "evaluatee_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/evaluations/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "evaluator_aggregates": true,
              "evaluatee_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/evaluations/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d evaluator_aggregates=true \\\n     -d evaluatee_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.list_datapoints": {
        "id": "endpoint_evaluations.list_datapoints",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Get testcases by evaluation ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/datapoints"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of evaluation. Starts with `ev_`."
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page to fetch. Starts from 1."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of evaluation results to retrieve."
          },
          {
            "key": "evaluatee_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataEvaluationDatapointSnapshotResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id/datapoints",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "datapoint": {
                      "id": "id"
                    },
                    "evaluation_results": [
                      {
                        "id": "id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "log_id": "log_id",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "log": {
                      "id": "id",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "name": "config",
                        "status": "config"
                      },
                      "evaluation_results": [
                        {
                          "id": "id",
                          "evaluator_id": "evaluator_id",
                          "evaluator_version_id": "evaluator_version_id",
                          "log_id": "log_id",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "created_at": "2024-01-15T09:30:00Z"
                        }
                      ],
                      "observability_status": "pending",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/evaluations/id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id/datapoints",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/evaluations/:id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.create": {
        "id": "endpoint_evaluations.create",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Create an evaluation.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "project_id"
          },
          {
            "type": "literal",
            "value": "/evaluations"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "ID of the config to evaluate. Starts with `config_`."
              },
              {
                "key": "evaluator_ids",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "IDs of evaluators to run on the dataset. IDs start with `evfn_`"
              },
              {
                "key": "dataset_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "ID of the dataset to use in this evaluation. Starts with `evts_`."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization. Ensure you provide an API key for the provider for the model config you are evaluating, or have one saved to your organization."
              },
              {
                "key": "hl_generated",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the log generations for this evaluation should be performed by Humanloop. If `False`, the log generations should be submitted by the user via the API."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Evaluation to help identify it."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/project_id/evaluations",
            "responseStatusCode": 200,
            "pathParameters": {
              "project_id": "project_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "config_id": "config_id",
                "evaluator_ids": [
                  "evaluator_ids"
                ],
                "dataset_id": "dataset_id"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/project_id/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"config_id\": \"config_id\",\n  \"evaluator_ids\": [\n    \"evaluator_ids\"\n  ],\n  \"dataset_id\": \"dataset_id\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:project_id/evaluations",
            "responseStatusCode": 422,
            "pathParameters": {
              "project_id": ":project_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "config_id": "string",
                "evaluator_ids": [
                  "string"
                ],
                "dataset_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/projects/:project_id/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"config_id\": \"string\",\n  \"evaluator_ids\": [\n    \"string\"\n  ],\n  \"dataset_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.log": {
        "id": "endpoint_evaluations.log",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Log an external generation to an evaluation run for a datapoint.\n\nThe run must have status 'running'.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "evaluation_id"
          },
          {
            "type": "literal",
            "value": "/log"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "evaluation_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the evaluation run. Starts with `evrun_`."
          }
        ],
        "queryParameters": [
          {
            "key": "evaluatee_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The datapoint for which a log was generated. Must be one of the datapoints in the dataset being evaluated."
              },
              {
                "key": "log",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:LogRequest"
                  }
                },
                "description": "The log generated for the datapoint."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CreateLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/evaluation_id/log",
            "responseStatusCode": 200,
            "pathParameters": {
              "evaluation_id": "evaluation_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "datapoint_id": "datapoint_id",
                "log": {}
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "project_id": "project_id",
                "session_id": "session_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/evaluations/evaluation_id/log \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"datapoint_id\": \"datapoint_id\",\n  \"log\": {}\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:evaluation_id/log",
            "responseStatusCode": 422,
            "pathParameters": {
              "evaluation_id": ":evaluation_id"
            },
            "queryParameters": {
              "evaluatee_id": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "datapoint_id": "string",
                "log": {}
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v4/evaluations/:evaluation_id/log?evaluatee_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"datapoint_id\": \"string\",\n  \"log\": {}\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.result": {
        "id": "endpoint_evaluations.result",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Log an evaluation result to an evaluation run.\n\nThe run must have status 'running'. One of `result` or `error` must be provided.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "evaluation_id"
          },
          {
            "type": "literal",
            "value": "/result"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "evaluation_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "ID of the evaluation run. Starts with `evrun_`."
          }
        ],
        "queryParameters": [
          {
            "key": "evaluatee_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "log_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The log that was evaluated. Must have as its `source_datapoint_id` one of the datapoints in the dataset being evaluated."
              },
              {
                "key": "evaluator_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "ID of the evaluator that evaluated the log. Starts with `evfn_`. Must be one of the evaluator IDs associated with the evaluation run being logged to."
              },
              {
                "key": "result",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_evaluations:CreateEvaluationResultLogRequestResult"
                      }
                    }
                  }
                },
                "description": "The result value of the evaluation."
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "An error that occurred during evaluation."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResultResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/evaluation_id/result",
            "responseStatusCode": 200,
            "pathParameters": {
              "evaluation_id": "evaluation_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "log_id": "log_id",
                "evaluator_id": "evaluator_id"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "evaluator_id": "evaluator_id",
                "evaluator_version_id": "evaluator_version_id",
                "log_id": "log_id",
                "updated_at": "2024-01-15T09:30:00Z",
                "created_at": "2024-01-15T09:30:00Z",
                "evaluation_id": "evaluation_id",
                "log": {
                  "id": "id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "evaluation_results": [],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "batch_ids": [
                    "batch_ids"
                  ]
                },
                "version_id": "version_id",
                "version": {
                  "key": "value"
                },
                "value": true,
                "error": "error",
                "evaluator_log": {
                  "id": "id",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "evaluation_results": [],
                  "observability_status": "pending",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project": "project",
                  "project_id": "project_id",
                  "session_id": "session_id",
                  "session_reference_id": "session_reference_id",
                  "parent_id": "parent_id",
                  "parent_reference_id": "parent_reference_id",
                  "inputs": {
                    "key": "value"
                  },
                  "source": "source",
                  "metadata": {
                    "key": "value"
                  },
                  "save": true,
                  "source_datapoint_id": "source_datapoint_id",
                  "reference_id": "reference_id",
                  "messages": [
                    {
                      "role": "user"
                    }
                  ],
                  "output": "output",
                  "judgment": true,
                  "config_id": "config_id",
                  "environment": "environment",
                  "feedback": [
                    {
                      "type": "rating",
                      "value": true,
                      "id": "id"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "error": "error",
                  "stdout": "stdout",
                  "duration": 1.1,
                  "output_message": {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  },
                  "prompt_tokens": 1,
                  "output_tokens": 1,
                  "prompt_cost": 1.1,
                  "output_cost": 1.1,
                  "provider_request": {
                    "key": "value"
                  },
                  "provider_response": {
                    "key": "value"
                  },
                  "user": "user",
                  "provider_latency": 1.1,
                  "tokens": 1,
                  "raw_output": "raw_output",
                  "finish_reason": "finish_reason",
                  "tools": [
                    {
                      "id": "id",
                      "name": "name",
                      "signature": "signature",
                      "result": "result"
                    }
                  ],
                  "tool_choice": "none",
                  "batch_ids": [
                    "batch_ids"
                  ]
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/evaluations/evaluation_id/result \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"log_id\": \"log_id\",\n  \"evaluator_id\": \"evaluator_id\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:evaluation_id/result",
            "responseStatusCode": 422,
            "pathParameters": {
              "evaluation_id": ":evaluation_id"
            },
            "queryParameters": {
              "evaluatee_id": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "log_id": "string",
                "evaluator_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v4/evaluations/:evaluation_id/result?evaluatee_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"log_id\": \"string\",\n  \"evaluator_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.update_status": {
        "id": "endpoint_evaluations.update_status",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Update the status of an evaluation run.\n\nCan only be used to update the status of an evaluation run that uses external or human evaluators.\nThe evaluation must currently have status 'running' if swithcing to completed, or it must have status\n'completed' if switching back to 'running'.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/status"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of evaluation run. Starts with `ev_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "status",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:EvaluationStatus"
                  }
                },
                "description": "The new status of the evaluation."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id/status",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "status": "pending"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/evaluations/id/status \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"status\": \"pending\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id/status",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "status": "pending"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/evaluations/:id/status \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"status\": \"pending\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.add_evaluators": {
        "id": "endpoint_evaluations.add_evaluators",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Add evaluators to an existing evaluation run.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of evaluation run. Starts with `ev_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "evaluator_ids",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "IDs of evaluators to add to the evaluation run. IDs start with `evfn_`"
              },
              {
                "key": "evaluator_version_ids",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "IDs of the evaluator versions to add to the evaluation run. IDs start with `evv_`"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id/evaluators",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "status": "pending",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    },
                    "logging_project": {
                      "id": "id",
                      "name": "name",
                      "users": [
                        {
                          "id": "id",
                          "email_address": "email_address"
                        }
                      ],
                      "data_count": 1,
                      "feedback_types": [
                        {
                          "type": "rating"
                        }
                      ],
                      "team_id": "team_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  }
                ],
                "dataset": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "dataset_version_id": "dataset_version_id",
                "dataset_snapshot": {
                  "id": "id",
                  "name": "name",
                  "datapoint_count": 1,
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "project_id": "project_id",
                  "description": "description"
                },
                "evaluator_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/evaluations/id/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/evaluations/:id/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluations.list": {
        "id": "endpoint_evaluations.list",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Get the evaluations associated with a project.\n\nSorting and filtering are supported through query params for categorical columns\nand the `created_at` timestamp.\n\nSorting is supported for the `dataset`, `config`, `status` and `evaluator-{evaluator_id}` columns.\nSpecify sorting with the `sort` query param, with values `{column}.{ordering}`.\nE.g. ?sort=dataset.asc&sort=status.desc will yield a multi-column sort. First by dataset then by status.\n\nFiltering is supported for the `id`, `dataset`, `config` and `status` columns.\n\nSpecify filtering with the `id_filter`, `dataset_filter`, `config_filter` and `status_filter` query params.\n\nE.g. ?dataset_filter=my_dataset&dataset_filter=my_other_dataset&status_filter=running\nwill only show rows where the dataset is \"my_dataset\" or \"my_other_dataset\", and where the status is \"running\".\n\nAn additional date range filter is supported for the `created_at` column. Use the `start_date` and `end_date`\nquery parameters to configure this.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "queryParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          },
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A list of evaluation run ids to filter on. Starts with `ev_`."
          },
          {
            "key": "start_date",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Only return evaluations created after this date."
          },
          {
            "key": "end_date",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Only return evaluations created before this date."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "evaluatee_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "String ID of evaluatee version to return. If not defined, the first evaluatee will be returned. Starts with `evv_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataEvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "project_id": "project_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "id",
                    "status": "pending",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "name": "config",
                      "status": "config"
                    },
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "evaluators": [
                      {
                        "name": "name",
                        "description": "description",
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "type": "python",
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "dataset": {
                      "id": "id",
                      "name": "name",
                      "datapoint_count": 1,
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "project_id": "project_id"
                    },
                    "dataset_version_id": "dataset_version_id",
                    "dataset_snapshot": {
                      "id": "id",
                      "name": "name",
                      "datapoint_count": 1,
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "project_id": "project_id"
                    },
                    "evaluator_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d project_id=project_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "project_id": "string",
              "id": "string",
              "start_date": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d project_id=string \\\n     -d id=string \\\n     -d start_date=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluators.list": {
        "id": "endpoint_evaluators.list",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Get all evaluators within your organization.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "name": "name",
                  "description": "description",
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "type": "python",
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "code": "code",
                  "model_config": {
                    "id": "id",
                    "model": "model",
                    "other": {
                      "key": "value"
                    },
                    "name": "name",
                    "description": "description",
                    "provider": "openai",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "seed": 1,
                    "response_format": {
                      "type": "json_object"
                    },
                    "prompt_template": "prompt_template",
                    "chat_template": [
                      {
                        "role": "user"
                      }
                    ],
                    "tools": [
                      {
                        "id": "id",
                        "name": "name"
                      }
                    ],
                    "endpoint": "complete",
                    "tool_configs": [
                      {
                        "id": "id",
                        "status": "status",
                        "name": "name"
                      }
                    ]
                  },
                  "logging_project": {
                    "id": "id",
                    "name": "name",
                    "users": [
                      {
                        "id": "id",
                        "email_address": "email_address"
                      }
                    ],
                    "data_count": 1,
                    "feedback_types": [
                      {
                        "type": "rating"
                      }
                    ],
                    "team_id": "team_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "active_config": {
                      "project_id": "project_id",
                      "project_name": "project_name",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "last_used": "2024-01-15T09:30:00Z",
                      "config": {
                        "type": "generic",
                        "id": "config",
                        "name": "config",
                        "status": "config"
                      }
                    },
                    "config_type": "generic",
                    "directory_id": "directory_id"
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/evaluators \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/evaluators \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluators.create": {
        "id": "endpoint_evaluators.create",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Create an evaluator within your organization.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "minLength": 1,
                      "maxLength": 1
                    }
                  }
                },
                "description": "The name of the evaluator."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The description of the evaluator."
              },
              {
                "key": "arguments_type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:EvaluatorArgumentsType"
                  }
                },
                "description": "Whether this evaluator is target-free or target-required."
              },
              {
                "key": "return_type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:EvaluatorReturnTypeEnum"
                  }
                },
                "description": "The type of the return value of the evaluator."
              },
              {
                "key": "code",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
              },
              {
                "key": "model_config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ModelConfigCompletionRequest"
                      }
                    }
                  }
                },
                "description": "The model configuration used to generate."
              },
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:EvaluatorType"
                  }
                },
                "description": "The type of the evaluator."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "type": "python"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "type": "python",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "code": "code",
                "model_config": {
                  "id": "id",
                  "model": "model",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "role": "user"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name"
                    }
                  ],
                  "endpoint": "complete",
                  "tool_configs": [
                    {
                      "id": "id",
                      "status": "status",
                      "name": "name"
                    }
                  ]
                },
                "logging_project": {
                  "id": "id",
                  "name": "name",
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating"
                    }
                  ],
                  "team_id": "team_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "name": "config",
                      "status": "config"
                    },
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ]
                  },
                  "config_type": "generic",
                  "directory_id": "directory_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"name\",\n  \"description\": \"description\",\n  \"arguments_type\": \"target_free\",\n  \"return_type\": \"boolean\",\n  \"type\": \"python\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "name": "string",
                "description": "string",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "type": "python"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"arguments_type\": \"target_free\",\n  \"return_type\": \"boolean\",\n  \"type\": \"python\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluators.get": {
        "id": "endpoint_evaluators.get",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Get an evaluator within your organization.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "type": "python",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "code": "code",
                "model_config": {
                  "id": "id",
                  "model": "model",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "role": "user"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name"
                    }
                  ],
                  "endpoint": "complete",
                  "tool_configs": [
                    {
                      "id": "id",
                      "status": "status",
                      "name": "name"
                    }
                  ]
                },
                "logging_project": {
                  "id": "id",
                  "name": "name",
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating"
                    }
                  ],
                  "team_id": "team_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "name": "config",
                      "status": "config"
                    },
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ]
                  },
                  "config_type": "generic",
                  "directory_id": "directory_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/evaluators/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/evaluators/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluators.delete": {
        "id": "endpoint_evaluators.delete",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Delete an evaluator within your organization.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/evaluators/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/evaluators/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_evaluators.update": {
        "id": "endpoint_evaluators.update",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Update an evaluator within your organization.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the evaluator."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The description of the evaluator."
              },
              {
                "key": "arguments_type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:EvaluatorArgumentsType"
                      }
                    }
                  }
                },
                "description": "Whether this evaluator is target-free or target-required."
              },
              {
                "key": "return_type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:EvaluatorReturnTypeEnum"
                      }
                    }
                  }
                },
                "description": "The type of the return value of the evaluator."
              },
              {
                "key": "code",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
              },
              {
                "key": "model_config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ModelConfigCompletionRequest"
                      }
                    }
                  }
                },
                "description": "The model configuration used to generate."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "name": "name",
                "description": "description",
                "arguments_type": "target_free",
                "return_type": "boolean",
                "type": "python",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "code": "code",
                "model_config": {
                  "id": "id",
                  "model": "model",
                  "other": {
                    "key": "value"
                  },
                  "name": "name",
                  "description": "description",
                  "provider": "openai",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "prompt_template": "prompt_template",
                  "chat_template": [
                    {
                      "role": "user"
                    }
                  ],
                  "tools": [
                    {
                      "id": "id",
                      "name": "name"
                    }
                  ],
                  "endpoint": "complete",
                  "tool_configs": [
                    {
                      "id": "id",
                      "status": "status",
                      "name": "name"
                    }
                  ]
                },
                "logging_project": {
                  "id": "id",
                  "name": "name",
                  "users": [
                    {
                      "id": "id",
                      "email_address": "email_address"
                    }
                  ],
                  "data_count": 1,
                  "feedback_types": [
                    {
                      "type": "rating"
                    }
                  ],
                  "team_id": "team_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "active_config": {
                    "project_id": "project_id",
                    "project_name": "project_name",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "last_used": "2024-01-15T09:30:00Z",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "name": "config",
                      "status": "config"
                    },
                    "num_datapoints": 1,
                    "evaluation_aggregates": [
                      {
                        "model_config_id": "model_config_id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id"
                      }
                    ]
                  },
                  "config_type": "generic",
                  "directory_id": "directory_id"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/evaluators/id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/evaluators/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_feedback.feedback": {
        "id": "endpoint_feedback.feedback",
        "namespace": [
          "subpackage_feedback"
        ],
        "description": "Submit an array of feedback for existing `data_ids`",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/feedback"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_feedback:FeedbackFeedbackRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_feedback:FeedbackFeedbackResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/feedback",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {
                  "type": "rating"
                }
              ]
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "type": "rating",
                  "value": true,
                  "data_id": "data_id",
                  "user": "user",
                  "created_at": "2024-01-15T09:30:00Z",
                  "id": "id"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/feedback \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {\n    \"type\": \"rating\"\n  }\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/feedback",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {
                  "type": "rating"
                }
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/feedback \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {\n    \"type\": \"rating\"\n  }\n]'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_logs.list": {
        "id": "endpoint_logs.list",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Retrieve paginated logs from the server.\n\nSorting and filtering are supported through query params.\n\nSorting is supported for the `source`, `model`, `timestamp`, and `feedback-{output_name}` columns.\nSpecify sorting with the `sort` query param, with values `{column}.{ordering}`.\nE.g. ?sort=source.asc&sort=model.desc will yield a multi-column sort. First by source then by model.\n\nFiltering is supported for the `source`, `model`, `feedback-{output_name}`,\n`evaluator-{evaluator_external_id}` columns.\n\nSpecify filtering with the `source_filter`, `model_filter`, `feedback-{output.name}_filter` and\n`evaluator-{evaluator_external_id}_filter` query params.\n\nE.g. `?source_filter=AI&source_filter=user_1234&feedback-explicit_filter=good`\nwill only show rows where the source is \"AI\" or \"user_1234\", and where the latest feedback for the \"explicit\" output\ngroup is \"good\".\n\nAn additional date range filter is supported for the `Timestamp` column (i.e. `Log.created_at`).\nThese are supported through the `start_date` and `end_date` query parameters.\nThe date format could be either date: `YYYY-MM-DD`, e.g. 2024-01-01\nor datetime: YYYY-MM-DD[T]HH:MM[:SS[.ffffff]][Z or [±]HH[:]MM], e.g. 2024-01-01T00:00:00Z.\n\nSearching is supported for the model inputs and output.\nSpecify a search term with the `search` query param.\nE.g. `?search=hello%20there` will cause a case-insensitive search across model inputs and output.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "queryParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "search",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "metadata_search",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "version_status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            }
          },
          {
            "key": "start_date",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "end_date",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "project_id": "project_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "id",
                    "config": {
                      "type": "generic",
                      "id": "config",
                      "name": "config",
                      "status": "config"
                    },
                    "evaluation_results": [
                      {
                        "id": "id",
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "log_id": "log_id",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "created_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "observability_status": "pending",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "project": "project",
                    "project_id": "project_id",
                    "session_id": "session_id",
                    "session_reference_id": "session_reference_id",
                    "parent_id": "parent_id",
                    "parent_reference_id": "parent_reference_id",
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "save": true,
                    "source_datapoint_id": "source_datapoint_id",
                    "reference_id": "reference_id",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "output": "output",
                    "judgment": true,
                    "config_id": "config_id",
                    "environment": "environment",
                    "feedback": [
                      {
                        "type": "rating",
                        "value": true,
                        "id": "id"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "stdout": "stdout",
                    "duration": 1.1,
                    "output_message": {
                      "role": "user"
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "user": "user",
                    "provider_latency": 1.1,
                    "tokens": 1,
                    "raw_output": "raw_output",
                    "finish_reason": "finish_reason",
                    "tools": [
                      {
                        "id": "id",
                        "name": "name",
                        "signature": "signature",
                        "result": "result"
                      }
                    ],
                    "tool_choice": "none",
                    "batch_ids": [
                      "batch_ids"
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d project_id=project_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "project_id": "string",
              "search": "string",
              "metadata_search": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d project_id=string \\\n     -d search=string \\\n     -d metadata_search=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_logs.log": {
        "id": "endpoint_logs.log",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Log a datapoint or array of datapoints to your Humanloop project.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_logs:LogsLogRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_logs:LogsLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {}
              ]
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "project_id": "project_id",
                  "session_id": "session_id"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {}\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                {}
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  {}\n]'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_logs.delete": {
        "id": "endpoint_logs.delete",
        "namespace": [
          "subpackage_logs"
        ],
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "queryParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/logs \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE \"https://api.humanloop.com/v4/logs?id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_logs.update_by_ref": {
        "id": "endpoint_logs.update_by_ref",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Update a logged datapoint by its reference ID.\n\nThe `reference_id` query parameter must be provided, and refers to the\n`reference_id` of a previously-logged datapoint.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "queryParameters": [
          {
            "key": "reference_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A unique string to reference the datapoint. Identifies the logged datapoint created with the same `reference_id`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:UpdateLogRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "reference_id": "reference_id"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "evaluation_results": [
                  {
                    "id": "id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "log_id": "log_id",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_at": "2024-01-15T09:30:00Z",
                    "evaluation_id": "evaluation_id",
                    "version_id": "version_id",
                    "version": {
                      "key": "value"
                    },
                    "value": true,
                    "error": "error"
                  }
                ],
                "observability_status": "pending",
                "updated_at": "2024-01-15T09:30:00Z",
                "project": "project",
                "project_id": "project_id",
                "session_id": "session_id",
                "session_reference_id": "session_reference_id",
                "parent_id": "parent_id",
                "parent_reference_id": "parent_reference_id",
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "save": true,
                "source_datapoint_id": "source_datapoint_id",
                "reference_id": "reference_id",
                "messages": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "output": "output",
                "judgment": true,
                "config_id": "config_id",
                "environment": "environment",
                "feedback": [
                  {
                    "type": "rating",
                    "value": true,
                    "id": "id",
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "stdout": "stdout",
                "duration": 1.1,
                "output_message": {
                  "role": "user",
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_call": {
                    "name": "name",
                    "arguments": "arguments"
                  }
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "user": "user",
                "provider_latency": 1.1,
                "tokens": 1,
                "raw_output": "raw_output",
                "finish_reason": "finish_reason",
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "signature": "signature",
                    "result": "result"
                  }
                ],
                "tool_choice": "none",
                "batch_ids": [
                  "batch_ids"
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH \"https://api.humanloop.com/v4/logs?reference_id=reference_id\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "reference_id": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH \"https://api.humanloop.com/v4/logs?reference_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_logs.get": {
        "id": "endpoint_logs.get",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Retrieve a log by log id.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/logs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of log to return. Starts with `data_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "evaluation_results": [
                  {
                    "id": "id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "log_id": "log_id",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_at": "2024-01-15T09:30:00Z",
                    "evaluation_id": "evaluation_id",
                    "version_id": "version_id",
                    "version": {
                      "key": "value"
                    },
                    "value": true,
                    "error": "error"
                  }
                ],
                "observability_status": "pending",
                "updated_at": "2024-01-15T09:30:00Z",
                "project": "project",
                "project_id": "project_id",
                "session_id": "session_id",
                "session_reference_id": "session_reference_id",
                "parent_id": "parent_id",
                "parent_reference_id": "parent_reference_id",
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "save": true,
                "source_datapoint_id": "source_datapoint_id",
                "reference_id": "reference_id",
                "messages": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "output": "output",
                "judgment": true,
                "config_id": "config_id",
                "environment": "environment",
                "feedback": [
                  {
                    "type": "rating",
                    "value": true,
                    "id": "id",
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "stdout": "stdout",
                "duration": 1.1,
                "output_message": {
                  "role": "user",
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_call": {
                    "name": "name",
                    "arguments": "arguments"
                  }
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "user": "user",
                "provider_latency": 1.1,
                "tokens": 1,
                "raw_output": "raw_output",
                "finish_reason": "finish_reason",
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "signature": "signature",
                    "result": "result"
                  }
                ],
                "tool_choice": "none",
                "batch_ids": [
                  "batch_ids"
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/logs/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/logs/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_logs.update": {
        "id": "endpoint_logs.update",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Update a logged datapoint in your Humanloop project.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/logs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of logged datapoint to return. Starts with `data_`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:UpdateLogRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "evaluation_results": [
                  {
                    "id": "id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "log_id": "log_id",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_at": "2024-01-15T09:30:00Z",
                    "evaluation_id": "evaluation_id",
                    "version_id": "version_id",
                    "version": {
                      "key": "value"
                    },
                    "value": true,
                    "error": "error"
                  }
                ],
                "observability_status": "pending",
                "updated_at": "2024-01-15T09:30:00Z",
                "project": "project",
                "project_id": "project_id",
                "session_id": "session_id",
                "session_reference_id": "session_reference_id",
                "parent_id": "parent_id",
                "parent_reference_id": "parent_reference_id",
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "save": true,
                "source_datapoint_id": "source_datapoint_id",
                "reference_id": "reference_id",
                "messages": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "output": "output",
                "judgment": true,
                "config_id": "config_id",
                "environment": "environment",
                "feedback": [
                  {
                    "type": "rating",
                    "value": true,
                    "id": "id",
                    "data_id": "data_id",
                    "user": "user",
                    "created_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "stdout": "stdout",
                "duration": 1.1,
                "output_message": {
                  "role": "user",
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ],
                  "tool_call": {
                    "name": "name",
                    "arguments": "arguments"
                  }
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "user": "user",
                "provider_latency": 1.1,
                "tokens": 1,
                "raw_output": "raw_output",
                "finish_reason": "finish_reason",
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "signature": "signature",
                    "result": "result"
                  }
                ],
                "tool_choice": "none",
                "batch_ids": [
                  "batch_ids"
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/logs/id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/logs/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_modelConfigs.register": {
        "id": "endpoint_modelConfigs.register",
        "namespace": [
          "subpackage_modelConfigs"
        ],
        "description": "Register a model config to a project.\n\nIf the project name provided does not exist, a new project will be created\nautomatically.\n\nIf the model config is the first to be associated to the project, it will\nbe set as the active model config.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/model-configs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A friendly display name for the model config. If not provided, a name will be generated."
              },
              {
                "key": "description",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "A description of the model config."
              },
              {
                "key": "provider",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ModelProviders"
                      }
                    }
                  }
                },
                "description": "The company providing the underlying model service."
              },
              {
                "key": "model",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The model instance used. E.g. text-davinci-002."
              },
              {
                "key": "max_tokens",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": -1
                        }
                      }
                    }
                  }
                },
                "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
              },
              {
                "key": "temperature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
              },
              {
                "key": "top_p",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
              },
              {
                "key": "stop",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_modelConfigs:ProjectModelConfigRequestStop"
                      }
                    }
                  }
                },
                "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
              },
              {
                "key": "presence_penalty",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 0
                        }
                      }
                    }
                  }
                },
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
              },
              {
                "key": "frequency_penalty",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 0
                        }
                      }
                    }
                  }
                },
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
              },
              {
                "key": "other",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Other parameter values to be passed to the provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only type json_object is currently supported for chat."
              },
              {
                "key": "project",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project name. If it does not exist, a new project will be created."
              },
              {
                "key": "project_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique project ID"
              },
              {
                "key": "prompt_template",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Prompt template that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
              },
              {
                "key": "chat_template",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:ChatMessageWithToolCall"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
              },
              {
                "key": "endpoint",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ModelEndpoints"
                      }
                    }
                  }
                },
                "description": "Which of the providers model endpoints to use. For example Complete or Edit."
              },
              {
                "key": "tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_modelConfigs:ProjectModelConfigRequestToolsItem"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Make tools available to OpenAIs chat model as functions."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ProjectConfigResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/model-configs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "model": "model"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "project_id": "project_id",
                "project_name": "project_name",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "last_used": "2024-01-15T09:30:00Z",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "num_datapoints": 1,
                "evaluation_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"model\": \"model\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/model-configs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "model": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"model\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_modelConfigs.get": {
        "id": "endpoint_modelConfigs.get",
        "namespace": [
          "subpackage_modelConfigs"
        ],
        "description": "Get a specific model config by ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/model-configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of the model config. Starts with `config_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ModelConfigResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/model-configs/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "model": "model",
                "other": {
                  "key": "value"
                },
                "name": "name",
                "description": "description",
                "provider": "openai",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "seed": 1,
                "response_format": {
                  "type": "json_object",
                  "json_schema": {
                    "key": "value"
                  }
                },
                "prompt_template": "prompt_template",
                "chat_template": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "description": "description",
                    "parameters": {
                      "key": "value"
                    },
                    "source": "source"
                  }
                ],
                "endpoint": "complete",
                "tool_configs": [
                  {
                    "id": "id",
                    "status": "status",
                    "name": "name",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "description",
                    "source": "organization",
                    "source_code": "source_code",
                    "setup_schema": {
                      "key": "value"
                    },
                    "parameters": {
                      "key": "value"
                    },
                    "signature": "signature",
                    "is_preset": true,
                    "preset_name": "preset_name"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/model-configs/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/model-configs/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/model-configs/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_modelConfigs.export": {
        "id": "endpoint_modelConfigs.export",
        "namespace": [
          "subpackage_modelConfigs"
        ],
        "description": "Export a model config to a .prompt file by ID.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/model-configs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/export"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of the model config. Starts with `config_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/model-configs/id/export",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": "string"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs/id/export \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/model-configs/:id/export",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs/:id/export \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_modelConfigs.serialize": {
        "id": "endpoint_modelConfigs.serialize",
        "namespace": [
          "subpackage_modelConfigs"
        ],
        "description": "Serialize a model config to a .prompt file format.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/model-configs/serialize"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_modelConfigs:ModelConfigsSerializeRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/model-configs/serialize",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "model": "model"
              }
            },
            "responseBody": {
              "type": "json",
              "value": "string"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs/serialize \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"model\": \"model\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/model-configs/serialize",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "model": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs/serialize \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"model\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_modelConfigs.deserialize": {
        "id": "endpoint_modelConfigs.deserialize",
        "namespace": [
          "subpackage_modelConfigs"
        ],
        "description": "Deserialize a model config from a .prompt file format.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/model-configs/deserialize"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "config",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ModelConfigResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/model-configs/deserialize",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "config": "config"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "model": "model",
                "other": {
                  "key": "value"
                },
                "name": "name",
                "description": "description",
                "provider": "openai",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "seed": 1,
                "response_format": {
                  "type": "json_object",
                  "json_schema": {
                    "key": "value"
                  }
                },
                "prompt_template": "prompt_template",
                "chat_template": [
                  {
                    "role": "user",
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ],
                    "tool_call": {
                      "name": "name"
                    }
                  }
                ],
                "tools": [
                  {
                    "id": "id",
                    "name": "name",
                    "description": "description",
                    "parameters": {
                      "key": "value"
                    },
                    "source": "source"
                  }
                ],
                "endpoint": "complete",
                "tool_configs": [
                  {
                    "id": "id",
                    "status": "status",
                    "name": "name",
                    "other": {
                      "key": "value"
                    },
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "description",
                    "source": "organization",
                    "source_code": "source_code",
                    "setup_schema": {
                      "key": "value"
                    },
                    "parameters": {
                      "key": "value"
                    },
                    "signature": "signature",
                    "is_preset": true,
                    "preset_name": "preset_name"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs/deserialize \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"config\": \"config\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/model-configs/deserialize",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "config": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/model-configs/deserialize \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"config\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_sessions.list": {
        "id": "endpoint_sessions.list",
        "namespace": [
          "subpackage_sessions"
        ],
        "description": "Get a page of sessions.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/sessions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "queryParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project to return sessions for. Sessions that contain any datapoints associated to this project will be returned. Starts with `pr_`."
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page to fetch. Starts from 1."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Number of sessions to retrieve."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataSessionResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/sessions",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "project_id": "project_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "id",
                    "projects": [
                      {
                        "id": "id",
                        "name": "name",
                        "type": "prompt"
                      }
                    ],
                    "datapoints_count": 1,
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "reference_id": "reference_id",
                    "first_inputs": {
                      "key": "value"
                    },
                    "last_output": "last_output"
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/sessions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d project_id=project_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/sessions",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "project_id": "string",
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/sessions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d project_id=string \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_sessions.create": {
        "id": "endpoint_sessions.create",
        "namespace": [
          "subpackage_sessions"
        ],
        "description": "Create a new session.\n\nReturns a session ID that can be used to log datapoints to the session.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/sessions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CreateSessionResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/sessions",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/sessions \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/sessions",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v4/sessions \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_sessions.get": {
        "id": "endpoint_sessions.get",
        "namespace": [
          "subpackage_sessions"
        ],
        "description": "Get a session by ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/sessions/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of session to return. Starts with `sesh_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:SessionResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/sessions/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "projects": [
                  {
                    "id": "id",
                    "name": "name",
                    "type": "prompt"
                  }
                ],
                "datapoints_count": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "reference_id": "reference_id",
                "first_inputs": {
                  "key": "value"
                },
                "last_output": "last_output"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/sessions/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/sessions/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/sessions/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects/activeConfig.get": {
        "id": "endpoint_projects/activeConfig.get",
        "namespace": [
          "subpackage_projects",
          "subpackage_projects/activeConfig"
        ],
        "description": "Retrieves a config to use to execute your model.\n\nA config will be selected based on the project's\nactive config settings.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/active-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "queryParameters": [
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name for the environment. E.g. 'production'. If not provided, will return the active config for the default environment."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:GetModelConfigResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/active-config",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "project_id": "project_id",
                "project_name": "project_name",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "last_used": "2024-01-15T09:30:00Z",
                "config": {
                  "type": "generic",
                  "id": "config",
                  "name": "config",
                  "status": "config",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "verified": true,
                    "full_name": "full_name"
                  },
                  "description": "config",
                  "other": {
                    "key": "value"
                  }
                },
                "num_datapoints": 1,
                "evaluation_aggregates": [
                  {
                    "model_config_id": "model_config_id",
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "aggregate_value": 1.1
                  }
                ],
                "environment_id": "environment_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/id/active-config \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/active-config",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v4/projects/:id/active-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d environment=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects/activeConfig.deactivate": {
        "id": "endpoint_projects/activeConfig.deactivate",
        "namespace": [
          "subpackage_projects",
          "subpackage_projects/activeConfig"
        ],
        "description": "Remove the project's active config, if set.\n\nThis has no effect if the project does not have an active model config set.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/active-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "queryParameters": [
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name for the environment. E.g. 'production'. If not provided, will delete the active config for the default environment."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ProjectResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/active-config",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "name": "name",
                "users": [
                  {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  }
                ],
                "data_count": 1,
                "feedback_types": [
                  {
                    "type": "rating",
                    "values": [
                      {
                        "value": "value",
                        "sentiment": "positive"
                      }
                    ]
                  }
                ],
                "team_id": "team_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "active_config": {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "last_used": "2024-01-15T09:30:00Z",
                  "config": {
                    "type": "generic",
                    "id": "config",
                    "name": "config",
                    "status": "config",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address",
                      "verified": true
                    },
                    "description": "config",
                    "other": {
                      "key": "value"
                    }
                  },
                  "num_datapoints": 1,
                  "evaluation_aggregates": [
                    {
                      "model_config_id": "model_config_id",
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id"
                    }
                  ]
                },
                "config_type": "generic",
                "active_evaluators": [
                  {
                    "name": "name",
                    "description": "description",
                    "arguments_type": "target_free",
                    "return_type": "boolean",
                    "type": "python",
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "code": "code",
                    "model_config": {
                      "id": "id",
                      "model": "model"
                    }
                  }
                ],
                "directory_id": "directory_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/projects/id/active-config \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/active-config",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE \"https://api.humanloop.com/v4/projects/:id/active-config?environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects/deployedConfig.list": {
        "id": "endpoint_projects/deployedConfig.list",
        "namespace": [
          "subpackage_projects",
          "subpackage_projects/deployedConfig"
        ],
        "description": "Get an array of environments with the deployed configs associated to your project.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/deployed-configs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of project. Starts with `pr_`."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EnvironmentProjectConfigResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/id/deployed-configs",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "environment_id": "environment_id",
                  "environment_name": "environment_name",
                  "environment_tag": "environment_tag",
                  "model_config_id": "model_config_id",
                  "model_config_name": "model_config_name"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/id/deployed-configs \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:id/deployed-configs",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v4/projects/:id/deployed-configs \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects/deployedConfig.deploy": {
        "id": "endpoint_projects/deployedConfig.deploy",
        "namespace": [
          "subpackage_projects",
          "subpackage_projects/deployedConfig"
        ],
        "description": "Deploy a model config to an environment.\n\nIf the environment already has a model config deployed, it will be replaced.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "project_id"
          },
          {
            "type": "literal",
            "value": "/deploy-config"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "config_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Model config unique identifier generated by Humanloop."
              },
              {
                "key": "environments",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:EnvironmentRequest"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "List of environments to associate with the model config."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EnvironmentProjectConfigResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/project_id/deploy-config",
            "responseStatusCode": 200,
            "pathParameters": {
              "project_id": "project_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "config_id": "config_id"
              }
            },
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "project_id": "project_id",
                  "project_name": "project_name",
                  "environment_id": "environment_id",
                  "environment_name": "environment_name",
                  "environment_tag": "environment_tag",
                  "model_config_id": "model_config_id",
                  "model_config_name": "model_config_name"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/projects/project_id/deploy-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"config_id\": \"config_id\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:project_id/deploy-config",
            "responseStatusCode": 422,
            "pathParameters": {
              "project_id": ":project_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "config_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v4/projects/:project_id/deploy-config \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"config_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_projects/deployedConfig.delete": {
        "id": "endpoint_projects/deployedConfig.delete",
        "namespace": [
          "subpackage_projects",
          "subpackage_projects/deployedConfig"
        ],
        "description": "Remove the version deployed to environment.\n\nThis has no effect if the project does not have an active version set.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/projects/"
          },
          {
            "type": "pathParameter",
            "value": "project_id"
          },
          {
            "type": "literal",
            "value": "/deployed-config/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v4"
          }
        ],
        "pathParameters": [
          {
            "key": "project_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "unknown"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HTTPValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/projects/project_id/deployed-config/environment_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "project_id": "project_id",
              "environment_id": "environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "key": "value"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/projects/project_id/deployed-config/environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/projects/:project_id/deployed-config/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "project_id": ":project_id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v4/projects/:project_id/deployed-config/:environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_chats:ChatsCreateStreamRequestToolChoice": {
        "name": "ChatsCreateStreamRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateStreamRequestToolCall": {
        "name": "ChatsCreateStreamRequestToolCall",
        "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateRequestToolChoice": {
        "name": "ChatsCreateRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateRequestToolCall": {
        "name": "ChatsCreateRequestToolCall",
        "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateDeployedStreamRequestToolChoice": {
        "name": "ChatsCreateDeployedStreamRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateDeployedStreamRequestToolCall": {
        "name": "ChatsCreateDeployedStreamRequestToolCall",
        "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateDeployedRequestToolChoice": {
        "name": "ChatsCreateDeployedRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateDeployedRequestToolCall": {
        "name": "ChatsCreateDeployedRequestToolCall",
        "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateConfigStreamRequestToolChoice": {
        "name": "ChatsCreateConfigStreamRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateConfigStreamRequestToolCall": {
        "name": "ChatsCreateConfigStreamRequestToolCall",
        "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateConfigRequestToolChoice": {
        "name": "ChatsCreateConfigRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_chats:ChatsCreateConfigRequestToolCall": {
        "name": "ChatsCreateConfigRequestToolCall",
        "description": "NB: Deprecated with new tool_choice. Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'name': <TOOL_NAME>} forces the model to use the provided tool of the same name.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_datasets:Request": {
        "name": "Request",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Create Datapoints by Logs Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CreateDatapointsByLogsRequest"
                }
              }
            },
            {
              "displayName": "Create Datapoint Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CreateDatapointRequest"
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:CreateDatapointRequest"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_evaluations:CreateEvaluationResultLogRequestResult": {
        "name": "CreateEvaluationResultLogRequestResult",
        "description": "The result value of the evaluation.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          ]
        }
      },
      "type_feedback:FeedbackFeedbackRequest": {
        "name": "FeedbackFeedbackRequest",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FeedbackRequest"
                    }
                  }
                }
              }
            },
            {
              "displayName": "Feedback Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackRequest"
                }
              }
            }
          ]
        }
      },
      "type_feedback:FeedbackFeedbackResponse": {
        "name": "FeedbackFeedbackResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FeedbackResponse"
                    }
                  }
                }
              }
            },
            {
              "displayName": "Feedback Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackResponse"
                }
              }
            }
          ]
        }
      },
      "type_logs:LogsLogRequest": {
        "name": "LogsLogRequest",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogRequest"
                    }
                  }
                }
              }
            },
            {
              "displayName": "Log Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LogRequest"
                }
              }
            }
          ]
        }
      },
      "type_logs:LogsLogResponse": {
        "name": "LogsLogResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:CreateLogResponse"
                    }
                  }
                }
              }
            },
            {
              "displayName": "Create Log Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CreateLogResponse"
                }
              }
            }
          ]
        }
      },
      "type_modelConfigs:ProjectModelConfigRequestStop": {
        "name": "ProjectModelConfigRequestStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_modelConfigs:ProjectModelConfigRequestToolsItem": {
        "name": "ProjectModelConfigRequestToolsItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Linked Tool Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LinkedToolRequest"
                }
              }
            },
            {
              "displayName": "Model Config Tool Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelConfigToolRequest"
                }
              }
            }
          ]
        }
      },
      "type_modelConfigs:ModelConfigsSerializeRequest": {
        "name": "ModelConfigsSerializeRequest",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Model Config Chat Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelConfigChatRequest"
                }
              }
            },
            {
              "displayName": "Model Config Completion Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelConfigCompletionRequest"
                }
              }
            }
          ]
        }
      },
      "type_:AgentConfigResponse": {
        "name": "AgentConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of config. Starts with `config_`."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameters that define the config."
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the config."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Whether the config is committed or not."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of config."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description of config."
            },
            {
              "key": "agent_class",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Class of the agent."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolConfigRequest"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Tools associated with the agent."
            },
            {
              "key": "model_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelConfigRequest"
                }
              },
              "description": "Model config associated with the agent."
            }
          ]
        }
      },
      "type_:CategoricalFeedbackLabel": {
        "name": "CategoricalFeedbackLabel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LabelSentiment"
                }
              },
              "description": "Whether the feedback sentiment is positive or negative."
            }
          ]
        }
      },
      "type_:ChatDataResponse": {
        "name": "ChatDataResponse",
        "description": "Overwrite DataResponse for chat.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later."
            },
            {
              "key": "index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Output text returned from the provider model with leading and trailing whitespaces stripped."
            },
            {
              "key": "raw_output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Raw output text returned from the provider model."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the chat template."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Why the generation ended. One of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached), or 'tool_call' (indicating that the model has chosen to call a tool - in which case the tool_call parameter of the response will be populated). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token."
            },
            {
              "key": "model_config_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model configuration used to create the generation."
            },
            {
              "key": "tool_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolResultResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Results of any tools run during the generation."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The messages passed to the to provider chat endpoint."
            },
            {
              "key": "tool_call",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionTool"
                    }
                  }
                }
              },
              "description": "Deprecated: Please use tool_calls field within the output_message.JSON definition of the tool to call and the corresponding argument values. Will be populated when finish_reason='tool_call'.",
              "availability": "Deprecated"
            },
            {
              "key": "tool_calls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Deprecated: Please use tool_calls field within the output_message.JSON definition of the tools to call and the corresponding argument values. Will be populated when finish_reason='tool_call'."
            },
            {
              "key": "output_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatMessageWithToolCall"
                }
              },
              "description": "The message returned by the provider."
            }
          ]
        }
      },
      "type_:ChatMessageWithToolCallContentItem": {
        "name": "ChatMessageWithToolCallContentItem",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "text",
              "extends": [
                "type_:TextChatContent"
              ],
              "properties": []
            },
            {
              "discriminantValue": "image_url",
              "extends": [
                "type_:ImageChatContent"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:Content": {
        "name": "Content",
        "description": "The content of the message.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageWithToolCallContentItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessageWithToolCall": {
        "name": "ChatMessageWithToolCall",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Content"
                    }
                  }
                }
              },
              "description": "The content of the message."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional name of the message author."
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Tool call that this message is responding to."
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatRole"
                }
              },
              "description": "Role of the message author."
            },
            {
              "key": "tool_calls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A list of tool calls requested by the assistant."
            },
            {
              "key": "tool_call",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FunctionTool"
                    }
                  }
                }
              },
              "description": "NB: Deprecated in favour of tool_calls. A tool call requested by the assistant.",
              "availability": "Deprecated"
            }
          ]
        }
      },
      "type_:ChatResponseToolChoice": {
        "name": "ChatResponseToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_:ChatResponse": {
        "name": "ChatResponse",
        "description": "Overwrite GenerateResponse for chat.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier of the parent project. Will not be provided if the request was made without providing a project name or id"
            },
            {
              "key": "num_samples",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "The number of chat responses."
            },
            {
              "key": "logprobs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Include the log probabilities of the top n tokens in the provider_response"
            },
            {
              "key": "suffix",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID passed through to provider call."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatDataResponse"
                    }
                  }
                }
              },
              "description": "Array containing the chat responses."
            },
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Usage"
                    }
                  }
                }
              },
              "description": "Counts of the number of tokens used and related stats."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "provider_responses",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "The raw responses returned by the model provider."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The raw request sent to the model provider."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the session if it belongs to one."
            },
            {
              "key": "tool_choice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatResponseToolChoice"
                    }
                  }
                }
              },
              "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
            }
          ]
        }
      },
      "type_:ChatRole": {
        "name": "ChatRole",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "user"
            },
            {
              "value": "assistant"
            },
            {
              "value": "system"
            },
            {
              "value": "tool"
            }
          ]
        }
      },
      "type_:CompletionResponse": {
        "name": "CompletionResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier of the parent project. Will not be provided if the request was made without providing a project name or id"
            },
            {
              "key": "num_samples",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "How many completions to make for each set of inputs."
            },
            {
              "key": "logprobs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Include the log probabilities of the top n tokens in the provider_response"
            },
            {
              "key": "suffix",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID passed through to provider call."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DataResponse"
                    }
                  }
                }
              },
              "description": "Array containing the generation responses."
            },
            {
              "key": "usage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Usage"
                    }
                  }
                }
              },
              "description": "Counts of the number of tokens used and related stats."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "provider_responses",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "The raw responses returned by the model provider."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The raw request sent to the model provider."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the session if it belongs to one."
            }
          ]
        }
      },
      "type_:ConfigResponse": {
        "name": "ConfigResponse",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "model",
              "extends": [
                "type_:ModelConfigResponse"
              ],
              "properties": []
            },
            {
              "discriminantValue": "tool",
              "extends": [
                "type_:ToolConfigResponse"
              ],
              "properties": []
            },
            {
              "discriminantValue": "evaluator",
              "extends": [
                "type_:EvaluatorConfigResponse"
              ],
              "properties": []
            },
            {
              "discriminantValue": "agent",
              "extends": [
                "type_:AgentConfigResponse"
              ],
              "properties": []
            },
            {
              "discriminantValue": "generic",
              "extends": [
                "type_:GenericConfigResponse"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:ConfigType": {
        "name": "ConfigType",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "generic"
            },
            {
              "value": "model"
            },
            {
              "value": "tool"
            },
            {
              "value": "agent"
            },
            {
              "value": "evaluator"
            }
          ]
        }
      },
      "type_:CreateDatapointRequestTargetValue": {
        "name": "CreateDatapointRequestTargetValue",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CreateDatapointRequest": {
        "name": "CreateDatapointRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs to the prompt template for this datapoint."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The chat messages for this datapoint."
            },
            {
              "key": "target",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:CreateDatapointRequestTargetValue"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Object with criteria necessary to evaluate this datapoint."
            }
          ]
        }
      },
      "type_:CreateDatapointsByLogsRequest": {
        "name": "CreateDatapointsByLogsRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "log_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The IDs of the logs to create datapoints from."
            }
          ]
        }
      },
      "type_:CreateLogResponse": {
        "name": "CreateLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of logged datapoint. Starts with `data_`."
            },
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of project the datapoint belongs to. Starts with `pr_`."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "String ID of session the datapoint belongs to. Populated only if the datapoint was logged with `session_id` or `session_reference_id`, and is `None` otherwise. Starts with `sesh_`."
            }
          ]
        }
      },
      "type_:CreateSessionResponse": {
        "name": "CreateSessionResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of session. Starts with `sesh_`."
            }
          ]
        }
      },
      "type_:DashboardConfiguration": {
        "name": "DashboardConfiguration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time_unit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeUnit"
                }
              }
            },
            {
              "key": "time_range_days",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "model_config_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DataResponse": {
        "name": "DataResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique ID for the model inputs and output logged to Humanloop. Use this when recording feedback later."
            },
            {
              "key": "index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index for the sampled generation for a given input. The num_samples request parameter controls how many samples are generated."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Output text returned from the provider model with leading and trailing whitespaces stripped."
            },
            {
              "key": "raw_output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Raw output text returned from the provider model."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Why the generation ended. One of 'stop' (indicating a stop token was encountered), or 'length' (indicating the max tokens limit has been reached), or 'tool_call' (indicating that the model has chosen to call a tool - in which case the tool_call parameter of the response will be populated). It will be set as null for the intermediary responses during a stream, and will only be set as non-null for the final streamed token."
            },
            {
              "key": "model_config_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model configuration used to create the generation."
            },
            {
              "key": "tool_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolResultResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Results of any tools run during the generation."
            }
          ]
        }
      },
      "type_:DatapointResponseTargetValue": {
        "name": "DatapointResponseTargetValue",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatapointResponse": {
        "name": "DatapointResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "dataset_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "target",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DatapointResponseTargetValue"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatasetResponse": {
        "name": "DatasetResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Datasets are now files and do not belong to projects. If this dataset was created before that change, the legacy project ID will be provided here, otherwise an empty string will be returned.",
              "availability": "Deprecated"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "datapoint_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:EnvironmentProjectConfigResponse": {
        "name": "EnvironmentProjectConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of project the model config belongs to. Starts with `pr_`."
            },
            {
              "key": "project_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the project the model config belongs to."
            },
            {
              "key": "model_config_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Model config unique identifier generated by Humanloop."
            },
            {
              "key": "model_config_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A friendly display name for the model config."
            },
            {
              "key": "environment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the environment."
            },
            {
              "key": "environment_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the environment."
            },
            {
              "key": "environment_tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Tag for the environment e.g. 'default' or 'other'."
            }
          ]
        }
      },
      "type_:EnvironmentRequest": {
        "name": "EnvironmentRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of the environment. Starts with `env_`."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The environment name."
            }
          ]
        }
      },
      "type_:EvaluationDatapointSnapshotResponse": {
        "name": "EvaluationDatapointSnapshotResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "datapoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatapointResponse"
                }
              }
            },
            {
              "key": "log",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluation_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationResultResponse"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:EvaluationResponse": {
        "name": "EvaluationResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique ID for the evaluation. Starts with `ev_`."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluationStatus"
                }
              }
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ConfigResponse"
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            },
            {
              "key": "dataset_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "dataset_snapshot",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "evaluator_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ModelConfigEvaluatorAggregateResponse"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Value": {
        "name": "Value",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:EvaluationResultResponse": {
        "name": "EvaluationResultResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "evaluator_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "evaluation_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "log_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "log",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Value"
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "evaluator_log",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:EvaluationStatus": {
        "name": "EvaluationStatus",
        "description": "Status of an evaluation.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pending"
            },
            {
              "value": "running"
            },
            {
              "value": "completed"
            },
            {
              "value": "cancelled"
            }
          ]
        }
      },
      "type_:EvaluatorArgumentsType": {
        "name": "EvaluatorArgumentsType",
        "description": "Enum representing the possible argument types of an evaluator.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "target_free"
            },
            {
              "value": "target_required"
            }
          ]
        }
      },
      "type_:EvaluatorConfigResponse": {
        "name": "EvaluatorConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of config. Starts with `config_`."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameters that define the config."
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the config."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Whether the config is committed or not."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of config."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description of config."
            },
            {
              "key": "evaluator_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of evaluator."
            },
            {
              "key": "model_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelConfigResponse"
                    }
                  }
                }
              },
              "description": "The model config defining the LLM evaluator."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
            },
            {
              "key": "arguments_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorArgumentsType"
                    }
                  }
                }
              },
              "description": "Whether this evaluator is target-free or target-required."
            },
            {
              "key": "return_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorReturnTypeEnum"
                    }
                  }
                }
              },
              "description": "The type of the return value of the evaluator."
            }
          ]
        }
      },
      "type_:EvaluatorResponse": {
        "name": "EvaluatorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1
                  }
                }
              },
              "description": "The name of the evaluator."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The description of the evaluator."
            },
            {
              "key": "arguments_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorArgumentsType"
                }
              },
              "description": "Whether this evaluator is target-free or target-required."
            },
            {
              "key": "return_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorReturnTypeEnum"
                }
              },
              "description": "The type of the return value of the evaluator."
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The code for the evaluator. This code will be executed in a sandboxed environment."
            },
            {
              "key": "model_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelConfigResponse"
                    }
                  }
                }
              },
              "description": "The model config defining the LLM evaluator."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorType"
                }
              },
              "description": "The type of the evaluator."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique ID for the evaluator. Starts with `evfn_`."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "logging_project",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProjectResponse"
                    }
                  }
                }
              },
              "description": "The project where the evaluator logs are stored."
            }
          ]
        }
      },
      "type_:EvaluatorReturnTypeEnum": {
        "name": "EvaluatorReturnTypeEnum",
        "description": "Enum representing the possible return types of an evaluator.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "boolean"
            },
            {
              "value": "number"
            },
            {
              "value": "select"
            },
            {
              "value": "multi_select"
            },
            {
              "value": "text"
            }
          ]
        }
      },
      "type_:EvaluatorType": {
        "name": "EvaluatorType",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "python"
            },
            {
              "value": "llm"
            },
            {
              "value": "human"
            },
            {
              "value": "external"
            }
          ]
        }
      },
      "type_:FeedbackType": {
        "name": "FeedbackType",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "rating"
            },
            {
              "value": "action"
            },
            {
              "value": "issue"
            },
            {
              "value": "correction"
            },
            {
              "value": "comment"
            }
          ]
        }
      },
      "type_:FeedbackValue": {
        "name": "FeedbackValue",
        "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Feedback": {
        "name": "Feedback",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackType"
                }
              },
              "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackValue"
                }
              },
              "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'."
            },
            {
              "key": "data_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID to associate the feedback to a previously logged datapoint."
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique identifier to who provided the feedback."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the feedback was created."
            }
          ]
        }
      },
      "type_:FeedbackClass": {
        "name": "FeedbackClass",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "select"
            },
            {
              "value": "multi_select"
            },
            {
              "value": "text"
            },
            {
              "value": "number"
            }
          ]
        }
      },
      "type_:FeedbackLabelRequest": {
        "name": "FeedbackLabelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LabelSentiment"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FeedbackRequestType": {
        "name": "FeedbackRequestType",
        "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Feedback Type",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackType"
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FeedbackRequestValue": {
        "name": "FeedbackRequestValue",
        "description": "The feedback value to be set. This field should be left blank when unsetting 'rating', 'correction' or 'comment', but is required otherwise.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FeedbackRequest": {
        "name": "FeedbackRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackRequestType"
                }
              },
              "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FeedbackRequestValue"
                    }
                  }
                }
              },
              "description": "The feedback value to be set. This field should be left blank when unsetting 'rating', 'correction' or 'comment', but is required otherwise."
            },
            {
              "key": "data_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID to associate the feedback to a previously logged datapoint."
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique identifier to who provided the feedback."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the feedback was created."
            },
            {
              "key": "unset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If true, the value for this feedback is unset."
            }
          ]
        }
      },
      "type_:FeedbackResponseType": {
        "name": "FeedbackResponseType",
        "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Feedback Type",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackType"
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FeedbackResponseValue": {
        "name": "FeedbackResponseValue",
        "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FeedbackResponse": {
        "name": "FeedbackResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackResponseType"
                }
              },
              "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
            },
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackResponseValue"
                }
              },
              "description": "The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'."
            },
            {
              "key": "data_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID to associate the feedback to a previously logged datapoint."
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique identifier to who provided the feedback."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the feedback was created."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of user feedback. Starts with `ann_`, short for annotation."
            }
          ]
        }
      },
      "type_:FeedbackTypeModelType": {
        "name": "FeedbackTypeModelType",
        "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Feedback Type",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackType"
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FeedbackTypeModel": {
        "name": "FeedbackTypeModel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackTypeModelType"
                }
              },
              "description": "The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'."
            },
            {
              "key": "values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:CategoricalFeedbackLabel"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The allowed values for categorical feedback types. Not populated for `correction` and `comment`."
            }
          ]
        }
      },
      "type_:FeedbackTypes": {
        "name": "FeedbackTypes",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:FeedbackTypeModel"
              }
            }
          }
        }
      },
      "type_:FileType": {
        "name": "FileType",
        "description": "Enum for File types.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "prompt"
            },
            {
              "value": "tool"
            },
            {
              "value": "dataset"
            },
            {
              "value": "evaluator"
            },
            {
              "value": "flow"
            }
          ]
        }
      },
      "type_:FunctionTool": {
        "name": "FunctionTool",
        "description": "A function tool to be called by the model where user owns runtime.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "arguments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionToolChoice": {
        "name": "FunctionToolChoice",
        "description": "A function tool to be called by the model where user owns runtime.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:GenericConfigResponse": {
        "name": "GenericConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of config. Starts with `config_`."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameters that define the config."
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the config."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Whether the config is committed or not."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of config."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description of config."
            }
          ]
        }
      },
      "type_:GetModelConfigResponse": {
        "name": "GetModelConfigResponse",
        "description": "A selected model configuration.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of project the model config belongs to. Starts with `pr_`."
            },
            {
              "key": "project_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the project the model config belongs to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "last_used",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "num_datapoints",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of datapoints associated with this project model config."
            },
            {
              "key": "evaluation_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ModelConfigEvaluatorAggregateResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Aggregates of evaluators for the model config."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ConfigResponse"
                }
              }
            },
            {
              "key": "environment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of environment to reference in subsequent log calls."
            }
          ]
        }
      },
      "type_:HTTPValidationError": {
        "name": "HTTPValidationError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ValidationError"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ImageChatContent": {
        "name": "ImageChatContent",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "image_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageUrl"
                }
              },
              "description": "The message's image content."
            }
          ]
        }
      },
      "type_:ImageUrlDetail": {
        "name": "ImageUrlDetail",
        "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "high"
            },
            {
              "value": "low"
            },
            {
              "value": "auto"
            }
          ]
        }
      },
      "type_:ImageUrl": {
        "name": "ImageUrl",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Either a URL of the image or the base64 encoded image data."
            },
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageUrlDetail"
                    }
                  }
                }
              },
              "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding"
            }
          ]
        }
      },
      "type_:LabelSentiment": {
        "name": "LabelSentiment",
        "description": "How a label should be treated in calculating Version performance.\n\nUsed by a File's PAPV (Positive Action Per View) metric.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "positive"
            },
            {
              "value": "negative"
            },
            {
              "value": "neutral"
            },
            {
              "value": "unset"
            }
          ]
        }
      },
      "type_:LinkedToolRequest": {
        "name": "LinkedToolRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the linked tool. Starts with \"oc\\_\""
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "organization"
                  }
                }
              },
              "description": "The source of the linked tool. For a linked tool it should be `organization`"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the linked tool."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The description of the linked tool."
            },
            {
              "key": "strict",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the tool is strict or not. If strict, the model will be forced to respond with JSON matching the parameters schema."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The parameters of the linked tool."
            }
          ]
        }
      },
      "type_:Judgment": {
        "name": "Judgment",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Config": {
        "name": "Config",
        "description": "The model config used for this generation. Required unless `config_id` is provided.",
        "shape": {
          "type": "discriminatedUnion",
          "discriminant": "type",
          "variants": [
            {
              "discriminantValue": "model",
              "extends": [
                "type_:ModelConfigRequest"
              ],
              "properties": []
            },
            {
              "discriminantValue": "tool",
              "extends": [
                "type_:ToolConfigRequest"
              ],
              "properties": []
            }
          ]
        }
      },
      "type_:LogRequestFeedback": {
        "name": "LogRequestFeedback",
        "description": "Optional parameter to provide feedback with your logged datapoint.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Feedback",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Feedback"
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Feedback"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:LogRequest": {
        "name": "LogRequest",
        "description": "Request model for logging a datapoint.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique project name. If no project exists with this name, a new project will be created."
            },
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique ID of a project to associate to the log. Either this or `project` must be provided."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the session to associate the datapoint."
            },
            {
              "key": "session_reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
            },
            {
              "key": "parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID associated to the parent datapoint in a session."
            },
            {
              "key": "parent_reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
            },
            {
              "key": "reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique string to reference the datapoint. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a subsequent log request."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The messages passed to the to provider chat endpoint."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later"
            },
            {
              "key": "judgment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Judgment"
                    }
                  }
                }
              }
            },
            {
              "key": "config_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique ID of a config to associate to the log."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Config"
                    }
                  }
                }
              },
              "description": "The model config used for this generation. Required unless `config_id` is provided."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The environment name used to create the log."
            },
            {
              "key": "feedback",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogRequestFeedback"
                    }
                  }
                }
              },
              "description": "Optional parameter to provide feedback with your logged datapoint."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "output_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageWithToolCall"
                    }
                  }
                }
              },
              "description": "The message returned by the provider."
            },
            {
              "key": "prompt_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the prompt used to generate the output."
            },
            {
              "key": "output_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the output generated by the model."
            },
            {
              "key": "prompt_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the prompt."
            },
            {
              "key": "output_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the output."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw request sent to provider."
            },
            {
              "key": "provider_response",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw response received the provider."
            }
          ]
        }
      },
      "type_:LogResponseToolChoice": {
        "name": "LogResponseToolChoice",
        "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_:LogResponse": {
        "name": "LogResponse",
        "description": "Request model for logging a datapoint.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the project associated with this log"
            },
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique ID of the project associated with this log."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the session to associate the datapoint."
            },
            {
              "key": "session_reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique string identifying the session to associate the datapoint to. Allows you to log multiple datapoints to a session (using an ID kept by your internal systems) by passing the same `session_reference_id` in subsequent log requests. Specify at most one of this or `session_id`."
            },
            {
              "key": "parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID associated to the parent datapoint in a session."
            },
            {
              "key": "parent_reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique string identifying the previously-logged parent datapoint in a session. Allows you to log nested datapoints with your internal system IDs by passing the same reference ID as `parent_id` in a prior log request. Specify at most one of this or `parent_id`. Note that this cannot refer to a datapoint being logged in the same request."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the source datapoint if this is a log derived from a datapoint in a dataset."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of logged datapoint. Starts with `data_`."
            },
            {
              "key": "reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique user-provided string identifying the datapoint."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The messages passed to the to provider chat endpoint."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if logging a parent datapoint with the intention to populate it later"
            },
            {
              "key": "judgment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Judgment"
                    }
                  }
                }
              }
            },
            {
              "key": "config_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique ID of a config to associate to the log."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ConfigResponse"
                }
              }
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The environment name used to create the log."
            },
            {
              "key": "feedback",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:FeedbackResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "output_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageWithToolCall"
                    }
                  }
                }
              },
              "description": "The message returned by the provider."
            },
            {
              "key": "prompt_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the prompt used to generate the output."
            },
            {
              "key": "output_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the output generated by the model."
            },
            {
              "key": "prompt_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the prompt."
            },
            {
              "key": "output_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the output."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw request sent to provider."
            },
            {
              "key": "provider_response",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw response received the provider."
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "User email address provided when creating the datapoint."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Latency of provider response."
            },
            {
              "key": "tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Total number of tokens in the prompt and output."
            },
            {
              "key": "raw_output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Raw output from the provider."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Reason the generation finished."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolResultResponse"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "tool_choice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponseToolChoice"
                    }
                  }
                }
              },
              "description": "Controls how the model uses tools. The following options are supported: 'none' forces the model to not call a tool; the default when no tools are provided as part of the model config. 'auto' the model can decide to call one of the provided tools; the default when tools are provided as part of the model config. Providing {'type': 'function', 'function': {name': <TOOL_NAME>}} forces the model to use the named function."
            },
            {
              "key": "evaluation_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationResultResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "observability_status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ObservabilityStatus"
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "batch_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of batch IDs the log belongs to."
            }
          ]
        }
      },
      "type_:ModelConfigChatRequestStop": {
        "name": "ModelConfigChatRequestStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigChatRequestToolsItem": {
        "name": "ModelConfigChatRequestToolsItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Linked Tool Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LinkedToolRequest"
                }
              }
            },
            {
              "displayName": "Model Config Tool Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelConfigToolRequest"
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigChatRequest": {
        "name": "ModelConfigChatRequest",
        "description": "Chat model config request.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A friendly display name for the model config. If not provided, a name will be generated."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A description of the model config."
            },
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelProviders"
                    }
                  }
                }
              },
              "description": "The company providing the underlying model service."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model instance used. E.g. text-davinci-002."
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
            },
            {
              "key": "top_p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
            },
            {
              "key": "stop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelConfigChatRequestStop"
                    }
                  }
                }
              },
              "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameter values to be passed to the provider call."
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ResponseFormat"
                    }
                  }
                }
              },
              "description": "The format of the response. Only type json_object is currently supported for chat."
            },
            {
              "key": "endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelEndpoints"
                    }
                  }
                }
              },
              "description": "The provider model endpoint used."
            },
            {
              "key": "chat_template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ModelConfigChatRequestToolsItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Make tools available to OpenAIs chat model as functions."
            }
          ]
        }
      },
      "type_:ModelConfigCompletionRequestStop": {
        "name": "ModelConfigCompletionRequestStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigCompletionRequest": {
        "name": "ModelConfigCompletionRequest",
        "description": "Completion model config request",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A friendly display name for the model config. If not provided, a name will be generated."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A description of the model config."
            },
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelProviders"
                    }
                  }
                }
              },
              "description": "The company providing the underlying model service."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model instance used. E.g. text-davinci-002."
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
            },
            {
              "key": "top_p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
            },
            {
              "key": "stop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelConfigCompletionRequestStop"
                    }
                  }
                }
              },
              "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameter values to be passed to the provider call."
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ResponseFormat"
                    }
                  }
                }
              },
              "description": "The format of the response. Only type json_object is currently supported for chat."
            },
            {
              "key": "endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelEndpoints"
                    }
                  }
                }
              },
              "description": "The provider model endpoint used."
            },
            {
              "key": "prompt_template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
            }
          ]
        }
      },
      "type_:ModelConfigEvaluatorAggregateResponse": {
        "name": "ModelConfigEvaluatorAggregateResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model_config_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "evaluator_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "aggregate_value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigRequestStop": {
        "name": "ModelConfigRequestStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigRequestToolsItem": {
        "name": "ModelConfigRequestToolsItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Linked Tool Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LinkedToolRequest"
                }
              }
            },
            {
              "displayName": "Model Config Tool Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ModelConfigToolRequest"
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigRequest": {
        "name": "ModelConfigRequest",
        "description": "Model config used for logging both chat and completion.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A friendly display name for the model config. If not provided, a name will be generated."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A description of the model config."
            },
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelProviders"
                    }
                  }
                }
              },
              "description": "The company providing the underlying model service."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model instance used. E.g. text-davinci-002."
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
            },
            {
              "key": "top_p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
            },
            {
              "key": "stop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelConfigRequestStop"
                    }
                  }
                }
              },
              "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameter values to be passed to the provider call."
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ResponseFormat"
                    }
                  }
                }
              },
              "description": "The format of the response. Only type json_object is currently supported for chat."
            },
            {
              "key": "endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelEndpoints"
                    }
                  }
                }
              },
              "description": "The provider model endpoint used."
            },
            {
              "key": "prompt_template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
            },
            {
              "key": "chat_template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ModelConfigRequestToolsItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Make tools available to OpenAIs chat model as functions."
            }
          ]
        }
      },
      "type_:ModelConfigResponseStop": {
        "name": "ModelConfigResponseStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ModelConfigResponse": {
        "name": "ModelConfigResponse",
        "description": "Model config request.\n\nContains fields that are common to all (i.e. both chat and complete) endpoints.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of config. Starts with `config_`."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameter values to be passed to the provider call."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A friendly display name for the model config. If not provided, a name will be generated."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A description of the model config."
            },
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelProviders"
                    }
                  }
                }
              },
              "description": "The company providing the underlying model service."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model instance used. E.g. text-davinci-002."
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
            },
            {
              "key": "top_p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
            },
            {
              "key": "stop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelConfigResponseStop"
                    }
                  }
                }
              },
              "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ResponseFormat"
                    }
                  }
                }
              },
              "description": "The format of the response. Only type json_object is currently supported for chat."
            },
            {
              "key": "prompt_template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Prompt template that will take your specified inputs to form your final request to the model. NB: Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}."
            },
            {
              "key": "chat_template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessageWithToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. NB: Input variables within the template should be specified with syntax: {{INPUT_NAME}}."
            },
            {
              "key": "tool_configs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolConfigResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "NB: Deprecated with tools field. Definition of tools shown to the model.",
              "availability": "Deprecated"
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Tools shown to the model."
            },
            {
              "key": "endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelEndpoints"
                    }
                  }
                }
              },
              "description": "The provider model endpoint used."
            }
          ]
        }
      },
      "type_:ModelConfigToolRequest": {
        "name": "ModelConfigToolRequest",
        "description": "Definition of tool within a model config.\n\nThe subset of ToolConfig parameters received by the chat endpoint.\nDoes not have things like the signature or setup schema.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the tool shown to the model."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The description of the tool shown to the model."
            },
            {
              "key": "strict",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the tool is strict or not. If strict, the model will be forced to respond with JSON matching the parameters schema."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolSource"
                    }
                  }
                }
              },
              "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'."
            },
            {
              "key": "source_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Code source of the tool."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameters that define the config."
            },
            {
              "key": "preset_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool"
            }
          ]
        }
      },
      "type_:ModelEndpoints": {
        "name": "ModelEndpoints",
        "description": "Supported model provider endpoints.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "complete"
            },
            {
              "value": "chat"
            },
            {
              "value": "edit"
            }
          ]
        }
      },
      "type_:ModelProviders": {
        "name": "ModelProviders",
        "description": "Supported model providers.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "openai"
            },
            {
              "value": "openai_azure"
            },
            {
              "value": "mock"
            },
            {
              "value": "anthropic"
            },
            {
              "value": "bedrock"
            },
            {
              "value": "cohere"
            },
            {
              "value": "replicate"
            },
            {
              "value": "google"
            },
            {
              "value": "groq"
            }
          ]
        }
      },
      "type_:ObservabilityStatus": {
        "name": "ObservabilityStatus",
        "description": "Status of a Log for observability.\n\nObservability is implemented by running monitoring Evaluators on Logs.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pending"
            },
            {
              "value": "running"
            },
            {
              "value": "completed"
            },
            {
              "value": "failed"
            }
          ]
        }
      },
      "type_:PaginatedDataDatapointResponse": {
        "name": "PaginatedDataDatapointResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatapointResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataEvaluationDatapointSnapshotResponse": {
        "name": "PaginatedDataEvaluationDatapointSnapshotResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationDatapointSnapshotResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataEvaluationResponse": {
        "name": "PaginatedDataEvaluationResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataLogResponse": {
        "name": "PaginatedDataLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataProjectResponse": {
        "name": "PaginatedDataProjectResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProjectResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataSessionResponse": {
        "name": "PaginatedDataSessionResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SessionResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PlatformAccessEnum": {
        "name": "PlatformAccessEnum",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "superadmin"
            },
            {
              "value": "supportadmin"
            },
            {
              "value": "user"
            }
          ]
        }
      },
      "type_:ProjectConfigResponse": {
        "name": "ProjectConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "project_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of project the model config belongs to. Starts with `pr_`."
            },
            {
              "key": "project_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the project the model config belongs to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "last_used",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "num_datapoints",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of datapoints associated with this project model config."
            },
            {
              "key": "evaluation_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ModelConfigEvaluatorAggregateResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Aggregates of evaluators for the model config."
            },
            {
              "key": "config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ConfigResponse"
                }
              }
            }
          ]
        }
      },
      "type_:ProjectInputResponse": {
        "name": "ProjectInputResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of input."
            }
          ]
        }
      },
      "type_:ProjectResponse": {
        "name": "ProjectResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Project ID"
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique project name."
            },
            {
              "key": "active_config",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProjectConfigResponse"
                    }
                  }
                }
              },
              "description": "Config that has been set as the project's active deployment."
            },
            {
              "key": "users",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ProjectUserResponse"
                    }
                  }
                }
              },
              "description": "Users associated to the project."
            },
            {
              "key": "data_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The count of datapoints that have been logged to the project."
            },
            {
              "key": "feedback_types",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FeedbackTypes"
                }
              },
              "description": "The feedback types that have been defined in the project."
            },
            {
              "key": "team_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique ID of the team the project belongs to. Starts with `tm_`."
            },
            {
              "key": "config_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ConfigType"
                    }
                  }
                }
              }
            },
            {
              "key": "active_evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Evaluators that have been set as active for the project."
            },
            {
              "key": "directory_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "String ID of the directory the project belongs to. Starts with `dir_`."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ProjectSortBy": {
        "name": "ProjectSortBy",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created_at"
            },
            {
              "value": "updated_at"
            },
            {
              "value": "name"
            }
          ]
        }
      },
      "type_:ProjectUserResponse": {
        "name": "ProjectUserResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of user. Starts with `usr_`."
            },
            {
              "key": "email_address",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The user's email address."
            },
            {
              "key": "full_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The user's full name."
            }
          ]
        }
      },
      "type_:ProviderApiKeys": {
        "name": "ProviderApiKeys",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "openai",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "ai21",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "mock",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "anthropic",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "bedrock",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "cohere",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "openai_azure",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "openai_azure_endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Type": {
        "name": "Type",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "json_object"
            },
            {
              "value": "json_schema"
            }
          ]
        }
      },
      "type_:ResponseFormat": {
        "name": "ResponseFormat",
        "description": "Response format of the model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:Type"
                }
              }
            },
            {
              "key": "json_schema",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The JSON schema of the response format if type is json_schema."
            }
          ]
        }
      },
      "type_:SessionProjectResponse": {
        "name": "SessionProjectResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of project the datapoint belongs to. Starts with `pr_`."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileType"
                }
              },
              "description": "Type of project. e.g. `prompt` or `tool`."
            }
          ]
        }
      },
      "type_:SessionResponse": {
        "name": "SessionResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of session. Starts with `sesh_`."
            },
            {
              "key": "reference_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique user-provided string identifying the session."
            },
            {
              "key": "projects",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SessionProjectResponse"
                    }
                  }
                }
              },
              "description": "List of projects that have datapoints associated to this session."
            },
            {
              "key": "datapoints_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Number of datapoints associated to this session."
            },
            {
              "key": "first_inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Inputs for the first datapoint in the session."
            },
            {
              "key": "last_output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Output for the last datapoint in the session."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SortOrder": {
        "name": "SortOrder",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "asc"
            },
            {
              "value": "desc"
            }
          ]
        }
      },
      "type_:TextChatContent": {
        "name": "TextChatContent",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The message's text content."
            }
          ]
        }
      },
      "type_:TimeUnit": {
        "name": "TimeUnit",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "day"
            },
            {
              "value": "week"
            },
            {
              "value": "month"
            }
          ]
        }
      },
      "type_:ToolCall": {
        "name": "ToolCall",
        "description": "A tool call to be made.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolType"
                }
              }
            },
            {
              "key": "function",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FunctionTool"
                }
              }
            }
          ]
        }
      },
      "type_:ToolChoice": {
        "name": "ToolChoice",
        "description": "Tool choice to force the model to use a tool.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolType"
                }
              }
            },
            {
              "key": "function",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FunctionToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_:ToolConfigRequest": {
        "name": "ToolConfigRequest",
        "description": "Definition of tool within a model config.\n\nThe subset of ToolConfig parameters received by the chat endpoint.\nDoes not have things like the signature or setup schema.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the tool shown to the model."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The description of the tool shown to the model."
            },
            {
              "key": "strict",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the tool is strict or not. If strict, the model will be forced to respond with JSON matching the parameters schema."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolSource"
                    }
                  }
                }
              },
              "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'."
            },
            {
              "key": "source_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Code source of the tool."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameters that define the config."
            },
            {
              "key": "preset_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool"
            }
          ]
        }
      },
      "type_:ToolConfigResponse": {
        "name": "ToolConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of config. Starts with `config_`."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameters that define the config."
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the config."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Whether the config is committed or not."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name for the tool referenced by the model."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description of the tool referenced by the model"
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolSource"
                    }
                  }
                }
              },
              "description": "Source of the tool. If defined at an organization level will be 'organization' else 'inline'."
            },
            {
              "key": "source_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Code source of the tool."
            },
            {
              "key": "setup_schema",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
            },
            {
              "key": "signature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The function signature of the tool when being called."
            },
            {
              "key": "is_preset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the tool is one where Humanloop defines runtime or not."
            },
            {
              "key": "preset_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to lookup the Humanloop runtime of the tool"
            }
          ]
        }
      },
      "type_:ToolResponse": {
        "name": "ToolResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The ID of the tool. Starts with either `config_` or `oc_`."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name for the tool referenced by the model."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Description of the tool referenced by the model"
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/"
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The origin of the tool"
            }
          ]
        }
      },
      "type_:ToolResultResponse": {
        "name": "ToolResultResponse",
        "description": "A result from a tool used to populate the prompt template",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "signature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ToolSource": {
        "name": "ToolSource",
        "description": "Source of tool. Used to differentiate between tools and tool versions when they are combined in a list.\n\nV4 uses organization and inline. Those are deprecated and will be removed in favour of tool and tool_version.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "organization"
            },
            {
              "value": "inline"
            }
          ]
        }
      },
      "type_:ToolType": {
        "name": "ToolType",
        "description": "The type of tool to call.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "function"
            }
          }
        }
      },
      "type_:UpdateLogRequest": {
        "name": "UpdateLogRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            }
          ]
        }
      },
      "type_:Usage": {
        "name": "Usage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "prompt_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Number of tokens used in the prompt."
            },
            {
              "key": "generation_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Number of tokens produced by the generation."
            },
            {
              "key": "total_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Total number of tokens used by the prompt and generation combined."
            }
          ]
        }
      },
      "type_:UserResponse": {
        "name": "UserResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of user. Starts with `usr_`."
            },
            {
              "key": "email_address",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The user's email address."
            },
            {
              "key": "full_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The user's full name."
            },
            {
              "key": "verified",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether the user has verified their email address."
            }
          ]
        }
      },
      "type_:ValidationErrorLocItem": {
        "name": "ValidationErrorLocItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ValidationError": {
        "name": "ValidationError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "loc",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ValidationErrorLocItem"
                    }
                  }
                }
              }
            },
            {
              "key": "msg",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VersionStatus": {
        "name": "VersionStatus",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "uncommitted"
            },
            {
              "value": "committed"
            },
            {
              "value": "deleted"
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_chats": {
        "id": "subpackage_chats",
        "name": "chats"
      },
      "subpackage_completions": {
        "id": "subpackage_completions",
        "name": "completions"
      },
      "subpackage_datapoints": {
        "id": "subpackage_datapoints",
        "name": "datapoints"
      },
      "subpackage_projects": {
        "id": "subpackage_projects",
        "name": "projects"
      },
      "subpackage_datasets": {
        "id": "subpackage_datasets",
        "name": "datasets"
      },
      "subpackage_evaluations": {
        "id": "subpackage_evaluations",
        "name": "evaluations"
      },
      "subpackage_evaluators": {
        "id": "subpackage_evaluators",
        "name": "evaluators"
      },
      "subpackage_feedback": {
        "id": "subpackage_feedback",
        "name": "feedback"
      },
      "subpackage_logs": {
        "id": "subpackage_logs",
        "name": "logs"
      },
      "subpackage_modelConfigs": {
        "id": "subpackage_modelConfigs",
        "name": "modelConfigs"
      },
      "subpackage_sessions": {
        "id": "subpackage_sessions",
        "name": "sessions"
      },
      "subpackage_projects/activeConfig": {
        "id": "subpackage_projects/activeConfig",
        "name": "activeConfig"
      },
      "subpackage_projects/deployedConfig": {
        "id": "subpackage_projects/deployedConfig",
        "name": "deployedConfig"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-API-KEY",
        "nameOverride": "apiKey"
      }
    }
  },
  {
    "id": "d8feb9f1-c5b3-4935-9375-ad1f1826d72d",
    "endpoints": {
      "endpoint_prompts.log": {
        "id": "endpoint_prompts.log",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Log to a Prompt.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Prompt. Otherwise, the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt. If they do not, we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/log"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Prompt to log to."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed version to log to."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "evaluation_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Evaluation Report to associate the Log to."
              },
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Prompt."
              },
              {
                "key": "output_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessage"
                      }
                    }
                  }
                },
                "description": "The message returned by the provider."
              },
              {
                "key": "prompt_tokens",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Number of tokens in the prompt used to generate the output."
              },
              {
                "key": "output_tokens",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Number of tokens in the output generated by the model."
              },
              {
                "key": "prompt_cost",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Cost in dollars associated to the tokens in the prompt."
              },
              {
                "key": "output_cost",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Cost in dollars associated to the tokens in the output."
              },
              {
                "key": "finish_reason",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Reason the generation finished."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:ChatMessage"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_prompts:PromptLogRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PromptKernelRequest"
                      }
                    }
                  }
                },
                "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              },
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
              },
              {
                "key": "created_at",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "User defined timestamp for when the log was created. "
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error message if the log is an error."
              },
              {
                "key": "provider_latency",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Duration of the logged event in seconds."
              },
              {
                "key": "stdout",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Captured log and debug statements."
              },
              {
                "key": "provider_request",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw request sent to provider."
              },
              {
                "key": "provider_response",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw response received the provider."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
              },
              {
                "key": "trace_parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The ID of the parent Log to nest this Log under in a Trace."
              },
              {
                "key": "batches",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID related to the Log."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the Environment the Log is associated to."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CreatePromptLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/log",
            "responseStatusCode": 200,
            "name": "Log prompt",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "persona",
                "output_message": {
                  "role": "assistant",
                  "content": "Well, you know, there is so much secrecy involved in government, folks, it's unbelievable. They don't want to tell you everything. They don't tell me everything! But about Roswell, it’s a very popular question. I know, I just know, that something very, very peculiar happened there. Was it a weather balloon? Maybe. Was it something extraterrestrial? Could be. I'd love to go down and open up all the classified documents, believe me, I would. But they don't let that happen. The Deep State, folks, the Deep State. They’re unbelievable. They want to keep everything a secret. But whatever the truth is, I can tell you this: it’s something big, very very big. Tremendous, in fact."
                },
                "prompt_tokens": 100,
                "output_tokens": 220,
                "prompt_cost": 0.00001,
                "output_cost": 0.0002,
                "finish_reason": "stop",
                "messages": [
                  {
                    "role": "user",
                    "content": "What really happened at Roswell?"
                  }
                ],
                "prompt": {
                  "model": "gpt-4",
                  "template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer questions as this person. Do not break character."
                    }
                  ]
                },
                "created_at": "2024-07-19T00:29:35.178992",
                "provider_latency": 6.5931549072265625,
                "inputs": {
                  "person": "Trump"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "data_fIfEb1SoKZooqeFbi9IFs",
                "prompt_id": "pr_3usCu3dAkgrXTlufrvPs7",
                "version_id": "prv_Wu6zx1lAWJRqOyL8nWuZk"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/log \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"persona\",\n  \"output_message\": {\n    \"role\": \"assistant\",\n    \"content\": \"Well, you know, there is so much secrecy involved in government, folks, it\\'s unbelievable. They don\\'t want to tell you everything. They don\\'t tell me everything! But about Roswell, it’s a very popular question. I know, I just know, that something very, very peculiar happened there. Was it a weather balloon? Maybe. Was it something extraterrestrial? Could be. I\\'d love to go down and open up all the classified documents, believe me, I would. But they don\\'t let that happen. The Deep State, folks, the Deep State. They’re unbelievable. They want to keep everything a secret. But whatever the truth is, I can tell you this: it’s something big, very very big. Tremendous, in fact.\"\n  },\n  \"prompt_tokens\": 100,\n  \"output_tokens\": 220,\n  \"prompt_cost\": 0.00001,\n  \"output_cost\": 0.0002,\n  \"finish_reason\": \"stop\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What really happened at Roswell?\"\n    }\n  ],\n  \"prompt\": {\n    \"model\": \"gpt-4\",\n    \"template\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are {{person}}. Answer questions as this person. Do not break character.\"\n      }\n    ]\n  },\n  \"created_at\": \"2024-07-19T00:29:35.178992\",\n  \"provider_latency\": 6.5931549072265625,\n  \"inputs\": {\n    \"person\": \"Trump\"\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "import datetime\n\nfrom humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.log(\n    path=\"persona\",\n    prompt={\n        \"model\": \"gpt-4\",\n        \"template\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are {{person}}. Answer questions as this person. Do not break character.\",\n            }\n        ],\n    },\n    messages=[{\"role\": \"user\", \"content\": \"What really happened at Roswell?\"}],\n    inputs={\"person\": \"Trump\"},\n    created_at=datetime.datetime.fromisoformat(\n        \"2024-07-19 00:29:35.178000+00:00\",\n    ),\n    provider_latency=6.5931549072265625,\n    output_message={\n        \"content\": \"Well, you know, there is so much secrecy involved in government, folks, it's unbelievable. They don't want to tell you everything. They don't tell me everything! But about Roswell, it’s a very popular question. I know, I just know, that something very, very peculiar happened there. Was it a weather balloon? Maybe. Was it something extraterrestrial? Could be. I'd love to go down and open up all the classified documents, believe me, I would. But they don't let that happen. The Deep State, folks, the Deep State. They’re unbelievable. They want to keep everything a secret. But whatever the truth is, I can tell you this: it’s something big, very very big. Tremendous, in fact.\",\n        \"role\": \"assistant\",\n    },\n    prompt_tokens=100,\n    output_tokens=220,\n    prompt_cost=1e-05,\n    output_cost=0.0002,\n    finish_reason=\"stop\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.log({\n    path: \"persona\",\n    prompt: {\n        model: \"gpt-4\",\n        template: [{\n                role: \"system\",\n                content: \"You are {{person}}. Answer questions as this person. Do not break character.\"\n            }]\n    },\n    messages: [{\n            role: \"user\",\n            content: \"What really happened at Roswell?\"\n        }],\n    inputs: {\n        \"person\": \"Trump\"\n    },\n    createdAt: \"2024-07-19T00:29:35.178992\",\n    providerLatency: 6.5931549072265625,\n    outputMessage: {\n        content: \"Well, you know, there is so much secrecy involved in government, folks, it's unbelievable. They don't want to tell you everything. They don't tell me everything! But about Roswell, it’s a very popular question. I know, I just know, that something very, very peculiar happened there. Was it a weather balloon? Maybe. Was it something extraterrestrial? Could be. I'd love to go down and open up all the classified documents, believe me, I would. But they don't let that happen. The Deep State, folks, the Deep State. They’re unbelievable. They want to keep everything a secret. But whatever the truth is, I can tell you this: it’s something big, very very big. Tremendous, in fact.\",\n        role: \"assistant\"\n    },\n    promptTokens: 100,\n    outputTokens: 220,\n    promptCost: 0.00001,\n    outputCost: 0.0002,\n    finishReason: \"stop\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/log",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/log?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "import datetime\n\nfrom humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.log(\n    path=\"persona\",\n    prompt={\n        \"model\": \"gpt-4\",\n        \"template\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are {{person}}. Answer questions as this person. Do not break character.\",\n            }\n        ],\n    },\n    messages=[{\"role\": \"user\", \"content\": \"What really happened at Roswell?\"}],\n    inputs={\"person\": \"Trump\"},\n    created_at=datetime.datetime.fromisoformat(\n        \"2024-07-19 00:29:35.178000+00:00\",\n    ),\n    provider_latency=6.5931549072265625,\n    output_message={\n        \"content\": \"Well, you know, there is so much secrecy involved in government, folks, it's unbelievable. They don't want to tell you everything. They don't tell me everything! But about Roswell, it’s a very popular question. I know, I just know, that something very, very peculiar happened there. Was it a weather balloon? Maybe. Was it something extraterrestrial? Could be. I'd love to go down and open up all the classified documents, believe me, I would. But they don't let that happen. The Deep State, folks, the Deep State. They’re unbelievable. They want to keep everything a secret. But whatever the truth is, I can tell you this: it’s something big, very very big. Tremendous, in fact.\",\n        \"role\": \"assistant\",\n    },\n    prompt_tokens=100,\n    output_tokens=220,\n    prompt_cost=1e-05,\n    output_cost=0.0002,\n    finish_reason=\"stop\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.log({\n    path: \"persona\",\n    prompt: {\n        model: \"gpt-4\",\n        template: [{\n                role: \"system\",\n                content: \"You are {{person}}. Answer questions as this person. Do not break character.\"\n            }]\n    },\n    messages: [{\n            role: \"user\",\n            content: \"What really happened at Roswell?\"\n        }],\n    inputs: {\n        \"person\": \"Trump\"\n    },\n    createdAt: \"2024-07-19T00:29:35.178992\",\n    providerLatency: 6.5931549072265625,\n    outputMessage: {\n        content: \"Well, you know, there is so much secrecy involved in government, folks, it's unbelievable. They don't want to tell you everything. They don't tell me everything! But about Roswell, it’s a very popular question. I know, I just know, that something very, very peculiar happened there. Was it a weather balloon? Maybe. Was it something extraterrestrial? Could be. I'd love to go down and open up all the classified documents, believe me, I would. But they don't let that happen. The Deep State, folks, the Deep State. They’re unbelievable. They want to keep everything a secret. But whatever the truth is, I can tell you this: it’s something big, very very big. Tremendous, in fact.\",\n        role: \"assistant\"\n    },\n    promptTokens: 100,\n    outputTokens: 220,\n    promptCost: 0.00001,\n    outputCost: 0.0002,\n    finishReason: \"stop\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.log(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "evaluationId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "evaluation_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "outputMessage: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "content: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "union_v2",
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "members": [
                                          {
                                            "template": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "inputDelimiter": ",\n\t\t\t\t\t\t",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "text: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "text"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": {
                                              "type": "id",
                                              "value": "type_:TextChatContent"
                                            }
                                          },
                                          {
                                            "template": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "inputDelimiter": ",\n\t\t\t\t\t\t",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                    "isOptional": true,
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "url: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "image_url.url"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "enum",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "values": {
                                                            "high": "\"high\"",
                                                            "low": "\"low\"",
                                                            "auto": "\"auto\""
                                                          },
                                                          "templateString": "detail: $FERN_INPUT",
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "image_url.detail"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": {
                                              "type": "id",
                                              "value": "type_:ImageChatContent"
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "id",
                                        "value": "type_:ChatMessageContentItem"
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "output_message.content"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "name: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "output_message.name"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "toolCallId: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "output_message.tool_call_id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "user": "\"user\"",
                                  "assistant": "\"assistant\"",
                                  "system": "\"system\"",
                                  "tool": "\"tool\""
                                },
                                "templateString": "role: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "output_message.role"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "toolCalls: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "id: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "id"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "function: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "function.name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "arguments: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "function.arguments"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "output_message.tool_calls"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptTokens: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "prompt_tokens"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "outputTokens: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output_tokens"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptCost: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "prompt_cost"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "outputCost: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output_cost"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "finishReason: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "finish_reason"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "messages: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "content: $FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "text: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "text"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:TextChatContent"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "url: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "image_url.url"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "enum",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "values": {
                                                              "high": "\"high\"",
                                                              "low": "\"low\"",
                                                              "auto": "\"auto\""
                                                            },
                                                            "templateString": "detail: $FERN_INPUT",
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "image_url.detail"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ImageChatContent"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "type": {
                                        "type": "list",
                                        "itemType": {
                                          "type": "id",
                                          "value": "type_:ChatMessageContentItem"
                                        }
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "content"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "toolCallId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "tool_call_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "user": "\"user\"",
                                    "assistant": "\"assistant\"",
                                    "system": "\"system\"",
                                    "tool": "\"tool\""
                                  },
                                  "templateString": "role: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "role"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "toolCalls: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "id: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "id"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "function: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "name: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "arguments: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.arguments"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "tool_calls"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "messages"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "toolChoice: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"none\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "none"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"auto\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "auto"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"required\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "required"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "function: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "name: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "function.name"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:ToolChoice"
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "tool_choice"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "prompt: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "model: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.model"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "complete": "\"complete\"",
                                  "chat": "\"chat\"",
                                  "edit": "\"edit\""
                                },
                                "templateString": "endpoint: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.endpoint"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "template: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "union_v2",
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "content: $FERN_INPUT",
                                              "members": [
                                                {
                                                  "template": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "type": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                {
                                                  "template": {
                                                    "type": "iterable",
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "containerTemplateString": "[\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t]",
                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "innerTemplate": {
                                                      "type": "union_v2",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "members": [
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "text: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "text"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:TextChatContent"
                                                          }
                                                        },
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                  "isOptional": true,
                                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                  "templateInputs": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:ImageChatContent"
                                                          }
                                                        }
                                                      ],
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    },
                                                    "templateInput": {
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  },
                                                  "type": {
                                                    "type": "list",
                                                    "itemType": {
                                                      "type": "id",
                                                      "value": "type_:ChatMessageContentItem"
                                                    }
                                                  }
                                                }
                                              ],
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "content"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "toolCallId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "tool_call_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "enum",
                                              "imports": [],
                                              "isOptional": true,
                                              "values": {
                                                "user": "\"user\"",
                                                "assistant": "\"assistant\"",
                                                "system": "\"system\"",
                                                "tool": "\"tool\""
                                              },
                                              "templateString": "role: $FERN_INPUT",
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "role"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "id: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "function: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "name: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "function.name"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "arguments: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "function.arguments"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "tool_calls"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "id",
                                        "value": "type_:ChatMessage"
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.template"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "openai": "\"openai\"",
                                  "openai_azure": "\"openai_azure\"",
                                  "mock": "\"mock\"",
                                  "anthropic": "\"anthropic\"",
                                  "bedrock": "\"bedrock\"",
                                  "cohere": "\"cohere\"",
                                  "replicate": "\"replicate\"",
                                  "google": "\"google\"",
                                  "groq": "\"groq\""
                                },
                                "templateString": "provider: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.provider"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "maxTokens: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.max_tokens"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "temperature: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.temperature"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "topP: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.top_p"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "stop: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.stop"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "presencePenalty: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.presence_penalty"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "frequencyPenalty: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.frequency_penalty"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "other: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.other"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "seed: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.seed"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "responseFormat: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "json_object": "\"json_object\"",
                                        "json_schema": "\"json_schema\""
                                      },
                                      "templateString": "type: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "prompt.response_format.type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "jsonSchema: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "prompt.response_format.json_schema"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "tools: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "name: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "description: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strict: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "strict"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "parameters: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "parameters"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.tools"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "linkedTools: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.linked_tools"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "attributes: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.attributes"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerLatency: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provider_latency"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stdout: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stdout"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerRequest: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_request"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerResponse: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_response"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceDatapointId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_datapoint_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceParentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "batches: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "batches"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "user: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "user"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptLogRequestEnvironment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "save: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "save"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.update": {
        "id": "endpoint_prompts.update",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Update a Log.\n\nUpdate the details of a Log with the given ID.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/log/"
          },
          {
            "type": "pathParameter",
            "value": "log_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          },
          {
            "key": "log_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Log."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "output_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ChatMessage"
                      }
                    }
                  }
                },
                "description": "The message returned by the provider."
              },
              {
                "key": "prompt_tokens",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Number of tokens in the prompt used to generate the output."
              },
              {
                "key": "output_tokens",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Number of tokens in the output generated by the model."
              },
              {
                "key": "prompt_cost",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Cost in dollars associated to the tokens in the prompt."
              },
              {
                "key": "output_cost",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Cost in dollars associated to the tokens in the output."
              },
              {
                "key": "finish_reason",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Reason the generation finished."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:ChatMessage"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_prompts:PromptLogUpdateRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
              },
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
              },
              {
                "key": "created_at",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "User defined timestamp for when the log was created. "
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error message if the log is an error."
              },
              {
                "key": "provider_latency",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Duration of the logged event in seconds."
              },
              {
                "key": "stdout",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Captured log and debug statements."
              },
              {
                "key": "provider_request",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw request sent to provider."
              },
              {
                "key": "provider_response",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw response received the provider."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/id/log/log_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "log_id": "log_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "output_message": {
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "role": "user",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ]
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "finish_reason": "finish_reason",
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ]
                  }
                ],
                "tool_choice": "none",
                "prompt": {
                  "path": "path",
                  "id": "id",
                  "directory_id": "directory_id",
                  "model": "model",
                  "endpoint": "complete",
                  "template": "template",
                  "provider": "openai",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "other": {
                    "key": "value"
                  },
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "tools": [
                    {
                      "name": "name",
                      "description": "description"
                    }
                  ],
                  "linked_tools": [
                    {
                      "name": "name",
                      "description": "description",
                      "id": "id",
                      "version_id": "version_id"
                    }
                  ],
                  "attributes": {
                    "key": "value"
                  },
                  "commit_message": "commit_message",
                  "name": "name",
                  "version_id": "version_id",
                  "type": "prompt",
                  "environments": [
                    {
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "tag": "default"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  },
                  "status": "uncommitted",
                  "last_used_at": "2024-01-15T09:30:00Z",
                  "version_logs_count": 1,
                  "total_logs_count": 1,
                  "inputs": [
                    {
                      "name": "name"
                    }
                  ],
                  "evaluator_aggregates": [
                    {
                      "value": 1.1,
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ]
                },
                "start_time": "2024-01-15T09:30:00Z",
                "end_time": "2024-01-15T09:30:00Z",
                "output": "output",
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "provider_latency": 1.1,
                "stdout": "stdout",
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "source_datapoint_id": "source_datapoint_id",
                "trace_parent_id": "trace_parent_id",
                "batches": [
                  "batches"
                ],
                "user": "user",
                "environment": "environment",
                "save": true,
                "id": "id",
                "evaluator_logs": [
                  {
                    "start_time": "2024-01-15T09:30:00Z",
                    "end_time": "2024-01-15T09:30:00Z",
                    "output": "output",
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "provider_latency": 1.1,
                    "stdout": "stdout",
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "parent_id": "parent_id",
                    "source_datapoint_id": "source_datapoint_id",
                    "trace_parent_id": "trace_parent_id",
                    "batches": [
                      "batches"
                    ],
                    "user": "user",
                    "environment": "environment",
                    "save": true,
                    "judgment": true,
                    "id": "id",
                    "evaluator_logs": [],
                    "trace_flow_id": "trace_flow_id",
                    "trace_id": "trace_id",
                    "evaluator": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ],
                "trace_flow_id": "trace_flow_id",
                "trace_id": "trace_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/prompts/id/log/log_id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.update(\n    id=\"id\",\n    log_id=\"log_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.update(\"id\", \"log_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/log/:log_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "log_id": ":log_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/prompts/:id/log/:log_id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.update(\n    id=\"id\",\n    log_id=\"log_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.update(\"id\", \"log_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.update(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "log_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "outputMessage: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "content: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "union_v2",
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "members": [
                                          {
                                            "template": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "inputDelimiter": ",\n\t\t\t\t\t\t",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "text: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "text"
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": {
                                              "type": "id",
                                              "value": "type_:TextChatContent"
                                            }
                                          },
                                          {
                                            "template": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "inputDelimiter": ",\n\t\t\t\t\t\t",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                    "isOptional": true,
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "url: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "image_url.url"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "enum",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "values": {
                                                            "high": "\"high\"",
                                                            "low": "\"low\"",
                                                            "auto": "\"auto\""
                                                          },
                                                          "templateString": "detail: $FERN_INPUT",
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "image_url.detail"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                              ]
                                            },
                                            "type": {
                                              "type": "id",
                                              "value": "type_:ImageChatContent"
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "id",
                                        "value": "type_:ChatMessageContentItem"
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "output_message.content"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "name: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "output_message.name"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "toolCallId: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "output_message.tool_call_id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "user": "\"user\"",
                                  "assistant": "\"assistant\"",
                                  "system": "\"system\"",
                                  "tool": "\"tool\""
                                },
                                "templateString": "role: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "output_message.role"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "toolCalls: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "id: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "id"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "function: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "function.name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "arguments: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "function.arguments"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "output_message.tool_calls"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptTokens: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "prompt_tokens"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "outputTokens: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output_tokens"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptCost: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "prompt_cost"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "outputCost: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output_cost"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "finishReason: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "finish_reason"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "messages: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "content: $FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "text: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "text"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:TextChatContent"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "url: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "image_url.url"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "enum",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "values": {
                                                              "high": "\"high\"",
                                                              "low": "\"low\"",
                                                              "auto": "\"auto\""
                                                            },
                                                            "templateString": "detail: $FERN_INPUT",
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "image_url.detail"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ImageChatContent"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "type": {
                                        "type": "list",
                                        "itemType": {
                                          "type": "id",
                                          "value": "type_:ChatMessageContentItem"
                                        }
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "content"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "toolCallId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "tool_call_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "user": "\"user\"",
                                    "assistant": "\"assistant\"",
                                    "system": "\"system\"",
                                    "tool": "\"tool\""
                                  },
                                  "templateString": "role: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "role"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "toolCalls: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "id: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "id"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "function: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "name: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "arguments: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.arguments"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "tool_calls"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "messages"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "toolChoice: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"none\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "none"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"auto\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "auto"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"required\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "required"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "function: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "name: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "function.name"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:ToolChoice"
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "tool_choice"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerLatency: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provider_latency"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stdout: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stdout"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerRequest: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_request"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerResponse: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_response"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.call_stream": {
        "id": "endpoint_prompts.call_stream",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Call a Prompt.\n\nCalling a Prompt calls the model provider before logging\nthe request, responses and metadata to Humanloop.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Prompt. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt. If they do not, we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/call"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Prompt to log to."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed version to log to."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Prompt."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:ChatMessage"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_prompts:PromptsCallStreamRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PromptKernelRequest"
                      }
                    }
                  }
                },
                "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
              },
              {
                "key": "trace_parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The ID of the parent Log to nest this Log under in a Trace."
              },
              {
                "key": "batches",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID related to the Log."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the Environment the Log is associated to."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": true
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "stream",
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:PromptCallStreamResponse"
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/call",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true
              }
            },
            "responseBody": {
              "type": "stream",
              "value": [
                {
                  "output": "string",
                  "created_at": "2023-01-01T00:00:00Z",
                  "error": "string",
                  "provider_latency": 1,
                  "stdout": "string",
                  "output_message": {
                    "content": "string",
                    "name": "string",
                    "tool_call_id": "string",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  },
                  "prompt_tokens": 0,
                  "output_tokens": 0,
                  "prompt_cost": 1,
                  "output_cost": 1,
                  "finish_reason": "string",
                  "index": 0,
                  "id": "string",
                  "prompt_id": "string",
                  "version_id": "string"
                },
                {
                  "output": "string",
                  "created_at": "2023-01-01T00:00:00Z",
                  "error": "string",
                  "provider_latency": 1,
                  "stdout": "string",
                  "output_message": {
                    "content": "string",
                    "name": "string",
                    "tool_call_id": "string",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "string",
                        "type": "function",
                        "function": {
                          "name": "string",
                          "arguments": "string"
                        }
                      }
                    ]
                  },
                  "prompt_tokens": 0,
                  "output_tokens": 0,
                  "prompt_cost": 1,
                  "output_cost": 1,
                  "finish_reason": "string",
                  "index": 0,
                  "id": "string",
                  "prompt_id": "string",
                  "version_id": "string"
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/call?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "import datetime\n\nfrom humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.prompts.call_stream(\n    version_id=\"string\",\n    environment=\"string\",\n    path=\"string\",\n    id=\"string\",\n    messages=[\n        {\n            \"content\": \"string\",\n            \"name\": \"string\",\n            \"tool_call_id\": \"string\",\n            \"role\": \"user\",\n            \"tool_calls\": [\n                {\n                    \"id\": \"string\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"string\",\n                        \"arguments\": {\"key\": \"value\"},\n                    },\n                }\n            ],\n        }\n    ],\n    prompt={\n        \"model\": \"string\",\n        \"endpoint\": \"complete\",\n        \"template\": \"string\",\n        \"provider\": \"openai\",\n        \"max_tokens\": 1,\n        \"temperature\": 1.1,\n        \"top_p\": 1.1,\n        \"stop\": \"string\",\n        \"presence_penalty\": 1.1,\n        \"frequency_penalty\": 1.1,\n        \"other\": {\"string\": {\"key\": \"value\"}},\n        \"seed\": 1,\n        \"response_format\": {\n            \"type\": \"json_object\",\n            \"json_schema\": {\"string\": {\"key\": \"value\"}},\n        },\n        \"tools\": [\n            {\n                \"name\": \"string\",\n                \"description\": \"string\",\n                \"strict\": {\"key\": \"value\"},\n                \"parameters\": {\"key\": \"value\"},\n            }\n        ],\n        \"linked_tools\": [\"string\"],\n        \"attributes\": {\"string\": {\"key\": \"value\"}},\n    },\n    inputs={\"string\": {\"key\": \"value\"}},\n    source=\"string\",\n    metadata={\"string\": {\"key\": \"value\"}},\n    start_time=datetime.datetime.fromisoformat(\n        \"2024-01-15 09:30:00+00:00\",\n    ),\n    end_time=datetime.datetime.fromisoformat(\n        \"2024-01-15 09:30:00+00:00\",\n    ),\n    source_datapoint_id=\"string\",\n    trace_parent_id=\"string\",\n    batches=[\"string\"],\n    user=\"string\",\n    prompts_call_stream_request_environment=\"string\",\n    save=True,\n    provider_api_keys={\n        \"openai\": \"string\",\n        \"ai_21\": \"string\",\n        \"mock\": \"string\",\n        \"anthropic\": \"string\",\n        \"bedrock\": \"string\",\n        \"cohere\": \"string\",\n        \"openai_azure\": \"string\",\n        \"openai_azure_endpoint\": \"string\",\n    },\n    num_samples=1,\n    return_inputs=True,\n    logprobs=1,\n    suffix=\"string\",\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.callStream({\n    versionId: \"string\",\n    environment: \"string\",\n    path: \"string\",\n    id: \"string\",\n    messages: [{\n            content: \"string\",\n            name: \"string\",\n            toolCallId: \"string\",\n            role: \"user\",\n            toolCalls: [{\n                    id: \"string\",\n                    type: \"function\",\n                    function: {\n                        name: \"string\",\n                        arguments: undefined\n                    }\n                }]\n        }],\n    toolChoice: \"none\",\n    prompt: {\n        model: \"string\",\n        endpoint: \"complete\",\n        template: \"string\",\n        provider: \"openai\",\n        maxTokens: 1,\n        temperature: 1.1,\n        topP: 1.1,\n        stop: \"string\",\n        presencePenalty: 1.1,\n        frequencyPenalty: 1.1,\n        other: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        seed: 1,\n        responseFormat: {\n            type: \"json_object\",\n            jsonSchema: {}\n        },\n        tools: [{\n                name: \"string\",\n                description: \"string\",\n                strict: undefined,\n                parameters: undefined\n            }],\n        linkedTools: [\"string\"],\n        attributes: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        }\n    },\n    inputs: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    },\n    source: \"string\",\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    },\n    startTime: \"2024-01-15T09:30:00Z\",\n    endTime: \"2024-01-15T09:30:00Z\",\n    sourceDatapointId: \"string\",\n    traceParentId: \"string\",\n    batches: [\"string\"],\n    user: \"string\",\n    promptsCallStreamRequestEnvironment: \"string\",\n    save: true,\n    providerApiKeys: {\n        openai: \"string\",\n        ai21: \"string\",\n        mock: \"string\",\n        anthropic: \"string\",\n        bedrock: \"string\",\n        cohere: \"string\",\n        openaiAzure: \"string\",\n        openaiAzureEndpoint: \"string\"\n    },\n    numSamples: 1,\n    returnInputs: true,\n    logprobs: 1,\n    suffix: \"string\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/call",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/call?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "import datetime\n\nfrom humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.prompts.call_stream(\n    version_id=\"string\",\n    environment=\"string\",\n    path=\"string\",\n    id=\"string\",\n    messages=[\n        {\n            \"content\": \"string\",\n            \"name\": \"string\",\n            \"tool_call_id\": \"string\",\n            \"role\": \"user\",\n            \"tool_calls\": [\n                {\n                    \"id\": \"string\",\n                    \"type\": \"function\",\n                    \"function\": {\n                        \"name\": \"string\",\n                        \"arguments\": {\"key\": \"value\"},\n                    },\n                }\n            ],\n        }\n    ],\n    prompt={\n        \"model\": \"string\",\n        \"endpoint\": \"complete\",\n        \"template\": \"string\",\n        \"provider\": \"openai\",\n        \"max_tokens\": 1,\n        \"temperature\": 1.1,\n        \"top_p\": 1.1,\n        \"stop\": \"string\",\n        \"presence_penalty\": 1.1,\n        \"frequency_penalty\": 1.1,\n        \"other\": {\"string\": {\"key\": \"value\"}},\n        \"seed\": 1,\n        \"response_format\": {\n            \"type\": \"json_object\",\n            \"json_schema\": {\"string\": {\"key\": \"value\"}},\n        },\n        \"tools\": [\n            {\n                \"name\": \"string\",\n                \"description\": \"string\",\n                \"strict\": {\"key\": \"value\"},\n                \"parameters\": {\"key\": \"value\"},\n            }\n        ],\n        \"linked_tools\": [\"string\"],\n        \"attributes\": {\"string\": {\"key\": \"value\"}},\n    },\n    inputs={\"string\": {\"key\": \"value\"}},\n    source=\"string\",\n    metadata={\"string\": {\"key\": \"value\"}},\n    start_time=datetime.datetime.fromisoformat(\n        \"2024-01-15 09:30:00+00:00\",\n    ),\n    end_time=datetime.datetime.fromisoformat(\n        \"2024-01-15 09:30:00+00:00\",\n    ),\n    source_datapoint_id=\"string\",\n    trace_parent_id=\"string\",\n    batches=[\"string\"],\n    user=\"string\",\n    prompts_call_stream_request_environment=\"string\",\n    save=True,\n    provider_api_keys={\n        \"openai\": \"string\",\n        \"ai_21\": \"string\",\n        \"mock\": \"string\",\n        \"anthropic\": \"string\",\n        \"bedrock\": \"string\",\n        \"cohere\": \"string\",\n        \"openai_azure\": \"string\",\n        \"openai_azure_endpoint\": \"string\",\n    },\n    num_samples=1,\n    return_inputs=True,\n    logprobs=1,\n    suffix=\"string\",\n)\nfor chunk in response:\n    yield chunk\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.callStream({\n    versionId: \"string\",\n    environment: \"string\",\n    path: \"string\",\n    id: \"string\",\n    messages: [{\n            content: \"string\",\n            name: \"string\",\n            toolCallId: \"string\",\n            role: \"user\",\n            toolCalls: [{\n                    id: \"string\",\n                    type: \"function\",\n                    function: {\n                        name: \"string\",\n                        arguments: undefined\n                    }\n                }]\n        }],\n    toolChoice: \"none\",\n    prompt: {\n        model: \"string\",\n        endpoint: \"complete\",\n        template: \"string\",\n        provider: \"openai\",\n        maxTokens: 1,\n        temperature: 1.1,\n        topP: 1.1,\n        stop: \"string\",\n        presencePenalty: 1.1,\n        frequencyPenalty: 1.1,\n        other: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        },\n        seed: 1,\n        responseFormat: {\n            type: \"json_object\",\n            jsonSchema: {}\n        },\n        tools: [{\n                name: \"string\",\n                description: \"string\",\n                strict: undefined,\n                parameters: undefined\n            }],\n        linkedTools: [\"string\"],\n        attributes: {\n            \"string\": {\n                \"key\": \"value\"\n            }\n        }\n    },\n    inputs: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    },\n    source: \"string\",\n    metadata: {\n        \"string\": {\n            \"key\": \"value\"\n        }\n    },\n    startTime: \"2024-01-15T09:30:00Z\",\n    endTime: \"2024-01-15T09:30:00Z\",\n    sourceDatapointId: \"string\",\n    traceParentId: \"string\",\n    batches: [\"string\"],\n    user: \"string\",\n    promptsCallStreamRequestEnvironment: \"string\",\n    save: true,\n    providerApiKeys: {\n        openai: \"string\",\n        ai21: \"string\",\n        mock: \"string\",\n        anthropic: \"string\",\n        bedrock: \"string\",\n        cohere: \"string\",\n        openaiAzure: \"string\",\n        openaiAzureEndpoint: \"string\"\n    },\n    numSamples: 1,\n    returnInputs: true,\n    logprobs: 1,\n    suffix: \"string\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.call(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "messages: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "content: $FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "text: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "text"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:TextChatContent"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "url: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "image_url.url"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "enum",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "values": {
                                                              "high": "Humanloop.ImageUrlDetail.High",
                                                              "low": "Humanloop.ImageUrlDetail.Low",
                                                              "auto": "Humanloop.ImageUrlDetail.Auto"
                                                            },
                                                            "templateString": "detail: $FERN_INPUT",
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "image_url.detail"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ImageChatContent"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "type": {
                                        "type": "list",
                                        "itemType": {
                                          "type": "id",
                                          "value": "type_:ChatMessageContentItem"
                                        }
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "content"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "toolCallId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "tool_call_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "user": "Humanloop.ChatRole.User",
                                    "assistant": "Humanloop.ChatRole.Assistant",
                                    "system": "Humanloop.ChatRole.System",
                                    "tool": "Humanloop.ChatRole.Tool"
                                  },
                                  "templateString": "role: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "role"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "toolCalls: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "id: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "id"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "function: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "name: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "arguments: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.arguments"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "tool_calls"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "messages"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "toolChoice: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"none\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "none"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"auto\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "auto"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"required\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "required"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "function: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "name: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "function.name"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:ToolChoice"
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "tool_choice"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "prompt: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "model: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.model"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "complete": "Humanloop.ModelEndpoints.Complete",
                                  "chat": "Humanloop.ModelEndpoints.Chat",
                                  "edit": "Humanloop.ModelEndpoints.Edit"
                                },
                                "templateString": "endpoint: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.endpoint"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "template: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "union_v2",
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "content: $FERN_INPUT",
                                              "members": [
                                                {
                                                  "template": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "type": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                {
                                                  "template": {
                                                    "type": "iterable",
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "containerTemplateString": "[\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t]",
                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "innerTemplate": {
                                                      "type": "union_v2",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "members": [
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "text: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "text"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:TextChatContent"
                                                          }
                                                        },
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                  "isOptional": true,
                                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                  "templateInputs": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:ImageChatContent"
                                                          }
                                                        }
                                                      ],
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    },
                                                    "templateInput": {
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  },
                                                  "type": {
                                                    "type": "list",
                                                    "itemType": {
                                                      "type": "id",
                                                      "value": "type_:ChatMessageContentItem"
                                                    }
                                                  }
                                                }
                                              ],
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "content"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "toolCallId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "tool_call_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "enum",
                                              "imports": [],
                                              "isOptional": true,
                                              "values": {
                                                "user": "Humanloop.ChatRole.User",
                                                "assistant": "Humanloop.ChatRole.Assistant",
                                                "system": "Humanloop.ChatRole.System",
                                                "tool": "Humanloop.ChatRole.Tool"
                                              },
                                              "templateString": "role: $FERN_INPUT",
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "role"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "id: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "function: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "name: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "function.name"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "arguments: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "function.arguments"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "tool_calls"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "id",
                                        "value": "type_:ChatMessage"
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.template"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "openai": "Humanloop.ModelProviders.Openai",
                                  "openai_azure": "Humanloop.ModelProviders.OpenaiAzure",
                                  "mock": "Humanloop.ModelProviders.Mock",
                                  "anthropic": "Humanloop.ModelProviders.Anthropic",
                                  "bedrock": "Humanloop.ModelProviders.Bedrock",
                                  "cohere": "Humanloop.ModelProviders.Cohere",
                                  "replicate": "Humanloop.ModelProviders.Replicate",
                                  "google": "Humanloop.ModelProviders.Google",
                                  "groq": "Humanloop.ModelProviders.Groq"
                                },
                                "templateString": "provider: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.provider"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "maxTokens: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.max_tokens"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "temperature: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.temperature"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "topP: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.top_p"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "stop: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.stop"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "presencePenalty: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.presence_penalty"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "frequencyPenalty: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.frequency_penalty"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "other: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.other"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "seed: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.seed"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "responseFormat: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "json_object": "Humanloop.ResponseFormatType.JsonObject",
                                        "json_schema": "Humanloop.ResponseFormatType.JsonSchema"
                                      },
                                      "templateString": "type: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "prompt.response_format.type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "jsonSchema: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "prompt.response_format.json_schema"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "tools: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "name: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "description: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strict: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "strict"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "parameters: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "parameters"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.tools"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "linkedTools: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.linked_tools"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "attributes: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.attributes"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceDatapointId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_datapoint_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceParentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "batches: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "batches"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "user: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "user"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptsCallRequestEnvironment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "save: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "save"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerApiKeys: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "openai: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.openai"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "ai21: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.ai21"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "mock: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.mock"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "anthropic: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.anthropic"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "bedrock: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.bedrock"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "cohere: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.cohere"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "openaiAzure: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.openai_azure"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "openaiAzureEndpoint: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.openai_azure_endpoint"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "numSamples: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "num_samples"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "returnInputs: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "return_inputs"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "logprobs: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "logprobs"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "suffix: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "suffix"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.call": {
        "id": "endpoint_prompts.call",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Call a Prompt.\n\nCalling a Prompt calls the model provider before logging\nthe request, responses and metadata to Humanloop.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Prompt. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nPrompt details in the request body. In this case, we will check if the details correspond\nto an existing version of the Prompt. If they do not, we will create a new version. This is helpful\nin the case where you are storing or deriving your Prompt details in code.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/call"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Prompt to log to."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed version to log to."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Prompt."
              },
              {
                "key": "messages",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:ChatMessage"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The messages passed to the to provider chat endpoint."
              },
              {
                "key": "tool_choice",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_prompts:PromptsCallRequestToolChoice"
                      }
                    }
                  }
                },
                "description": "Controls how the model uses tools. The following options are supported: \n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt. \n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt. \n- `'required'` means the model can decide to call one or more of the provided tools. \n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:PromptKernelRequest"
                      }
                    }
                  }
                },
                "description": "Details of your Prompt. A new Prompt version will be created if the provided details are new."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
              },
              {
                "key": "trace_parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The ID of the parent Log to nest this Log under in a Trace."
              },
              {
                "key": "batches",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID related to the Log."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the Environment the Log is associated to."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "provider_api_keys",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ProviderApiKeys"
                      }
                    }
                  }
                },
                "description": "API keys required by each provider to make API calls. The API keys provided here are not stored by Humanloop. If not specified here, Humanloop will fall back to the key saved to your organization."
              },
              {
                "key": "num_samples",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "The number of generations."
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "literal",
                    "value": {
                      "type": "booleanLiteral",
                      "value": false
                    }
                  }
                },
                "description": "If true, tokens will be sent as data-only server-sent events. If num_samples > 1, samples are streamed back independently."
              },
              {
                "key": "return_inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether to return the inputs in the response. If false, the response will contain an empty dictionary under inputs. This is useful for reducing the size of the response. Defaults to true."
              },
              {
                "key": "logprobs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Include the log probabilities of the top n tokens in the provider_response"
              },
              {
                "key": "suffix",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The suffix that comes after a completion of inserted text. Useful for completions that act like inserts."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptCallResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/call",
            "responseStatusCode": 200,
            "name": "Supplying Prompt with Tool",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "path": "persona",
                "messages": [
                  {
                    "role": "user",
                    "content": "latest apple"
                  }
                ],
                "prompt": {
                  "model": "gpt-4",
                  "template": [
                    {
                      "role": "system",
                      "content": "You are stockbot. Return latest prices."
                    }
                  ],
                  "tools": [
                    {
                      "name": "get_stock_price",
                      "description": "Get current stock price",
                      "parameters": {
                        "type": "object",
                        "properties": {
                          "ticker_symbol": {
                            "type": "string",
                            "name": "Ticker Symbol",
                            "description": "Ticker symbol of the stock"
                          }
                        },
                        "required": []
                      }
                    }
                  ]
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "prompt": {
                  "path": "persona",
                  "id": "pr_3usCu3dAkgrXTlufrvPs7",
                  "model": "gpt-4",
                  "name": "persona",
                  "version_id": "prv_Wu6zx1lAWJRqOyL8nWuZk",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "version_logs_count": 1,
                  "total_logs_count": 1,
                  "inputs": [
                    {
                      "name": "person"
                    }
                  ],
                  "template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                    }
                  ],
                  "provider": "openai",
                  "type": "prompt"
                },
                "id": "data_fIfEb1SoKZooqeFbi9IFs",
                "logs": [
                  {
                    "index": 0,
                    "output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time.\n People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "created_at": "2024-05-01T12:00:00Z",
                    "output_message": {
                      "role": "assistant",
                      "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time.\n People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!"
                    },
                    "prompt_tokens": 34,
                    "output_tokens": 125,
                    "finish_reason": "stop"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/call \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"path\": \"persona\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"latest apple\"\n    }\n  ],\n  \"prompt\": {\n    \"model\": \"gpt-4\",\n    \"template\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are stockbot. Return latest prices.\"\n      }\n    ],\n    \"tools\": [\n      {\n        \"name\": \"get_stock_price\",\n        \"description\": \"Get current stock price\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"ticker_symbol\": {\n              \"type\": \"string\",\n              \"name\": \"Ticker Symbol\",\n              \"description\": \"Ticker symbol of the stock\"\n            }\n          },\n          \"required\": []\n        }\n      }\n    ]\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.call(\n    path=\"persona\",\n    prompt={\n        \"model\": \"gpt-4\",\n        \"template\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are stockbot. Return latest prices.\",\n            }\n        ],\n        \"tools\": [\n            {\n                \"name\": \"get_stock_price\",\n                \"description\": \"Get current stock price\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"ticker_symbol\": {\n                            \"type\": \"string\",\n                            \"name\": \"Ticker Symbol\",\n                            \"description\": \"Ticker symbol of the stock\",\n                        }\n                    },\n                    \"required\": [],\n                },\n            }\n        ],\n    },\n    messages=[{\"role\": \"user\", \"content\": \"latest apple\"}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.call({\n    path: \"persona\",\n    prompt: {\n        model: \"gpt-4\",\n        template: [{\n                role: \"system\",\n                content: \"You are stockbot. Return latest prices.\"\n            }],\n        tools: [{\n                name: \"get_stock_price\",\n                description: \"Get current stock price\",\n                parameters: {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"ticker_symbol\": {\n                            \"type\": \"string\",\n                            \"name\": \"Ticker Symbol\",\n                            \"description\": \"Ticker symbol of the stock\"\n                        }\n                    },\n                    \"required\": []\n                }\n            }]\n    },\n    messages: [{\n            role: \"user\",\n            content: \"latest apple\"\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/call",
            "responseStatusCode": 200,
            "name": "Supplying Prompt",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false,
                "path": "persona",
                "messages": [
                  {
                    "role": "user",
                    "content": "What really happened at Roswell?"
                  }
                ],
                "prompt": {
                  "model": "gpt-4",
                  "template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                    }
                  ]
                },
                "inputs": {
                  "person": "Trump"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "prompt": {
                  "path": "persona",
                  "id": "pr_3usCu3dAkgrXTlufrvPs7",
                  "model": "gpt-4",
                  "name": "persona",
                  "version_id": "prv_Wu6zx1lAWJRqOyL8nWuZk",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "version_logs_count": 1,
                  "total_logs_count": 1,
                  "inputs": [
                    {
                      "name": "person"
                    }
                  ],
                  "template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                    }
                  ],
                  "provider": "openai",
                  "type": "prompt"
                },
                "id": "data_fIfEb1SoKZooqeFbi9IFs",
                "logs": [
                  {
                    "index": 0,
                    "output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time.\n People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "created_at": "2024-05-01T12:00:00Z",
                    "output_message": {
                      "role": "assistant",
                      "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time.\n People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!"
                    },
                    "prompt_tokens": 34,
                    "output_tokens": 125,
                    "finish_reason": "stop"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/call \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false,\n  \"path\": \"persona\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What really happened at Roswell?\"\n    }\n  ],\n  \"prompt\": {\n    \"model\": \"gpt-4\",\n    \"template\": [\n      {\n        \"role\": \"system\",\n        \"content\": \"You are {{person}}. Answer any questions as this person. Do not break character.\"\n      }\n    ]\n  },\n  \"inputs\": {\n    \"person\": \"Trump\"\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.call(\n    path=\"persona\",\n    prompt={\n        \"model\": \"gpt-4\",\n        \"template\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are {{person}}. Answer any questions as this person. Do not break character.\",\n            }\n        ],\n    },\n    messages=[{\"role\": \"user\", \"content\": \"What really happened at Roswell?\"}],\n    inputs={\"person\": \"Trump\"},\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.call({\n    path: \"persona\",\n    prompt: {\n        model: \"gpt-4\",\n        template: [{\n                role: \"system\",\n                content: \"You are {{person}}. Answer any questions as this person. Do not break character.\"\n            }]\n    },\n    messages: [{\n            role: \"user\",\n            content: \"What really happened at Roswell?\"\n        }],\n    inputs: {\n        \"person\": \"Trump\"\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/call",
            "responseStatusCode": 200,
            "name": "By ID",
            "pathParameters": {},
            "queryParameters": {
              "version_id": "prv_Wu6zx1lAWJRqOyL8nWuZk"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "persona",
                "messages": [
                  {
                    "role": "user",
                    "content": "What really happened at Roswell?"
                  }
                ],
                "inputs": {
                  "person": "Trump"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "prompt": {
                  "path": "persona",
                  "id": "pr_3usCu3dAkgrXTlufrvPs7",
                  "model": "gpt-4",
                  "name": "persona",
                  "version_id": "prv_Wu6zx1lAWJRqOyL8nWuZk",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "version_logs_count": 1,
                  "total_logs_count": 1,
                  "inputs": [
                    {
                      "name": "person"
                    }
                  ],
                  "template": [
                    {
                      "role": "system",
                      "content": "You are {{person}}. Answer any questions as this person. Do not break character."
                    }
                  ],
                  "provider": "openai",
                  "type": "prompt"
                },
                "id": "data_fIfEb1SoKZooqeFbi9IFs",
                "logs": [
                  {
                    "index": 0,
                    "output": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time.\n People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!",
                    "created_at": "2024-05-01T12:00:00Z",
                    "output_message": {
                      "role": "assistant",
                      "content": "Well, let me tell you, there are a lot of stories about Roswell, and I hear them all the time.\n People love to talk about Roswell. So many theories, so many ideas. Some folks believe it was a weather balloon, others say it was something out of this world. Believe me, there's plenty that we don't know. Very interesting to look into, but the truth, well, it might still be out there. Could be a great story, who knows? But what I do know, folks, is that we have to keep our eyes open and always be on the lookout for the truth!"
                    },
                    "prompt_tokens": 34,
                    "output_tokens": 125,
                    "finish_reason": "stop"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/call?version_id=prv_Wu6zx1lAWJRqOyL8nWuZk\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"persona\",\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"What really happened at Roswell?\"\n    }\n  ],\n  \"inputs\": {\n    \"person\": \"Trump\"\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.call(\n    version_id=\"prv_Wu6zx1lAWJRqOyL8nWuZk\",\n    path=\"persona\",\n    messages=[{\"role\": \"user\", \"content\": \"What really happened at Roswell?\"}],\n    inputs={\"person\": \"Trump\"},\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.call({\n    versionId: \"prv_Wu6zx1lAWJRqOyL8nWuZk\",\n    path: \"persona\",\n    messages: [{\n            role: \"user\",\n            content: \"What really happened at Roswell?\"\n        }],\n    inputs: {\n        \"person\": \"Trump\"\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/call",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "stream": false
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/call?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"stream\": false\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.call(\n    path=\"persona\",\n    prompt={\n        \"model\": \"gpt-4\",\n        \"template\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are stockbot. Return latest prices.\",\n            }\n        ],\n        \"tools\": [\n            {\n                \"name\": \"get_stock_price\",\n                \"description\": \"Get current stock price\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"ticker_symbol\": {\n                            \"type\": \"string\",\n                            \"name\": \"Ticker Symbol\",\n                            \"description\": \"Ticker symbol of the stock\",\n                        }\n                    },\n                    \"required\": [],\n                },\n            }\n        ],\n    },\n    messages=[{\"role\": \"user\", \"content\": \"latest apple\"}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.call({\n    path: \"persona\",\n    prompt: {\n        model: \"gpt-4\",\n        template: [{\n                role: \"system\",\n                content: \"You are stockbot. Return latest prices.\"\n            }],\n        tools: [{\n                name: \"get_stock_price\",\n                description: \"Get current stock price\",\n                parameters: {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"ticker_symbol\": {\n                            \"type\": \"string\",\n                            \"name\": \"Ticker Symbol\",\n                            \"description\": \"Ticker symbol of the stock\"\n                        }\n                    },\n                    \"required\": []\n                }\n            }]\n    },\n    messages: [{\n            role: \"user\",\n            content: \"latest apple\"\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.call(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "messages: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "content: $FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "[\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "text: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "text"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:TextChatContent"
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "url: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "image_url.url"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "enum",
                                                            "imports": [],
                                                            "isOptional": true,
                                                            "values": {
                                                              "high": "Humanloop.ImageUrlDetail.High",
                                                              "low": "Humanloop.ImageUrlDetail.Low",
                                                              "auto": "Humanloop.ImageUrlDetail.Auto"
                                                            },
                                                            "templateString": "detail: $FERN_INPUT",
                                                            "templateInput": {
                                                              "location": "RELATIVE",
                                                              "path": "image_url.detail"
                                                            }
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "id",
                                                "value": "type_:ImageChatContent"
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      },
                                      "type": {
                                        "type": "list",
                                        "itemType": {
                                          "type": "id",
                                          "value": "type_:ChatMessageContentItem"
                                        }
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "content"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "toolCallId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "tool_call_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "user": "Humanloop.ChatRole.User",
                                    "assistant": "Humanloop.ChatRole.Assistant",
                                    "system": "Humanloop.ChatRole.System",
                                    "tool": "Humanloop.ChatRole.Tool"
                                  },
                                  "templateString": "role: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "role"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "toolCalls: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "id: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "id"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "function: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "name: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.name"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "arguments: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "function.arguments"
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "tool_calls"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "messages"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "toolChoice: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"none\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "none"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"auto\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "auto"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "\"required\"",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "literal",
                                "value": {
                                  "type": "stringLiteral",
                                  "value": "required"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "function: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "name: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "function.name"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:ToolChoice"
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "tool_choice"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "prompt: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "model: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.model"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "complete": "Humanloop.ModelEndpoints.Complete",
                                  "chat": "Humanloop.ModelEndpoints.Chat",
                                  "edit": "Humanloop.ModelEndpoints.Edit"
                                },
                                "templateString": "endpoint: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.endpoint"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "template: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "union_v2",
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "content: $FERN_INPUT",
                                              "members": [
                                                {
                                                  "template": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "type": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                {
                                                  "template": {
                                                    "type": "iterable",
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "containerTemplateString": "[\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t]",
                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "innerTemplate": {
                                                      "type": "union_v2",
                                                      "imports": [],
                                                      "isOptional": true,
                                                      "templateString": "$FERN_INPUT",
                                                      "members": [
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "text: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "text"
                                                                    }
                                                                  ]
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:TextChatContent"
                                                          }
                                                        },
                                                        {
                                                          "template": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "$FERN_INPUT",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                  "isOptional": true,
                                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                  "templateInputs": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "type": {
                                                            "type": "id",
                                                            "value": "type_:ImageChatContent"
                                                          }
                                                        }
                                                      ],
                                                      "templateInput": {
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    },
                                                    "templateInput": {
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  },
                                                  "type": {
                                                    "type": "list",
                                                    "itemType": {
                                                      "type": "id",
                                                      "value": "type_:ChatMessageContentItem"
                                                    }
                                                  }
                                                }
                                              ],
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "content"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "toolCallId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "tool_call_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "enum",
                                              "imports": [],
                                              "isOptional": true,
                                              "values": {
                                                "user": "Humanloop.ChatRole.User",
                                                "assistant": "Humanloop.ChatRole.Assistant",
                                                "system": "Humanloop.ChatRole.System",
                                                "tool": "Humanloop.ChatRole.Tool"
                                              },
                                              "templateString": "role: $FERN_INPUT",
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "role"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "id: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "id"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "function: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "name: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "function.name"
                                                              }
                                                            ]
                                                          }
                                                        },
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "arguments: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "function.arguments"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "tool_calls"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "id",
                                        "value": "type_:ChatMessage"
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.template"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "openai": "Humanloop.ModelProviders.Openai",
                                  "openai_azure": "Humanloop.ModelProviders.OpenaiAzure",
                                  "mock": "Humanloop.ModelProviders.Mock",
                                  "anthropic": "Humanloop.ModelProviders.Anthropic",
                                  "bedrock": "Humanloop.ModelProviders.Bedrock",
                                  "cohere": "Humanloop.ModelProviders.Cohere",
                                  "replicate": "Humanloop.ModelProviders.Replicate",
                                  "google": "Humanloop.ModelProviders.Google",
                                  "groq": "Humanloop.ModelProviders.Groq"
                                },
                                "templateString": "provider: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.provider"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "maxTokens: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.max_tokens"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "temperature: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.temperature"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "topP: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.top_p"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "union_v2",
                                "imports": [],
                                "isOptional": true,
                                "templateString": "stop: $FERN_INPUT",
                                "members": [
                                  {
                                    "template": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "$FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": null
                                        }
                                      ]
                                    },
                                    "type": {
                                      "type": "primitive",
                                      "value": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "template": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    },
                                    "type": {
                                      "type": "list",
                                      "itemType": {
                                        "type": "primitive",
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                ],
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.stop"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "presencePenalty: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.presence_penalty"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "frequencyPenalty: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.frequency_penalty"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "other: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.other"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "seed: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "prompt.seed"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "responseFormat: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "json_object": "Humanloop.ResponseFormatType.JsonObject",
                                        "json_schema": "Humanloop.ResponseFormatType.JsonSchema"
                                      },
                                      "templateString": "type: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "prompt.response_format.type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "jsonSchema: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "prompt.response_format.json_schema"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "tools: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "name: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "description: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "description"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strict: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "strict"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "parameters: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "parameters"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.tools"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "linkedTools: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.linked_tools"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "attributes: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "prompt.attributes"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceDatapointId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_datapoint_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceParentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "batches: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "batches"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "user: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "user"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "promptsCallRequestEnvironment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "save: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "save"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerApiKeys: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "openai: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.openai"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "ai21: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.ai21"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "mock: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.mock"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "anthropic: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.anthropic"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "bedrock: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.bedrock"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "cohere: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.cohere"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "openaiAzure: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.openai_azure"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "openaiAzureEndpoint: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "provider_api_keys.openai_azure_endpoint"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "numSamples: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "num_samples"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "returnInputs: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "return_inputs"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "logprobs: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "logprobs"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "suffix: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "suffix"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.list": {
        "id": "endpoint_prompts.list",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Get a list of all Prompts.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/prompts"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page number for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Prompts to fetch."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for Prompt name."
          },
          {
            "key": "user_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for users in the Prompt. This filter matches against both email address and name of users."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort Prompts by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataPromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "Personal Projects/Coding Assistant",
                    "id": "pr_30gco7dx6JDq4200GVOHa",
                    "model": "gpt-4o",
                    "name": "Coding Assistant",
                    "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                    "created_at": "2024-07-08T22:40:35.656915",
                    "updated_at": "2024-07-08T22:40:35.656915",
                    "status": "committed",
                    "last_used_at": "2024-07-08T22:40:35.656915",
                    "version_logs_count": 0,
                    "total_logs_count": 0,
                    "inputs": [
                      {
                        "name": "messages"
                      }
                    ],
                    "endpoint": "chat",
                    "template": [
                      {
                        "content": "You are a helpful coding assistant specialising in {{language}}",
                        "role": "system"
                      }
                    ],
                    "provider": "openai",
                    "max_tokens": -1,
                    "temperature": 0.7,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "other": {},
                    "tools": [],
                    "linked_tools": [],
                    "commit_message": "Initial commit",
                    "type": "prompt",
                    "environments": [
                      {
                        "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                        "created_at": "2023-06-27T23:16:07.992339",
                        "name": "development",
                        "tag": "default"
                      }
                    ],
                    "created_by": {
                      "id": "usr_01RJO1k2spBVqNUt1ASef",
                      "email_address": "raza@humanloop.com",
                      "full_name": "Raza Habib"
                    }
                  }
                ],
                "page": 0,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/prompts \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.prompts.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/prompts \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.prompts.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "userFilter: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "user_filter"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "created_at": "Humanloop.ProjectSortBy.CreatedAt",
                            "updated_at": "Humanloop.ProjectSortBy.UpdatedAt",
                            "name": "Humanloop.ProjectSortBy.Name"
                          },
                          "templateString": "sortBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "sort_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "asc": "Humanloop.SortOrder.Asc",
                            "desc": "Humanloop.SortOrder.Desc"
                          },
                          "templateString": "order: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "order"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.upsert": {
        "id": "endpoint_prompts.upsert",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Create a Prompt or update it with a new version if it already exists.\n\nPrompts are identified by the `ID` or their `path`. The parameters (i.e. the prompt template, temperature, model etc.) determine the versions of the Prompt.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Prompt, including the name. This locates the Prompt in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Prompt."
              },
              {
                "key": "model",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)"
              },
              {
                "key": "endpoint",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ModelEndpoints"
                      }
                    }
                  }
                },
                "description": "The provider model endpoint used."
              },
              {
                "key": "template",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_prompts:PromptRequestTemplate"
                      }
                    }
                  }
                },
                "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
              },
              {
                "key": "provider",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ModelProviders"
                      }
                    }
                  }
                },
                "description": "The company providing the underlying model service."
              },
              {
                "key": "max_tokens",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": -1
                        }
                      }
                    }
                  }
                },
                "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
              },
              {
                "key": "temperature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
              },
              {
                "key": "top_p",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 1
                        }
                      }
                    }
                  }
                },
                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
              },
              {
                "key": "stop",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_prompts:PromptRequestStop"
                      }
                    }
                  }
                },
                "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
              },
              {
                "key": "presence_penalty",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 0
                        }
                      }
                    }
                  }
                },
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
              },
              {
                "key": "frequency_penalty",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 0
                        }
                      }
                    }
                  }
                },
                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
              },
              {
                "key": "other",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Other parameter values to be passed to the provider call."
              },
              {
                "key": "seed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
              },
              {
                "key": "response_format",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ResponseFormat"
                      }
                    }
                  }
                },
                "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
              },
              {
                "key": "tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:ToolFunction"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The tool specification that the model can choose to call if Tool calling is supported."
              },
              {
                "key": "linked_tools",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The IDs of the Tools in your organization that the model can choose to call if Tool calling is supported. The default deployed version of that tool is called."
              },
              {
                "key": "attributes",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Additional fields to describe the Prompt. Helpful to separate Prompt versions from each other with details on how they were created or used."
              },
              {
                "key": "commit_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Message describing the changes made."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts",
            "responseStatusCode": 200,
            "name": "Upsert prompt",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "model": "gpt-4o",
                "path": "Personal Projects/Coding Assistant",
                "endpoint": "chat",
                "template": [
                  {
                    "content": "You are a helpful coding assistant specialising in {{language}}",
                    "role": "system"
                  }
                ],
                "provider": "openai",
                "max_tokens": -1,
                "temperature": 0.7,
                "top_p": 1,
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "other": {},
                "tools": [],
                "linked_tools": [],
                "commit_message": "Initial commit"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Personal Projects/Coding Assistant",
                "id": "pr_30gco7dx6JDq4200GVOHa",
                "model": "gpt-4o",
                "name": "Coding Assistant",
                "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                "created_at": "2024-07-08T22:40:35.656915",
                "updated_at": "2024-07-08T22:40:35.656915",
                "status": "committed",
                "last_used_at": "2024-07-08T22:40:35.656915",
                "version_logs_count": 0,
                "total_logs_count": 0,
                "inputs": [
                  {
                    "name": "messages"
                  }
                ],
                "endpoint": "chat",
                "template": [
                  {
                    "content": "You are a helpful coding assistant specialising in {{language}}",
                    "role": "system"
                  }
                ],
                "provider": "openai",
                "max_tokens": -1,
                "temperature": 0.7,
                "top_p": 1,
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "other": {},
                "tools": [],
                "linked_tools": [],
                "commit_message": "Initial commit",
                "type": "prompt",
                "environments": [
                  {
                    "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                    "created_at": "2023-06-27T23:16:07.992339",
                    "name": "development",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "usr_01RJO1k2spBVqNUt1ASef",
                  "email_address": "raza@humanloop.com",
                  "full_name": "Raza Habib"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"model\": \"gpt-4o\",\n  \"path\": \"Personal Projects/Coding Assistant\",\n  \"endpoint\": \"chat\",\n  \"template\": [\n    {\n      \"content\": \"You are a helpful coding assistant specialising in {{language}}\",\n      \"role\": \"system\"\n    }\n  ],\n  \"provider\": \"openai\",\n  \"max_tokens\": -1,\n  \"temperature\": 0.7,\n  \"top_p\": 1,\n  \"presence_penalty\": 0,\n  \"frequency_penalty\": 0,\n  \"other\": {},\n  \"tools\": [],\n  \"linked_tools\": [],\n  \"commit_message\": \"Initial commit\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.upsert(\n    path=\"Personal Projects/Coding Assistant\",\n    model=\"gpt-4o\",\n    endpoint=\"chat\",\n    template=[\n        {\n            \"content\": \"You are a helpful coding assistant specialising in {{language}}\",\n            \"role\": \"system\",\n        }\n    ],\n    provider=\"openai\",\n    max_tokens=-1,\n    temperature=0.7,\n    top_p=1.0,\n    presence_penalty=0.0,\n    frequency_penalty=0.0,\n    other={},\n    tools=[],\n    linked_tools=[],\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.upsert({\n    path: \"Personal Projects/Coding Assistant\",\n    model: \"gpt-4o\",\n    endpoint: \"chat\",\n    template: [{\n            content: \"You are a helpful coding assistant specialising in {{language}}\",\n            role: \"system\"\n        }],\n    provider: \"openai\",\n    maxTokens: -1,\n    temperature: 0.7,\n    topP: 1,\n    presencePenalty: 0,\n    frequencyPenalty: 0,\n    other: {},\n    tools: [],\n    linkedTools: [],\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "model": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"model\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.upsert(\n    path=\"Personal Projects/Coding Assistant\",\n    model=\"gpt-4o\",\n    endpoint=\"chat\",\n    template=[\n        {\n            \"content\": \"You are a helpful coding assistant specialising in {{language}}\",\n            \"role\": \"system\",\n        }\n    ],\n    provider=\"openai\",\n    max_tokens=-1,\n    temperature=0.7,\n    top_p=1.0,\n    presence_penalty=0.0,\n    frequency_penalty=0.0,\n    other={},\n    tools=[],\n    linked_tools=[],\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.upsert({\n    path: \"Personal Projects/Coding Assistant\",\n    model: \"gpt-4o\",\n    endpoint: \"chat\",\n    template: [{\n            content: \"You are a helpful coding assistant specialising in {{language}}\",\n            role: \"system\"\n        }],\n    provider: \"openai\",\n    maxTokens: -1,\n    temperature: 0.7,\n    topP: 1,\n    presencePenalty: 0,\n    frequencyPenalty: 0,\n    other: {},\n    tools: [],\n    linkedTools: [],\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.upsert(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "model: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "model"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "complete": "Humanloop.ModelEndpoints.Complete",
                            "chat": "Humanloop.ModelEndpoints.Chat",
                            "edit": "Humanloop.ModelEndpoints.Edit"
                          },
                          "templateString": "endpoint: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "endpoint"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "template: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "union_v2",
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "content: $FERN_INPUT",
                                        "members": [
                                          {
                                            "template": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "type": {
                                              "type": "primitive",
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          {
                                            "template": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "union_v2",
                                                "imports": [],
                                                "isOptional": true,
                                                "templateString": "$FERN_INPUT",
                                                "members": [
                                                  {
                                                    "template": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "text: $FERN_INPUT",
                                                            "isOptional": true,
                                                            "templateInputs": [
                                                              {
                                                                "type": "payload",
                                                                "location": "RELATIVE",
                                                                "path": "text"
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "type": {
                                                      "type": "id",
                                                      "value": "type_:TextChatContent"
                                                    }
                                                  },
                                                  {
                                                    "template": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                      "templateInputs": [
                                                        {
                                                          "type": "template",
                                                          "value": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "url: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "image_url.url"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "enum",
                                                                  "imports": [],
                                                                  "isOptional": true,
                                                                  "values": {
                                                                    "high": "Humanloop.ImageUrlDetail.High",
                                                                    "low": "Humanloop.ImageUrlDetail.Low",
                                                                    "auto": "Humanloop.ImageUrlDetail.Auto"
                                                                  },
                                                                  "templateString": "detail: $FERN_INPUT",
                                                                  "templateInput": {
                                                                    "location": "RELATIVE",
                                                                    "path": "image_url.detail"
                                                                  }
                                                                }
                                                              }
                                                            ]
                                                          }
                                                        }
                                                      ]
                                                    },
                                                    "type": {
                                                      "type": "id",
                                                      "value": "type_:ImageChatContent"
                                                    }
                                                  }
                                                ],
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              },
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            },
                                            "type": {
                                              "type": "list",
                                              "itemType": {
                                                "type": "id",
                                                "value": "type_:ChatMessageContentItem"
                                              }
                                            }
                                          }
                                        ],
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "content"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "name: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "name"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "toolCallId: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": "tool_call_id"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "user": "Humanloop.ChatRole.User",
                                          "assistant": "Humanloop.ChatRole.Assistant",
                                          "system": "Humanloop.ChatRole.System",
                                          "tool": "Humanloop.ChatRole.Tool"
                                        },
                                        "templateString": "role: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "role"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "iterable",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t\t\t",
                                        "innerTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                          "isOptional": true,
                                          "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                          "templateInputs": [
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "id: $FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": "id"
                                                  }
                                                ]
                                              }
                                            },
                                            {
                                              "type": "template",
                                              "value": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "function: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                "isOptional": true,
                                                "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                "templateInputs": [
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "name: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "function.name"
                                                        }
                                                      ]
                                                    }
                                                  },
                                                  {
                                                    "type": "template",
                                                    "value": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "arguments: $FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": "function.arguments"
                                                        }
                                                      ]
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "RELATIVE",
                                          "path": "tool_calls"
                                        }
                                      }
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "RELATIVE",
                                  "path": null
                                }
                              },
                              "type": {
                                "type": "list",
                                "itemType": {
                                  "type": "id",
                                  "value": "type_:ChatMessage"
                                }
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "template"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "openai": "Humanloop.ModelProviders.Openai",
                            "openai_azure": "Humanloop.ModelProviders.OpenaiAzure",
                            "mock": "Humanloop.ModelProviders.Mock",
                            "anthropic": "Humanloop.ModelProviders.Anthropic",
                            "bedrock": "Humanloop.ModelProviders.Bedrock",
                            "cohere": "Humanloop.ModelProviders.Cohere",
                            "replicate": "Humanloop.ModelProviders.Replicate",
                            "google": "Humanloop.ModelProviders.Google",
                            "groq": "Humanloop.ModelProviders.Groq"
                          },
                          "templateString": "provider: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "maxTokens: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "max_tokens"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "temperature: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "temperature"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "topP: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "top_p"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "stop: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "RELATIVE",
                                  "path": null
                                }
                              },
                              "type": {
                                "type": "list",
                                "itemType": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "stop"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "presencePenalty: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "presence_penalty"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "frequencyPenalty: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "frequency_penalty"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "other: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "other"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "seed: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "seed"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "responseFormat: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "enum",
                                "imports": [],
                                "isOptional": true,
                                "values": {
                                  "json_object": "Humanloop.ResponseFormatType.JsonObject",
                                  "json_schema": "Humanloop.ResponseFormatType.JsonSchema"
                                },
                                "templateString": "type: $FERN_INPUT",
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "response_format.type"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "jsonSchema: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "response_format.json_schema"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "tools: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "description: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "description"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "strict: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "strict"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "parameters: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "parameters"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "tools"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "linkedTools: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "linked_tools"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "attributes: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "attributes"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "commitMessage: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "commit_message"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.get": {
        "id": "endpoint_prompts.get",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Retrieve the Prompt with the given ID.\n\nBy default, the deployed version of the Prompt is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Prompt.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Prompt to retrieve."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment to retrieve a deployed Version from."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa",
            "responseStatusCode": 200,
            "name": "Get specific prompt",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Personal Projects/Coding Assistant",
                "id": "pr_30gco7dx6JDq4200GVOHa",
                "model": "gpt-4o",
                "name": "Coding Assistant",
                "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                "created_at": "2024-07-08T22:40:35.656915",
                "updated_at": "2024-07-08T22:40:35.656915",
                "status": "committed",
                "last_used_at": "2024-07-08T22:40:35.656915",
                "version_logs_count": 0,
                "total_logs_count": 0,
                "inputs": [
                  {
                    "name": "messages"
                  }
                ],
                "endpoint": "chat",
                "template": [
                  {
                    "content": "You are a helpful coding assistant specialising in {{language}}",
                    "role": "system"
                  }
                ],
                "provider": "openai",
                "max_tokens": -1,
                "temperature": 0.7,
                "top_p": 1,
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "other": {},
                "tools": [],
                "linked_tools": [],
                "commit_message": "Initial commit",
                "type": "prompt",
                "environments": [
                  {
                    "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                    "created_at": "2023-06-27T23:16:07.992339",
                    "name": "development",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "usr_01RJO1k2spBVqNUt1ASef",
                  "email_address": "raza@humanloop.com",
                  "full_name": "Raza Habib"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.get(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.get(\"pr_30gco7dx6JDq4200GVOHa\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/prompts/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=string \\\n     -d environment=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.get(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.get(\"pr_30gco7dx6JDq4200GVOHa\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.delete": {
        "id": "endpoint_prompts.delete",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Delete the Prompt with the given ID.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa",
            "responseStatusCode": 204,
            "name": "Delete prompt",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.delete(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.delete(\"pr_30gco7dx6JDq4200GVOHa\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/prompts/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.delete(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.delete(\"pr_30gco7dx6JDq4200GVOHa\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.move": {
        "id": "endpoint_prompts.move",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Move the Prompt to a different path or change the name.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Prompt including the Prompt name, which is used as a unique identifier."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Prompt."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa",
            "responseStatusCode": 200,
            "name": "Move prompt",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "new directory/new name"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Personal Projects/Coding Assistant",
                "id": "pr_30gco7dx6JDq4200GVOHa",
                "model": "gpt-4o",
                "name": "Coding Assistant",
                "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                "created_at": "2024-07-08T22:40:35.656915",
                "updated_at": "2024-07-08T22:40:35.656915",
                "status": "committed",
                "last_used_at": "2024-07-08T22:40:35.656915",
                "version_logs_count": 0,
                "total_logs_count": 0,
                "inputs": [
                  {
                    "name": "messages"
                  }
                ],
                "endpoint": "chat",
                "template": [
                  {
                    "content": "You are a helpful coding assistant specialising in {{language}}",
                    "role": "system"
                  }
                ],
                "provider": "openai",
                "max_tokens": -1,
                "temperature": 0.7,
                "top_p": 1,
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "other": {},
                "tools": [],
                "linked_tools": [],
                "commit_message": "Initial commit",
                "type": "prompt",
                "environments": [
                  {
                    "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                    "created_at": "2023-06-27T23:16:07.992339",
                    "name": "development",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "usr_01RJO1k2spBVqNUt1ASef",
                  "email_address": "raza@humanloop.com",
                  "full_name": "Raza Habib"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"new directory/new name\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.move(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    path=\"new directory/new name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.move(\"pr_30gco7dx6JDq4200GVOHa\", {\n    path: \"new directory/new name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/prompts/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.move(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    path=\"new directory/new name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.move(\"pr_30gco7dx6JDq4200GVOHa\", {\n    path: \"new directory/new name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.move(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.listVersions": {
        "id": "endpoint_prompts.listVersions",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Get a list of all the versions of a Prompt.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          }
        ],
        "queryParameters": [
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            },
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          },
          {
            "key": "evaluator_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Whether to include Evaluator aggregate results for the versions in the response"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ListPrompts"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa/versions",
            "responseStatusCode": 200,
            "name": "List versions",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa"
            },
            "queryParameters": {
              "status": "committed"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "Personal Projects/Coding Assistant",
                    "id": "pr_30gco7dx6JDq4200GVOHa",
                    "model": "gpt-4o",
                    "name": "Coding Assistant",
                    "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                    "created_at": "2024-07-08T22:40:35.656915",
                    "updated_at": "2024-07-08T22:40:35.656915",
                    "status": "committed",
                    "last_used_at": "2024-07-08T22:40:35.656915",
                    "version_logs_count": 0,
                    "total_logs_count": 0,
                    "inputs": [
                      {
                        "name": "messages"
                      }
                    ],
                    "endpoint": "chat",
                    "template": [
                      {
                        "content": "You are a helpful coding assistant specialising in {{language}}",
                        "role": "system"
                      }
                    ],
                    "provider": "openai",
                    "max_tokens": -1,
                    "temperature": 0.7,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "other": {},
                    "tools": [],
                    "linked_tools": [],
                    "commit_message": "Initial commit",
                    "type": "prompt",
                    "environments": [
                      {
                        "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                        "created_at": "2023-06-27T23:16:07.992339",
                        "name": "development",
                        "tag": "default"
                      }
                    ],
                    "created_by": {
                      "id": "usr_01RJO1k2spBVqNUt1ASef",
                      "email_address": "raza@humanloop.com",
                      "full_name": "Raza Habib"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=committed",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.list_versions(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    status=\"committed\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.listVersions(\"pr_30gco7dx6JDq4200GVOHa\", {\n    status: \"committed\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/versions",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "status": "uncommitted",
              "evaluator_aggregates": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/prompts/:id/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=uncommitted \\\n     -d evaluator_aggregates=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.list_versions(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    status=\"committed\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.listVersions(\"pr_30gco7dx6JDq4200GVOHa\", {\n    status: \"committed\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.listVersions(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "uncommitted": "Humanloop.VersionStatus.Uncommitted",
                            "committed": "Humanloop.VersionStatus.Committed",
                            "deleted": "Humanloop.VersionStatus.Deleted"
                          },
                          "templateString": "status: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "status"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "evaluatorAggregates: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "evaluator_aggregates"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.commit": {
        "id": "endpoint_prompts.commit",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Commit a version of the Prompt with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions/"
          },
          {
            "type": "pathParameter",
            "value": "version_id"
          },
          {
            "type": "literal",
            "value": "/commit"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          },
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Prompt."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CommitRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa/versions/prv_F34aba5f3asp0/commit",
            "responseStatusCode": 200,
            "name": "Commit version",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa",
              "version_id": "prv_F34aba5f3asp0"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "Reiterated point about not discussing sentience"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Personal Projects/Coding Assistant",
                "id": "pr_30gco7dx6JDq4200GVOHa",
                "model": "gpt-4o",
                "name": "Coding Assistant",
                "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                "created_at": "2024-07-08T22:40:35.656915",
                "updated_at": "2024-07-08T22:40:35.656915",
                "status": "committed",
                "last_used_at": "2024-07-08T22:40:35.656915",
                "version_logs_count": 0,
                "total_logs_count": 0,
                "inputs": [
                  {
                    "name": "messages"
                  }
                ],
                "endpoint": "chat",
                "template": [
                  {
                    "content": "You are a helpful coding assistant specialising in {{language}}",
                    "role": "system"
                  }
                ],
                "provider": "openai",
                "max_tokens": -1,
                "temperature": 0.7,
                "top_p": 1,
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "other": {},
                "tools": [],
                "linked_tools": [],
                "commit_message": "Initial commit",
                "type": "prompt",
                "environments": [
                  {
                    "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                    "created_at": "2023-06-27T23:16:07.992339",
                    "name": "development",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "usr_01RJO1k2spBVqNUt1ASef",
                  "email_address": "raza@humanloop.com",
                  "full_name": "Raza Habib"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa/versions/prv_F34aba5f3asp0/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"Reiterated point about not discussing sentience\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.commit(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    version_id=\"prv_F34aba5f3asp0\",\n    commit_message=\"Reiterated point about not discussing sentience\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.commit(\"pr_30gco7dx6JDq4200GVOHa\", \"prv_F34aba5f3asp0\", {\n    commitMessage: \"Reiterated point about not discussing sentience\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/versions/:version_id/commit",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "version_id": ":version_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/:id/versions/:version_id/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.commit(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    version_id=\"prv_F34aba5f3asp0\",\n    commit_message=\"Reiterated point about not discussing sentience\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.commit(\"pr_30gco7dx6JDq4200GVOHa\", \"prv_F34aba5f3asp0\", {\n    commitMessage: \"Reiterated point about not discussing sentience\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.commit(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "commitMessage: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "commit_message"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.updateMonitoring": {
        "id": "endpoint_prompts.updateMonitoring",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Activate and deactivate Evaluators for monitoring the Prompt.\n\nAn activated Evaluator will automatically be run on all new Logs\nwithin the Prompt for monitoring purposes.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorActivationDeactivationRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa/evaluators",
            "responseStatusCode": 200,
            "name": "Add evaluator",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "activate": [
                  {
                    "evaluator_version_id": "evv_1abc4308abd"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Personal Projects/Coding Assistant",
                "id": "pr_30gco7dx6JDq4200GVOHa",
                "model": "gpt-4o",
                "name": "Coding Assistant",
                "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                "created_at": "2024-07-08T22:40:35.656915",
                "updated_at": "2024-07-08T22:40:35.656915",
                "status": "committed",
                "last_used_at": "2024-07-08T22:40:35.656915",
                "version_logs_count": 0,
                "total_logs_count": 0,
                "inputs": [
                  {
                    "name": "messages"
                  }
                ],
                "endpoint": "chat",
                "template": [
                  {
                    "content": "You are a helpful coding assistant specialising in {{language}}",
                    "role": "system"
                  }
                ],
                "provider": "openai",
                "max_tokens": -1,
                "temperature": 0.7,
                "top_p": 1,
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "other": {},
                "tools": [],
                "linked_tools": [],
                "commit_message": "Initial commit",
                "type": "prompt",
                "environments": [
                  {
                    "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                    "created_at": "2023-06-27T23:16:07.992339",
                    "name": "development",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "usr_01RJO1k2spBVqNUt1ASef",
                  "email_address": "raza@humanloop.com",
                  "full_name": "Raza Habib"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"activate\": [\n    {\n      \"evaluator_version_id\": \"evv_1abc4308abd\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.update_monitoring(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    activate=[{\"evaluator_version_id\": \"evv_1abc4308abd\"}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.updateMonitoring(\"pr_30gco7dx6JDq4200GVOHa\", {\n    activate: [{\n            evaluatorVersionId: \"evv_1abc4308abd\"\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/prompts/:id/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.update_monitoring(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n    activate=[{\"evaluator_version_id\": \"evv_1abc4308abd\"}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.updateMonitoring(\"pr_30gco7dx6JDq4200GVOHa\", {\n    activate: [{\n            evaluatorVersionId: \"evv_1abc4308abd\"\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.updateMonitoring(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "activate: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorVersionId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_version_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorVersionRequest"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "environmentId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "environment_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorEnvironmentRequest"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "activate"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "deactivate: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorVersionId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_version_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorVersionRequest"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "environmentId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "environment_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorEnvironmentRequest"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "deactivate"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.setDeployment": {
        "id": "endpoint_prompts.setDeployment",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Deploy Prompt to an Environment.\n\nSet the deployed version for the specified Environment. This Prompt\nwill be used for calls made to the Prompt in this Environment.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to deploy the Version to."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Prompt."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PromptResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/id/environments/environment_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "environment_id": "environment_id"
            },
            "queryParameters": {
              "version_id": "version_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "model": "model",
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "name"
                  }
                ],
                "directory_id": "directory_id",
                "endpoint": "complete",
                "template": "template",
                "provider": "openai",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "other": {
                  "key": "value"
                },
                "seed": 1,
                "response_format": {
                  "type": "json_object",
                  "json_schema": {
                    "key": "value"
                  }
                },
                "tools": [
                  {
                    "name": "name",
                    "description": "description",
                    "strict": true,
                    "parameters": {
                      "key": "value"
                    }
                  }
                ],
                "linked_tools": [
                  {
                    "name": "name",
                    "description": "description",
                    "id": "id",
                    "version_id": "version_id",
                    "strict": true,
                    "parameters": {
                      "key": "value"
                    }
                  }
                ],
                "attributes": {
                  "key": "value"
                },
                "commit_message": "commit_message",
                "type": "prompt",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/id/environments/environment_id?version_id=version_id\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.set_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n    version_id=\"version_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.setDeployment(\"id\", \"environment_id\", {\n    versionId: \"version_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {
              "version_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/prompts/:id/environments/:environment_id?version_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.set_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n    version_id=\"version_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.setDeployment(\"id\", \"environment_id\", {\n    versionId: \"version_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.setDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.removeDeployment": {
        "id": "endpoint_prompts.removeDeployment",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "Remove deployed Prompt from the Environment.\n\nRemove the deployed version for the specified Environment. This Prompt\nwill no longer be used for calls made to the Prompt in this Environment.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to remove the deployment from."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/id/environments/environment_id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id",
              "environment_id": "environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/prompts/id/environments/environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.remove_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.removeDeployment(\"id\", \"environment_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/prompts/:id/environments/:environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.remove_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.removeDeployment(\"id\", \"environment_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.removeDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_prompts.listEnvironments": {
        "id": "endpoint_prompts.listEnvironments",
        "namespace": [
          "subpackage_prompts"
        ],
        "description": "List all Environments and their deployed versions for the Prompt.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/prompts/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileEnvironmentResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/prompts/pr_30gco7dx6JDq4200GVOHa/environments",
            "responseStatusCode": 200,
            "name": "List environments",
            "pathParameters": {
              "id": "pr_30gco7dx6JDq4200GVOHa"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "pr_30gco7dx6JDq4200GVOHa",
                  "created_at": "2024-05-01T12:00:00Z",
                  "name": "production",
                  "tag": "default",
                  "file": {
                    "path": "Personal Projects/Coding Assistant",
                    "id": "pr_30gco7dx6JDq4200GVOHa",
                    "name": "Coding Assistant",
                    "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                    "type": "prompt",
                    "environments": [
                      {
                        "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                        "created_at": "2023-06-27T23:16:07.992339",
                        "name": "development",
                        "tag": "default"
                      }
                    ],
                    "created_at": "2024-07-08T22:40:35.656915",
                    "updated_at": "2024-07-08T22:40:35.656915",
                    "created_by": {
                      "id": "usr_01RJO1k2spBVqNUt1ASef",
                      "email_address": "raza@humanloop.com",
                      "full_name": "Raza Habib"
                    },
                    "status": "committed",
                    "last_used_at": "2024-07-08T22:40:35.656915",
                    "model": "gpt-4o",
                    "endpoint": "chat",
                    "template": [
                      {
                        "content": "You are a helpful coding assistant specialising in {{language}}",
                        "role": "system"
                      }
                    ],
                    "provider": "openai",
                    "max_tokens": -1,
                    "temperature": 0.7,
                    "top_p": 1,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "other": {},
                    "tools": [],
                    "linked_tools": [],
                    "commit_message": "Initial commit",
                    "version_logs_count": 0,
                    "total_logs_count": 0,
                    "inputs": [
                      {
                        "name": "messages"
                      }
                    ]
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/prompts/pr_30gco7dx6JDq4200GVOHa/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.list_environments(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.listEnvironments(\"pr_30gco7dx6JDq4200GVOHa\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/prompts/:id/environments",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/prompts/:id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.prompts.list_environments(\n    id=\"pr_30gco7dx6JDq4200GVOHa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.prompts.listEnvironments(\"pr_30gco7dx6JDq4200GVOHa\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.prompts.listEnvironments(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.log": {
        "id": "endpoint_tools.log",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Log to a Tool.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Tool. Otherwise the default deployed version will be chosen.\n\nInstead of targeting an existing version explicitly, you can instead pass in\nTool details in the request body. In this case, we will check if the details correspond\nto an existing version of the Tool, if not we will create a new version. This is helpful\nin the case where you are storing or deriving your Tool details in code.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tools/log"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Tool to log to."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed version to log to."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Tool, including the name. This locates the Tool in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Tool."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              },
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
              },
              {
                "key": "created_at",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "User defined timestamp for when the log was created. "
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error message if the log is an error."
              },
              {
                "key": "provider_latency",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Duration of the logged event in seconds."
              },
              {
                "key": "stdout",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Captured log and debug statements."
              },
              {
                "key": "provider_request",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw request sent to provider."
              },
              {
                "key": "provider_response",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw response received the provider."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
              },
              {
                "key": "trace_parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The ID of the parent Log to nest this Log under in a Trace."
              },
              {
                "key": "batches",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID related to the Log."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the Environment the Log is associated to."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "tool",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ToolKernelRequest"
                      }
                    }
                  }
                },
                "description": "Details of your Tool. A new Tool version will be created if the provided details are new."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CreateToolLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/log",
            "responseStatusCode": 200,
            "name": "Tool log",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "output": "35",
                "inputs": {
                  "a": 5,
                  "b": 7
                },
                "tool": {
                  "function": {
                    "name": "multiply",
                    "description": "Multiply two numbers",
                    "parameters": {
                      "type": "object",
                      "properties": {
                        "a": {
                          "type": "number"
                        },
                        "b": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "a",
                        "b"
                      ]
                    }
                  }
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "data_abc123",
                "tool_id": "tl_def456",
                "version_id": "tv_ghi789",
                "session_id": "sesh_hw012"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools/log \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"math-tool\",\n  \"output\": \"35\",\n  \"inputs\": {\n    \"a\": 5,\n    \"b\": 7\n  },\n  \"tool\": {\n    \"function\": {\n      \"name\": \"multiply\",\n      \"description\": \"Multiply two numbers\",\n      \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"a\": {\n            \"type\": \"number\"\n          },\n          \"b\": {\n            \"type\": \"number\"\n          }\n        },\n        \"required\": [\n          \"a\",\n          \"b\"\n        ]\n      }\n    }\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.log(\n    path=\"math-tool\",\n    tool={\n        \"function\": {\n            \"name\": \"multiply\",\n            \"description\": \"Multiply two numbers\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"a\": {\"type\": \"number\"},\n                    \"b\": {\"type\": \"number\"},\n                },\n                \"required\": [\"a\", \"b\"],\n            },\n        }\n    },\n    inputs={\"a\": 5, \"b\": 7},\n    output=\"35\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.log({\n    path: \"math-tool\",\n    tool: {\n        function: {\n            name: \"multiply\",\n            description: \"Multiply two numbers\",\n            parameters: {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"a\": {\n                        \"type\": \"number\"\n                    },\n                    \"b\": {\n                        \"type\": \"number\"\n                    }\n                },\n                \"required\": [\n                    \"a\",\n                    \"b\"\n                ]\n            }\n        }\n    },\n    inputs: {\n        \"a\": 5,\n        \"b\": 7\n    },\n    output: \"35\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/log",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/tools/log?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.log(\n    path=\"math-tool\",\n    tool={\n        \"function\": {\n            \"name\": \"multiply\",\n            \"description\": \"Multiply two numbers\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"a\": {\"type\": \"number\"},\n                    \"b\": {\"type\": \"number\"},\n                },\n                \"required\": [\"a\", \"b\"],\n            },\n        }\n    },\n    inputs={\"a\": 5, \"b\": 7},\n    output=\"35\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.log({\n    path: \"math-tool\",\n    tool: {\n        function: {\n            name: \"multiply\",\n            description: \"Multiply two numbers\",\n            parameters: {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"a\": {\n                        \"type\": \"number\"\n                    },\n                    \"b\": {\n                        \"type\": \"number\"\n                    }\n                },\n                \"required\": [\n                    \"a\",\n                    \"b\"\n                ]\n            }\n        }\n    },\n    inputs: {\n        \"a\": 5,\n        \"b\": 7\n    },\n    output: \"35\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.log(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerLatency: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provider_latency"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stdout: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stdout"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerRequest: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_request"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerResponse: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_response"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceDatapointId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_datapoint_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceParentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "batches: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "batches"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "user: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "user"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "toolLogRequestEnvironment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "save: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "save"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "tool: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "function: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "name: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "BODY",
                                          "path": "tool.function.name"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "description: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "BODY",
                                          "path": "tool.function.description"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "strict: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "BODY",
                                          "path": "tool.function.strict"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "parameters: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "tool.function.parameters"
                                      }
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "sourceCode: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "tool.source_code"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "setupValues: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "tool.setup_values"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "attributes: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "tool.attributes"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.update": {
        "id": "endpoint_tools.update",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Update a Log.\n\nUpdate the details of a Log with the given ID.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/log/"
          },
          {
            "type": "pathParameter",
            "value": "log_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          },
          {
            "key": "log_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Log."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
              },
              {
                "key": "created_at",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "User defined timestamp for when the log was created. "
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error message if the log is an error."
              },
              {
                "key": "provider_latency",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Duration of the logged event in seconds."
              },
              {
                "key": "stdout",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Captured log and debug statements."
              },
              {
                "key": "provider_request",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw request sent to provider."
              },
              {
                "key": "provider_response",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw response received the provider."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/id/log/log_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "log_id": "log_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "output_message": {
                  "content": "content",
                  "name": "name",
                  "tool_call_id": "tool_call_id",
                  "role": "user",
                  "tool_calls": [
                    {
                      "id": "id",
                      "type": "function",
                      "function": {
                        "name": "name"
                      }
                    }
                  ]
                },
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "finish_reason": "finish_reason",
                "messages": [
                  {
                    "content": "content",
                    "name": "name",
                    "tool_call_id": "tool_call_id",
                    "role": "user",
                    "tool_calls": [
                      {
                        "id": "id",
                        "type": "function",
                        "function": {
                          "name": "name"
                        }
                      }
                    ]
                  }
                ],
                "tool_choice": "none",
                "prompt": {
                  "path": "path",
                  "id": "id",
                  "directory_id": "directory_id",
                  "model": "model",
                  "endpoint": "complete",
                  "template": "template",
                  "provider": "openai",
                  "max_tokens": 1,
                  "temperature": 1.1,
                  "top_p": 1.1,
                  "stop": "stop",
                  "presence_penalty": 1.1,
                  "frequency_penalty": 1.1,
                  "other": {
                    "key": "value"
                  },
                  "seed": 1,
                  "response_format": {
                    "type": "json_object",
                    "json_schema": {
                      "key": "value"
                    }
                  },
                  "tools": [
                    {
                      "name": "name",
                      "description": "description"
                    }
                  ],
                  "linked_tools": [
                    {
                      "name": "name",
                      "description": "description",
                      "id": "id",
                      "version_id": "version_id"
                    }
                  ],
                  "attributes": {
                    "key": "value"
                  },
                  "commit_message": "commit_message",
                  "name": "name",
                  "version_id": "version_id",
                  "type": "prompt",
                  "environments": [
                    {
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "tag": "default"
                    }
                  ],
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  },
                  "status": "uncommitted",
                  "last_used_at": "2024-01-15T09:30:00Z",
                  "version_logs_count": 1,
                  "total_logs_count": 1,
                  "inputs": [
                    {
                      "name": "name"
                    }
                  ],
                  "evaluator_aggregates": [
                    {
                      "value": 1.1,
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ]
                },
                "start_time": "2024-01-15T09:30:00Z",
                "end_time": "2024-01-15T09:30:00Z",
                "output": "output",
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "provider_latency": 1.1,
                "stdout": "stdout",
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "source_datapoint_id": "source_datapoint_id",
                "trace_parent_id": "trace_parent_id",
                "batches": [
                  "batches"
                ],
                "user": "user",
                "environment": "environment",
                "save": true,
                "id": "id",
                "evaluator_logs": [
                  {
                    "start_time": "2024-01-15T09:30:00Z",
                    "end_time": "2024-01-15T09:30:00Z",
                    "output": "output",
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "provider_latency": 1.1,
                    "stdout": "stdout",
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "parent_id": "parent_id",
                    "source_datapoint_id": "source_datapoint_id",
                    "trace_parent_id": "trace_parent_id",
                    "batches": [
                      "batches"
                    ],
                    "user": "user",
                    "environment": "environment",
                    "save": true,
                    "judgment": true,
                    "id": "id",
                    "evaluator_logs": [],
                    "trace_flow_id": "trace_flow_id",
                    "trace_id": "trace_id",
                    "evaluator": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ],
                "trace_flow_id": "trace_flow_id",
                "trace_id": "trace_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/tools/id/log/log_id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.update(\n    id=\"id\",\n    log_id=\"log_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.update(\"id\", \"log_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/log/:log_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "log_id": ":log_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/tools/:id/log/:log_id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.update(\n    id=\"id\",\n    log_id=\"log_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.update(\"id\", \"log_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.update(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "log_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerLatency: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provider_latency"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stdout: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stdout"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerRequest: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_request"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerResponse: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_response"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.list": {
        "id": "endpoint_tools.list",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Get a list of all Tools.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tools"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page offset for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Tools to fetch."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for Tool name."
          },
          {
            "key": "user_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for users in the Tool. This filter matches against both email address and name of users."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort Tools by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools",
            "responseStatusCode": 200,
            "name": "List tools",
            "pathParameters": {},
            "queryParameters": {
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "math-tool",
                    "id": "tl_789ghi",
                    "name": "math-tool",
                    "version_id": "tv_012jkl",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "operation"
                      }
                    ],
                    "type": "tool"
                  }
                ],
                "page": 0,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/tools \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.tools.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/tools \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.tools.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "userFilter: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "user_filter"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "created_at": "Humanloop.ProjectSortBy.CreatedAt",
                            "updated_at": "Humanloop.ProjectSortBy.UpdatedAt",
                            "name": "Humanloop.ProjectSortBy.Name"
                          },
                          "templateString": "sortBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "sort_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "asc": "Humanloop.SortOrder.Asc",
                            "desc": "Humanloop.SortOrder.Desc"
                          },
                          "templateString": "order: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "order"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.upsert": {
        "id": "endpoint_tools.upsert",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Create a Tool or update it with a new version if it already exists.\n\nTools are identified by the `ID` or their `path`. The name, description and parameters determine the versions of the Tool.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tools"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Tool, including the name. This locates the Tool in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Tool."
              },
              {
                "key": "function",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ToolFunction"
                      }
                    }
                  }
                },
                "description": "Callable function specification of the Tool shown to the model for tool calling."
              },
              {
                "key": "source_code",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Code source of the Tool."
              },
              {
                "key": "setup_values",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
              },
              {
                "key": "attributes",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used."
              },
              {
                "key": "tool_type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:FilesToolType"
                      }
                    }
                  }
                },
                "description": "Type of Tool."
              },
              {
                "key": "commit_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Message describing the changes made."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools",
            "responseStatusCode": 200,
            "name": "Create tool",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "function": {
                  "name": "multiply",
                  "description": "Multiply two numbers",
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "a": {
                        "type": "number"
                      },
                      "b": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "a",
                      "b"
                    ]
                  }
                },
                "commit_message": "Initial commit"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "id": "tl_789ghi",
                "name": "math-tool",
                "version_id": "tv_012jkl",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "operation"
                  }
                ],
                "type": "tool"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"math-tool\",\n  \"function\": {\n    \"name\": \"multiply\",\n    \"description\": \"Multiply two numbers\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"a\": {\n          \"type\": \"number\"\n        },\n        \"b\": {\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"a\",\n        \"b\"\n      ]\n    }\n  },\n  \"commit_message\": \"Initial commit\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.upsert(\n    path=\"math-tool\",\n    function={\n        \"name\": \"multiply\",\n        \"description\": \"Multiply two numbers\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\"a\": {\"type\": \"number\"}, \"b\": {\"type\": \"number\"}},\n            \"required\": [\"a\", \"b\"],\n        },\n    },\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.upsert({\n    path: \"math-tool\",\n    function: {\n        name: \"multiply\",\n        description: \"Multiply two numbers\",\n        parameters: {\n            \"type\": \"object\",\n            \"properties\": {\n                \"a\": {\n                    \"type\": \"number\"\n                },\n                \"b\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"a\",\n                \"b\"\n            ]\n        }\n    },\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.upsert(\n    path=\"math-tool\",\n    function={\n        \"name\": \"multiply\",\n        \"description\": \"Multiply two numbers\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\"a\": {\"type\": \"number\"}, \"b\": {\"type\": \"number\"}},\n            \"required\": [\"a\", \"b\"],\n        },\n    },\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.upsert({\n    path: \"math-tool\",\n    function: {\n        name: \"multiply\",\n        description: \"Multiply two numbers\",\n        parameters: {\n            \"type\": \"object\",\n            \"properties\": {\n                \"a\": {\n                    \"type\": \"number\"\n                },\n                \"b\": {\n                    \"type\": \"number\"\n                }\n            },\n            \"required\": [\n                \"a\",\n                \"b\"\n            ]\n        }\n    },\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.upsert(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "function: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "name: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "function.name"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "description: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "function.description"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "strict: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "function.strict"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "parameters: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "function.parameters"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceCode: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_code"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "setupValues: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "setup_values"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "attributes: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "attributes"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "pinecone_search": "Humanloop.FilesToolType.PineconeSearch",
                            "google": "Humanloop.FilesToolType.Google",
                            "mock": "Humanloop.FilesToolType.Mock",
                            "snippet": "Humanloop.FilesToolType.Snippet",
                            "json_schema": "Humanloop.FilesToolType.JsonSchema",
                            "get_api_call": "Humanloop.FilesToolType.GetApiCall"
                          },
                          "templateString": "toolType: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "tool_type"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "commitMessage: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "commit_message"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.get": {
        "id": "endpoint_tools.get",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Retrieve the Tool with the given ID.\n\nBy default, the deployed version of the Tool is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Tool.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Tool to retrieve."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment to retrieve a deployed Version from."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi",
            "responseStatusCode": 200,
            "name": "Get specific tool",
            "pathParameters": {
              "id": "tl_789ghi"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "id": "tl_789ghi",
                "name": "math-tool",
                "version_id": "tv_012jkl",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "operation"
                  }
                ],
                "type": "tool"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/tools/tl_789ghi \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.get(\n    id=\"tl_789ghi\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.get(\"tl_789ghi\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/tools/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=string \\\n     -d environment=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.get(\n    id=\"tl_789ghi\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.get(\"tl_789ghi\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.delete": {
        "id": "endpoint_tools.delete",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Delete the Tool with the given ID.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi",
            "responseStatusCode": 204,
            "name": "Delete tool",
            "pathParameters": {
              "id": "tl_789ghi"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/tools/tl_789ghi \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.delete(\n    id=\"tl_789ghi\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.delete(\"tl_789ghi\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/tools/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.delete(\n    id=\"tl_789ghi\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.delete(\"tl_789ghi\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.move": {
        "id": "endpoint_tools.move",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Move the Tool to a different path or change the name.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Tool including the Tool name, which is used as a unique identifier."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Tool, which is used as a unique identifier."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi",
            "responseStatusCode": 200,
            "name": "Move tool",
            "pathParameters": {
              "id": "tl_789ghi"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "new directory/new name"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "id": "tl_789ghi",
                "name": "math-tool",
                "version_id": "tv_012jkl",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "operation"
                  }
                ],
                "type": "tool"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/tools/tl_789ghi \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"new directory/new name\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.move(\n    id=\"tl_789ghi\",\n    path=\"new directory/new name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.move(\"tl_789ghi\", {\n    path: \"new directory/new name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/tools/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.move(\n    id=\"tl_789ghi\",\n    path=\"new directory/new name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.move(\"tl_789ghi\", {\n    path: \"new directory/new name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.move(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.listVersions": {
        "id": "endpoint_tools.listVersions",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Get a list of all the versions of a Tool.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Tool."
          }
        ],
        "queryParameters": [
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            },
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          },
          {
            "key": "evaluator_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Whether to include Evaluator aggregate results for the versions in the response"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ListTools"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi/versions",
            "responseStatusCode": 200,
            "name": "List versions",
            "pathParameters": {
              "id": "tl_789ghi"
            },
            "queryParameters": {
              "status": "committed"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "math-tool",
                    "id": "tl_789ghi",
                    "name": "math-tool",
                    "version_id": "tv_012jkl",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "operation"
                      }
                    ],
                    "type": "tool"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/tools/tl_789ghi/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=committed",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.list_versions(\n    id=\"tl_789ghi\",\n    status=\"committed\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.listVersions(\"tl_789ghi\", {\n    status: \"committed\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/versions",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "status": "uncommitted",
              "evaluator_aggregates": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/tools/:id/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=uncommitted \\\n     -d evaluator_aggregates=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.list_versions(\n    id=\"tl_789ghi\",\n    status=\"committed\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.listVersions(\"tl_789ghi\", {\n    status: \"committed\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.listVersions(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "uncommitted": "Humanloop.VersionStatus.Uncommitted",
                            "committed": "Humanloop.VersionStatus.Committed",
                            "deleted": "Humanloop.VersionStatus.Deleted"
                          },
                          "templateString": "status: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "status"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "evaluatorAggregates: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "evaluator_aggregates"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.commit": {
        "id": "endpoint_tools.commit",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Commit a version of the Tool with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions/"
          },
          {
            "type": "pathParameter",
            "value": "version_id"
          },
          {
            "type": "literal",
            "value": "/commit"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          },
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Tool."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CommitRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi/versions/tv_012jkl/commit",
            "responseStatusCode": 200,
            "name": "Commit version",
            "pathParameters": {
              "id": "tl_789ghi",
              "version_id": "tv_012jkl"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "Initial commit"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "id": "tl_789ghi",
                "name": "math-tool",
                "version_id": "tv_012jkl",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "operation"
                  }
                ],
                "type": "tool"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools/tl_789ghi/versions/tv_012jkl/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"Initial commit\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.commit(\n    id=\"tl_789ghi\",\n    version_id=\"tv_012jkl\",\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.commit(\"tl_789ghi\", \"tv_012jkl\", {\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/versions/:version_id/commit",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "version_id": ":version_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools/:id/versions/:version_id/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.commit(\n    id=\"tl_789ghi\",\n    version_id=\"tv_012jkl\",\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.commit(\"tl_789ghi\", \"tv_012jkl\", {\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.commit(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "commitMessage: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "commit_message"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.updateMonitoring": {
        "id": "endpoint_tools.updateMonitoring",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Activate and deactivate Evaluators for monitoring the Tool.\n\nAn activated Evaluator will automatically be run on all new Logs\nwithin the Tool for monitoring purposes.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorActivationDeactivationRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi/evaluators",
            "responseStatusCode": 200,
            "name": "Update monitoring",
            "pathParameters": {
              "id": "tl_789ghi"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "activate": [
                  {
                    "evaluator_version_id": "evv_1abc4308abd"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "id": "tl_789ghi",
                "name": "math-tool",
                "version_id": "tv_012jkl",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "operation"
                  }
                ],
                "type": "tool"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools/tl_789ghi/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"activate\": [\n    {\n      \"evaluator_version_id\": \"evv_1abc4308abd\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.update_monitoring(\n    id=\"tl_789ghi\",\n    activate=[{\"evaluator_version_id\": \"evv_1abc4308abd\"}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.updateMonitoring(\"tl_789ghi\", {\n    activate: [{\n            evaluatorVersionId: \"evv_1abc4308abd\"\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/tools/:id/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.update_monitoring(\n    id=\"tl_789ghi\",\n    activate=[{\"evaluator_version_id\": \"evv_1abc4308abd\"}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.updateMonitoring(\"tl_789ghi\", {\n    activate: [{\n            evaluatorVersionId: \"evv_1abc4308abd\"\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.updateMonitoring(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "activate: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorVersionId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_version_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorVersionRequest"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "environmentId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "environment_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorEnvironmentRequest"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "activate"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "deactivate: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorVersionId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_version_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorVersionRequest"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "environmentId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "environment_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorEnvironmentRequest"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "deactivate"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.setDeployment": {
        "id": "endpoint_tools.setDeployment",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Deploy Tool to an Environment.\n\nSet the deployed version for the specified Environment. This Prompt\nwill be used for calls made to the Tool in this Environment.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to deploy the Version to."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Tool."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ToolResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi/environments/staging",
            "responseStatusCode": 200,
            "name": "Deploy",
            "pathParameters": {
              "id": "tl_789ghi",
              "environment_id": "staging"
            },
            "queryParameters": {
              "version_id": "tv_012jkl"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "math-tool",
                "id": "tl_789ghi",
                "name": "math-tool",
                "version_id": "tv_012jkl",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "operation"
                  }
                ],
                "type": "tool"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/tools/tl_789ghi/environments/staging?version_id=tv_012jkl\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.set_deployment(\n    id=\"tl_789ghi\",\n    environment_id=\"staging\",\n    version_id=\"tv_012jkl\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.setDeployment(\"tl_789ghi\", \"staging\", {\n    versionId: \"tv_012jkl\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {
              "version_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/tools/:id/environments/:environment_id?version_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.set_deployment(\n    id=\"tl_789ghi\",\n    environment_id=\"staging\",\n    version_id=\"tv_012jkl\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.setDeployment(\"tl_789ghi\", \"staging\", {\n    versionId: \"tv_012jkl\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.setDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.removeDeployment": {
        "id": "endpoint_tools.removeDeployment",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "Remove deployed Tool from the Environment.\n\nRemove the deployed version for the specified Environment. This Tool\nwill no longer be used for calls made to the Tool in this Environment.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to remove the deployment from."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi/environments/staging",
            "responseStatusCode": 204,
            "name": "Delete environment",
            "pathParameters": {
              "id": "tl_789ghi",
              "environment_id": "staging"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/tools/tl_789ghi/environments/staging \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.remove_deployment(\n    id=\"tl_789ghi\",\n    environment_id=\"staging\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.removeDeployment(\"tl_789ghi\", \"staging\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/tools/:id/environments/:environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.remove_deployment(\n    id=\"tl_789ghi\",\n    environment_id=\"staging\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.removeDeployment(\"tl_789ghi\", \"staging\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.removeDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tools.listEnvironments": {
        "id": "endpoint_tools.listEnvironments",
        "namespace": [
          "subpackage_tools"
        ],
        "description": "List all Environments and their deployed versions for the Tool.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tools/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Tool."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileEnvironmentResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/tools/tl_789ghi/environments",
            "responseStatusCode": 200,
            "name": "List environments",
            "pathParameters": {
              "id": "tl_789ghi"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "tl_789ghi",
                  "created_at": "2024-05-01T12:00:00Z",
                  "name": "production",
                  "tag": "default",
                  "file": {
                    "id": "tl_789ghi",
                    "path": "math-tool",
                    "name": "math-tool",
                    "version_id": "tv_012jkl",
                    "type": "tool",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "operation"
                      }
                    ]
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/tools/tl_789ghi/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.list_environments(\n    id=\"tl_789ghi\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.listEnvironments(\"tl_789ghi\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tools/:id/environments",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/tools/:id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tools.list_environments(\n    id=\"tl_789ghi\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tools.listEnvironments(\"tl_789ghi\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tools.listEnvironments(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.list": {
        "id": "endpoint_datasets.list",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "List all Datasets.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page offset for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Datasets to fetch."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for Dataset name."
          },
          {
            "key": "user_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort Datasets by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets",
            "responseStatusCode": 200,
            "name": "List datasets",
            "pathParameters": {},
            "queryParameters": {
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "test-questions",
                    "id": "ds_345mno",
                    "name": "test-questions",
                    "version_id": "dsv_678pqr",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "datapoints_count": 2,
                    "type": "dataset",
                    "created_by": {
                      "id": "usr_v23rSVAgas2a",
                      "full_name": "Jordan Burges",
                      "email_address": "jordan@humanloop.com"
                    },
                    "commit_message": "initial commit"
                  }
                ],
                "page": 0,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.datasets.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.datasets.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "userFilter: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "user_filter"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "created_at": "Humanloop.ProjectSortBy.CreatedAt",
                            "updated_at": "Humanloop.ProjectSortBy.UpdatedAt",
                            "name": "Humanloop.ProjectSortBy.Name"
                          },
                          "templateString": "sortBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "sort_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "asc": "Humanloop.SortOrder.Asc",
                            "desc": "Humanloop.SortOrder.Desc"
                          },
                          "templateString": "order: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "order"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.upsert": {
        "id": "endpoint_datasets.upsert",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Create a Dataset or update it with a new version if it already exists.\n\nDatasets are identified by the `ID` or their `path`. The datapoints determine the versions of the Dataset.\n\nBy default, the new Dataset version will be set to the list of Datapoints provided in\nthe request. You can also create a new version by adding or removing Datapoints from an existing version\nby specifying `action` as `add` or `remove` respectively. In this case, you may specify\nthe `version_id` or `environment` query parameters to identify the existing version to base\nthe new version on. If neither is provided, the default deployed version will be used.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.\n\nHumanloop also deduplicates Datapoints. If you try to add a Datapoint that already\nexists, it will be ignored. If you intentionally want to add a duplicate Datapoint,\nyou can add a unique identifier to the Datapoint's inputs such as `{_dedupe_id: <unique ID>}`.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/datasets"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "ID of the specific Dataset version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `\"add\"` or `\"remove\"`."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Dataset, including the name. This locates the Dataset in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Dataset."
              },
              {
                "key": "datapoints",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:CreateDatapointRequest"
                      }
                    }
                  }
                },
                "description": "The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used."
              },
              {
                "key": "action",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:UpdateDatesetAction"
                      }
                    }
                  }
                },
                "description": "The action to take with the provided Datapoints.\n\n - If `\"set\"`, the created version will only contain the Datapoints provided in this request. \n - If `\"add\"`, the created version will contain the Datapoints provided in this request in addition to the Datapoints in the target version. \n - If `\"remove\"`, the created version will contain the Datapoints in the target version except for the Datapoints provided in this request. \n\nIf `\"add\"` or `\"remove\"`, one of the `version_id` or `environment` query parameters may be provided."
              },
              {
                "key": "attributes",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used."
              },
              {
                "key": "commit_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets",
            "responseStatusCode": 200,
            "name": "AddToDataset",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "datapoints": [
                  {
                    "inputs": {
                      "question": "What is the capital of France?"
                    },
                    "target": {
                      "answer": "Paris"
                    }
                  },
                  {
                    "inputs": {
                      "question": "Who wrote Hamlet?"
                    },
                    "target": {
                      "answer": "William Shakespeare"
                    }
                  }
                ],
                "path": "test-questions",
                "action": "set",
                "commit_message": "Add two new questions and answers"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "test-questions",
                "id": "ds_mno345",
                "name": "test-questions",
                "version_id": "dsv_pqr678",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "datapoints_count": 4,
                "type": "dataset"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/datasets \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"datapoints\": [\n    {\n      \"inputs\": {\n        \"question\": \"What is the capital of France?\"\n      },\n      \"target\": {\n        \"answer\": \"Paris\"\n      }\n    },\n    {\n      \"inputs\": {\n        \"question\": \"Who wrote Hamlet?\"\n      },\n      \"target\": {\n        \"answer\": \"William Shakespeare\"\n      }\n    }\n  ],\n  \"path\": \"test-questions\",\n  \"action\": \"set\",\n  \"commit_message\": \"Add two new questions and answers\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.upsert(\n    path=\"test-questions\",\n    datapoints=[\n        {\n            \"inputs\": {\"question\": \"What is the capital of France?\"},\n            \"target\": {\"answer\": \"Paris\"},\n        },\n        {\n            \"inputs\": {\"question\": \"Who wrote Hamlet?\"},\n            \"target\": {\"answer\": \"William Shakespeare\"},\n        },\n    ],\n    action=\"set\",\n    commit_message=\"Add two new questions and answers\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.upsert({\n    path: \"test-questions\",\n    datapoints: [{\n            inputs: {\n                \"question\": \"What is the capital of France?\"\n            },\n            target: {\n                \"answer\": \"Paris\"\n            }\n        }, {\n            inputs: {\n                \"question\": \"Who wrote Hamlet?\"\n            },\n            target: {\n                \"answer\": \"William Shakespeare\"\n            }\n        }],\n    action: \"set\",\n    commitMessage: \"Add two new questions and answers\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets",
            "responseStatusCode": 200,
            "name": "CreateSupportDataset",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "datapoints": [
                  {
                    "messages": [
                      {
                        "role": "user",
                        "content": "How do i manage my organizations API keys?\n"
                      }
                    ],
                    "target": {
                      "response": "Hey, thanks for your questions. Here are steps for how to achieve: 1. Log in to the Humanloop Dashboard \n\n2. Click on \"Organization Settings.\"\n If you do not see this option, you might need to contact your organization admin to gain the necessary permissions.\n\n3. Within the settings or organization settings, select the option labeled \"API Keys\" on the left. Here you will be able to view and manage your API keys.\n\n4. You will see a list of existing API keys. You can perform various actions, such as:\n     - **Generate New API Key:** Click on the \"Generate New Key\" button if you need a new API key.\n     - **Revoke an API Key:** If you need to disable an existing key, find the key in the list and click the \"Revoke\" or \"Delete\" button.\n     - **Copy an API Key:** If you need to use an existing key, you can copy it to your clipboard by clicking the \"Copy\" button next to the key.\n\n5. **Save and Secure API Keys:** Make sure to securely store any new or existing API keys you are using. Treat them like passwords and do not share them publicly.\n\nIf you encounter any issues or need further assistance, it might be helpful to engage with an engineer or your IT department to ensure you have the necessary permissions and support.\n\nWould you need help with anything else?"
                    }
                  },
                  {
                    "messages": [
                      {
                        "role": "user",
                        "content": "Hey, can do I use my code evaluator for monitoring my legal-copilot prompt?"
                      }
                    ],
                    "target": {
                      "response": "Hey, thanks for your questions. Here are steps for how to achieve: 1. Navigate to your Prompt dashboard. \n 2. Select the `Monitoring` button on the top right of the Prompt dashboard \n 3. Within the model select the Version of the Evaluator you want to turn on for monitoring. \n\nWould you need help with anything else?"
                    }
                  }
                ],
                "path": "datasets/support-queries",
                "commit_message": "Add two new questions and answers"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "test-questions",
                "id": "ds_mno345",
                "name": "test-questions",
                "version_id": "dsv_pqr678",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "datapoints_count": 4,
                "type": "dataset"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/datasets \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"datapoints\": [\n    {\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"How do i manage my organizations API keys?\\n\"\n        }\n      ],\n      \"target\": {\n        \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Log in to the Humanloop Dashboard \\n\\n2. Click on \\\"Organization Settings.\\\"\\n If you do not see this option, you might need to contact your organization admin to gain the necessary permissions.\\n\\n3. Within the settings or organization settings, select the option labeled \\\"API Keys\\\" on the left. Here you will be able to view and manage your API keys.\\n\\n4. You will see a list of existing API keys. You can perform various actions, such as:\\n     - **Generate New API Key:** Click on the \\\"Generate New Key\\\" button if you need a new API key.\\n     - **Revoke an API Key:** If you need to disable an existing key, find the key in the list and click the \\\"Revoke\\\" or \\\"Delete\\\" button.\\n     - **Copy an API Key:** If you need to use an existing key, you can copy it to your clipboard by clicking the \\\"Copy\\\" button next to the key.\\n\\n5. **Save and Secure API Keys:** Make sure to securely store any new or existing API keys you are using. Treat them like passwords and do not share them publicly.\\n\\nIf you encounter any issues or need further assistance, it might be helpful to engage with an engineer or your IT department to ensure you have the necessary permissions and support.\\n\\nWould you need help with anything else?\"\n      }\n    },\n    {\n      \"messages\": [\n        {\n          \"role\": \"user\",\n          \"content\": \"Hey, can do I use my code evaluator for monitoring my legal-copilot prompt?\"\n        }\n      ],\n      \"target\": {\n        \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Navigate to your Prompt dashboard. \\n 2. Select the `Monitoring` button on the top right of the Prompt dashboard \\n 3. Within the model select the Version of the Evaluator you want to turn on for monitoring. \\n\\nWould you need help with anything else?\"\n      }\n    }\n  ],\n  \"path\": \"datasets/support-queries\",\n  \"commit_message\": \"Add two new questions and answers\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.upsert(\n    path=\"datasets/support-queries\",\n    datapoints=[\n        {\n            \"messages\": [\n                {\n                    \"role\": \"user\",\n                    \"content\": \"How do i manage my organizations API keys?\\n\",\n                }\n            ],\n            \"target\": {\n                \"response\": 'Hey, thanks for your questions. Here are steps for how to achieve: 1. Log in to the Humanloop Dashboard \\n\\n2. Click on \"Organization Settings.\"\\n If you do not see this option, you might need to contact your organization admin to gain the necessary permissions.\\n\\n3. Within the settings or organization settings, select the option labeled \"API Keys\" on the left. Here you will be able to view and manage your API keys.\\n\\n4. You will see a list of existing API keys. You can perform various actions, such as:\\n     - **Generate New API Key:** Click on the \"Generate New Key\" button if you need a new API key.\\n     - **Revoke an API Key:** If you need to disable an existing key, find the key in the list and click the \"Revoke\" or \"Delete\" button.\\n     - **Copy an API Key:** If you need to use an existing key, you can copy it to your clipboard by clicking the \"Copy\" button next to the key.\\n\\n5. **Save and Secure API Keys:** Make sure to securely store any new or existing API keys you are using. Treat them like passwords and do not share them publicly.\\n\\nIf you encounter any issues or need further assistance, it might be helpful to engage with an engineer or your IT department to ensure you have the necessary permissions and support.\\n\\nWould you need help with anything else?'\n            },\n        },\n        {\n            \"messages\": [\n                {\n                    \"role\": \"user\",\n                    \"content\": \"Hey, can do I use my code evaluator for monitoring my legal-copilot prompt?\",\n                }\n            ],\n            \"target\": {\n                \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Navigate to your Prompt dashboard. \\n 2. Select the `Monitoring` button on the top right of the Prompt dashboard \\n 3. Within the model select the Version of the Evaluator you want to turn on for monitoring. \\n\\nWould you need help with anything else?\"\n            },\n        },\n    ],\n    commit_message=\"Add two new questions and answers\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.upsert({\n    path: \"datasets/support-queries\",\n    datapoints: [{\n            messages: [{\n                    role: \"user\",\n                    content: \"How do i manage my organizations API keys?\\n\"\n                }],\n            target: {\n                \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Log in to the Humanloop Dashboard \\n\\n2. Click on \\\"Organization Settings.\\\"\\n If you do not see this option, you might need to contact your organization admin to gain the necessary permissions.\\n\\n3. Within the settings or organization settings, select the option labeled \\\"API Keys\\\" on the left. Here you will be able to view and manage your API keys.\\n\\n4. You will see a list of existing API keys. You can perform various actions, such as:\\n     - **Generate New API Key:** Click on the \\\"Generate New Key\\\" button if you need a new API key.\\n     - **Revoke an API Key:** If you need to disable an existing key, find the key in the list and click the \\\"Revoke\\\" or \\\"Delete\\\" button.\\n     - **Copy an API Key:** If you need to use an existing key, you can copy it to your clipboard by clicking the \\\"Copy\\\" button next to the key.\\n\\n5. **Save and Secure API Keys:** Make sure to securely store any new or existing API keys you are using. Treat them like passwords and do not share them publicly.\\n\\nIf you encounter any issues or need further assistance, it might be helpful to engage with an engineer or your IT department to ensure you have the necessary permissions and support.\\n\\nWould you need help with anything else?\"\n            }\n        }, {\n            messages: [{\n                    role: \"user\",\n                    content: \"Hey, can do I use my code evaluator for monitoring my legal-copilot prompt?\"\n                }],\n            target: {\n                \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Navigate to your Prompt dashboard. \\n 2. Select the `Monitoring` button on the top right of the Prompt dashboard \\n 3. Within the model select the Version of the Evaluator you want to turn on for monitoring. \\n\\nWould you need help with anything else?\"\n            }\n        }],\n    commitMessage: \"Add two new questions and answers\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "datapoints": [
                  {}
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/datasets?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"datapoints\": [\n    {}\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.upsert(\n    path=\"test-questions\",\n    datapoints=[\n        {\n            \"inputs\": {\"question\": \"What is the capital of France?\"},\n            \"target\": {\"answer\": \"Paris\"},\n        },\n        {\n            \"inputs\": {\"question\": \"Who wrote Hamlet?\"},\n            \"target\": {\"answer\": \"William Shakespeare\"},\n        },\n    ],\n    action=\"set\",\n    commit_message=\"Add two new questions and answers\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.upsert({\n    path: \"datasets/support-queries\",\n    datapoints: [{\n            messages: [{\n                    role: \"user\",\n                    content: \"How do i manage my organizations API keys?\\n\"\n                }],\n            target: {\n                \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Log in to the Humanloop Dashboard \\n\\n2. Click on \\\"Organization Settings.\\\"\\n If you do not see this option, you might need to contact your organization admin to gain the necessary permissions.\\n\\n3. Within the settings or organization settings, select the option labeled \\\"API Keys\\\" on the left. Here you will be able to view and manage your API keys.\\n\\n4. You will see a list of existing API keys. You can perform various actions, such as:\\n     - **Generate New API Key:** Click on the \\\"Generate New Key\\\" button if you need a new API key.\\n     - **Revoke an API Key:** If you need to disable an existing key, find the key in the list and click the \\\"Revoke\\\" or \\\"Delete\\\" button.\\n     - **Copy an API Key:** If you need to use an existing key, you can copy it to your clipboard by clicking the \\\"Copy\\\" button next to the key.\\n\\n5. **Save and Secure API Keys:** Make sure to securely store any new or existing API keys you are using. Treat them like passwords and do not share them publicly.\\n\\nIf you encounter any issues or need further assistance, it might be helpful to engage with an engineer or your IT department to ensure you have the necessary permissions and support.\\n\\nWould you need help with anything else?\"\n            }\n        }, {\n            messages: [{\n                    role: \"user\",\n                    content: \"Hey, can do I use my code evaluator for monitoring my legal-copilot prompt?\"\n                }],\n            target: {\n                \"response\": \"Hey, thanks for your questions. Here are steps for how to achieve: 1. Navigate to your Prompt dashboard. \\n 2. Select the `Monitoring` button on the top right of the Prompt dashboard \\n 3. Within the model select the Version of the Evaluator you want to turn on for monitoring. \\n\\nWould you need help with anything else?\"\n            }\n        }],\n    commitMessage: \"Add two new questions and answers\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.upsert(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "datapoints: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "inputs: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "inputs"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "messages: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "union_v2",
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "content: $FERN_INPUT",
                                          "members": [
                                            {
                                              "template": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "type": {
                                                "type": "primitive",
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            {
                                              "template": {
                                                "type": "iterable",
                                                "imports": [],
                                                "isOptional": true,
                                                "containerTemplateString": "[\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t]",
                                                "delimiter": ",\n\t\t\t\t\t\t\t\t",
                                                "innerTemplate": {
                                                  "type": "union_v2",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "templateString": "$FERN_INPUT",
                                                  "members": [
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "text: $FERN_INPUT",
                                                              "isOptional": true,
                                                              "templateInputs": [
                                                                {
                                                                  "type": "payload",
                                                                  "location": "RELATIVE",
                                                                  "path": "text"
                                                                }
                                                              ]
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:TextChatContent"
                                                      }
                                                    },
                                                    {
                                                      "template": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "$FERN_INPUT",
                                                        "isOptional": true,
                                                        "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                        "templateInputs": [
                                                          {
                                                            "type": "template",
                                                            "value": {
                                                              "type": "generic",
                                                              "imports": [],
                                                              "templateString": "imageUrl: {\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                              "isOptional": true,
                                                              "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                              "templateInputs": []
                                                            }
                                                          }
                                                        ]
                                                      },
                                                      "type": {
                                                        "type": "id",
                                                        "value": "type_:ImageChatContent"
                                                      }
                                                    }
                                                  ],
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "templateInput": {
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              },
                                              "type": {
                                                "type": "list",
                                                "itemType": {
                                                  "type": "id",
                                                  "value": "type_:ChatMessageContentItem"
                                                }
                                              }
                                            }
                                          ],
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "content"
                                          }
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "name: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "name"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "toolCallId: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "tool_call_id"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "enum",
                                          "imports": [],
                                          "isOptional": true,
                                          "values": {
                                            "user": "Humanloop.ChatRole.User",
                                            "assistant": "Humanloop.ChatRole.Assistant",
                                            "system": "Humanloop.ChatRole.System",
                                            "tool": "Humanloop.ChatRole.Tool"
                                          },
                                          "templateString": "role: $FERN_INPUT",
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "role"
                                          }
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "id: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": "id"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "function: {\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t}",
                                                  "isOptional": true,
                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                  "templateInputs": [
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "name: $FERN_INPUT",
                                                        "isOptional": true,
                                                        "templateInputs": [
                                                          {
                                                            "type": "payload",
                                                            "location": "RELATIVE",
                                                            "path": "function.name"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "arguments: $FERN_INPUT",
                                                        "isOptional": true,
                                                        "templateInputs": [
                                                          {
                                                            "type": "payload",
                                                            "location": "RELATIVE",
                                                            "path": "function.arguments"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": "tool_calls"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "messages"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "target: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "union_v2",
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "members": [
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "integer"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "double"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "type": {
                                          "type": "primitive",
                                          "value": {
                                            "type": "boolean"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "type": {
                                          "type": "list",
                                          "itemType": {
                                            "type": "unknown"
                                          }
                                        }
                                      },
                                      {
                                        "template": {
                                          "type": "dict",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                          "delimiter": ",\n\t\t\t\t\t\t\t",
                                          "keyValueSeparator": ": ",
                                          "keyTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "valueTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "type": {
                                          "type": "map",
                                          "keyType": {
                                            "type": "primitive",
                                            "value": {
                                              "type": "string"
                                            }
                                          },
                                          "valueType": {
                                            "type": "unknown"
                                          }
                                        }
                                      }
                                    ],
                                    "templateInput": {
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "target"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "datapoints"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "set": "Humanloop.UpdateDatesetAction.Set",
                            "add": "Humanloop.UpdateDatesetAction.Add",
                            "remove": "Humanloop.UpdateDatesetAction.Remove"
                          },
                          "templateString": "action: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "action"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "attributes: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "attributes"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "commitMessage: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "commit_message"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.get": {
        "id": "endpoint_datasets.get",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Retrieve the Dataset with the given ID.\n\nUnless `include_datapoints` is set to `true`, the response will not include\nthe Datapoints.\nUse the List Datapoints endpoint (`GET /{id}/datapoints`) to efficiently\nretrieve Datapoints for a large Dataset.\n\nBy default, the deployed version of the Dataset is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Dataset.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Dataset to retrieve."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment to retrieve a deployed Version from."
          },
          {
            "key": "include_datapoints",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/ds_b0baF1ca7652",
            "responseStatusCode": 200,
            "name": "Get dataset",
            "pathParameters": {
              "id": "ds_b0baF1ca7652"
            },
            "queryParameters": {
              "version_id": "dsv_6L78pqrdFi2xa",
              "include_datapoints": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "test-questions",
                "id": "ds_345mno",
                "name": "test-questions",
                "version_id": "dsv_678pqr",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "datapoints_count": 2,
                "type": "dataset",
                "datapoints": [
                  {
                    "id": "dp_123456",
                    "inputs": {
                      "question": "What is the capital of France?"
                    },
                    "target": {
                      "answer": "Paris"
                    }
                  },
                  {
                    "id": "dp_789012",
                    "inputs": {
                      "question": "Who wrote Hamlet?"
                    },
                    "target": {
                      "answer": "William Shakespeare"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets/ds_b0baF1ca7652 \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=dsv_6L78pqrdFi2xa \\\n     -d include_datapoints=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.get(\n    id=\"ds_b0baF1ca7652\",\n    version_id=\"dsv_6L78pqrdFi2xa\",\n    include_datapoints=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.get(\"ds_b0baF1ca7652\", {\n    versionId: \"dsv_6L78pqrdFi2xa\",\n    includeDatapoints: true\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=string \\\n     -d environment=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.get(\n    id=\"ds_b0baF1ca7652\",\n    version_id=\"dsv_6L78pqrdFi2xa\",\n    include_datapoints=True,\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.get(\"ds_b0baF1ca7652\", {\n    versionId: \"dsv_6L78pqrdFi2xa\",\n    includeDatapoints: true\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "includeDatapoints: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "include_datapoints"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.delete": {
        "id": "endpoint_datasets.delete",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Delete the Dataset with the given ID.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/datasets/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.delete(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.delete(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/datasets/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.delete(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.delete(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.move": {
        "id": "endpoint_datasets.move",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Move the Dataset to a different path or change the name.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Dataset including the Dataset name, which is used as a unique identifier."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Dataset, which is used as a unique identifier."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "datapoints_count": 1,
                "directory_id": "directory_id",
                "type": "dataset",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "commit_message": "commit_message",
                "datapoints": [
                  {
                    "id": "id",
                    "inputs": {
                      "key": "value"
                    },
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "target": {
                      "key": "value"
                    }
                  }
                ],
                "attributes": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/datasets/id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.move(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.move(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/datasets/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.move(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.move(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.move(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.listDatapoints": {
        "id": "endpoint_datasets.listDatapoints",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "List all Datapoints for the Dataset with the given ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/datapoints"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Dataset to retrieve."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment to retrieve a deployed Version from."
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page number for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Datapoints to fetch."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDatapointResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/ds_b0baF1ca7652/datapoints",
            "responseStatusCode": 200,
            "name": "List datapoints",
            "pathParameters": {
              "id": "ds_b0baF1ca7652"
            },
            "queryParameters": {
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "dp_901stu",
                    "messages": [
                      {
                        "role": "user",
                        "content": "What is the capital of France?"
                      }
                    ],
                    "target": {
                      "answer": "Paris"
                    }
                  },
                  {
                    "id": "dp_234vwx",
                    "messages": [
                      {
                        "role": "user",
                        "content": "Who wrote Hamlet?"
                      }
                    ],
                    "target": {
                      "answer": "William Shakespeare"
                    }
                  }
                ],
                "page": 1,
                "size": 10,
                "total": 2
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets/ds_b0baF1ca7652/datapoints \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.datasets.list_datapoints(\n    id=\"ds_b0baF1ca7652\",\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.listDatapoints(\"ds_b0baF1ca7652\", {\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/datapoints",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets/:id/datapoints \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=string \\\n     -d environment=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.datasets.list_datapoints(\n    id=\"ds_b0baF1ca7652\",\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.listDatapoints(\"ds_b0baF1ca7652\", {\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.listDatapoints(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.listVersions": {
        "id": "endpoint_datasets.listVersions",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Get a list of the versions for a Dataset.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          }
        ],
        "queryParameters": [
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            },
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ListDatasets"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/ds_b0baF1ca7652/versions",
            "responseStatusCode": 200,
            "name": "List versions",
            "pathParameters": {
              "id": "ds_b0baF1ca7652"
            },
            "queryParameters": {
              "status": "committed"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "test-questions",
                    "id": "ds_345mno",
                    "name": "test-questions",
                    "version_id": "dsv_678pqr",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "datapoints_count": 2,
                    "type": "dataset",
                    "created_by": {
                      "id": "usr_v23rSVAgas2a",
                      "full_name": "Jordan Burges",
                      "email_address": "jordan@humanloop.com"
                    },
                    "commit_message": "initial commit"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets/ds_b0baF1ca7652/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=committed",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.list_versions(\n    id=\"ds_b0baF1ca7652\",\n    status=\"committed\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.listVersions(\"ds_b0baF1ca7652\", {\n    status: \"committed\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/versions",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "status": "uncommitted"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/datasets/:id/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=uncommitted",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.list_versions(\n    id=\"ds_b0baF1ca7652\",\n    status=\"committed\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.listVersions(\"ds_b0baF1ca7652\", {\n    status: \"committed\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.listVersions(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "uncommitted": "Humanloop.VersionStatus.Uncommitted",
                            "committed": "Humanloop.VersionStatus.Committed",
                            "deleted": "Humanloop.VersionStatus.Deleted"
                          },
                          "templateString": "status: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "status"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.commit": {
        "id": "endpoint_datasets.commit",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Commit a version of the Dataset with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions/"
          },
          {
            "type": "pathParameter",
            "value": "version_id"
          },
          {
            "type": "literal",
            "value": "/commit"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          },
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Dataset."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CommitRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/ds_b0baF1ca7652/versions/dsv_6L78pqrdFi2xa/commit",
            "responseStatusCode": 200,
            "name": "Commit version",
            "pathParameters": {
              "id": "ds_b0baF1ca7652",
              "version_id": "dsv_6L78pqrdFi2xa"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "initial commit"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "test-questions",
                "id": "ds_345mno",
                "name": "test-questions",
                "version_id": "dsv_678pqr",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "datapoints_count": 2,
                "type": "dataset",
                "created_by": {
                  "id": "usr_v23rSVAgas2a",
                  "full_name": "Jordan Burges",
                  "email_address": "jordan@humanloop.com"
                },
                "commit_message": "initial commit"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/datasets/ds_b0baF1ca7652/versions/dsv_6L78pqrdFi2xa/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"initial commit\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.commit(\n    id=\"ds_b0baF1ca7652\",\n    version_id=\"dsv_6L78pqrdFi2xa\",\n    commit_message=\"initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.commit(\"ds_b0baF1ca7652\", \"dsv_6L78pqrdFi2xa\", {\n    commitMessage: \"initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/versions/:version_id/commit",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "version_id": ":version_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/datasets/:id/versions/:version_id/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.commit(\n    id=\"ds_b0baF1ca7652\",\n    version_id=\"dsv_6L78pqrdFi2xa\",\n    commit_message=\"initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.commit(\"ds_b0baF1ca7652\", \"dsv_6L78pqrdFi2xa\", {\n    commitMessage: \"initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.commit(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "commitMessage: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "commit_message"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.uploadCsv": {
        "id": "endpoint_datasets.uploadCsv",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Add Datapoints from a CSV file to a Dataset.\n\nThis will create a new committed version of the Dataset with the Datapoints from the CSV file.\n\nIf either `version_id` or `environment` is provided, the new version will be based on the specified version,\nwith the Datapoints from the CSV file added to the existing Datapoints in the version.\nIf neither `version_id` nor `environment` is provided, the new version will be based on the version\nof the Dataset that is deployed to the default Environment.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/datapoints/csv"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Dataset"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "ID of the specific Dataset version to base the created Version on."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed Version to base the created Version on."
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "file",
                "key": "file",
                "isOptional": false
              },
              {
                "type": "property",
                "key": "commit_message",
                "description": "Commit message for the new Dataset version.",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id/datapoints/csv",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "commit_message": {
                  "type": "json",
                  "value": "commit_message"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "datapoints_count": 1,
                "directory_id": "directory_id",
                "type": "dataset",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "commit_message": "commit_message",
                "datapoints": [
                  {
                    "id": "id",
                    "inputs": {
                      "key": "value"
                    },
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "target": {
                      "key": "value"
                    }
                  }
                ],
                "attributes": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/datasets/id/datapoints/csv \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F file=@<file1> \\\n     -F commit_message=\"commit_message\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.upload_csv(\n    id=\"id\",\n    commit_message=\"commit_message\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\nimport * as fs from \"fs\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.uploadCsv(fs.createReadStream(\"/path/to/your/file\"), \"id\", {\n    commitMessage: \"commit_message\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/datapoints/csv",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "form",
              "value": {
                "file": {
                  "type": "filename",
                  "value": "<filename1>"
                },
                "commit_message": {
                  "type": "json",
                  "value": "string"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/datasets/:id/datapoints/csv?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F file=@<filename1> \\\n     -F commit_message=\"string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.upload_csv(\n    id=\"id\",\n    commit_message=\"commit_message\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\nimport * as fs from \"fs\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.uploadCsv(fs.createReadStream(\"/path/to/your/file\"), \"id\", {\n    commitMessage: \"commit_message\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.uploadCsv(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream('$FERN_INPUT')",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "file"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "commitMessage: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "commit_message"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.setDeployment": {
        "id": "endpoint_datasets.setDeployment",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Deploy Dataset to Environment.\n\nSet the deployed version for the specified Environment.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to deploy the Version to."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Dataset."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:DatasetResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/ds_b0baF1ca7652/environments/staging",
            "responseStatusCode": 200,
            "name": "Deploy",
            "pathParameters": {
              "id": "ds_b0baF1ca7652",
              "environment_id": "staging"
            },
            "queryParameters": {
              "version_id": "dsv_6L78pqrdFi2xa"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "test-questions",
                "id": "ds_345mno",
                "name": "test-questions",
                "version_id": "dsv_678pqr",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "datapoints_count": 2,
                "type": "dataset",
                "created_by": {
                  "id": "usr_v23rSVAgas2a",
                  "full_name": "Jordan Burges",
                  "email_address": "jordan@humanloop.com"
                },
                "commit_message": "initial commit"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/datasets/ds_b0baF1ca7652/environments/staging?version_id=dsv_6L78pqrdFi2xa\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.set_deployment(\n    id=\"ds_b0baF1ca7652\",\n    environment_id=\"staging\",\n    version_id=\"dsv_6L78pqrdFi2xa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.setDeployment(\"ds_b0baF1ca7652\", \"staging\", {\n    versionId: \"dsv_6L78pqrdFi2xa\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {
              "version_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/datasets/:id/environments/:environment_id?version_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.set_deployment(\n    id=\"ds_b0baF1ca7652\",\n    environment_id=\"staging\",\n    version_id=\"dsv_6L78pqrdFi2xa\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.setDeployment(\"ds_b0baF1ca7652\", \"staging\", {\n    versionId: \"dsv_6L78pqrdFi2xa\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.setDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.removeDeployment": {
        "id": "endpoint_datasets.removeDeployment",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "Remove deployed Dataset from Environment.\n\nRemove the deployed version for the specified Environment.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to remove the deployment from."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/ds_b0baF1ca7652/environments/staging",
            "responseStatusCode": 204,
            "name": "Delete environment",
            "pathParameters": {
              "id": "ds_b0baF1ca7652",
              "environment_id": "staging"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/datasets/ds_b0baF1ca7652/environments/staging \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.remove_deployment(\n    id=\"ds_b0baF1ca7652\",\n    environment_id=\"staging\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.removeDeployment(\"ds_b0baF1ca7652\", \"staging\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/datasets/:id/environments/:environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.remove_deployment(\n    id=\"ds_b0baF1ca7652\",\n    environment_id=\"staging\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.removeDeployment(\"ds_b0baF1ca7652\", \"staging\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.removeDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_datasets.listEnvironments": {
        "id": "endpoint_datasets.listEnvironments",
        "namespace": [
          "subpackage_datasets"
        ],
        "description": "List all Environments and their deployed versions for the Dataset.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/datasets/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Dataset."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileEnvironmentResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/datasets/id/environments",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "name": "name",
                  "tag": "default",
                  "file": {
                    "path": "path",
                    "id": "id",
                    "directory_id": "directory_id",
                    "model": "model",
                    "endpoint": "complete",
                    "template": "template",
                    "provider": "openai",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "other": {
                      "key": "value"
                    },
                    "seed": 1,
                    "response_format": {
                      "type": "json_object"
                    },
                    "tools": [
                      {
                        "name": "name",
                        "description": "description"
                      }
                    ],
                    "linked_tools": [
                      {
                        "name": "name",
                        "description": "description",
                        "id": "id",
                        "version_id": "version_id"
                      }
                    ],
                    "attributes": {
                      "key": "value"
                    },
                    "commit_message": "commit_message",
                    "name": "name",
                    "version_id": "version_id",
                    "type": "prompt",
                    "environments": [
                      {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address"
                    },
                    "status": "uncommitted",
                    "last_used_at": "2024-01-15T09:30:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "name"
                      }
                    ],
                    "evaluator_aggregates": [
                      {
                        "value": 1.1,
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ]
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/datasets/id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.list_environments(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.listEnvironments(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/datasets/:id/environments",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/datasets/:id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.datasets.list_environments(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.datasets.listEnvironments(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.datasets.listEnvironments(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.list": {
        "id": "endpoint_evaluators.list",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Get a list of all Evaluators.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page offset for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Evaluators to fetch."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for Evaluator name."
          },
          {
            "key": "user_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for users in the Evaluator. This filter matches against both email address and name of users."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort Evaluators by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataEvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators",
            "responseStatusCode": 200,
            "name": "List evaluators",
            "pathParameters": {},
            "queryParameters": {
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "Shared Evaluators/Accuracy Evaluator",
                    "id": "ev_890bcd",
                    "spec": {
                      "arguments_type": "target_required",
                      "return_type": "number",
                      "evaluator_type": "python",
                      "code": "def evaluate(answer, target):\n    return 0.5"
                    },
                    "name": "Accuracy Evaluator",
                    "version_id": "evv_012def",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "answer"
                      }
                    ],
                    "type": "evaluator"
                  }
                ],
                "page": 0,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.evaluators.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.evaluators.list(\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.list({\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "userFilter: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "user_filter"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "created_at": "Humanloop.ProjectSortBy.CreatedAt",
                            "updated_at": "Humanloop.ProjectSortBy.UpdatedAt",
                            "name": "Humanloop.ProjectSortBy.Name"
                          },
                          "templateString": "sortBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "sort_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "asc": "Humanloop.SortOrder.Asc",
                            "desc": "Humanloop.SortOrder.Desc"
                          },
                          "templateString": "order: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "order"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.upsert": {
        "id": "endpoint_evaluators.upsert",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Create an Evaluator or update it with a new version if it already exists.\n\nEvaluators are identified by the `ID` or their `path`. The spec provided determines the version of the Evaluator.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Evaluator, including the name. This locates the Evaluator in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Evaluator."
              },
              {
                "key": "commit_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Message describing the changes made."
              },
              {
                "key": "spec",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_evaluators:SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec"
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators",
            "responseStatusCode": 200,
            "name": "Create evaluator",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "spec": {
                  "arguments_type": "target_required",
                  "return_type": "number",
                  "evaluator_type": "python",
                  "code": "def evaluate(answer, target):\n    return 0.5"
                },
                "path": "Shared Evaluators/Accuracy Evaluator",
                "commit_message": "Initial commit"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Shared Evaluators/Accuracy Evaluator",
                "id": "ev_890bcd",
                "spec": {
                  "arguments_type": "target_required",
                  "return_type": "number",
                  "evaluator_type": "python",
                  "code": "def evaluate(answer, target):\n    return 0.5"
                },
                "name": "Accuracy Evaluator",
                "version_id": "evv_012def",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "answer"
                  }
                ],
                "type": "evaluator"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"spec\": {\n    \"arguments_type\": \"target_required\",\n    \"return_type\": \"number\",\n    \"evaluator_type\": \"python\",\n    \"code\": \"def evaluate(answer, target):\\n    return 0.5\"\n  },\n  \"path\": \"Shared Evaluators/Accuracy Evaluator\",\n  \"commit_message\": \"Initial commit\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.upsert(\n    path=\"Shared Evaluators/Accuracy Evaluator\",\n    spec={\n        \"arguments_type\": \"target_required\",\n        \"return_type\": \"number\",\n        \"evaluator_type\": \"python\",\n        \"code\": \"def evaluate(answer, target):\\n    return 0.5\",\n    },\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.upsert({\n    path: \"Shared Evaluators/Accuracy Evaluator\",\n    spec: {\n        argumentsType: \"target_required\",\n        returnType: \"number\",\n        evaluatorType: \"python\",\n        code: \"def evaluate(answer, target):\\n    return 0.5\"\n    },\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "spec": {
                  "arguments_type": "target_free",
                  "return_type": "boolean",
                  "evaluator_type": "llm"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"spec\": {\n    \"arguments_type\": \"target_free\",\n    \"return_type\": \"boolean\",\n    \"evaluator_type\": \"llm\"\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.upsert(\n    path=\"Shared Evaluators/Accuracy Evaluator\",\n    spec={\n        \"arguments_type\": \"target_required\",\n        \"return_type\": \"number\",\n        \"evaluator_type\": \"python\",\n        \"code\": \"def evaluate(answer, target):\\n    return 0.5\",\n    },\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.upsert({\n    path: \"Shared Evaluators/Accuracy Evaluator\",\n    spec: {\n        argumentsType: \"target_required\",\n        returnType: \"number\",\n        evaluatorType: \"python\",\n        code: \"def evaluate(answer, target):\\n    return 0.5\"\n    },\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.upsert(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "commitMessage: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "commit_message"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "spec: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "boolean": "Humanloop.EvaluatorReturnTypeEnum.Boolean",
                                        "number": "Humanloop.EvaluatorReturnTypeEnum.Number",
                                        "select": "Humanloop.EvaluatorReturnTypeEnum.Select",
                                        "multi_select": "Humanloop.EvaluatorReturnTypeEnum.MultiSelect",
                                        "text": "Humanloop.EvaluatorReturnTypeEnum.Text"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "prompt: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "model: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.model"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "enum",
                                            "imports": [],
                                            "isOptional": true,
                                            "values": {
                                              "complete": "Humanloop.ModelEndpoints.Complete",
                                              "chat": "Humanloop.ModelEndpoints.Chat",
                                              "edit": "Humanloop.ModelEndpoints.Edit"
                                            },
                                            "templateString": "endpoint: $FERN_INPUT",
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.endpoint"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "union_v2",
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "template: $FERN_INPUT",
                                            "members": [
                                              {
                                                "template": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "type": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              {
                                                "template": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                    "isOptional": true,
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "union_v2",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "content: $FERN_INPUT",
                                                          "members": [
                                                            {
                                                              "template": {
                                                                "type": "generic",
                                                                "imports": [],
                                                                "templateString": "$FERN_INPUT",
                                                                "isOptional": true,
                                                                "templateInputs": [
                                                                  {
                                                                    "type": "payload",
                                                                    "location": "RELATIVE",
                                                                    "path": null
                                                                  }
                                                                ]
                                                              },
                                                              "type": {
                                                                "type": "primitive",
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "template": {
                                                                "type": "iterable",
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "containerTemplateString": "[\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t]",
                                                                "delimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                "innerTemplate": {
                                                                  "type": "union_v2",
                                                                  "imports": [],
                                                                  "isOptional": true,
                                                                  "templateString": "$FERN_INPUT",
                                                                  "members": [],
                                                                  "templateInput": {
                                                                    "location": "RELATIVE",
                                                                    "path": null
                                                                  }
                                                                },
                                                                "templateInput": {
                                                                  "location": "RELATIVE",
                                                                  "path": null
                                                                }
                                                              },
                                                              "type": {
                                                                "type": "list",
                                                                "itemType": {
                                                                  "type": "id",
                                                                  "value": "type_:ChatMessageContentItem"
                                                                }
                                                              }
                                                            }
                                                          ],
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "content"
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "name: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "name"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "toolCallId: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "tool_call_id"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "enum",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "values": {
                                                            "user": "Humanloop.ChatRole.User",
                                                            "assistant": "Humanloop.ChatRole.Assistant",
                                                            "system": "Humanloop.ChatRole.System",
                                                            "tool": "Humanloop.ChatRole.Tool"
                                                          },
                                                          "templateString": "role: $FERN_INPUT",
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "role"
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "iterable",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t]",
                                                          "delimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                          "innerTemplate": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "{\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "id: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "id"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "function: {\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                  "isOptional": true,
                                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                  "templateInputs": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "tool_calls"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "type": {
                                                  "type": "list",
                                                  "itemType": {
                                                    "type": "id",
                                                    "value": "type_:ChatMessage"
                                                  }
                                                }
                                              }
                                            ],
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.template"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "enum",
                                            "imports": [],
                                            "isOptional": true,
                                            "values": {
                                              "openai": "Humanloop.ModelProviders.Openai",
                                              "openai_azure": "Humanloop.ModelProviders.OpenaiAzure",
                                              "mock": "Humanloop.ModelProviders.Mock",
                                              "anthropic": "Humanloop.ModelProviders.Anthropic",
                                              "bedrock": "Humanloop.ModelProviders.Bedrock",
                                              "cohere": "Humanloop.ModelProviders.Cohere",
                                              "replicate": "Humanloop.ModelProviders.Replicate",
                                              "google": "Humanloop.ModelProviders.Google",
                                              "groq": "Humanloop.ModelProviders.Groq"
                                            },
                                            "templateString": "provider: $FERN_INPUT",
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.provider"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "maxTokens: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.max_tokens"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "temperature: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.temperature"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "topP: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.top_p"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "union_v2",
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "stop: $FERN_INPUT",
                                            "members": [
                                              {
                                                "template": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "type": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              {
                                                "template": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "type": {
                                                  "type": "list",
                                                  "itemType": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            ],
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.stop"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "presencePenalty: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.presence_penalty"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "frequencyPenalty: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.frequency_penalty"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "dict",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "other: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "keyValueSeparator": ": ",
                                            "keyTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "valueTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.other"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "seed: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.seed"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "responseFormat: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "json_object": "Humanloop.ResponseFormatType.JsonObject",
                                                    "json_schema": "Humanloop.ResponseFormatType.JsonSchema"
                                                  },
                                                  "templateString": "type: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "prompt.response_format.type"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "dict",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "jsonSchema: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                  "delimiter": ",\n\t\t\t\t\t\t\t",
                                                  "keyValueSeparator": ": ",
                                                  "keyTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "valueTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "prompt.response_format.json_schema"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "iterable",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "tools: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "innerTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                              "isOptional": true,
                                              "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "name: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "name"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "description: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "description"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "strict: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "strict"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "dict",
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "containerTemplateString": "parameters: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "keyValueSeparator": ": ",
                                                    "keyTemplate": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        }
                                                      ]
                                                    },
                                                    "valueTemplate": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        }
                                                      ]
                                                    },
                                                    "templateInput": {
                                                      "location": "RELATIVE",
                                                      "path": "parameters"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.tools"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "iterable",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "linkedTools: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "innerTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.linked_tools"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "dict",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "attributes: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "keyValueSeparator": ": ",
                                            "keyTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "valueTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.attributes"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:LlmEvaluatorRequest"
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "boolean": "Humanloop.EvaluatorReturnTypeEnum.Boolean",
                                        "number": "Humanloop.EvaluatorReturnTypeEnum.Number",
                                        "select": "Humanloop.EvaluatorReturnTypeEnum.Select",
                                        "multi_select": "Humanloop.EvaluatorReturnTypeEnum.MultiSelect",
                                        "text": "Humanloop.EvaluatorReturnTypeEnum.Text"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "code: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": "code"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:CodeEvaluatorRequest"
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "select": "Humanloop.HumanEvaluatorRequestReturnType.Select",
                                        "multi_select": "Humanloop.HumanEvaluatorRequestReturnType.MultiSelect",
                                        "text": "Humanloop.HumanEvaluatorRequestReturnType.Text",
                                        "number": "Humanloop.HumanEvaluatorRequestReturnType.Number",
                                        "boolean": "Humanloop.HumanEvaluatorRequestReturnType.Boolean"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "instructions: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": "instructions"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "options: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "enum",
                                              "imports": [],
                                              "isOptional": true,
                                              "values": {
                                                "positive": "Humanloop.Valence.Positive",
                                                "negative": "Humanloop.Valence.Negative",
                                                "neutral": "Humanloop.Valence.Neutral"
                                              },
                                              "templateString": "valence: $FERN_INPUT",
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "valence"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "options"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "numberLimits: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "min: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "number_limits.min"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "max: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "number_limits.max"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "step: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "number_limits.step"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "positive": "Humanloop.Valence.Positive",
                                        "negative": "Humanloop.Valence.Negative",
                                        "neutral": "Humanloop.Valence.Neutral"
                                      },
                                      "templateString": "numberValence: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "number_valence"
                                      }
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:HumanEvaluatorRequest"
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "boolean": "Humanloop.EvaluatorReturnTypeEnum.Boolean",
                                        "number": "Humanloop.EvaluatorReturnTypeEnum.Number",
                                        "select": "Humanloop.EvaluatorReturnTypeEnum.Select",
                                        "multi_select": "Humanloop.EvaluatorReturnTypeEnum.MultiSelect",
                                        "text": "Humanloop.EvaluatorReturnTypeEnum.Text"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:ExternalEvaluatorRequest"
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "spec"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.get": {
        "id": "endpoint_evaluators.get",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Retrieve the Evaluator with the given ID.\n\nBy default, the deployed version of the Evaluator is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Evaluator.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluator."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Evaluator to retrieve."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment to retrieve a deployed Version from."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd",
            "responseStatusCode": 200,
            "name": "Get specific evaluator",
            "pathParameters": {
              "id": "ev_890bcd"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Shared Evaluators/Accuracy Evaluator",
                "id": "ev_890bcd",
                "spec": {
                  "arguments_type": "target_required",
                  "return_type": "number",
                  "evaluator_type": "python",
                  "code": "def evaluate(answer, target):\n    return 0.5"
                },
                "name": "Accuracy Evaluator",
                "version_id": "evv_012def",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "answer"
                  }
                ],
                "type": "evaluator"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluators/ev_890bcd \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.get(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.get(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluators/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=string \\\n     -d environment=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.get(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.get(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.delete": {
        "id": "endpoint_evaluators.delete",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Delete the Evaluator with the given ID.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluator."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd",
            "responseStatusCode": 204,
            "name": "Delete evaluator",
            "pathParameters": {
              "id": "ev_890bcd"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/evaluators/ev_890bcd \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.delete(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.delete(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/evaluators/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.delete(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.delete(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.move": {
        "id": "endpoint_evaluators.move",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Move the Evaluator to a different path or change the name.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluator."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Evaluator including the Evaluator name, which is used as a unique identifier."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Evaluator, which is used as a unique identifier."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd",
            "responseStatusCode": 200,
            "name": "Move evaluator",
            "pathParameters": {
              "id": "ev_890bcd"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "path": "new directory/new name"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Shared Evaluators/Accuracy Evaluator",
                "id": "ev_890bcd",
                "spec": {
                  "arguments_type": "target_required",
                  "return_type": "number",
                  "evaluator_type": "python",
                  "code": "def evaluate(answer, target):\n    return 0.5"
                },
                "name": "Accuracy Evaluator",
                "version_id": "evv_012def",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "answer"
                  }
                ],
                "type": "evaluator"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/evaluators/ev_890bcd \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"path\": \"new directory/new name\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.move(\n    id=\"ev_890bcd\",\n    path=\"new directory/new name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.move(\"ev_890bcd\", {\n    path: \"new directory/new name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/evaluators/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.move(\n    id=\"ev_890bcd\",\n    path=\"new directory/new name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.move(\"ev_890bcd\", {\n    path: \"new directory/new name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.move(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.listVersions": {
        "id": "endpoint_evaluators.listVersions",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Get a list of all the versions of an Evaluator.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Evaluator."
          }
        ],
        "queryParameters": [
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            },
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          },
          {
            "key": "evaluator_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Whether to include Evaluator aggregate results for the versions in the response"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ListEvaluators"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd/versions",
            "responseStatusCode": 200,
            "name": "List versions",
            "pathParameters": {
              "id": "ev_890bcd"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "Shared Evaluators/Accuracy Evaluator",
                    "id": "ev_890bcd",
                    "spec": {
                      "arguments_type": "target_required",
                      "return_type": "number",
                      "evaluator_type": "python",
                      "code": "def evaluate(answer, target):\n    return 0.5"
                    },
                    "name": "Accuracy Evaluator",
                    "version_id": "evv_012def",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "answer"
                      }
                    ],
                    "type": "evaluator"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluators/ev_890bcd/versions \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.list_versions(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.listVersions(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id/versions",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "status": "uncommitted",
              "evaluator_aggregates": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluators/:id/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=uncommitted \\\n     -d evaluator_aggregates=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.list_versions(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.listVersions(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.listVersions(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "uncommitted": "Humanloop.VersionStatus.Uncommitted",
                            "committed": "Humanloop.VersionStatus.Committed",
                            "deleted": "Humanloop.VersionStatus.Deleted"
                          },
                          "templateString": "status: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "status"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "evaluatorAggregates: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "evaluator_aggregates"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.commit": {
        "id": "endpoint_evaluators.commit",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Commit a version of the Evaluator with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions/"
          },
          {
            "type": "pathParameter",
            "value": "version_id"
          },
          {
            "type": "literal",
            "value": "/commit"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Prompt."
          },
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Evaluator."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CommitRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd/versions/evv_012def/commit",
            "responseStatusCode": 200,
            "name": "Commit version",
            "pathParameters": {
              "id": "ev_890bcd",
              "version_id": "evv_012def"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "Initial commit"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Shared Evaluators/Accuracy Evaluator",
                "id": "ev_890bcd",
                "spec": {
                  "arguments_type": "target_required",
                  "return_type": "number",
                  "evaluator_type": "python",
                  "code": "def evaluate(answer, target):\n    return 0.5"
                },
                "name": "Accuracy Evaluator",
                "version_id": "evv_012def",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "answer"
                  }
                ],
                "type": "evaluator"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluators/ev_890bcd/versions/evv_012def/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"Initial commit\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.commit(\n    id=\"ev_890bcd\",\n    version_id=\"evv_012def\",\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.commit(\"ev_890bcd\", \"evv_012def\", {\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id/versions/:version_id/commit",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "version_id": ":version_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluators/:id/versions/:version_id/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.commit(\n    id=\"ev_890bcd\",\n    version_id=\"evv_012def\",\n    commit_message=\"Initial commit\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.commit(\"ev_890bcd\", \"evv_012def\", {\n    commitMessage: \"Initial commit\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.commit(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "commitMessage: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "commit_message"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.setDeployment": {
        "id": "endpoint_evaluators.setDeployment",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Deploy Evaluator to an Environment.\n\nSet the deployed version for the specified Environment. This Evaluator\nwill be used for calls made to the Evaluator in this Environment.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluator."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to deploy the Version to."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Evaluator."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd/environments/staging",
            "responseStatusCode": 200,
            "name": "Deploy",
            "pathParameters": {
              "id": "ev_890bcd",
              "environment_id": "staging"
            },
            "queryParameters": {
              "version_id": "evv_012def"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "Shared Evaluators/Accuracy Evaluator",
                "id": "ev_890bcd",
                "spec": {
                  "arguments_type": "target_required",
                  "return_type": "number",
                  "evaluator_type": "python",
                  "code": "def evaluate(answer, target):\n    return 0.5"
                },
                "name": "Accuracy Evaluator",
                "version_id": "evv_012def",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z",
                "status": "committed",
                "last_used_at": "2024-05-01T12:00:00Z",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [
                  {
                    "name": "answer"
                  }
                ],
                "type": "evaluator"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/evaluators/ev_890bcd/environments/staging?version_id=evv_012def\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.set_deployment(\n    id=\"ev_890bcd\",\n    environment_id=\"staging\",\n    version_id=\"evv_012def\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.setDeployment(\"ev_890bcd\", \"staging\", {\n    versionId: \"evv_012def\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {
              "version_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/evaluators/:id/environments/:environment_id?version_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.set_deployment(\n    id=\"ev_890bcd\",\n    environment_id=\"staging\",\n    version_id=\"evv_012def\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.setDeployment(\"ev_890bcd\", \"staging\", {\n    versionId: \"evv_012def\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.setDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.removeDeployment": {
        "id": "endpoint_evaluators.removeDeployment",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Remove deployed Evaluator from the Environment.\n\nRemove the deployed version for the specified Environment. This Evaluator\nwill no longer be used for calls made to the Evaluator in this Environment.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluator."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to remove the deployment from."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd/environments/staging",
            "responseStatusCode": 204,
            "name": "Delete environment",
            "pathParameters": {
              "id": "ev_890bcd",
              "environment_id": "staging"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/evaluators/ev_890bcd/environments/staging \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.remove_deployment(\n    id=\"ev_890bcd\",\n    environment_id=\"staging\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.removeDeployment(\"ev_890bcd\", \"staging\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/evaluators/:id/environments/:environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.remove_deployment(\n    id=\"ev_890bcd\",\n    environment_id=\"staging\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.removeDeployment(\"ev_890bcd\", \"staging\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.removeDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.listEnvironments": {
        "id": "endpoint_evaluators.listEnvironments",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "List all Environments and their deployed versions for the Evaluator.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluator."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileEnvironmentResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/ev_890bcd/environments",
            "responseStatusCode": 200,
            "name": "List environments",
            "pathParameters": {
              "id": "ev_890bcd"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "env_abc123",
                  "created_at": "2024-05-01T12:00:00Z",
                  "name": "production",
                  "tag": "default",
                  "file": {
                    "id": "ev_890bcd",
                    "name": "Accuracy Evaluator",
                    "path": "Shared Evaluators/Accuracy Evaluator",
                    "version_id": "evv_012def",
                    "type": "evaluator",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z",
                    "status": "committed",
                    "last_used_at": "2024-05-01T12:00:00Z",
                    "spec": {
                      "arguments_type": "target_required",
                      "return_type": "number",
                      "evaluator_type": "python",
                      "code": "def evaluate(answer, target):\n    return 0.5"
                    },
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "answer"
                      }
                    ]
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluators/ev_890bcd/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.list_environments(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.listEnvironments(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/:id/environments",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluators/:id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.list_environments(\n    id=\"ev_890bcd\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.listEnvironments(\"ev_890bcd\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.listEnvironments(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluators.log": {
        "id": "endpoint_evaluators.log",
        "namespace": [
          "subpackage_evaluators"
        ],
        "description": "Submit Evaluator judgment for an existing Log.\n\nCreates a new Log. The evaluated Log will be set as the parent of the created Log.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluators/log"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "ID of the Evaluator version to log against."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed version to log to."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Evaluator, including the name. This locates the Evaluator in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Evaluator."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event started."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "When the logged event ended."
              },
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Generated output from the LLM. Only populated for LLM Evaluator Logs."
              },
              {
                "key": "created_at",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "User defined timestamp for when the log was created. "
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error message if the log is an error."
              },
              {
                "key": "provider_latency",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Duration of the logged event in seconds."
              },
              {
                "key": "stdout",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Captured log and debug statements."
              },
              {
                "key": "provider_request",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw request sent to provider. Only populated for LLM Evaluator Logs."
              },
              {
                "key": "provider_response",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw response received the provider. Only populated for LLM Evaluator Logs."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identifier of the evaluated Log. The newly created Log will have this one set as parent."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
              },
              {
                "key": "trace_parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The ID of the parent Log to nest this Log under in a Trace."
              },
              {
                "key": "batches",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID related to the Log."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the Environment the Log is associated to."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "judgment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_evaluators:CreateEvaluatorLogRequestJudgment"
                      }
                    }
                  }
                },
                "description": "Evaluator assessment of the Log."
              },
              {
                "key": "spec",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_evaluators:CreateEvaluatorLogRequestSpec"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CreateEvaluatorLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluators/log",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "parent_id": "parent_id"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "parent_id": "parent_id",
                "version_id": "version_id",
                "session_id": "session_id"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluators/log \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"parent_id\": \"parent_id\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.log(\n    parent_id=\"parent_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.log({\n    parentId: \"parent_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluators/log",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "parent_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/evaluators/log?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"parent_id\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluators.log(\n    parent_id=\"parent_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluators.log({\n    parentId: \"parent_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluators.log(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerLatency: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provider_latency"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stdout: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stdout"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerRequest: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_request"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerResponse: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_response"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "parentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceDatapointId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_datapoint_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceParentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "batches: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "batches"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "user: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "user"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createEvaluatorLogRequestEnvironment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "save: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "save"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "judgment: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "primitive",
                                "value": {
                                  "type": "boolean"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "RELATIVE",
                                  "path": null
                                }
                              },
                              "type": {
                                "type": "list",
                                "itemType": {
                                  "type": "primitive",
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                ]
                              },
                              "type": {
                                "type": "primitive",
                                "value": {
                                  "type": "double"
                                }
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "judgment"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "union_v2",
                          "imports": [],
                          "isOptional": true,
                          "templateString": "spec: $FERN_INPUT",
                          "members": [
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "boolean": "Humanloop.EvaluatorReturnTypeEnum.Boolean",
                                        "number": "Humanloop.EvaluatorReturnTypeEnum.Number",
                                        "select": "Humanloop.EvaluatorReturnTypeEnum.Select",
                                        "multi_select": "Humanloop.EvaluatorReturnTypeEnum.MultiSelect",
                                        "text": "Humanloop.EvaluatorReturnTypeEnum.Text"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "prompt: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "model: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.model"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "enum",
                                            "imports": [],
                                            "isOptional": true,
                                            "values": {
                                              "complete": "Humanloop.ModelEndpoints.Complete",
                                              "chat": "Humanloop.ModelEndpoints.Chat",
                                              "edit": "Humanloop.ModelEndpoints.Edit"
                                            },
                                            "templateString": "endpoint: $FERN_INPUT",
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.endpoint"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "union_v2",
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "template: $FERN_INPUT",
                                            "members": [
                                              {
                                                "template": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "type": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              {
                                                "template": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "{\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                    "isOptional": true,
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "union_v2",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "templateString": "content: $FERN_INPUT",
                                                          "members": [
                                                            {
                                                              "template": {
                                                                "type": "generic",
                                                                "imports": [],
                                                                "templateString": "$FERN_INPUT",
                                                                "isOptional": true,
                                                                "templateInputs": [
                                                                  {
                                                                    "type": "payload",
                                                                    "location": "RELATIVE",
                                                                    "path": null
                                                                  }
                                                                ]
                                                              },
                                                              "type": {
                                                                "type": "primitive",
                                                                "value": {
                                                                  "type": "string"
                                                                }
                                                              }
                                                            },
                                                            {
                                                              "template": {
                                                                "type": "iterable",
                                                                "imports": [],
                                                                "isOptional": true,
                                                                "containerTemplateString": "[\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t]",
                                                                "delimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                                "innerTemplate": {
                                                                  "type": "union_v2",
                                                                  "imports": [],
                                                                  "isOptional": true,
                                                                  "templateString": "$FERN_INPUT",
                                                                  "members": [],
                                                                  "templateInput": {
                                                                    "location": "RELATIVE",
                                                                    "path": null
                                                                  }
                                                                },
                                                                "templateInput": {
                                                                  "location": "RELATIVE",
                                                                  "path": null
                                                                }
                                                              },
                                                              "type": {
                                                                "type": "list",
                                                                "itemType": {
                                                                  "type": "id",
                                                                  "value": "type_:ChatMessageContentItem"
                                                                }
                                                              }
                                                            }
                                                          ],
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "content"
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "name: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "name"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "toolCallId: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "tool_call_id"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "enum",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "values": {
                                                            "user": "Humanloop.ChatRole.User",
                                                            "assistant": "Humanloop.ChatRole.Assistant",
                                                            "system": "Humanloop.ChatRole.System",
                                                            "tool": "Humanloop.ChatRole.Tool"
                                                          },
                                                          "templateString": "role: $FERN_INPUT",
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "role"
                                                          }
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "iterable",
                                                          "imports": [],
                                                          "isOptional": true,
                                                          "containerTemplateString": "toolCalls: [\n\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t]",
                                                          "delimiter": ",\n\t\t\t\t\t\t\t\t\t",
                                                          "innerTemplate": {
                                                            "type": "generic",
                                                            "imports": [],
                                                            "templateString": "{\n\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t}",
                                                            "isOptional": true,
                                                            "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t",
                                                            "templateInputs": [
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "id: $FERN_INPUT",
                                                                  "isOptional": true,
                                                                  "templateInputs": [
                                                                    {
                                                                      "type": "payload",
                                                                      "location": "RELATIVE",
                                                                      "path": "id"
                                                                    }
                                                                  ]
                                                                }
                                                              },
                                                              {
                                                                "type": "template",
                                                                "value": {
                                                                  "type": "generic",
                                                                  "imports": [],
                                                                  "templateString": "function: {\n\t\t\t\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t\t\t\t}",
                                                                  "isOptional": true,
                                                                  "inputDelimiter": ",\n\t\t\t\t\t\t\t\t\t\t\t",
                                                                  "templateInputs": []
                                                                }
                                                              }
                                                            ]
                                                          },
                                                          "templateInput": {
                                                            "location": "RELATIVE",
                                                            "path": "tool_calls"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "type": {
                                                  "type": "list",
                                                  "itemType": {
                                                    "type": "id",
                                                    "value": "type_:ChatMessage"
                                                  }
                                                }
                                              }
                                            ],
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.template"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "enum",
                                            "imports": [],
                                            "isOptional": true,
                                            "values": {
                                              "openai": "Humanloop.ModelProviders.Openai",
                                              "openai_azure": "Humanloop.ModelProviders.OpenaiAzure",
                                              "mock": "Humanloop.ModelProviders.Mock",
                                              "anthropic": "Humanloop.ModelProviders.Anthropic",
                                              "bedrock": "Humanloop.ModelProviders.Bedrock",
                                              "cohere": "Humanloop.ModelProviders.Cohere",
                                              "replicate": "Humanloop.ModelProviders.Replicate",
                                              "google": "Humanloop.ModelProviders.Google",
                                              "groq": "Humanloop.ModelProviders.Groq"
                                            },
                                            "templateString": "provider: $FERN_INPUT",
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.provider"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "maxTokens: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.max_tokens"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "temperature: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.temperature"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "topP: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.top_p"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "union_v2",
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "stop: $FERN_INPUT",
                                            "members": [
                                              {
                                                "template": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "$FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "RELATIVE",
                                                      "path": null
                                                    }
                                                  ]
                                                },
                                                "type": {
                                                  "type": "primitive",
                                                  "value": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              {
                                                "template": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "[\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                },
                                                "type": {
                                                  "type": "list",
                                                  "itemType": {
                                                    "type": "primitive",
                                                    "value": {
                                                      "type": "string"
                                                    }
                                                  }
                                                }
                                              }
                                            ],
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.stop"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "presencePenalty: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.presence_penalty"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "frequencyPenalty: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.frequency_penalty"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "dict",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "other: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "keyValueSeparator": ": ",
                                            "keyTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "valueTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.other"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "seed: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "prompt.seed"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "responseFormat: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "json_object": "Humanloop.ResponseFormatType.JsonObject",
                                                    "json_schema": "Humanloop.ResponseFormatType.JsonSchema"
                                                  },
                                                  "templateString": "type: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "prompt.response_format.type"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "dict",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "jsonSchema: {\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                                  "delimiter": ",\n\t\t\t\t\t\t\t",
                                                  "keyValueSeparator": ": ",
                                                  "keyTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "valueTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "RELATIVE",
                                                    "path": "prompt.response_format.json_schema"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "iterable",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "tools: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "innerTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "{\n\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t}",
                                              "isOptional": true,
                                              "inputDelimiter": ",\n\t\t\t\t\t\t\t",
                                              "templateInputs": [
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "name: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "name"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "description: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "description"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "strict: $FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": "strict"
                                                      }
                                                    ]
                                                  }
                                                },
                                                {
                                                  "type": "template",
                                                  "value": {
                                                    "type": "dict",
                                                    "imports": [],
                                                    "isOptional": true,
                                                    "containerTemplateString": "parameters: {\n\t\t\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t\t\t}",
                                                    "delimiter": ",\n\t\t\t\t\t\t\t\t",
                                                    "keyValueSeparator": ": ",
                                                    "keyTemplate": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        }
                                                      ]
                                                    },
                                                    "valueTemplate": {
                                                      "type": "generic",
                                                      "imports": [],
                                                      "templateString": "$FERN_INPUT",
                                                      "isOptional": true,
                                                      "templateInputs": [
                                                        {
                                                          "type": "payload",
                                                          "location": "RELATIVE",
                                                          "path": null
                                                        }
                                                      ]
                                                    },
                                                    "templateInput": {
                                                      "location": "RELATIVE",
                                                      "path": "parameters"
                                                    }
                                                  }
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.tools"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "iterable",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "linkedTools: [\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t]",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "innerTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.linked_tools"
                                            }
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "dict",
                                            "imports": [],
                                            "isOptional": true,
                                            "containerTemplateString": "attributes: {\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                            "delimiter": ",\n\t\t\t\t\t\t",
                                            "keyValueSeparator": ": ",
                                            "keyTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "valueTemplate": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "$FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": null
                                                }
                                              ]
                                            },
                                            "templateInput": {
                                              "location": "RELATIVE",
                                              "path": "prompt.attributes"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:LlmEvaluatorRequest"
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "boolean": "Humanloop.EvaluatorReturnTypeEnum.Boolean",
                                        "number": "Humanloop.EvaluatorReturnTypeEnum.Number",
                                        "select": "Humanloop.EvaluatorReturnTypeEnum.Select",
                                        "multi_select": "Humanloop.EvaluatorReturnTypeEnum.MultiSelect",
                                        "text": "Humanloop.EvaluatorReturnTypeEnum.Text"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "code: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": "code"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:CodeEvaluatorRequest"
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "select": "Humanloop.HumanEvaluatorRequestReturnType.Select",
                                        "multi_select": "Humanloop.HumanEvaluatorRequestReturnType.MultiSelect",
                                        "text": "Humanloop.HumanEvaluatorRequestReturnType.Text",
                                        "number": "Humanloop.HumanEvaluatorRequestReturnType.Number",
                                        "boolean": "Humanloop.HumanEvaluatorRequestReturnType.Boolean"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "instructions: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "RELATIVE",
                                          "path": "instructions"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "iterable",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "options: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "innerTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "name: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "name"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "enum",
                                              "imports": [],
                                              "isOptional": true,
                                              "values": {
                                                "positive": "Humanloop.Valence.Positive",
                                                "negative": "Humanloop.Valence.Negative",
                                                "neutral": "Humanloop.Valence.Neutral"
                                              },
                                              "templateString": "valence: $FERN_INPUT",
                                              "templateInput": {
                                                "location": "RELATIVE",
                                                "path": "valence"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "options"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "numberLimits: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "isOptional": true,
                                      "inputDelimiter": ",\n\t\t\t\t\t",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "min: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "number_limits.min"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "max: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "number_limits.max"
                                              }
                                            ]
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "step: $FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": "number_limits.step"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "positive": "Humanloop.Valence.Positive",
                                        "negative": "Humanloop.Valence.Negative",
                                        "neutral": "Humanloop.Valence.Neutral"
                                      },
                                      "templateString": "numberValence: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "number_valence"
                                      }
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:HumanEvaluatorRequest"
                              }
                            },
                            {
                              "template": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "$FERN_INPUT",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "target_free": "Humanloop.EvaluatorArgumentsType.TargetFree",
                                        "target_required": "Humanloop.EvaluatorArgumentsType.TargetRequired"
                                      },
                                      "templateString": "argumentsType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "arguments_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "enum",
                                      "imports": [],
                                      "isOptional": true,
                                      "values": {
                                        "boolean": "Humanloop.EvaluatorReturnTypeEnum.Boolean",
                                        "number": "Humanloop.EvaluatorReturnTypeEnum.Number",
                                        "select": "Humanloop.EvaluatorReturnTypeEnum.Select",
                                        "multi_select": "Humanloop.EvaluatorReturnTypeEnum.MultiSelect",
                                        "text": "Humanloop.EvaluatorReturnTypeEnum.Text"
                                      },
                                      "templateString": "returnType: $FERN_INPUT",
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "return_type"
                                      }
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "dict",
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "attributes: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                      "delimiter": ",\n\t\t\t\t\t",
                                      "keyValueSeparator": ": ",
                                      "keyTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "valueTemplate": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        ]
                                      },
                                      "templateInput": {
                                        "location": "RELATIVE",
                                        "path": "attributes"
                                      }
                                    }
                                  }
                                ]
                              },
                              "type": {
                                "type": "id",
                                "value": "type_:ExternalEvaluatorRequest"
                              }
                            }
                          ],
                          "templateInput": {
                            "location": "BODY",
                            "path": "spec"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.get": {
        "id": "endpoint_flows.get",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Retrieve the Flow with the given ID.\n\nBy default, the deployed version of the Flow is returned. Use the query parameters\n`version_id` or `environment` to target a specific version of the Flow.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Flow to retrieve."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment to retrieve a deployed Version from."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "attributes": {
                  "key": "value"
                },
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "directory_id": "directory_id",
                "commit_message": "commit_message",
                "type": "flow",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "evaluators": [
                  {
                    "version_reference": {
                      "file": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "environment": {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      },
                      "type": "environment"
                    },
                    "state": "active",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/flows/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.get(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.get(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/flows/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d version_id=string \\\n     -d environment=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.get(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.get(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.delete": {
        "id": "endpoint_flows.delete",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Delete the Flow with the given ID.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/flows/id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.delete(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.delete(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/flows/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.delete(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.delete(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.move": {
        "id": "endpoint_flows.move",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Move the Flow to a different path or change the name.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Flow including the Flow name, which is used as a unique identifier."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Flow."
              },
              {
                "key": "directory_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Directory to move Flow to. Starts with `dir_`."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "attributes": {
                  "key": "value"
                },
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "directory_id": "directory_id",
                "commit_message": "commit_message",
                "type": "flow",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "evaluators": [
                  {
                    "version_reference": {
                      "file": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "environment": {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      },
                      "type": "environment"
                    },
                    "state": "active",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/flows/id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.move(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.move(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/flows/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.move(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.move(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.move(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "directoryId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "directory_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.list": {
        "id": "endpoint_flows.list",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Get a list of Flows.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/flows"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page number for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Flows to fetch."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for Flow name."
          },
          {
            "key": "user_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for users in the Flow. This filter matches against both email address and name of users."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort Flows by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataFlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "path",
                    "id": "id",
                    "attributes": {
                      "key": "value"
                    },
                    "name": "name",
                    "version_id": "version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "status": "uncommitted",
                    "last_used_at": "2024-01-15T09:30:00Z",
                    "version_logs_count": 1,
                    "directory_id": "directory_id",
                    "commit_message": "commit_message",
                    "type": "flow",
                    "environments": [
                      {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      }
                    ],
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address"
                    },
                    "evaluator_aggregates": [
                      {
                        "value": 1.1,
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "evaluators": [
                      {
                        "version_reference": {
                          "file": {
                            "path": "path",
                            "id": "id",
                            "model": "model",
                            "name": "name",
                            "version_id": "version_id",
                            "created_at": "2024-01-15T09:30:00Z",
                            "updated_at": "2024-01-15T09:30:00Z",
                            "status": "uncommitted",
                            "last_used_at": "2024-01-15T09:30:00Z",
                            "version_logs_count": 1,
                            "total_logs_count": 1,
                            "inputs": [
                              {
                                "name": "name"
                              }
                            ]
                          },
                          "environment": {
                            "id": "id",
                            "created_at": "2024-01-15T09:30:00Z",
                            "name": "name",
                            "tag": "default"
                          },
                          "type": "environment"
                        },
                        "state": "active",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/flows \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.list();\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/flows \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.list();\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "userFilter: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "user_filter"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "created_at": "Humanloop.ProjectSortBy.CreatedAt",
                            "updated_at": "Humanloop.ProjectSortBy.UpdatedAt",
                            "name": "Humanloop.ProjectSortBy.Name"
                          },
                          "templateString": "sortBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "sort_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "asc": "Humanloop.SortOrder.Asc",
                            "desc": "Humanloop.SortOrder.Desc"
                          },
                          "templateString": "order: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "order"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.upsert": {
        "id": "endpoint_flows.upsert",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Create or update a Flow.\n\nFlows can also be identified by the `ID` or their `path`.\n\nIf you provide a commit message, then the new version will be committed;\notherwise it will be uncommitted. If you try to commit an already committed version,\nan exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/flows"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Flow, including the name. This locates the Flow in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Flow."
              },
              {
                "key": "attributes",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "map",
                    "keyShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                "description": "A key-value object identifying the Flow Version."
              },
              {
                "key": "commit_message",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Message describing the changes made."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "attributes": {
                  "key": "value"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "attributes": {
                  "key": "value"
                },
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "directory_id": "directory_id",
                "commit_message": "commit_message",
                "type": "flow",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "evaluators": [
                  {
                    "version_reference": {
                      "file": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "environment": {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      },
                      "type": "environment"
                    },
                    "state": "active",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"attributes\": {\n    \"key\": \"value\"\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.upsert(\n    attributes={\"key\": \"value\"},\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.upsert({\n    attributes: {\n        \"key\": \"value\"\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "attributes": {
                  "string": {}
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"attributes\": {\n    \"string\": {}\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.upsert(\n    attributes={\"key\": \"value\"},\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.upsert({\n    attributes: {\n        \"key\": \"value\"\n    }\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.upsert(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "attributes: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "attributes"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "commitMessage: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "commit_message"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.log": {
        "id": "endpoint_flows.log",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Log to a Flow.\n\nYou can use query parameters `version_id`, or `environment`, to target\nan existing version of the Flow. Otherwise, the default deployed version will be chosen.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/flows/log"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A specific Version ID of the Flow to log to."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Name of the Environment identifying a deployed version to log to."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "evaluation_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Evaluation Report to associate the Log to."
              },
              {
                "key": "path",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Path of the Flow, including the name. This locates the Flow in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
              },
              {
                "key": "id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID for an existing Flow."
              },
              {
                "key": "start_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "The start time of the Trace. Will be updated if a child Log with an earlier start time is added."
              },
              {
                "key": "end_time",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "The end time of the Trace. Will be updated if a child Log with a later end time is added."
              },
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
              },
              {
                "key": "created_at",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  }
                },
                "description": "User defined timestamp for when the log was created. "
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Error message if the log is an error."
              },
              {
                "key": "provider_latency",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Duration of the logged event in seconds."
              },
              {
                "key": "stdout",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Captured log and debug statements."
              },
              {
                "key": "provider_request",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw request sent to provider."
              },
              {
                "key": "provider_response",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Raw response received the provider."
              },
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the prompt template."
              },
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Identifies where the model was called from."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Any additional metadata to record."
              },
              {
                "key": "source_datapoint_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
              },
              {
                "key": "trace_parent_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The ID of the parent Log to nest this Log under in a Trace."
              },
              {
                "key": "batches",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
              },
              {
                "key": "user",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "End-user ID related to the Log."
              },
              {
                "key": "environment",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The name of the Environment the Log is associated to."
              },
              {
                "key": "save",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Whether the request/response payloads will be stored on Humanloop."
              },
              {
                "key": "trace_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "ID of the Trace. If not provided, one will be assigned."
              },
              {
                "key": "flow",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:FlowKernelRequest"
                      }
                    }
                  }
                },
                "description": "Flow used to generate the Trace."
              },
              {
                "key": "trace_status",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:TraceStatus"
                      }
                    }
                  }
                },
                "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on `complete` Traces. If you do not intend to add more Logs to the Trace after creation, set this to `complete`."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CreateFlowLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/log",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "flow_id": "flow_id",
                "version_id": "version_id",
                "trace_status": "complete"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows/log \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.log()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.log();\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/log",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "version_id": "string",
              "environment": "string"
            },
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/flows/log?version_id=string&environment=string\" \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.log()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.log();\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.log(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "evaluationId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "evaluation_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "path: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "path"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "start_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "end_time"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "providerLatency: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provider_latency"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stdout: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stdout"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerRequest: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_request"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "providerResponse: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "provider_response"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "source: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sourceDatapointId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "source_datapoint_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceParentId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_parent_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "batches: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "batches"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "user: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "user"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "flowLogRequestEnvironment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "save: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "save"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "traceId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "trace_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "flow: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "dict",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "attributes: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "delimiter": ",\n\t\t\t\t",
                                "keyValueSeparator": ": ",
                                "keyTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "valueTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "flow.attributes"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "complete": "Humanloop.TraceStatus.Complete",
                            "incomplete": "Humanloop.TraceStatus.Incomplete"
                          },
                          "templateString": "traceStatus: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "trace_status"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.updateLog": {
        "id": "endpoint_flows.updateLog",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Update the status, inputs, output of a Flow Log.\n\nMarking a Flow Log as complete will trigger any monitoring Evaluators to run.\nInputs and output (or error) must be provided in order to mark it as complete.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/flows/logs/"
          },
          {
            "type": "pathParameter",
            "value": "log_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "log_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier of the Flow Log."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "inputs",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The inputs passed to the Flow Log."
              },
              {
                "key": "output",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The output of the Flow Log. Provide None to unset existing `output` value. Provide either this or `error`."
              },
              {
                "key": "error",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "The error message of the Flow Log. Provide None to unset existing `error` value. Provide either this or `output`."
              },
              {
                "key": "trace_status",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:TraceStatus"
                  }
                },
                "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on completed Traces."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/logs/log_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "log_id": "log_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "trace_status": "complete"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "evaluator_logs": [
                  {
                    "id": "id",
                    "evaluator_logs": [],
                    "evaluator": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    },
                    "start_time": "2024-01-15T09:30:00Z",
                    "end_time": "2024-01-15T09:30:00Z",
                    "output": "output",
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "provider_latency": 1.1,
                    "stdout": "stdout",
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "parent_id": "parent_id",
                    "source_datapoint_id": "source_datapoint_id",
                    "trace_parent_id": "trace_parent_id",
                    "batches": [
                      "batches"
                    ],
                    "user": "user",
                    "environment": "environment",
                    "save": true,
                    "judgment": true,
                    "trace_flow_id": "trace_flow_id",
                    "trace_id": "trace_id",
                    "trace_children": [
                      {
                        "prompt": {
                          "path": "path",
                          "id": "id",
                          "model": "model",
                          "name": "name",
                          "version_id": "version_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "status": "uncommitted",
                          "last_used_at": "2024-01-15T09:30:00Z",
                          "version_logs_count": 1,
                          "total_logs_count": 1,
                          "inputs": [
                            {
                              "name": "name"
                            }
                          ]
                        },
                        "id": "id",
                        "evaluator_logs": []
                      }
                    ],
                    "parent": {
                      "prompt": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "id": "id",
                      "evaluator_logs": []
                    }
                  }
                ],
                "flow": {
                  "path": "path",
                  "id": "id",
                  "attributes": {
                    "key": "value"
                  },
                  "name": "name",
                  "version_id": "version_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "status": "uncommitted",
                  "last_used_at": "2024-01-15T09:30:00Z",
                  "version_logs_count": 1,
                  "directory_id": "directory_id",
                  "commit_message": "commit_message",
                  "type": "flow",
                  "environments": [
                    {
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "tag": "default"
                    }
                  ],
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  },
                  "evaluator_aggregates": [
                    {
                      "value": 1.1,
                      "evaluator_id": "evaluator_id",
                      "evaluator_version_id": "evaluator_version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ],
                  "evaluators": [
                    {
                      "version_reference": {
                        "file": {
                          "path": "path",
                          "id": "id",
                          "model": "model",
                          "name": "name",
                          "version_id": "version_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "status": "uncommitted",
                          "last_used_at": "2024-01-15T09:30:00Z",
                          "version_logs_count": 1,
                          "total_logs_count": 1,
                          "inputs": [
                            {
                              "name": "name"
                            }
                          ]
                        },
                        "environment": {
                          "id": "id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "name": "name",
                          "tag": "default"
                        },
                        "type": "environment"
                      },
                      "state": "active",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z"
                    }
                  ]
                },
                "start_time": "2024-01-15T09:30:00Z",
                "end_time": "2024-01-15T09:30:00Z",
                "output": "output",
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "provider_latency": 1.1,
                "stdout": "stdout",
                "provider_request": {
                  "key": "value"
                },
                "provider_response": {
                  "key": "value"
                },
                "inputs": {
                  "key": "value"
                },
                "source": "source",
                "metadata": {
                  "key": "value"
                },
                "source_datapoint_id": "source_datapoint_id",
                "trace_parent_id": "trace_parent_id",
                "batches": [
                  "batches"
                ],
                "user": "user",
                "environment": "environment",
                "save": true,
                "trace_flow_id": "trace_flow_id",
                "trace_id": "trace_id",
                "trace_children": [
                  {
                    "output_message": {
                      "role": "user"
                    },
                    "prompt_tokens": 1,
                    "output_tokens": 1,
                    "prompt_cost": 1.1,
                    "output_cost": 1.1,
                    "finish_reason": "finish_reason",
                    "messages": [
                      {
                        "role": "user"
                      }
                    ],
                    "tool_choice": "none",
                    "prompt": {
                      "path": "path",
                      "id": "id",
                      "model": "model",
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    },
                    "start_time": "2024-01-15T09:30:00Z",
                    "end_time": "2024-01-15T09:30:00Z",
                    "output": "output",
                    "created_at": "2024-01-15T09:30:00Z",
                    "error": "error",
                    "provider_latency": 1.1,
                    "stdout": "stdout",
                    "provider_request": {
                      "key": "value"
                    },
                    "provider_response": {
                      "key": "value"
                    },
                    "inputs": {
                      "key": "value"
                    },
                    "source": "source",
                    "metadata": {
                      "key": "value"
                    },
                    "source_datapoint_id": "source_datapoint_id",
                    "trace_parent_id": "trace_parent_id",
                    "batches": [
                      "batches"
                    ],
                    "user": "user",
                    "environment": "environment",
                    "save": true,
                    "id": "id",
                    "evaluator_logs": [
                      {
                        "id": "id",
                        "evaluator_logs": [],
                        "evaluator": {
                          "path": "path",
                          "id": "id",
                          "spec": {
                            "arguments_type": "target_free",
                            "return_type": "boolean",
                            "evaluator_type": "llm"
                          },
                          "name": "name",
                          "version_id": "version_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "status": "uncommitted",
                          "last_used_at": "2024-01-15T09:30:00Z",
                          "version_logs_count": 1,
                          "total_logs_count": 1,
                          "inputs": [
                            {
                              "name": "name"
                            }
                          ]
                        }
                      }
                    ],
                    "trace_flow_id": "trace_flow_id",
                    "trace_id": "trace_id"
                  }
                ],
                "trace_status": "complete"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/flows/logs/log_id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"trace_status\": \"complete\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.update_log(\n    log_id=\"log_id\",\n    trace_status=\"complete\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.updateLog(\"log_id\", {\n    traceStatus: \"complete\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/logs/:log_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "log_id": ":log_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "trace_status": "complete"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/flows/logs/:log_id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"trace_status\": \"complete\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.update_log(\n    log_id=\"log_id\",\n    trace_status=\"complete\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.updateLog(\"log_id\", {\n    traceStatus: \"complete\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.updateLog(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "log_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "inputs: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "inputs"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "output: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "output"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "error: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "error"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "complete": "Humanloop.TraceStatus.Complete",
                            "incomplete": "Humanloop.TraceStatus.Incomplete"
                          },
                          "templateString": "traceStatus: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "trace_status"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.listVersions": {
        "id": "endpoint_flows.listVersions",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Get a list of all the versions of a Flow.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          }
        ],
        "queryParameters": [
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            },
            "description": "Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned."
          },
          {
            "key": "evaluator_aggregates",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Whether to include Evaluator aggregate results for the versions in the response"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:ListFlows"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id/versions",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "path",
                    "id": "id",
                    "attributes": {
                      "key": "value"
                    },
                    "name": "name",
                    "version_id": "version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "status": "uncommitted",
                    "last_used_at": "2024-01-15T09:30:00Z",
                    "version_logs_count": 1,
                    "directory_id": "directory_id",
                    "commit_message": "commit_message",
                    "type": "flow",
                    "environments": [
                      {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      }
                    ],
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address"
                    },
                    "evaluator_aggregates": [
                      {
                        "value": 1.1,
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ],
                    "evaluators": [
                      {
                        "version_reference": {
                          "file": {
                            "path": "path",
                            "id": "id",
                            "model": "model",
                            "name": "name",
                            "version_id": "version_id",
                            "created_at": "2024-01-15T09:30:00Z",
                            "updated_at": "2024-01-15T09:30:00Z",
                            "status": "uncommitted",
                            "last_used_at": "2024-01-15T09:30:00Z",
                            "version_logs_count": 1,
                            "total_logs_count": 1,
                            "inputs": [
                              {
                                "name": "name"
                              }
                            ]
                          },
                          "environment": {
                            "id": "id",
                            "created_at": "2024-01-15T09:30:00Z",
                            "name": "name",
                            "tag": "default"
                          },
                          "type": "environment"
                        },
                        "state": "active",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ]
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/flows/id/versions \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.list_versions(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.listVersions(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id/versions",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "status": "uncommitted",
              "evaluator_aggregates": true
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/flows/:id/versions \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d status=uncommitted \\\n     -d evaluator_aggregates=true",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.list_versions(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.listVersions(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.listVersions(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "uncommitted": "Humanloop.VersionStatus.Uncommitted",
                            "committed": "Humanloop.VersionStatus.Committed",
                            "deleted": "Humanloop.VersionStatus.Deleted"
                          },
                          "templateString": "status: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "status"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "evaluatorAggregates: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "evaluator_aggregates"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.commit": {
        "id": "endpoint_flows.commit",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Commit a version of the Flow with a commit message.\n\nIf the version is already committed, an exception will be raised.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/versions/"
          },
          {
            "type": "pathParameter",
            "value": "version_id"
          },
          {
            "type": "literal",
            "value": "/commit"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          },
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Flow."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CommitRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id/versions/version_id/commit",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "version_id": "version_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "commit_message"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "attributes": {
                  "key": "value"
                },
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "directory_id": "directory_id",
                "commit_message": "commit_message",
                "type": "flow",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "evaluators": [
                  {
                    "version_reference": {
                      "file": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "environment": {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      },
                      "type": "environment"
                    },
                    "state": "active",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows/id/versions/version_id/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"commit_message\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.commit(\n    id=\"id\",\n    version_id=\"version_id\",\n    commit_message=\"commit_message\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.commit(\"id\", \"version_id\", {\n    commitMessage: \"commit_message\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id/versions/:version_id/commit",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "version_id": ":version_id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "commit_message": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows/:id/versions/:version_id/commit \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"commit_message\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.commit(\n    id=\"id\",\n    version_id=\"version_id\",\n    commit_message=\"commit_message\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.commit(\"id\", \"version_id\", {\n    commitMessage: \"commit_message\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.commit(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "commitMessage: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "commit_message"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.setDeployment": {
        "id": "endpoint_flows.setDeployment",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Deploy Flow to an Environment.\n\nSet the deployed version for the specified Environment. This Flow\nwill be used for calls made to the Flow in this Environment.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to deploy the Version to."
          }
        ],
        "queryParameters": [
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the specific version of the Flow."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id/environments/environment_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id",
              "environment_id": "environment_id"
            },
            "queryParameters": {
              "version_id": "version_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "attributes": {
                  "key": "value"
                },
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "directory_id": "directory_id",
                "commit_message": "commit_message",
                "type": "flow",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "evaluators": [
                  {
                    "version_reference": {
                      "file": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "environment": {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      },
                      "type": "environment"
                    },
                    "state": "active",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/flows/id/environments/environment_id?version_id=version_id\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.set_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n    version_id=\"version_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.setDeployment(\"id\", \"environment_id\", {\n    versionId: \"version_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {
              "version_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST \"https://api.humanloop.com/v5/flows/:id/environments/:environment_id?version_id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.set_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n    version_id=\"version_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.setDeployment(\"id\", \"environment_id\", {\n    versionId: \"version_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.setDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.removeDeployment": {
        "id": "endpoint_flows.removeDeployment",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Remove deployed Flow from the Environment.\n\nRemove the deployed version for the specified Environment. This Flow\nwill no longer be used for calls made to the Flow in this Environment.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments/"
          },
          {
            "type": "pathParameter",
            "value": "environment_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          },
          {
            "key": "environment_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the Environment to remove the deployment from."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id/environments/environment_id",
            "responseStatusCode": 204,
            "pathParameters": {
              "id": "id",
              "environment_id": "environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/flows/id/environments/environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.remove_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.removeDeployment(\"id\", \"environment_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id/environments/:environment_id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id",
              "environment_id": ":environment_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/flows/:id/environments/:environment_id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.remove_deployment(\n    id=\"id\",\n    environment_id=\"environment_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.removeDeployment(\"id\", \"environment_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.removeDeployment(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "environment_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.listEnvironments": {
        "id": "endpoint_flows.listEnvironments",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "List all Environments and their deployed versions for the Flow.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/environments"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Flow."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileEnvironmentResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id/environments",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": "id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "name": "name",
                  "tag": "default",
                  "file": {
                    "path": "path",
                    "id": "id",
                    "directory_id": "directory_id",
                    "model": "model",
                    "endpoint": "complete",
                    "template": "template",
                    "provider": "openai",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "other": {
                      "key": "value"
                    },
                    "seed": 1,
                    "response_format": {
                      "type": "json_object"
                    },
                    "tools": [
                      {
                        "name": "name",
                        "description": "description"
                      }
                    ],
                    "linked_tools": [
                      {
                        "name": "name",
                        "description": "description",
                        "id": "id",
                        "version_id": "version_id"
                      }
                    ],
                    "attributes": {
                      "key": "value"
                    },
                    "commit_message": "commit_message",
                    "name": "name",
                    "version_id": "version_id",
                    "type": "prompt",
                    "environments": [
                      {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address"
                    },
                    "status": "uncommitted",
                    "last_used_at": "2024-01-15T09:30:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "name"
                      }
                    ],
                    "evaluator_aggregates": [
                      {
                        "value": 1.1,
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ]
                  }
                }
              ]
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/flows/id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.list_environments(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.listEnvironments(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id/environments",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/flows/:id/environments \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.list_environments(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.listEnvironments(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.listEnvironments(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_flows.updateMonitoring": {
        "id": "endpoint_flows.updateMonitoring",
        "namespace": [
          "subpackage_flows"
        ],
        "description": "Activate and deactivate Evaluators for monitoring the Flow.\n\nAn activated Evaluator will automatically be run on all new \"completed\" Logs\nwithin the Flow for monitoring purposes.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/flows/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/evaluators"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluatorActivationDeactivationRequest"
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/flows/id/evaluators",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "path": "path",
                "id": "id",
                "attributes": {
                  "key": "value"
                },
                "name": "name",
                "version_id": "version_id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "version_logs_count": 1,
                "directory_id": "directory_id",
                "commit_message": "commit_message",
                "type": "flow",
                "environments": [
                  {
                    "id": "id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "name": "name",
                    "tag": "default"
                  }
                ],
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "evaluator_aggregates": [
                  {
                    "value": 1.1,
                    "evaluator_id": "evaluator_id",
                    "evaluator_version_id": "evaluator_version_id",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z"
                  }
                ],
                "evaluators": [
                  {
                    "version_reference": {
                      "file": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "environment": {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      },
                      "type": "environment"
                    },
                    "state": "active",
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows/id/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.update_monitoring(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient, Humanloop } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.updateMonitoring(\"id\", {});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/flows/:id/evaluators",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/flows/:id/evaluators \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.flows.update_monitoring(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient, Humanloop } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.flows.updateMonitoring(\"id\", {});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.flows.updateMonitoring(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "activate: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorVersionId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_version_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorVersionRequest"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "environmentId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "environment_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorEnvironmentRequest"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "activate"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "deactivate: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "union_v2",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "$FERN_INPUT",
                                  "members": [
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorVersionId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_version_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorVersionRequest"
                                      }
                                    },
                                    {
                                      "template": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "$FERN_INPUT",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "evaluatorId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "evaluator_id"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "environmentId: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "RELATIVE",
                                                  "path": "environment_id"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      },
                                      "type": {
                                        "type": "id",
                                        "value": "type_:MonitoringEvaluatorEnvironmentRequest"
                                      }
                                    }
                                  ],
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": null
                                  }
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "deactivate"
                                }
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_files.list": {
        "id": "endpoint_files.list",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Get a paginated list of files.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page offset for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of files to fetch."
          },
          {
            "key": "name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-insensitive filter for file name."
          },
          {
            "key": "type",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:FileType"
                  }
                }
              }
            },
            "description": "List of file types to filter for."
          },
          {
            "key": "environment",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Case-sensitive filter for files with a deployment in the specified environment. Requires the environment name."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectSortBy"
                  }
                }
              }
            },
            "description": "Field to sort files by"
          },
          {
            "key": "order",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:SortOrder"
                  }
                }
              }
            },
            "description": "Direction to sort by."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataUnionPromptResponseToolResponseDatasetResponseEvaluatorResponseFlowResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/files",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "path": "path",
                    "id": "id",
                    "directory_id": "directory_id",
                    "model": "model",
                    "endpoint": "complete",
                    "template": "template",
                    "provider": "openai",
                    "max_tokens": 1,
                    "temperature": 1.1,
                    "top_p": 1.1,
                    "stop": "stop",
                    "presence_penalty": 1.1,
                    "frequency_penalty": 1.1,
                    "other": {
                      "key": "value"
                    },
                    "seed": 1,
                    "response_format": {
                      "type": "json_object"
                    },
                    "tools": [
                      {
                        "name": "name",
                        "description": "description"
                      }
                    ],
                    "linked_tools": [
                      {
                        "name": "name",
                        "description": "description",
                        "id": "id",
                        "version_id": "version_id"
                      }
                    ],
                    "attributes": {
                      "key": "value"
                    },
                    "commit_message": "commit_message",
                    "name": "name",
                    "version_id": "version_id",
                    "type": "prompt",
                    "environments": [
                      {
                        "id": "id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "name": "name",
                        "tag": "default"
                      }
                    ],
                    "created_at": "2024-01-15T09:30:00Z",
                    "updated_at": "2024-01-15T09:30:00Z",
                    "created_by": {
                      "id": "id",
                      "email_address": "email_address"
                    },
                    "status": "uncommitted",
                    "last_used_at": "2024-01-15T09:30:00Z",
                    "version_logs_count": 1,
                    "total_logs_count": 1,
                    "inputs": [
                      {
                        "name": "name"
                      }
                    ],
                    "evaluator_aggregates": [
                      {
                        "value": 1.1,
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z"
                      }
                    ]
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/files \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.files.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.files.list();\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/files \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.files.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.files.list();\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.files.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "prompt": "Humanloop.FileType.Prompt",
                            "tool": "Humanloop.FileType.Tool",
                            "dataset": "Humanloop.FileType.Dataset",
                            "evaluator": "Humanloop.FileType.Evaluator",
                            "flow": "Humanloop.FileType.Flow"
                          },
                          "templateString": "type: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "type"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "environment: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "environment"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "created_at": "Humanloop.ProjectSortBy.CreatedAt",
                            "updated_at": "Humanloop.ProjectSortBy.UpdatedAt",
                            "name": "Humanloop.ProjectSortBy.Name"
                          },
                          "templateString": "sortBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "sort_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "asc": "Humanloop.SortOrder.Asc",
                            "desc": "Humanloop.SortOrder.Desc"
                          },
                          "templateString": "order: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "order"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.list": {
        "id": "endpoint_evaluations.list",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "List all Evaluations for the specified `file_id`.\n\nRetrieve a list of Evaluations that evaluate versions of the specified File.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "file_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Filter by File ID. Only Evaluations for the specified File will be returned."
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page number for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Evaluations to fetch."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedEvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations",
            "responseStatusCode": 200,
            "name": "List evaluations for file",
            "pathParameters": {},
            "queryParameters": {
              "file_id": "pr_30gco7dx6JDq4200GVOHa",
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "ev_567yza",
                    "dataset": {
                      "path": "test-questions",
                      "id": "ds_345mno",
                      "name": "test-questions",
                      "version_id": "dsv_678pqr",
                      "created_at": "2024-05-01T12:00:00Z",
                      "updated_at": "2024-05-01T12:00:00Z",
                      "status": "committed",
                      "last_used_at": "2024-05-01T12:00:00Z",
                      "datapoints_count": 2,
                      "type": "dataset",
                      "created_by": {
                        "id": "usr_v23rSVAgas2a",
                        "full_name": "Jordan Burges",
                        "email_address": "jordan@humanloop.com"
                      },
                      "commit_message": "initial commit"
                    },
                    "evaluatees": [
                      {
                        "version": {
                          "path": "Personal Projects/Coding Assistant",
                          "id": "pr_30gco7dx6JDq4200GVOHa",
                          "name": "Coding Assistant",
                          "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                          "type": "prompt",
                          "environments": [
                            {
                              "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                              "created_at": "2023-06-27T23:16:07.992339",
                              "name": "development",
                              "tag": "default"
                            }
                          ],
                          "created_at": "2024-07-08T22:40:35.656915",
                          "updated_at": "2024-07-08T22:40:35.656915",
                          "created_by": {
                            "id": "usr_01RJO1k2spBVqNUt1ASef",
                            "email_address": "raza@humanloop.com",
                            "full_name": "Raza Habib"
                          },
                          "status": "committed",
                          "last_used_at": "2024-07-08T22:40:35.656915",
                          "model": "gpt-4o",
                          "endpoint": "chat",
                          "template": [
                            {
                              "content": "You are a helpful coding assistant specialising in {{language}}",
                              "role": "system"
                            }
                          ],
                          "provider": "openai",
                          "max_tokens": -1,
                          "temperature": 0.7,
                          "top_p": 1,
                          "presence_penalty": 0,
                          "frequency_penalty": 0,
                          "other": {},
                          "tools": [],
                          "linked_tools": [],
                          "commit_message": "Initial commit",
                          "version_logs_count": 0,
                          "total_logs_count": 0,
                          "inputs": [
                            {
                              "name": "messages"
                            }
                          ]
                        },
                        "orchestrated": false
                      }
                    ],
                    "evaluators": [
                      {
                        "version": {
                          "path": "Shared Evaluators/Accuracy Evaluator",
                          "id": "ev_890bcd",
                          "spec": {
                            "arguments_type": "target_required",
                            "return_type": "number",
                            "evaluator_type": "python",
                            "code": "def evaluate(answer, target):\n    return 0.5"
                          },
                          "name": "Accuracy Evaluator",
                          "version_id": "evv_012def",
                          "created_at": "2024-05-01T12:00:00Z",
                          "updated_at": "2024-05-01T12:00:00Z",
                          "status": "committed",
                          "last_used_at": "2024-05-01T12:00:00Z",
                          "version_logs_count": 1,
                          "total_logs_count": 1,
                          "inputs": [
                            {
                              "name": "answer"
                            }
                          ],
                          "type": "evaluator"
                        },
                        "orchestrated": false
                      }
                    ],
                    "status": "completed",
                    "created_at": "2024-05-01T12:00:00Z",
                    "updated_at": "2024-05-01T12:00:00Z"
                  }
                ],
                "page": 1,
                "size": 10,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d file_id=pr_30gco7dx6JDq4200GVOHa \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.evaluations.list(\n    file_id=\"pr_30gco7dx6JDq4200GVOHa\",\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.list({\n    fileId: \"pr_30gco7dx6JDq4200GVOHa\",\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "file_id": "string",
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d file_id=string \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.evaluations.list(\n    file_id=\"pr_30gco7dx6JDq4200GVOHa\",\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.list({\n    fileId: \"pr_30gco7dx6JDq4200GVOHa\",\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "fileId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "file_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.create": {
        "id": "endpoint_evaluations.create",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Create an Evaluation.\n\nCreate a new Evaluation by specifying the Dataset, versions to be\nevaluated (Evaluatees), and which Evaluators to provide judgments.\n\nHumanloop will automatically start generating Logs and running Evaluators where\n`orchestrated=true`. If you own the runtime for the Evaluatee or Evaluator, you\ncan set `orchestrated=false` and then generate and submit the required logs using\nyour runtime.\n\nTo keep updated on the progress of the Evaluation, you can poll the Evaluation using\nthe GET /evaluations/{id} endpoint and check its status.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "dataset",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:EvaluationsDatasetRequest"
                  }
                },
                "description": "Dataset to use in this Evaluation."
              },
              {
                "key": "evaluatees",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:EvaluateeRequest"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifiers for the Prompt/Tool Versions to include in the Evaluation. Can be left unpopulated if you wish to add Evaluatees to this Evaluation by specifying `evaluation_id` in Log calls."
              },
              {
                "key": "evaluators",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:EvaluationsRequest"
                      }
                    }
                  }
                },
                "description": "The Evaluators used to evaluate."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Evaluation to help identify it. Must be unique within the associated File."
              },
              {
                "key": "file",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:FileRequest"
                      }
                    }
                  }
                },
                "description": "The File to associate with the Evaluation."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations",
            "responseStatusCode": 200,
            "name": "Create evaluation",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "dataset": {
                  "version_id": "dsv_6L78pqrdFi2xa"
                },
                "evaluators": [
                  {
                    "version_id": "evv_012def",
                    "orchestrated": false
                  }
                ],
                "evaluatees": [
                  {
                    "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                    "orchestrated": false
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "ev_567yza",
                "dataset": {
                  "path": "test-questions",
                  "id": "ds_345mno",
                  "name": "test-questions",
                  "version_id": "dsv_678pqr",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "datapoints_count": 2,
                  "type": "dataset",
                  "created_by": {
                    "id": "usr_v23rSVAgas2a",
                    "full_name": "Jordan Burges",
                    "email_address": "jordan@humanloop.com"
                  },
                  "commit_message": "initial commit"
                },
                "evaluatees": [
                  {
                    "version": {
                      "path": "Personal Projects/Coding Assistant",
                      "id": "pr_30gco7dx6JDq4200GVOHa",
                      "name": "Coding Assistant",
                      "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                      "type": "prompt",
                      "environments": [
                        {
                          "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                          "created_at": "2023-06-27T23:16:07.992339",
                          "name": "development",
                          "tag": "default"
                        }
                      ],
                      "created_at": "2024-07-08T22:40:35.656915",
                      "updated_at": "2024-07-08T22:40:35.656915",
                      "created_by": {
                        "id": "usr_01RJO1k2spBVqNUt1ASef",
                        "email_address": "raza@humanloop.com",
                        "full_name": "Raza Habib"
                      },
                      "status": "committed",
                      "last_used_at": "2024-07-08T22:40:35.656915",
                      "model": "gpt-4o",
                      "endpoint": "chat",
                      "template": [
                        {
                          "content": "You are a helpful coding assistant specialising in {{language}}",
                          "role": "system"
                        }
                      ],
                      "provider": "openai",
                      "max_tokens": -1,
                      "temperature": 0.7,
                      "top_p": 1,
                      "presence_penalty": 0,
                      "frequency_penalty": 0,
                      "other": {},
                      "tools": [],
                      "linked_tools": [],
                      "commit_message": "Initial commit",
                      "version_logs_count": 0,
                      "total_logs_count": 0,
                      "inputs": [
                        {
                          "name": "messages"
                        }
                      ]
                    },
                    "orchestrated": false
                  }
                ],
                "evaluators": [
                  {
                    "version": {
                      "path": "Shared Evaluators/Accuracy Evaluator",
                      "id": "ev_890bcd",
                      "spec": {
                        "arguments_type": "target_required",
                        "return_type": "number",
                        "evaluator_type": "python",
                        "code": "def evaluate(answer, target):\n    return 0.5"
                      },
                      "name": "Accuracy Evaluator",
                      "version_id": "evv_012def",
                      "created_at": "2024-05-01T12:00:00Z",
                      "updated_at": "2024-05-01T12:00:00Z",
                      "status": "committed",
                      "last_used_at": "2024-05-01T12:00:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "answer"
                        }
                      ],
                      "type": "evaluator"
                    },
                    "orchestrated": false
                  }
                ],
                "status": "completed",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"dataset\": {\n    \"version_id\": \"dsv_6L78pqrdFi2xa\"\n  },\n  \"evaluators\": [\n    {\n      \"version_id\": \"evv_012def\",\n      \"orchestrated\": false\n    }\n  ],\n  \"evaluatees\": [\n    {\n      \"version_id\": \"prv_7ZlQREDScH0xkhUwtXruN\",\n      \"orchestrated\": false\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.create(\n    dataset={\"version_id\": \"dsv_6L78pqrdFi2xa\"},\n    evaluatees=[\n        {\"version_id\": \"prv_7ZlQREDScH0xkhUwtXruN\", \"orchestrated\": False}\n    ],\n    evaluators=[{\"version_id\": \"evv_012def\", \"orchestrated\": False}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.create({\n    dataset: {\n        versionId: \"dsv_6L78pqrdFi2xa\"\n    },\n    evaluatees: [{\n            versionId: \"prv_7ZlQREDScH0xkhUwtXruN\",\n            orchestrated: false\n        }],\n    evaluators: [{\n            versionId: \"evv_012def\",\n            orchestrated: false\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "dataset": {},
                "evaluators": [
                  {}
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.humanloop.com/v5/evaluations \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"dataset\": {},\n  \"evaluators\": [\n    {}\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.create(\n    dataset={\"version_id\": \"dsv_6L78pqrdFi2xa\"},\n    evaluatees=[\n        {\"version_id\": \"prv_7ZlQREDScH0xkhUwtXruN\", \"orchestrated\": False}\n    ],\n    evaluators=[{\"version_id\": \"evv_012def\", \"orchestrated\": False}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.create({\n    dataset: {\n        versionId: \"dsv_6L78pqrdFi2xa\"\n    },\n    evaluatees: [{\n            versionId: \"prv_7ZlQREDScH0xkhUwtXruN\",\n            orchestrated: false\n        }],\n    evaluators: [{\n            versionId: \"evv_012def\",\n            orchestrated: false\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "dataset: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "versionId: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.version_id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "path: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.path"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "fileId: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.file_id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "environment: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.environment"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "evaluatees: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "versionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "version_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "path: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "path"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "fileId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "file_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "environment: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "environment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "batchId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "batch_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "orchestrated: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "orchestrated"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "evaluatees"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "evaluators: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "versionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "version_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "path: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "path"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "fileId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "file_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "environment: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "environment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "orchestrated: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "orchestrated"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "evaluators"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "file: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "id: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "file.id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "path: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "file.path"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.get": {
        "id": "endpoint_evaluations.get",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Get an Evaluation.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluation."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/ev_567yza",
            "responseStatusCode": 200,
            "name": "Get evaluation",
            "pathParameters": {
              "id": "ev_567yza"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "ev_567yza",
                "dataset": {
                  "path": "test-questions",
                  "id": "ds_345mno",
                  "name": "test-questions",
                  "version_id": "dsv_678pqr",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "datapoints_count": 2,
                  "type": "dataset",
                  "created_by": {
                    "id": "usr_v23rSVAgas2a",
                    "full_name": "Jordan Burges",
                    "email_address": "jordan@humanloop.com"
                  },
                  "commit_message": "initial commit"
                },
                "evaluatees": [
                  {
                    "version": {
                      "path": "Personal Projects/Coding Assistant",
                      "id": "pr_30gco7dx6JDq4200GVOHa",
                      "name": "Coding Assistant",
                      "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                      "type": "prompt",
                      "environments": [
                        {
                          "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                          "created_at": "2023-06-27T23:16:07.992339",
                          "name": "development",
                          "tag": "default"
                        }
                      ],
                      "created_at": "2024-07-08T22:40:35.656915",
                      "updated_at": "2024-07-08T22:40:35.656915",
                      "created_by": {
                        "id": "usr_01RJO1k2spBVqNUt1ASef",
                        "email_address": "raza@humanloop.com",
                        "full_name": "Raza Habib"
                      },
                      "status": "committed",
                      "last_used_at": "2024-07-08T22:40:35.656915",
                      "model": "gpt-4o",
                      "endpoint": "chat",
                      "template": [
                        {
                          "content": "You are a helpful coding assistant specialising in {{language}}",
                          "role": "system"
                        }
                      ],
                      "provider": "openai",
                      "max_tokens": -1,
                      "temperature": 0.7,
                      "top_p": 1,
                      "presence_penalty": 0,
                      "frequency_penalty": 0,
                      "other": {},
                      "tools": [],
                      "linked_tools": [],
                      "commit_message": "Initial commit",
                      "version_logs_count": 0,
                      "total_logs_count": 0,
                      "inputs": [
                        {
                          "name": "messages"
                        }
                      ]
                    },
                    "orchestrated": false
                  }
                ],
                "evaluators": [
                  {
                    "version": {
                      "path": "Shared Evaluators/Accuracy Evaluator",
                      "id": "ev_890bcd",
                      "spec": {
                        "arguments_type": "target_required",
                        "return_type": "number",
                        "evaluator_type": "python",
                        "code": "def evaluate(answer, target):\n    return 0.5"
                      },
                      "name": "Accuracy Evaluator",
                      "version_id": "evv_012def",
                      "created_at": "2024-05-01T12:00:00Z",
                      "updated_at": "2024-05-01T12:00:00Z",
                      "status": "committed",
                      "last_used_at": "2024-05-01T12:00:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "answer"
                        }
                      ],
                      "type": "evaluator"
                    },
                    "orchestrated": false
                  }
                ],
                "status": "completed",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluations/ev_567yza \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.get(\n    id=\"ev_567yza\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.get(\"ev_567yza\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluations/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.get(\n    id=\"ev_567yza\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.get(\"ev_567yza\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.delete": {
        "id": "endpoint_evaluations.delete",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Delete an Evaluation.\n\nRemove an Evaluation from Humanloop. The Logs and Versions used in the Evaluation\nwill not be deleted.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluation."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/ev_567yza",
            "responseStatusCode": 204,
            "name": "Delete evaluation",
            "pathParameters": {
              "id": "ev_567yza"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/evaluations/ev_567yza \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.delete(\n    id=\"ev_567yza\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.delete(\"ev_567yza\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.humanloop.com/v5/evaluations/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.delete(\n    id=\"ev_567yza\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.delete(\"ev_567yza\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.updateSetup": {
        "id": "endpoint_evaluations.updateSetup",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Update an Evaluation.\n\nUpdate the setup of an Evaluation by specifying the Dataset, versions to be\nevaluated (Evaluatees), and which Evaluators to provide judgments.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluation."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "dataset",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:EvaluationsDatasetRequest"
                      }
                    }
                  }
                },
                "description": "Dataset to use in this Evaluation."
              },
              {
                "key": "evaluatees",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:EvaluateeRequest"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Unique identifiers for the Prompt/Tool Versions to include in the Evaluation. Can be left unpopulated if you wish to add evaluatees to this Evaluation by specifying `evaluation_id` in Log calls."
              },
              {
                "key": "evaluators",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_:EvaluationsRequest"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "The Evaluators used to evaluate."
              },
              {
                "key": "name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Name of the Evaluation to help identify it. Must be unique within the associated File."
              },
              {
                "key": "file",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:FileRequest"
                      }
                    }
                  }
                },
                "description": "The File to associate with the Evaluation."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/ev_567yza",
            "responseStatusCode": 200,
            "name": "Update evaluation",
            "pathParameters": {
              "id": "ev_567yza"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "dataset": {
                  "version_id": "dsv_6L78pqrdFi2xa"
                },
                "evaluatees": [
                  {
                    "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                    "orchestrated": false
                  }
                ],
                "evaluators": [
                  {
                    "version_id": "evv_012def",
                    "orchestrated": false
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "ev_567yza",
                "dataset": {
                  "path": "test-questions",
                  "id": "ds_345mno",
                  "name": "test-questions",
                  "version_id": "dsv_678pqr",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "datapoints_count": 2,
                  "type": "dataset",
                  "created_by": {
                    "id": "usr_v23rSVAgas2a",
                    "full_name": "Jordan Burges",
                    "email_address": "jordan@humanloop.com"
                  },
                  "commit_message": "initial commit"
                },
                "evaluatees": [
                  {
                    "version": {
                      "path": "Personal Projects/Coding Assistant",
                      "id": "pr_30gco7dx6JDq4200GVOHa",
                      "name": "Coding Assistant",
                      "version_id": "prv_7ZlQREDScH0xkhUwtXruN",
                      "type": "prompt",
                      "environments": [
                        {
                          "id": "env_ffSVxEBzJcBZ1H5jcNMVj",
                          "created_at": "2023-06-27T23:16:07.992339",
                          "name": "development",
                          "tag": "default"
                        }
                      ],
                      "created_at": "2024-07-08T22:40:35.656915",
                      "updated_at": "2024-07-08T22:40:35.656915",
                      "created_by": {
                        "id": "usr_01RJO1k2spBVqNUt1ASef",
                        "email_address": "raza@humanloop.com",
                        "full_name": "Raza Habib"
                      },
                      "status": "committed",
                      "last_used_at": "2024-07-08T22:40:35.656915",
                      "model": "gpt-4o",
                      "endpoint": "chat",
                      "template": [
                        {
                          "content": "You are a helpful coding assistant specialising in {{language}}",
                          "role": "system"
                        }
                      ],
                      "provider": "openai",
                      "max_tokens": -1,
                      "temperature": 0.7,
                      "top_p": 1,
                      "presence_penalty": 0,
                      "frequency_penalty": 0,
                      "other": {},
                      "tools": [],
                      "linked_tools": [],
                      "commit_message": "Initial commit",
                      "version_logs_count": 0,
                      "total_logs_count": 0,
                      "inputs": [
                        {
                          "name": "messages"
                        }
                      ]
                    },
                    "orchestrated": false
                  }
                ],
                "evaluators": [
                  {
                    "version": {
                      "path": "Shared Evaluators/Accuracy Evaluator",
                      "id": "ev_890bcd",
                      "spec": {
                        "arguments_type": "target_required",
                        "return_type": "number",
                        "evaluator_type": "python",
                        "code": "def evaluate(answer, target):\n    return 0.5"
                      },
                      "name": "Accuracy Evaluator",
                      "version_id": "evv_012def",
                      "created_at": "2024-05-01T12:00:00Z",
                      "updated_at": "2024-05-01T12:00:00Z",
                      "status": "committed",
                      "last_used_at": "2024-05-01T12:00:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "answer"
                        }
                      ],
                      "type": "evaluator"
                    },
                    "orchestrated": false
                  }
                ],
                "status": "completed",
                "created_at": "2024-05-01T12:00:00Z",
                "updated_at": "2024-05-01T12:00:00Z"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/evaluations/ev_567yza \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"dataset\": {\n    \"version_id\": \"dsv_6L78pqrdFi2xa\"\n  },\n  \"evaluatees\": [\n    {\n      \"version_id\": \"prv_7ZlQREDScH0xkhUwtXruN\",\n      \"orchestrated\": false\n    }\n  ],\n  \"evaluators\": [\n    {\n      \"version_id\": \"evv_012def\",\n      \"orchestrated\": false\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.update_setup(\n    id=\"ev_567yza\",\n    dataset={\"version_id\": \"dsv_6L78pqrdFi2xa\"},\n    evaluatees=[\n        {\"version_id\": \"prv_7ZlQREDScH0xkhUwtXruN\", \"orchestrated\": False}\n    ],\n    evaluators=[{\"version_id\": \"evv_012def\", \"orchestrated\": False}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.updateSetup(\"ev_567yza\", {\n    dataset: {\n        versionId: \"dsv_6L78pqrdFi2xa\"\n    },\n    evaluatees: [{\n            versionId: \"prv_7ZlQREDScH0xkhUwtXruN\",\n            orchestrated: false\n        }],\n    evaluators: [{\n            versionId: \"evv_012def\",\n            orchestrated: false\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/evaluations/:id \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.update_setup(\n    id=\"ev_567yza\",\n    dataset={\"version_id\": \"dsv_6L78pqrdFi2xa\"},\n    evaluatees=[\n        {\"version_id\": \"prv_7ZlQREDScH0xkhUwtXruN\", \"orchestrated\": False}\n    ],\n    evaluators=[{\"version_id\": \"evv_012def\", \"orchestrated\": False}],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.updateSetup(\"ev_567yza\", {\n    dataset: {\n        versionId: \"dsv_6L78pqrdFi2xa\"\n    },\n    evaluatees: [{\n            versionId: \"prv_7ZlQREDScH0xkhUwtXruN\",\n            orchestrated: false\n        }],\n    evaluators: [{\n            versionId: \"evv_012def\",\n            orchestrated: false\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.updateSetup(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "dataset: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "versionId: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.version_id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "path: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.path"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "fileId: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.file_id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "environment: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "dataset.environment"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "evaluatees: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "versionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "version_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "path: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "path"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "fileId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "file_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "environment: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "environment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "batchId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "batch_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "orchestrated: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "orchestrated"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "evaluatees"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "evaluators: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "versionId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "version_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "path: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "path"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "fileId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "file_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "environment: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "environment"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "orchestrated: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "orchestrated"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "evaluators"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "name: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "file: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "id: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "file.id"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "path: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "file.path"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.updateStatus": {
        "id": "endpoint_evaluations.updateStatus",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Update the status of an Evaluation.\n\nCan be used to cancel a running Evaluation, or mark an Evaluation that uses\nexternal or human evaluators as completed.",
        "method": "PATCH",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/status"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluation."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "status",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:EvaluationStatus"
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id/status",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "status": "pending"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "id",
                "dataset": {
                  "path": "path",
                  "id": "id",
                  "name": "name",
                  "version_id": "version_id",
                  "created_at": "2024-01-15T09:30:00Z",
                  "updated_at": "2024-01-15T09:30:00Z",
                  "status": "uncommitted",
                  "last_used_at": "2024-01-15T09:30:00Z",
                  "datapoints_count": 1,
                  "directory_id": "directory_id",
                  "type": "dataset",
                  "environments": [
                    {
                      "id": "id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "name": "name",
                      "tag": "default"
                    }
                  ],
                  "created_by": {
                    "id": "id",
                    "email_address": "email_address",
                    "full_name": "full_name"
                  },
                  "commit_message": "commit_message",
                  "datapoints": [
                    {
                      "id": "id"
                    }
                  ],
                  "attributes": {
                    "key": "value"
                  }
                },
                "evaluatees": [
                  {
                    "version": {
                      "path": "path",
                      "id": "id",
                      "model": "model",
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    },
                    "orchestrated": true,
                    "batch_id": "batch_id"
                  }
                ],
                "evaluators": [
                  {
                    "version": {
                      "path": "path",
                      "id": "id",
                      "spec": {
                        "arguments_type": "target_free",
                        "return_type": "boolean",
                        "evaluator_type": "llm"
                      },
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    },
                    "orchestrated": true
                  }
                ],
                "status": "pending",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "name": "name",
                "file_id": "file_id",
                "created_by": {
                  "id": "id",
                  "email_address": "email_address",
                  "full_name": "full_name"
                },
                "url": "url"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/evaluations/id/status \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"status\": \"pending\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.update_status(\n    id=\"id\",\n    status=\"pending\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.updateStatus(\"id\", {\n    status: \"pending\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id/status",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "status": "pending"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PATCH https://api.humanloop.com/v5/evaluations/:id/status \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"status\": \"pending\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.update_status(\n    id=\"id\",\n    status=\"pending\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.updateStatus(\"id\", {\n    status: \"pending\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.updateStatus(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "pending": "Humanloop.EvaluationStatus.Pending",
                            "running": "Humanloop.EvaluationStatus.Running",
                            "completed": "Humanloop.EvaluationStatus.Completed",
                            "cancelled": "Humanloop.EvaluationStatus.Cancelled"
                          },
                          "templateString": "status: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "status"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.getStats": {
        "id": "endpoint_evaluations.getStats",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Get Evaluation Stats.\n\nRetrieve aggregate stats for the specified Evaluation.\nThis includes the number of generated Logs for each evaluated version and the\ncorresponding Evaluator statistics (such as the mean and percentiles).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/stats"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Evaluation."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EvaluationStats"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id/stats",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "overall_stats": {
                  "num_datapoints": 1,
                  "total_logs": 1,
                  "total_evaluator_logs": 1
                },
                "version_stats": [
                  {
                    "version_id": "version_id",
                    "num_logs": 1,
                    "evaluator_version_stats": [
                      {
                        "evaluator_version_id": "evaluator_version_id",
                        "total_logs": 1,
                        "num_judgments": 1,
                        "num_nulls": 1,
                        "num_errors": 1,
                        "mean": 0,
                        "std": 1,
                        "percentiles": {
                          "0": -2.5,
                          "25": -0.6745,
                          "50": 0,
                          "75": 0.6745,
                          "100": 2.5
                        }
                      }
                    ]
                  }
                ],
                "status": "pending",
                "progress": "progress",
                "report": "report"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluations/id/stats \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.get_stats(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.getStats(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id/stats",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluations/:id/stats \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.get_stats(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.getStats(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.getStats(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_evaluations.getLogs": {
        "id": "endpoint_evaluations.getLogs",
        "namespace": [
          "subpackage_evaluations"
        ],
        "description": "Get the Logs associated to a specific Evaluation.\n\nEach Datapoint in your Dataset will have a corresponding Log for each File version evaluated.\ne.g. If you have 50 Datapoints and are evaluating 2 Prompts, there will be 100 Logs associated with the Evaluation.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/evaluations/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          },
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "String ID of evaluation. Starts with `ev_` or `evr_`."
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page number for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Logs to fetch."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataEvaluationReportLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/evaluations/id/logs",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": "id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "evaluated_version": {
                      "path": "path",
                      "id": "id",
                      "model": "model",
                      "name": "name",
                      "version_id": "version_id",
                      "created_at": "2024-01-15T09:30:00Z",
                      "updated_at": "2024-01-15T09:30:00Z",
                      "status": "uncommitted",
                      "last_used_at": "2024-01-15T09:30:00Z",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "name"
                        }
                      ]
                    },
                    "datapoint": {
                      "id": "id"
                    },
                    "evaluator_logs": [
                      {
                        "prompt": {
                          "path": "path",
                          "id": "id",
                          "model": "model",
                          "name": "name",
                          "version_id": "version_id",
                          "created_at": "2024-01-15T09:30:00Z",
                          "updated_at": "2024-01-15T09:30:00Z",
                          "status": "uncommitted",
                          "last_used_at": "2024-01-15T09:30:00Z",
                          "version_logs_count": 1,
                          "total_logs_count": 1,
                          "inputs": [
                            {
                              "name": "name"
                            }
                          ]
                        },
                        "id": "id",
                        "evaluator_logs": [
                          {
                            "id": "id",
                            "evaluator_logs": [],
                            "evaluator": {
                              "path": "path",
                              "id": "id",
                              "spec": {
                                "arguments_type": "target_free",
                                "return_type": "boolean",
                                "evaluator_type": "llm"
                              },
                              "name": "name",
                              "version_id": "version_id",
                              "created_at": "2024-01-15T09:30:00Z",
                              "updated_at": "2024-01-15T09:30:00Z",
                              "status": "uncommitted",
                              "last_used_at": "2024-01-15T09:30:00Z",
                              "version_logs_count": 1,
                              "total_logs_count": 1,
                              "inputs": [
                                {
                                  "name": "name"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    ],
                    "log": {
                      "prompt": {
                        "path": "path",
                        "id": "id",
                        "model": "model",
                        "name": "name",
                        "version_id": "version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                        "status": "uncommitted",
                        "last_used_at": "2024-01-15T09:30:00Z",
                        "version_logs_count": 1,
                        "total_logs_count": 1,
                        "inputs": [
                          {
                            "name": "name"
                          }
                        ]
                      },
                      "id": "id",
                      "evaluator_logs": [
                        {
                          "id": "id",
                          "evaluator_logs": [],
                          "evaluator": {
                            "path": "path",
                            "id": "id",
                            "spec": {
                              "arguments_type": "target_free",
                              "return_type": "boolean",
                              "evaluator_type": "llm"
                            },
                            "name": "name",
                            "version_id": "version_id",
                            "created_at": "2024-01-15T09:30:00Z",
                            "updated_at": "2024-01-15T09:30:00Z",
                            "status": "uncommitted",
                            "last_used_at": "2024-01-15T09:30:00Z",
                            "version_logs_count": 1,
                            "total_logs_count": 1,
                            "inputs": [
                              {
                                "name": "name"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/evaluations/id/logs \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.get_logs(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.getLogs(\"id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/evaluations/:id/logs",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/evaluations/:id/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.evaluations.get_logs(\n    id=\"id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.evaluations.getLogs(\"id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.evaluations.getLogs(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_logs.list": {
        "id": "endpoint_logs.list",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "List all Logs for the given filter criteria.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "file_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for the File to list Logs for."
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page number for pagination."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Page size for pagination. Number of Logs to fetch."
          },
          {
            "key": "version_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "If provided, only Logs belonging to the specified Version will be returned."
          },
          {
            "key": "version_status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:VersionStatus"
                  }
                }
              }
            },
            "description": "If provided, only Logs belonging to Versions with the specified status will be returned."
          },
          {
            "key": "search",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "If provided, only Logs that contain the provided string in its inputs and output will be returned."
          },
          {
            "key": "metadata_search",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "If provided, only Logs that contain the provided string in its metadata will be returned."
          },
          {
            "key": "start_date",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              }
            },
            "description": "If provided, only Logs created after the specified date will be returned."
          },
          {
            "key": "end_date",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              }
            },
            "description": "If provided, only Logs created before the specified date will be returned."
          },
          {
            "key": "include_parent",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "If true, include the full parent Log in the response. Only applicable when retrieving Evaluator Logs."
          },
          {
            "key": "in_trace_filter",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "If true, return Logs that are associated to a Trace. False, return Logs that are not associated to a Trace."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:PaginatedDataLogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs",
            "responseStatusCode": 200,
            "name": "List logs",
            "pathParameters": {},
            "queryParameters": {
              "file_id": "file_123abc",
              "size": 1
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "records": [
                  {
                    "id": "log_123efg",
                    "created_at": "2024-05-01T12:00:00Z",
                    "output": "This is a sample output.",
                    "prompt": {
                      "id": "pr_123abc",
                      "name": "Test Prompt",
                      "path": "test-prompt",
                      "version_id": "pv_456def",
                      "created_at": "2024-05-01T12:00:00Z",
                      "updated_at": "2024-05-01T12:00:00Z",
                      "status": "committed",
                      "last_used_at": "2024-05-01T12:00:00Z",
                      "model": "gpt-4",
                      "version_logs_count": 1,
                      "total_logs_count": 1,
                      "inputs": [
                        {
                          "name": "question"
                        }
                      ]
                    },
                    "evaluator_logs": []
                  }
                ],
                "page": 1,
                "size": 1,
                "total": 1
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d file_id=file_123abc \\\n     -d size=1",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.logs.list(\n    file_id=\"file_123abc\",\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.logs.list({\n    fileId: \"file_123abc\",\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "file_id": "string",
              "page": 0,
              "size": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.humanloop.com/v5/logs \\\n     -H \"X-API-KEY: <apiKey>\" \\\n     -d file_id=string \\\n     -d page=0 \\\n     -d size=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.logs.list(\n    file_id=\"file_123abc\",\n    size=1,\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.logs.list({\n    fileId: \"file_123abc\",\n    size: 1\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.logs.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "fileId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "file_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "versionId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "version_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "uncommitted": "Humanloop.VersionStatus.Uncommitted",
                            "committed": "Humanloop.VersionStatus.Committed",
                            "deleted": "Humanloop.VersionStatus.Deleted"
                          },
                          "templateString": "versionStatus: $FERN_INPUT",
                          "templateInput": {
                            "location": "QUERY",
                            "path": "version_status"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "search: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "search"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "metadataSearch: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "metadata_search"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startDate: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "start_date"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endDate: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "end_date"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "includeParent: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "include_parent"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "inTraceFilter: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "in_trace_filter"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_logs.delete": {
        "id": "endpoint_logs.delete",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Delete Logs with the given IDs.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "queryParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Unique identifiers for the Logs to delete."
          }
        ],
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "id": "string"
            },
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE \"https://api.humanloop.com/v5/logs?id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.logs.delete(\n    id=\"string\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.logs.delete({\n    id: \"string\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs",
            "responseStatusCode": 422,
            "pathParameters": {},
            "queryParameters": {
              "id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE \"https://api.humanloop.com/v5/logs?id=string\" \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.logs.delete(\n    id=\"string\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.logs.delete({\n    id: \"string\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.logs.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_logs.get": {
        "id": "endpoint_logs.get",
        "namespace": [
          "subpackage_logs"
        ],
        "description": "Retrieve the Log with the given ID.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/logs/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.humanloop.com/v5"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier for Log."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LogResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Validation Error",
            "name": "Unprocessable Entity",
            "statusCode": 422,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:HttpValidationError"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/logs/prv_Wu6zx1lAWJRqOyL8nWuZk",
            "responseStatusCode": 200,
            "name": "Get log",
            "pathParameters": {
              "id": "prv_Wu6zx1lAWJRqOyL8nWuZk"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "log_123efg",
                "created_at": "2024-05-01T12:00:00Z",
                "output": "This is a sample output.",
                "prompt": {
                  "id": "pr_123abc",
                  "name": "Test Prompt",
                  "path": "test-prompt",
                  "version_id": "pv_456def",
                  "created_at": "2024-05-01T12:00:00Z",
                  "updated_at": "2024-05-01T12:00:00Z",
                  "status": "committed",
                  "last_used_at": "2024-05-01T12:00:00Z",
                  "model": "gpt-4",
                  "version_logs_count": 1,
                  "total_logs_count": 1,
                  "inputs": [
                    {
                      "name": "question"
                    }
                  ]
                },
                "evaluator_logs": []
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/logs/prv_Wu6zx1lAWJRqOyL8nWuZk \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.logs.get(\n    id=\"prv_Wu6zx1lAWJRqOyL8nWuZk\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.logs.get(\"prv_Wu6zx1lAWJRqOyL8nWuZk\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/logs/:id",
            "responseStatusCode": 422,
            "pathParameters": {
              "id": ":id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "detail": [
                  {
                    "loc": [
                      "string"
                    ],
                    "msg": "string",
                    "type": "string"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.humanloop.com/v5/logs/:id \\\n     -H \"X-API-KEY: <apiKey>\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from humanloop import Humanloop\n\nclient = Humanloop(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.logs.get(\n    id=\"prv_Wu6zx1lAWJRqOyL8nWuZk\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { HumanloopClient } from \"humanloop\";\n\nconst client = new HumanloopClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.logs.get(\"prv_Wu6zx1lAWJRqOyL8nWuZk\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.logs.get(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { HumanloopClient } from \"humanloop\";"
              ],
              "templateString": "const client = new HumanloopClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": false,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "AUTH",
                              "path": "Authorization"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_prompts:PromptLogRequestToolChoice": {
        "name": "PromptLogRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_prompts:PromptLogUpdateRequestToolChoice": {
        "name": "PromptLogUpdateRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_prompts:PromptsCallStreamRequestToolChoice": {
        "name": "PromptsCallStreamRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_prompts:PromptsCallRequestToolChoice": {
        "name": "PromptsCallRequestToolChoice",
        "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_prompts:PromptRequestTemplate": {
        "name": "PromptRequestTemplate",
        "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_prompts:PromptRequestStop": {
        "name": "PromptRequestStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_evaluators:SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec": {
        "name": "SrcExternalAppModelsV5EvaluatorsEvaluatorRequestSpec",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Llm Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LlmEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "Code Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CodeEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "Human Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:HumanEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "External Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ExternalEvaluatorRequest"
                }
              }
            }
          ]
        }
      },
      "type_evaluators:CreateEvaluatorLogRequestJudgment": {
        "name": "CreateEvaluatorLogRequestJudgment",
        "description": "Evaluator assessment of the Log.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          ]
        }
      },
      "type_evaluators:CreateEvaluatorLogRequestSpec": {
        "name": "CreateEvaluatorLogRequestSpec",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Llm Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LlmEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "Code Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CodeEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "Human Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:HumanEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "External Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ExternalEvaluatorRequest"
                }
              }
            }
          ]
        }
      },
      "type_:BooleanEvaluatorStatsResponse": {
        "name": "BooleanEvaluatorStatsResponse",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator Version."
            },
            {
              "key": "total_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
            },
            {
              "key": "num_judgments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
            },
            {
              "key": "num_nulls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of errored Evaluators for this Evaluator Version."
            },
            {
              "key": "num_true",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of `True` judgments for this Evaluator Version."
            },
            {
              "key": "num_false",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of `False` judgments for this Evaluator Version."
            }
          ]
        }
      },
      "type_:ChatMessageContentItem": {
        "name": "ChatMessageContentItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Text Chat Content",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TextChatContent"
                }
              }
            },
            {
              "displayName": "Image Chat Content",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageChatContent"
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessageContent": {
        "name": "ChatMessageContent",
        "description": "The content of the message.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageContentItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ChatMessage": {
        "name": "ChatMessage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "content",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessageContent"
                    }
                  }
                }
              },
              "description": "The content of the message."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Optional name of the message author."
            },
            {
              "key": "tool_call_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Tool call that this message is responding to."
            },
            {
              "key": "role",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatRole"
                }
              },
              "description": "Role of the message author."
            },
            {
              "key": "tool_calls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolCall"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A list of tool calls requested by the assistant."
            }
          ]
        }
      },
      "type_:ChatRole": {
        "name": "ChatRole",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "user"
            },
            {
              "value": "assistant"
            },
            {
              "value": "system"
            },
            {
              "value": "tool"
            }
          ]
        }
      },
      "type_:CodeEvaluatorRequest": {
        "name": "CodeEvaluatorRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "arguments_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorArgumentsType"
                }
              },
              "description": "Whether this Evaluator is target-free or target-required."
            },
            {
              "key": "return_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorReturnTypeEnum"
                }
              },
              "description": "The type of the return value of the Evaluator."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
            },
            {
              "key": "evaluator_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "python"
                  }
                }
              }
            },
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The code for the Evaluator. This code will be executed in a sandboxed environment."
            }
          ]
        }
      },
      "type_:CommitRequest": {
        "name": "CommitRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "commit_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Message describing the changes made."
            }
          ]
        }
      },
      "type_:CreateDatapointRequestTargetValue": {
        "name": "CreateDatapointRequestTargetValue",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CreateDatapointRequest": {
        "name": "CreateDatapointRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs to the prompt template."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of chat messages to provide to the model."
            },
            {
              "key": "target",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:CreateDatapointRequestTargetValue"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation."
            }
          ]
        }
      },
      "type_:CreateEvaluatorLogResponse": {
        "name": "CreateEvaluatorLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String identifier of the new Log."
            },
            {
              "key": "parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier of the evaluated parent Log."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier of the Session containing both the parent and the new child Log. If the parent Log does not belong to a Session, a new Session is created with this ID."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Identifier of Evaluator Version for which the Log was registered."
            }
          ]
        }
      },
      "type_:CreateFlowLogResponse": {
        "name": "CreateFlowLogResponse",
        "description": "Response for a Flow Log.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Log."
            },
            {
              "key": "flow_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Flow."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Flow Version."
            },
            {
              "key": "trace_status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TraceStatus"
                    }
                  }
                }
              },
              "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on `complete` Traces."
            }
          ]
        }
      },
      "type_:CreatePromptLogResponse": {
        "name": "CreatePromptLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of log."
            },
            {
              "key": "prompt_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the Prompt the log belongs to."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the specific version of the Prompt."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "String ID of session the log belongs to."
            }
          ]
        }
      },
      "type_:CreateToolLogResponse": {
        "name": "CreateToolLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "String ID of log."
            },
            {
              "key": "tool_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the Tool the log belongs to."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the specific version of the Tool."
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "String ID of session the log belongs to."
            }
          ]
        }
      },
      "type_:DashboardConfiguration": {
        "name": "DashboardConfiguration",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "time_unit",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TimeUnit"
                }
              }
            },
            {
              "key": "time_range_days",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "model_config_ids",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatapointResponseTargetValue": {
        "name": "DatapointResponseTargetValue",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:DatapointResponse": {
        "name": "DatapointResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs to the prompt template."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of chat messages to provide to the model."
            },
            {
              "key": "target",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DatapointResponseTargetValue"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Object with criteria necessary to evaluate generations with this Datapoint. This is passed in as an argument to Evaluators when used in an Evaluation."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Datapoint. Starts with `dp_`."
            }
          ]
        }
      },
      "type_:DatasetResponse": {
        "name": "DatasetResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Path of the Dataset, including the name, which is used as a unique identifier."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Dataset. Starts with `ds_`."
            },
            {
              "key": "directory_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the directory that the file is in on Humanloop."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the Dataset, which is used as a unique identifier."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the specific Dataset Version. If no query params provided, the default deployed Dataset Version is returned. Starts with `dsv_`."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "dataset"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "environments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of environments the Dataset Version is deployed to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the Dataset."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionStatus"
                }
              },
              "description": "The status of the Dataset Version."
            },
            {
              "key": "last_used_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "commit_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created."
            },
            {
              "key": "datapoints_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of Datapoints in this Dataset version."
            },
            {
              "key": "datapoints",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:DatapointResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of Datapoints in this Dataset version. Only provided if explicitly requested."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used."
            }
          ]
        }
      },
      "type_:EnvironmentResponse": {
        "name": "EnvironmentResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EnvironmentTag"
                }
              }
            }
          ]
        }
      },
      "type_:EnvironmentTag": {
        "name": "EnvironmentTag",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "default"
            },
            {
              "value": "other"
            }
          ]
        }
      },
      "type_:EvaluatedVersionResponse": {
        "name": "EvaluatedVersionResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Prompt Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              }
            },
            {
              "displayName": "Tool Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponse"
                }
              }
            },
            {
              "displayName": "Evaluator Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            },
            {
              "displayName": "Flow Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowResponse"
                }
              }
            }
          ]
        }
      },
      "type_:EvaluateeRequest": {
        "name": "EvaluateeRequest",
        "description": "Specification of a File version on Humanloop.\n\nThis can be done in a couple of ways:\n\n- Specifying `version_id` directly.\n- Specifying a File (and optionally an Environment).\n  - A File can be specified by either `path` or `file_id`.\n  - An Environment can be specified by `environment_id`. If no Environment is specified, the default Environment is used.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File Version. If provided, none of the other fields should be specified."
            },
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Path identifying a File. Provide either this or `file_id` if you want to specify a File."
            },
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File. Provide either this or `path` if you want to specify a File."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the Environment a Version is deployed to. Only provide this when specifying a File. If not provided (and a File is specified), the default Environment is used."
            },
            {
              "key": "batch_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the batch of Logs to include in the Evaluation Report."
            },
            {
              "key": "orchestrated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API."
            }
          ]
        }
      },
      "type_:EvaluateeResponse": {
        "name": "EvaluateeResponse",
        "description": "Version of the Evaluatee being evaluated.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatedVersionResponse"
                }
              }
            },
            {
              "key": "batch_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the batch of Logs to include in the Evaluation Report."
            },
            {
              "key": "orchestrated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether the Prompt/Tool is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Prompt/Tool should be submitted by the user via the API."
            }
          ]
        }
      },
      "type_:EvaluationEvaluatorResponse": {
        "name": "EvaluationEvaluatorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            },
            {
              "key": "orchestrated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API."
            }
          ]
        }
      },
      "type_:EvaluationReportLogResponse": {
        "name": "EvaluationReportLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluated_version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatedVersionResponse"
                }
              },
              "description": "The version of the Prompt, Tool or Evaluator that the Log belongs to."
            },
            {
              "key": "datapoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatapointResponse"
                }
              },
              "description": "The Datapoint used to generate the Log"
            },
            {
              "key": "log",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              },
              "description": "The Log that was evaluated by the Evaluator."
            },
            {
              "key": "evaluator_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              },
              "description": "The Evaluator Logs containing the judgments for the Log."
            }
          ]
        }
      },
      "type_:EvaluationResponse": {
        "name": "EvaluationResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluation. Starts with `evr`."
            },
            {
              "key": "dataset",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              },
              "description": "The Dataset used in the Evaluation."
            },
            {
              "key": "evaluatees",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluateeResponse"
                    }
                  }
                }
              },
              "description": "The Prompt/Tool Versions included in the Evaluation."
            },
            {
              "key": "evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationEvaluatorResponse"
                    }
                  }
                }
              },
              "description": "The Evaluator Versions used to evaluate."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluationStatus"
                }
              },
              "description": "The current status of the Evaluation.\n\n- `\"pending\"`: The Evaluation has been created but is not actively being worked on by Humanloop.\n- `\"running\"`: Humanloop is checking for any missing Logs and Evaluator Logs, and will generate them where appropriate.\n- `\"completed\"`: All Logs an Evaluator Logs have been generated.\n- `\"cancelled\"`: The Evaluation has been cancelled by the user. Humanloop will stop generating Logs and Evaluator Logs."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the Evaluation to help identify it. Must be unique among Evaluations associated with File."
            },
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File associated with the Evaluation."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "URL to view the Evaluation on the Humanloop."
            }
          ]
        }
      },
      "type_:EvaluationStats": {
        "name": "EvaluationStats",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "overall_stats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:OverallStats"
                }
              },
              "description": "Stats for the Evaluation Report as a whole."
            },
            {
              "key": "version_stats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VersionStatsResponse"
                    }
                  }
                }
              },
              "description": "Stats for each Evaluated Version in the Evaluation Report."
            },
            {
              "key": "progress",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A summary string report of the Evaluation's progress you can print to the command line;helpful when integrating Evaluations with CI/CD."
            },
            {
              "key": "report",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A summary string report of the Evaluation you can print to command line;helpful when integrating Evaluations with CI/CD."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluationStatus"
                }
              },
              "description": "The current status of the Evaluation."
            }
          ]
        }
      },
      "type_:EvaluationStatus": {
        "name": "EvaluationStatus",
        "description": "Status of an evaluation.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pending"
            },
            {
              "value": "running"
            },
            {
              "value": "completed"
            },
            {
              "value": "cancelled"
            }
          ]
        }
      },
      "type_:EvaluatorActivationDeactivationRequestActivateItem": {
        "name": "EvaluatorActivationDeactivationRequestActivateItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Monitoring Evaluator Version Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MonitoringEvaluatorVersionRequest"
                }
              }
            },
            {
              "displayName": "Monitoring Evaluator Environment Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MonitoringEvaluatorEnvironmentRequest"
                }
              }
            }
          ]
        }
      },
      "type_:EvaluatorActivationDeactivationRequestDeactivateItem": {
        "name": "EvaluatorActivationDeactivationRequestDeactivateItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Monitoring Evaluator Version Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MonitoringEvaluatorVersionRequest"
                }
              }
            },
            {
              "displayName": "Monitoring Evaluator Environment Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MonitoringEvaluatorEnvironmentRequest"
                }
              }
            }
          ]
        }
      },
      "type_:EvaluatorActivationDeactivationRequest": {
        "name": "EvaluatorActivationDeactivationRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "activate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorActivationDeactivationRequestActivateItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Evaluators to activate for Monitoring. These will be automatically run on new Logs."
            },
            {
              "key": "deactivate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorActivationDeactivationRequestDeactivateItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Evaluators to deactivate. These will not be run on new Logs."
            }
          ]
        }
      },
      "type_:EvaluatorAggregate": {
        "name": "EvaluatorAggregate",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "value",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The aggregated value of the evaluator."
            },
            {
              "key": "evaluator_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the evaluator."
            },
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the evaluator version."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:EvaluatorArgumentsType": {
        "name": "EvaluatorArgumentsType",
        "description": "Enum representing the possible argument types of an evaluator.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "target_free"
            },
            {
              "value": "target_required"
            }
          ]
        }
      },
      "type_:EvaluatorJudgmentNumberLimit": {
        "name": "EvaluatorJudgmentNumberLimit",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "min",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The minimum value that can be selected."
            },
            {
              "key": "max",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The maximum value that can be selected."
            },
            {
              "key": "step",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The step size for the number input."
            }
          ]
        }
      },
      "type_:EvaluatorJudgmentOptionResponse": {
        "name": "EvaluatorJudgmentOptionResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the option."
            },
            {
              "key": "valence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Valence"
                    }
                  }
                }
              },
              "description": "Whether this option should be considered positive or negative."
            }
          ]
        }
      },
      "type_:EvaluatorLogResponseJudgment": {
        "name": "EvaluatorLogResponseJudgment",
        "description": "Evaluator assessment of the Log.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:EvaluatorLogResponse": {
        "name": "EvaluatorLogResponse",
        "description": "General request for creating a Log",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event started."
            },
            {
              "key": "end_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event ended."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw request sent to provider."
            },
            {
              "key": "provider_response",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw response received the provider."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier of the evaluated Log. The newly created Log will have this one set as parent."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
            },
            {
              "key": "trace_parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the parent Log to nest this Log under in a Trace."
            },
            {
              "key": "batches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID related to the Log."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the Environment the Log is associated to."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "judgment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorLogResponseJudgment"
                    }
                  }
                }
              },
              "description": "Evaluator assessment of the Log."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Log."
            },
            {
              "key": "evaluator_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorLogResponse"
                    }
                  }
                }
              },
              "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
            },
            {
              "key": "trace_flow_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Flow that the Trace belongs to."
            },
            {
              "key": "trace_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Trace that the Log belongs to."
            },
            {
              "key": "trace_children",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:LogResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Logs nested under this Log in the Trace."
            },
            {
              "key": "evaluator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              },
              "description": "Evaluator used to generate the judgment."
            },
            {
              "key": "parent",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              },
              "description": "The Log that was evaluated. Only provided if the ?include_parent query parameter is set for the"
            }
          ]
        }
      },
      "type_:EvaluatorResponseSpec": {
        "name": "EvaluatorResponseSpec",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Llm Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:LlmEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "Code Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:CodeEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "Human Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:HumanEvaluatorRequest"
                }
              }
            },
            {
              "displayName": "External Evaluator Request",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ExternalEvaluatorRequest"
                }
              }
            }
          ]
        }
      },
      "type_:EvaluatorResponse": {
        "name": "EvaluatorResponse",
        "description": "Version of the Evaluator used to provide judgments.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Path of the Evaluator including the Evaluator name, which is used as a unique identifier."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator."
            },
            {
              "key": "directory_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the directory that the file is in on Humanloop."
            },
            {
              "key": "commit_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Message describing the changes made."
            },
            {
              "key": "spec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponseSpec"
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the Evaluator, which is used as a unique identifier."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the specific Evaluator Version. If no query params provided, the default deployed Evaluator Version is returned."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "evaluator"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "environments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of environments the Evaluator Version is deployed to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the Evaluator."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionStatus"
                }
              }
            },
            {
              "key": "last_used_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "version_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated for this Evaluator Version"
            },
            {
              "key": "total_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated across all Evaluator Versions"
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InputResponse"
                    }
                  }
                }
              },
              "description": "Inputs associated to the Evaluator. Inputs correspond to any of the variables used within the Evaluator template."
            },
            {
              "key": "evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:MonitoringEvaluatorResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Evaluators that have been attached to this Evaluator that are used for monitoring logs."
            },
            {
              "key": "evaluator_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorAggregate"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Aggregation of Evaluator results for the Evaluator Version."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
            }
          ]
        }
      },
      "type_:EvaluatorReturnTypeEnum": {
        "name": "EvaluatorReturnTypeEnum",
        "description": "Enum representing the possible return types of an evaluator.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "boolean"
            },
            {
              "value": "number"
            },
            {
              "value": "select"
            },
            {
              "value": "multi_select"
            },
            {
              "value": "text"
            }
          ]
        }
      },
      "type_:ExternalEvaluatorRequest": {
        "name": "ExternalEvaluatorRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "arguments_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorArgumentsType"
                }
              },
              "description": "Whether this Evaluator is target-free or target-required."
            },
            {
              "key": "return_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorReturnTypeEnum"
                }
              },
              "description": "The type of the return value of the Evaluator."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
            },
            {
              "key": "evaluator_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "external"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FileEnvironmentResponseFile": {
        "name": "FileEnvironmentResponseFile",
        "description": "The version of the File that is deployed to the Environment, if one is deployed.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Prompt Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              }
            },
            {
              "displayName": "Tool Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponse"
                }
              }
            },
            {
              "displayName": "Dataset Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            },
            {
              "displayName": "Evaluator Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            },
            {
              "displayName": "Flow Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowResponse"
                }
              }
            }
          ]
        }
      },
      "type_:FileEnvironmentResponse": {
        "name": "FileEnvironmentResponse",
        "description": "Response model for the List Environments endpoint under Files.\n\nContains the deployed version of the File, if one is deployed to the Environment.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "tag",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EnvironmentTag"
                }
              }
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FileEnvironmentResponseFile"
                    }
                  }
                }
              },
              "description": "The version of the File that is deployed to the Environment, if one is deployed."
            }
          ]
        }
      },
      "type_:FileRequest": {
        "name": "FileRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID for an existing File."
            },
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Path of the File, including the name. This locates the File in the Humanloop filesystem and is used as as a unique identifier. Example: `folder/name` or just `name`."
            }
          ]
        }
      },
      "type_:FileType": {
        "name": "FileType",
        "description": "Enum for File types.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "prompt"
            },
            {
              "value": "tool"
            },
            {
              "value": "dataset"
            },
            {
              "value": "evaluator"
            },
            {
              "value": "flow"
            }
          ]
        }
      },
      "type_:FlowKernelRequest": {
        "name": "FlowKernelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "A key-value object identifying the Flow Version."
            }
          ]
        }
      },
      "type_:FlowLogResponse": {
        "name": "FlowLogResponse",
        "description": "General request for creating a Log",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event started."
            },
            {
              "key": "end_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event ended."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw request sent to provider."
            },
            {
              "key": "provider_response",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw response received the provider."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the Flow Log."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
            },
            {
              "key": "trace_parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the parent Log to nest this Log under in a Trace."
            },
            {
              "key": "batches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID related to the Log."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the Environment the Log is associated to."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Log."
            },
            {
              "key": "evaluator_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorLogResponse"
                    }
                  }
                }
              },
              "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
            },
            {
              "key": "trace_flow_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Flow that the Trace belongs to."
            },
            {
              "key": "trace_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Trace that the Log belongs to."
            },
            {
              "key": "trace_children",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:LogResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Logs nested under this Log in the Trace."
            },
            {
              "key": "flow",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowResponse"
                }
              },
              "description": "Flow used to generate the Log."
            },
            {
              "key": "trace_status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TraceStatus"
                    }
                  }
                }
              },
              "description": "Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on completed Traces."
            }
          ]
        }
      },
      "type_:FlowResponse": {
        "name": "FlowResponse",
        "description": "Response model for a Flow.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Path of the Flow, including the name, which is used as a unique identifier."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Flow. Starts with fl\\_."
            },
            {
              "key": "directory_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the directory that the file is in on Humanloop."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "A key-value object identifying the Flow Version."
            },
            {
              "key": "commit_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Message describing the changes made. If provided, a committed version of the Flow is created. Otherwise, an uncommitted version is created."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the Flow."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the specific Flow Version. If no query params provided, the default deployed Flow Version is returned."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "flow"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "environments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of environments the Flow Version is deployed to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the Flow."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionStatus"
                }
              },
              "description": "The status of the Flow Version."
            },
            {
              "key": "last_used_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "version_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated for this Flow Version"
            },
            {
              "key": "evaluator_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorAggregate"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Aggregation of Evaluator results for the Flow Version."
            },
            {
              "key": "evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:MonitoringEvaluatorResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of Monitoring Evaluators associated with the Flow Version."
            }
          ]
        }
      },
      "type_:FunctionTool": {
        "name": "FunctionTool",
        "description": "A function tool to be called by the model where user owns runtime.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "arguments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FunctionToolChoice": {
        "name": "FunctionToolChoice",
        "description": "A function tool to be called by the model where user owns runtime.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:HttpValidationError": {
        "name": "HttpValidationError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ValidationError"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:HumanEvaluatorRequestReturnType": {
        "name": "HumanEvaluatorRequestReturnType",
        "description": "The type of the return value of the Evaluator.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "select"
            },
            {
              "value": "multi_select"
            },
            {
              "value": "text"
            },
            {
              "value": "number"
            },
            {
              "value": "boolean"
            }
          ]
        }
      },
      "type_:HumanEvaluatorRequest": {
        "name": "HumanEvaluatorRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "arguments_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorArgumentsType"
                }
              },
              "description": "Whether this Evaluator is target-free or target-required."
            },
            {
              "key": "return_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:HumanEvaluatorRequestReturnType"
                }
              },
              "description": "The type of the return value of the Evaluator."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
            },
            {
              "key": "evaluator_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "human"
                  }
                }
              }
            },
            {
              "key": "instructions",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Instructions for the Human annotating the ."
            },
            {
              "key": "options",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorJudgmentOptionResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The options that the Human annotator can choose from."
            },
            {
              "key": "number_limits",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorJudgmentNumberLimit"
                    }
                  }
                }
              },
              "description": "Limits on the judgment that can be applied. Only for Evaluators with `return_type` of `'number'`."
            },
            {
              "key": "number_valence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Valence"
                    }
                  }
                }
              },
              "description": "The valence of the number judgment. Only for Evaluators with `return_type` of `'number'`. If 'positive', a higher number is better. If 'negative', a lower number is better."
            }
          ]
        }
      },
      "type_:ImageChatContent": {
        "name": "ImageChatContent",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "image_url"
                  }
                }
              }
            },
            {
              "key": "image_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageUrl"
                }
              },
              "description": "The message's image content."
            }
          ]
        }
      },
      "type_:ImageUrlDetail": {
        "name": "ImageUrlDetail",
        "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "high"
            },
            {
              "value": "low"
            },
            {
              "value": "auto"
            }
          ]
        }
      },
      "type_:ImageUrl": {
        "name": "ImageUrl",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Either a URL of the image or the base64 encoded image data."
            },
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageUrlDetail"
                    }
                  }
                }
              },
              "description": "Specify the detail level of the image provided to the model. For more details see: https://platform.openai.com/docs/guides/vision/low-or-high-fidelity-image-understanding"
            }
          ]
        }
      },
      "type_:InputResponse": {
        "name": "InputResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of input."
            }
          ]
        }
      },
      "type_:LlmEvaluatorRequest": {
        "name": "LlmEvaluatorRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "arguments_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorArgumentsType"
                }
              },
              "description": "Whether this Evaluator is target-free or target-required."
            },
            {
              "key": "return_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorReturnTypeEnum"
                }
              },
              "description": "The type of the return value of the Evaluator."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Evaluator. Helpful to separate Evaluator versions from each other with details on how they were created or used."
            },
            {
              "key": "evaluator_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "llm"
                  }
                }
              }
            },
            {
              "key": "prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptKernelRequest"
                    }
                  }
                }
              },
              "description": "The prompt parameters used to generate."
            }
          ]
        }
      },
      "type_:LinkedToolResponse": {
        "name": "LinkedToolResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name for the tool referenced by the model."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Description of the tool referenced by the model"
            },
            {
              "key": "strict",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If true, forces the model to output json data in the structure of the parameters schema."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Tool linked."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Tool Version linked."
            }
          ]
        }
      },
      "type_:ListDatasets": {
        "name": "ListDatasets",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetResponse"
                    }
                  }
                }
              },
              "description": "The list of Datasets."
            }
          ]
        }
      },
      "type_:ListEvaluators": {
        "name": "ListEvaluators",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorResponse"
                    }
                  }
                }
              },
              "description": "The list of Evaluators."
            }
          ]
        }
      },
      "type_:ListFlows": {
        "name": "ListFlows",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FlowResponse"
                    }
                  }
                }
              },
              "description": "The list of Flows."
            }
          ]
        }
      },
      "type_:ListPrompts": {
        "name": "ListPrompts",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptResponse"
                    }
                  }
                }
              },
              "description": "The list of Prompts."
            }
          ]
        }
      },
      "type_:ListTools": {
        "name": "ListTools",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolResponse"
                    }
                  }
                }
              },
              "description": "The list of Tools."
            }
          ]
        }
      },
      "type_:LogResponse": {
        "name": "LogResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Prompt Log Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptLogResponse"
                }
              }
            },
            {
              "displayName": "Tool Log Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolLogResponse"
                }
              }
            },
            {
              "displayName": "Evaluator Log Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorLogResponse"
                }
              }
            },
            {
              "displayName": "Flow Log Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowLogResponse"
                }
              }
            }
          ]
        }
      },
      "type_:ModelEndpoints": {
        "name": "ModelEndpoints",
        "description": "Supported model provider endpoints.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "complete"
            },
            {
              "value": "chat"
            },
            {
              "value": "edit"
            }
          ]
        }
      },
      "type_:ModelProviders": {
        "name": "ModelProviders",
        "description": "Supported model providers.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "openai"
            },
            {
              "value": "openai_azure"
            },
            {
              "value": "mock"
            },
            {
              "value": "anthropic"
            },
            {
              "value": "bedrock"
            },
            {
              "value": "cohere"
            },
            {
              "value": "replicate"
            },
            {
              "value": "google"
            },
            {
              "value": "groq"
            }
          ]
        }
      },
      "type_:MonitoringEvaluatorEnvironmentRequest": {
        "name": "MonitoringEvaluatorEnvironmentRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluator_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator to be used for monitoring."
            },
            {
              "key": "environment_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Environment. The Evaluator Version deployed to this Environment will be used for monitoring."
            }
          ]
        }
      },
      "type_:MonitoringEvaluatorResponse": {
        "name": "MonitoringEvaluatorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_reference",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionReferenceResponse"
                }
              },
              "description": "The Evaluator Version used for monitoring. This can be a specific Version by ID, or a Version deployed to an Environment."
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorResponse"
                    }
                  }
                }
              },
              "description": "The deployed Version."
            },
            {
              "key": "state",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:MonitoringEvaluatorState"
                }
              },
              "description": "The state of the Monitoring Evaluator. Either `active` or `inactive`"
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:MonitoringEvaluatorState": {
        "name": "MonitoringEvaluatorState",
        "description": "State of an evaluator connected to a file",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "active"
            },
            {
              "value": "inactive"
            }
          ]
        }
      },
      "type_:MonitoringEvaluatorVersionRequest": {
        "name": "MonitoringEvaluatorVersionRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator Version to be used for monitoring."
            }
          ]
        }
      },
      "type_:NumericEvaluatorStatsResponse": {
        "name": "NumericEvaluatorStatsResponse",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator Version."
            },
            {
              "key": "total_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
            },
            {
              "key": "num_judgments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
            },
            {
              "key": "num_nulls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of errored Evaluators for this Evaluator Version."
            },
            {
              "key": "mean",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "std",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "percentiles",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ObservabilityStatus": {
        "name": "ObservabilityStatus",
        "description": "Status of a Log for observability.\n\nObservability is implemented by running monitoring Evaluators on Logs.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pending"
            },
            {
              "value": "running"
            },
            {
              "value": "completed"
            },
            {
              "value": "failed"
            }
          ]
        }
      },
      "type_:OverallStats": {
        "name": "OverallStats",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "num_datapoints",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Datapoints in the Evaluation Report's Dataset Version."
            },
            {
              "key": "total_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Logs in the Evaluation Report."
            },
            {
              "key": "total_evaluator_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Evaluator Logs in the Evaluation Report."
            }
          ]
        }
      },
      "type_:PaginatedDatapointResponse": {
        "name": "PaginatedDatapointResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatapointResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDatasetResponse": {
        "name": "PaginatedDatasetResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:DatasetResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataEvaluationReportLogResponse": {
        "name": "PaginatedDataEvaluationReportLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationReportLogResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedEvaluationResponse": {
        "name": "PaginatedEvaluationResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluationResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataEvaluatorResponse": {
        "name": "PaginatedDataEvaluatorResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataFlowResponse": {
        "name": "PaginatedDataFlowResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FlowResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataLogResponse": {
        "name": "PaginatedDataLogResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LogResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataPromptResponse": {
        "name": "PaginatedDataPromptResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataToolResponse": {
        "name": "PaginatedDataToolResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataUnionPromptResponseToolResponseDatasetResponseEvaluatorResponseFlowResponseRecordsItem": {
        "name": "PaginatedDataUnionPromptResponseToolResponseDatasetResponseEvaluatorResponseFlowResponseRecordsItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Prompt Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              }
            },
            {
              "displayName": "Tool Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponse"
                }
              }
            },
            {
              "displayName": "Dataset Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            },
            {
              "displayName": "Evaluator Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            },
            {
              "displayName": "Flow Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowResponse"
                }
              }
            }
          ]
        }
      },
      "type_:PaginatedDataUnionPromptResponseToolResponseDatasetResponseEvaluatorResponseFlowResponse": {
        "name": "PaginatedDataUnionPromptResponseToolResponseDatasetResponseEvaluatorResponseFlowResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "records",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PaginatedDataUnionPromptResponseToolResponseDatasetResponseEvaluatorResponseFlowResponseRecordsItem"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PlatformAccessEnum": {
        "name": "PlatformAccessEnum",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "superadmin"
            },
            {
              "value": "supportadmin"
            },
            {
              "value": "user"
            }
          ]
        }
      },
      "type_:ProjectSortBy": {
        "name": "ProjectSortBy",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "created_at"
            },
            {
              "value": "updated_at"
            },
            {
              "value": "name"
            }
          ]
        }
      },
      "type_:PromptCallLogResponse": {
        "name": "PromptCallLogResponse",
        "description": "Sample specific response details for a Prompt call",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "output_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessage"
                    }
                  }
                }
              },
              "description": "The message returned by the provider."
            },
            {
              "key": "prompt_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the prompt used to generate the output."
            },
            {
              "key": "output_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the output generated by the model."
            },
            {
              "key": "prompt_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the prompt."
            },
            {
              "key": "output_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the output."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Reason the generation finished."
            },
            {
              "key": "index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index of the sample in the batch."
            }
          ]
        }
      },
      "type_:PromptCallResponseToolChoice": {
        "name": "PromptCallResponseToolChoice",
        "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_:PromptCallResponse": {
        "name": "PromptCallResponse",
        "description": "Response model for a Prompt call with potentially multiple log samples.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event started."
            },
            {
              "key": "end_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event ended."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The messages passed to the to provider chat endpoint."
            },
            {
              "key": "tool_choice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptCallResponseToolChoice"
                    }
                  }
                }
              },
              "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
            },
            {
              "key": "prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              },
              "description": "Prompt used to generate the Log."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
            },
            {
              "key": "trace_parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the parent Log to nest this Log under in a Trace."
            },
            {
              "key": "batches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID related to the Log."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the Environment the Log is associated to."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the log."
            },
            {
              "key": "trace_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the Trace containing the Prompt Call Log."
            },
            {
              "key": "logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptCallLogResponse"
                    }
                  }
                }
              },
              "description": "The logs generated by the Prompt call."
            }
          ]
        }
      },
      "type_:PromptCallStreamResponse": {
        "name": "PromptCallStreamResponse",
        "description": "Response model for calling Prompt in streaming mode.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "output_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessage"
                    }
                  }
                }
              },
              "description": "The message returned by the provider."
            },
            {
              "key": "prompt_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the prompt used to generate the output."
            },
            {
              "key": "output_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the output generated by the model."
            },
            {
              "key": "prompt_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the prompt."
            },
            {
              "key": "output_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the output."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Reason the generation finished."
            },
            {
              "key": "index",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The index of the sample in the batch."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the log."
            },
            {
              "key": "prompt_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the Prompt the log belongs to."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "ID of the specific version of the Prompt."
            }
          ]
        }
      },
      "type_:PromptKernelRequestTemplate": {
        "name": "PromptKernelRequestTemplate",
        "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptKernelRequestStop": {
        "name": "PromptKernelRequestStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptKernelRequest": {
        "name": "PromptKernelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)"
            },
            {
              "key": "endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelEndpoints"
                    }
                  }
                }
              },
              "description": "The provider model endpoint used."
            },
            {
              "key": "template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptKernelRequestTemplate"
                    }
                  }
                }
              },
              "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
            },
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelProviders"
                    }
                  }
                }
              },
              "description": "The company providing the underlying model service."
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
            },
            {
              "key": "top_p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
            },
            {
              "key": "stop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptKernelRequestStop"
                    }
                  }
                }
              },
              "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameter values to be passed to the provider call."
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ResponseFormat"
                    }
                  }
                }
              },
              "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolFunction"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The tool specification that the model can choose to call if Tool calling is supported."
            },
            {
              "key": "linked_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The IDs of the Tools in your organization that the model can choose to call if Tool calling is supported. The default deployed version of that tool is called."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Prompt. Helpful to separate Prompt versions from each other with details on how they were created or used."
            }
          ]
        }
      },
      "type_:PromptLogResponseToolChoice": {
        "name": "PromptLogResponseToolChoice",
        "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "none"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "auto"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "required"
                  }
                }
              }
            },
            {
              "displayName": "Tool Choice",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_:PromptLogResponse": {
        "name": "PromptLogResponse",
        "description": "General request for creating a Log",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "output_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessage"
                    }
                  }
                }
              },
              "description": "The message returned by the provider."
            },
            {
              "key": "prompt_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the prompt used to generate the output."
            },
            {
              "key": "output_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of tokens in the output generated by the model."
            },
            {
              "key": "prompt_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the prompt."
            },
            {
              "key": "output_cost",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Cost in dollars associated to the tokens in the output."
            },
            {
              "key": "finish_reason",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Reason the generation finished."
            },
            {
              "key": "messages",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ChatMessage"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The messages passed to the to provider chat endpoint."
            },
            {
              "key": "tool_choice",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptLogResponseToolChoice"
                    }
                  }
                }
              },
              "description": "Controls how the model uses tools. The following options are supported:\n\n- `'none'` means the model will not call any tool and instead generates a message; this is the default when no tools are provided as part of the Prompt.\n- `'auto'` means the model can decide to call one or more of the provided tools; this is the default when tools are provided as part of the Prompt.\n- `'required'` means the model can decide to call one or more of the provided tools.\n- `{'type': 'function', 'function': {name': <TOOL_NAME>}}` forces the model to use the named function."
            },
            {
              "key": "prompt",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              },
              "description": "Prompt used to generate the Log."
            },
            {
              "key": "start_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event started."
            },
            {
              "key": "end_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event ended."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw request sent to provider."
            },
            {
              "key": "provider_response",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw response received the provider."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
            },
            {
              "key": "trace_parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the parent Log to nest this Log under in a Trace."
            },
            {
              "key": "batches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID related to the Log."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the Environment the Log is associated to."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Log."
            },
            {
              "key": "evaluator_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorLogResponse"
                    }
                  }
                }
              },
              "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
            },
            {
              "key": "trace_flow_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Flow that the Trace belongs to."
            },
            {
              "key": "trace_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Trace that the Log belongs to."
            },
            {
              "key": "trace_children",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:LogResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Logs nested under this Log in the Trace."
            }
          ]
        }
      },
      "type_:PromptResponseTemplate": {
        "name": "PromptResponseTemplate",
        "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ChatMessage"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptResponseStop": {
        "name": "PromptResponseStop",
        "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:PromptResponse": {
        "name": "PromptResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Path of the Prompt, including the name, which is used as a unique identifier."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Prompt."
            },
            {
              "key": "directory_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the directory that the file is in on Humanloop."
            },
            {
              "key": "model",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The model instance used, e.g. `gpt-4`. See [supported models](https://humanloop.com/docs/supported-models)"
            },
            {
              "key": "endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelEndpoints"
                    }
                  }
                }
              },
              "description": "The provider model endpoint used."
            },
            {
              "key": "template",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptResponseTemplate"
                    }
                  }
                }
              },
              "description": "For chat endpoint, provide a Chat template. For completion endpoint, provide a Prompt template. Input variables within the template should be specified with double curly bracket syntax: {{INPUT_NAME}}."
            },
            {
              "key": "provider",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ModelProviders"
                    }
                  }
                }
              },
              "description": "The company providing the underlying model service."
            },
            {
              "key": "max_tokens",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "What sampling temperature to use when making a generation. Higher values means the model will be more creative."
            },
            {
              "key": "top_p",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 1
                      }
                    }
                  }
                }
              },
              "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
            },
            {
              "key": "stop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:PromptResponseStop"
                    }
                  }
                }
              },
              "description": "The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence."
            },
            {
              "key": "presence_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far."
            },
            {
              "key": "frequency_penalty",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "default": 0
                      }
                    }
                  }
                }
              },
              "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far."
            },
            {
              "key": "other",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Other parameter values to be passed to the provider call."
            },
            {
              "key": "seed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "If specified, model will make a best effort to sample deterministically, but it is not guaranteed."
            },
            {
              "key": "response_format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ResponseFormat"
                    }
                  }
                }
              },
              "description": "The format of the response. Only `{\"type\": \"json_object\"}` is currently supported for chat."
            },
            {
              "key": "tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ToolFunction"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The tool specification that the model can choose to call if Tool calling is supported."
            },
            {
              "key": "linked_tools",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:LinkedToolResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The tools linked to your prompt that the model can call."
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Prompt. Helpful to separate Prompt versions from each other with details on how they were created or used."
            },
            {
              "key": "commit_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Message describing the changes made."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the Prompt."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the specific Prompt Version. If no query params provided, the default deployed Prompt Version is returned."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "prompt"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "environments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of environments the Prompt Version is deployed to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the Prompt."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionStatus"
                }
              },
              "description": "The status of the Prompt Version."
            },
            {
              "key": "last_used_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "version_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated for this Prompt Version"
            },
            {
              "key": "total_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated across all Prompt Versions"
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InputResponse"
                    }
                  }
                }
              },
              "description": "Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Prompt template."
            },
            {
              "key": "evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:MonitoringEvaluatorResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Evaluators that have been attached to this Prompt that are used for monitoring logs."
            },
            {
              "key": "evaluator_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorAggregate"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Aggregation of Evaluator results for the Prompt Version."
            }
          ]
        }
      },
      "type_:ProviderApiKeys": {
        "name": "ProviderApiKeys",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "openai",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "ai21",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "mock",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "anthropic",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "bedrock",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "cohere",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "openai_azure",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "openai_azure_endpoint",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ResponseFormatType": {
        "name": "ResponseFormatType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "json_object"
            },
            {
              "value": "json_schema"
            }
          ]
        }
      },
      "type_:ResponseFormat": {
        "name": "ResponseFormat",
        "description": "Response format of the model.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ResponseFormatType"
                }
              }
            },
            {
              "key": "json_schema",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The JSON schema of the response format if type is json_schema."
            }
          ]
        }
      },
      "type_:SelectEvaluatorStatsResponse": {
        "name": "SelectEvaluatorStatsResponse",
        "description": "Also used for 'multi_select' Evaluator versions",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator Version."
            },
            {
              "key": "total_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
            },
            {
              "key": "num_judgments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
            },
            {
              "key": "num_nulls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of errored Evaluators for this Evaluator Version."
            },
            {
              "key": "num_judgments_per_option",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The total number of Evaluator judgments for this Evaluator Version. This is a mapping of the option name to the number of judgments for that option."
            }
          ]
        }
      },
      "type_:SortOrder": {
        "name": "SortOrder",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "asc"
            },
            {
              "value": "desc"
            }
          ]
        }
      },
      "type_:TextChatContent": {
        "name": "TextChatContent",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "text"
                  }
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The message's text content."
            }
          ]
        }
      },
      "type_:TextEvaluatorStatsResponse": {
        "name": "TextEvaluatorStatsResponse",
        "description": "Base attributes for stats for an Evaluator Version-Evaluated Version pair\nin the Evaluation Report.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "evaluator_version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluator Version."
            },
            {
              "key": "total_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Logs generated by this Evaluator Version on the Evaluated Version's Logs. This includes Nulls and Errors."
            },
            {
              "key": "num_judgments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of Evaluator judgments for this Evaluator Version. This excludes Nulls and Errors."
            },
            {
              "key": "num_nulls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of null judgments (i.e. abstentions) for this Evaluator Version."
            },
            {
              "key": "num_errors",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of errored Evaluators for this Evaluator Version."
            }
          ]
        }
      },
      "type_:TimeUnit": {
        "name": "TimeUnit",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "day"
            },
            {
              "value": "week"
            },
            {
              "value": "month"
            }
          ]
        }
      },
      "type_:ToolCall": {
        "name": "ToolCall",
        "description": "A tool call to be made.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatToolType"
                }
              }
            },
            {
              "key": "function",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FunctionTool"
                }
              }
            }
          ]
        }
      },
      "type_:ToolChoice": {
        "name": "ToolChoice",
        "description": "Tool choice to force the model to use a tool.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ChatToolType"
                }
              }
            },
            {
              "key": "function",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FunctionToolChoice"
                }
              }
            }
          ]
        }
      },
      "type_:ToolFunction": {
        "name": "ToolFunction",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name for the tool referenced by the model."
            },
            {
              "key": "description",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Description of the tool referenced by the model"
            },
            {
              "key": "strict",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "If true, forces the model to output json data in the structure of the parameters schema."
            },
            {
              "key": "parameters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Parameters needed to run the Tool, defined in JSON Schema format: https://json-schema.org/"
            }
          ]
        }
      },
      "type_:ToolKernelRequest": {
        "name": "ToolKernelRequest",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "function",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolFunction"
                    }
                  }
                }
              },
              "description": "Callable function specification of the Tool shown to the model for tool calling."
            },
            {
              "key": "source_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Code source of the Tool."
            },
            {
              "key": "setup_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used."
            }
          ]
        }
      },
      "type_:ToolLogResponse": {
        "name": "ToolLogResponse",
        "description": "General request for creating a Log",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event started."
            },
            {
              "key": "end_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "When the logged event ended."
            },
            {
              "key": "output",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "User defined timestamp for when the log was created."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the log is an error."
            },
            {
              "key": "provider_latency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Duration of the logged event in seconds."
            },
            {
              "key": "stdout",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Captured log and debug statements."
            },
            {
              "key": "provider_request",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw request sent to provider."
            },
            {
              "key": "provider_response",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Raw response received the provider."
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The inputs passed to the prompt template."
            },
            {
              "key": "source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifies where the model was called from."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Any additional metadata to record."
            },
            {
              "key": "source_datapoint_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair."
            },
            {
              "key": "trace_parent_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The ID of the parent Log to nest this Log under in a Trace."
            },
            {
              "key": "batches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Array of Batch Ids that this log is part of. Batches are used to group Logs together for offline Evaluations"
            },
            {
              "key": "user",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "End-user ID related to the Log."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the Environment the Log is associated to."
            },
            {
              "key": "save",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the request/response payloads will be stored on Humanloop."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Log."
            },
            {
              "key": "evaluator_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EvaluatorLogResponse"
                    }
                  }
                }
              },
              "description": "List of Evaluator Logs associated with the Log. These contain Evaluator judgments on the Log."
            },
            {
              "key": "trace_flow_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Flow that the Trace belongs to."
            },
            {
              "key": "trace_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Identifier for the Trace that the Log belongs to."
            },
            {
              "key": "trace_children",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:LogResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Logs nested under this Log in the Trace."
            },
            {
              "key": "tool",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponse"
                }
              },
              "description": "Tool used to generate the Log."
            }
          ]
        }
      },
      "type_:ToolResponse": {
        "name": "ToolResponse",
        "description": "Base type that all File Responses should inherit from.\n\nAttributes defined here are common to all File Responses and should be overridden\nin the inheriting classes with documentation and appropriate Field definitions.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Path of the Tool, including the name, which is used as a unique identifier."
            },
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Tool."
            },
            {
              "key": "directory_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "ID of the directory that the file is in on Humanloop."
            },
            {
              "key": "function",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ToolFunction"
                    }
                  }
                }
              },
              "description": "Callable function specification of the Tool shown to the model for tool calling."
            },
            {
              "key": "source_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Code source of the Tool."
            },
            {
              "key": "setup_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/"
            },
            {
              "key": "attributes",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used."
            },
            {
              "key": "tool_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FilesToolType"
                    }
                  }
                }
              },
              "description": "Type of Tool."
            },
            {
              "key": "commit_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Message describing the changes made."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Name of the Tool, which is used as a unique identifier."
            },
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the specific Tool Version. If no query params provided, the default deployed Tool Version is returned."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "tool"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "environments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EnvironmentResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of environments the Tool Version is deployed to."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "created_by",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UserResponse"
                    }
                  }
                }
              },
              "description": "The user who created the Tool."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionStatus"
                }
              },
              "description": "The status of the Tool Version."
            },
            {
              "key": "last_used_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              }
            },
            {
              "key": "version_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated for this Tool Version"
            },
            {
              "key": "total_logs_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The number of logs that have been generated across all Tool Versions"
            },
            {
              "key": "inputs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:InputResponse"
                    }
                  }
                }
              },
              "description": "Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Tool template."
            },
            {
              "key": "evaluators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:MonitoringEvaluatorResponse"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Evaluators that have been attached to this Tool that are used for monitoring logs."
            },
            {
              "key": "signature",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Signature of the Tool."
            },
            {
              "key": "evaluator_aggregates",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:EvaluatorAggregate"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Aggregation of Evaluator results for the Tool Version."
            }
          ]
        }
      },
      "type_:TraceStatus": {
        "name": "TraceStatus",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "complete"
            },
            {
              "value": "incomplete"
            }
          ]
        }
      },
      "type_:UpdateDatesetAction": {
        "name": "UpdateDatesetAction",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "set"
            },
            {
              "value": "add"
            },
            {
              "value": "remove"
            }
          ]
        }
      },
      "type_:UserResponse": {
        "name": "UserResponse",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      },
      "type_:Valence": {
        "name": "Valence",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "positive"
            },
            {
              "value": "negative"
            },
            {
              "value": "neutral"
            }
          ]
        }
      },
      "type_:ValidationErrorLocItem": {
        "name": "ValidationErrorLocItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ValidationError": {
        "name": "ValidationError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "loc",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ValidationErrorLocItem"
                    }
                  }
                }
              }
            },
            {
              "key": "msg",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VersionDeploymentResponseFile": {
        "name": "VersionDeploymentResponseFile",
        "description": "The File that the deployed Version belongs to.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Prompt Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              }
            },
            {
              "displayName": "Tool Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponse"
                }
              }
            },
            {
              "displayName": "Dataset Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            },
            {
              "displayName": "Evaluator Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            },
            {
              "displayName": "Flow Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowResponse"
                }
              }
            }
          ]
        }
      },
      "type_:VersionDeploymentResponse": {
        "name": "VersionDeploymentResponse",
        "description": "A variable reference to the Version deployed to an Environment",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionDeploymentResponseFile"
                }
              },
              "description": "The File that the deployed Version belongs to."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EnvironmentResponse"
                }
              },
              "description": "The Environment that the Version is deployed to."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "environment"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VersionIdResponseVersion": {
        "name": "VersionIdResponseVersion",
        "description": "The specific Version being referenced.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Prompt Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:PromptResponse"
                }
              }
            },
            {
              "displayName": "Tool Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ToolResponse"
                }
              }
            },
            {
              "displayName": "Dataset Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:DatasetResponse"
                }
              }
            },
            {
              "displayName": "Evaluator Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:EvaluatorResponse"
                }
              }
            },
            {
              "displayName": "Flow Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FlowResponse"
                }
              }
            }
          ]
        }
      },
      "type_:VersionIdResponse": {
        "name": "VersionIdResponse",
        "description": "A reference to a specific Version by its ID",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionIdResponseVersion"
                }
              },
              "description": "The specific Version being referenced."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "version"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VersionReferenceResponse": {
        "name": "VersionReferenceResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Version Deployment Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionDeploymentResponse"
                }
              }
            },
            {
              "displayName": "Version ID Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:VersionIdResponse"
                }
              }
            }
          ]
        }
      },
      "type_:VersionStatsResponseEvaluatorVersionStatsItem": {
        "name": "VersionStatsResponseEvaluatorVersionStatsItem",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Numeric Evaluator Stats Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:NumericEvaluatorStatsResponse"
                }
              }
            },
            {
              "displayName": "Boolean Evaluator Stats Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:BooleanEvaluatorStatsResponse"
                }
              }
            },
            {
              "displayName": "Select Evaluator Stats Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SelectEvaluatorStatsResponse"
                }
              }
            },
            {
              "displayName": "Text Evaluator Stats Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TextEvaluatorStatsResponse"
                }
              }
            }
          ]
        }
      },
      "type_:VersionStatsResponse": {
        "name": "VersionStatsResponse",
        "description": "Stats for an Evaluated Version in the Evaluation Report.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Unique identifier for the Evaluated Version."
            },
            {
              "key": "num_logs",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The total number of existing Logs for this Evaluated Version within the Evaluation Report. These are Logs that have been generated by this Evaluated Version on a Datapoint belonging to the Evaluation Report's Dataset Version."
            },
            {
              "key": "evaluator_version_stats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VersionStatsResponseEvaluatorVersionStatsItem"
                    }
                  }
                }
              },
              "description": "Stats for each Evaluator Version used to evaluate this Evaluated Version."
            }
          ]
        }
      },
      "type_:VersionStatus": {
        "name": "VersionStatus",
        "description": "An enumeration.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "uncommitted"
            },
            {
              "value": "committed"
            },
            {
              "value": "deleted"
            }
          ]
        }
      },
      "type_:ChatToolType": {
        "name": "ChatToolType",
        "description": "The type of tool to call.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "function"
            }
          }
        }
      },
      "type_:FilesToolType": {
        "name": "FilesToolType",
        "description": "Type of tool.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pinecone_search"
            },
            {
              "value": "google"
            },
            {
              "value": "mock"
            },
            {
              "value": "snippet"
            },
            {
              "value": "json_schema"
            },
            {
              "value": "get_api_call"
            }
          ]
        }
      },
      "type_:EvaluationsDatasetRequest": {
        "name": "EvaluationsDatasetRequest",
        "description": "Specification of a File version on Humanloop.\n\nThis can be done in a couple of ways:\n\n- Specifying `version_id` directly.\n- Specifying a File (and optionally an Environment).\n  - A File can be specified by either `path` or `file_id`.\n  - An Environment can be specified by `environment_id`. If no Environment is specified, the default Environment is used.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File Version. If provided, none of the other fields should be specified."
            },
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Path identifying a File. Provide either this or `file_id` if you want to specify a File."
            },
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File. Provide either this or `path` if you want to specify a File."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the Environment a Version is deployed to. Only provide this when specifying a File. If not provided (and a File is specified), the default Environment is used."
            }
          ]
        }
      },
      "type_:EvaluationsRequest": {
        "name": "EvaluationsRequest",
        "description": "Specification of a File version on Humanloop.\n\nThis can be done in a couple of ways:\n\n- Specifying `version_id` directly.\n- Specifying a File (and optionally an Environment).\n  - A File can be specified by either `path` or `file_id`.\n  - An Environment can be specified by `environment_id`. If no Environment is specified, the default Environment is used.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File Version. If provided, none of the other fields should be specified."
            },
            {
              "key": "path",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Path identifying a File. Provide either this or `file_id` if you want to specify a File."
            },
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier for the File. Provide either this or `path` if you want to specify a File."
            },
            {
              "key": "environment",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of the Environment a Version is deployed to. Only provide this when specifying a File. If not provided (and a File is specified), the default Environment is used."
            },
            {
              "key": "orchestrated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether the Evaluator is orchestrated by Humanloop. Default is `True`. If `False`, a log for the Evaluator should be submitted by the user via the API."
            }
          ]
        }
      },
      "type_:AgentConfigResponse": {
        "name": "AgentConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:EvaluatorConfigResponse": {
        "name": "EvaluatorConfigResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": []
        }
      },
      "type_:UpdateEvaluationStatusRequest": {
        "name": "UpdateEvaluationStatusRequest",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      },
      "type_:PaginatedPromptLogResponse": {
        "name": "PaginatedPromptLogResponse",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      },
      "type_:PaginatedSessionResponse": {
        "name": "PaginatedSessionResponse",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      },
      "type_:ConfigToolResponse": {
        "name": "ConfigToolResponse",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      },
      "type_:FeedbackType": {
        "name": "FeedbackType",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      },
      "type_:BaseModelsUserResponse": {
        "name": "BaseModelsUserResponse",
        "shape": {
          "type": "alias",
          "value": {
            "type": "unknown"
          }
        }
      }
    },
    "subpackages": {
      "subpackage_prompts": {
        "id": "subpackage_prompts",
        "name": "prompts",
        "displayName": "Prompts"
      },
      "subpackage_tools": {
        "id": "subpackage_tools",
        "name": "tools"
      },
      "subpackage_datasets": {
        "id": "subpackage_datasets",
        "name": "datasets",
        "displayName": "Datasets"
      },
      "subpackage_evaluators": {
        "id": "subpackage_evaluators",
        "name": "evaluators"
      },
      "subpackage_flows": {
        "id": "subpackage_flows",
        "name": "flows"
      },
      "subpackage_files": {
        "id": "subpackage_files",
        "name": "files"
      },
      "subpackage_evaluations": {
        "id": "subpackage_evaluations",
        "name": "evaluations",
        "displayName": "Evaluations"
      },
      "subpackage_logs": {
        "id": "subpackage_logs",
        "name": "logs",
        "displayName": "Logs"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "X-API-KEY",
        "nameOverride": "apiKey"
      }
    }
  }
]