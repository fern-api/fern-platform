[
  {
    "id": "a1e69a1f-3ea3-4860-97ab-8cae4e192ea3",
    "endpoints": {
      "endpoint_tasks.list": {
        "id": "endpoint_tasks.list",
        "namespace": [
          "subpackage_tasks"
        ],
        "description": "This method returns a list of the video indexing tasks in your account. The API returns your video indexing tasks sorted by creation date, with the newest at the top of the list.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tasks"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`."
          },
          {
            "key": "page_limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The field to sort on. The following options are available:\n\n- `updated_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was updated.\n- `created_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was created.\n\n**Default**: `created_at`."
          },
          {
            "key": "sort_option",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The sorting direction. The following options are available:\n\n- `asc`\n- `desc`\n\n**Default**: `desc`."
          },
          {
            "key": "_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the unique identifier of a video indexing task."
          },
          {
            "key": "index_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the unique identifier of an index."
          },
          {
            "key": "filename",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by filename."
          },
          {
            "key": "duration",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "Filter by duration. Expressed in seconds."
          },
          {
            "key": "width",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Filter by width."
          },
          {
            "key": "height",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Filter by height."
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter video indexing tasks by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks that were created on the specified date at or after the given time."
          },
          {
            "key": "updated_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter video indexing tasks by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks that were updated on the specified date at or after the given time."
          },
          {
            "key": "estimated_time",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter video indexing tasks by the estimated completion date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks estimated to be completed on the specified date at or after the given time."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The video indexing tasks have successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_tasks:TasksListResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksListRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "sort_by": "created_at",
              "sort_option": "desc",
              "_id": "663da73b31cdd0c1f638a8e6",
              "index_id": "630aff993fcee0532cb809d0",
              "filename": "01.mp4",
              "created_at": "2024-03-01T00:00:00Z",
              "updated_at": "2024-03-01T00:00:00Z",
              "estimated_time": "2024-03-01T00:00:00Z"
            },
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "_id": "62a17bf847f5678267ec10cc",
                    "created_at": "2022-06-09T04:50:00.879Z",
                    "updated_at": "2022-06-09T04:55:57.256Z",
                    "status": "ready",
                    "estimated_time": "2022-06-09T04:55:53.746Z",
                    "index_id": "62a0906d47f5678267ec10a6",
                    "metadata": {
                      "duration": 531.998133,
                      "filename": "01.mp4",
                      "height": 400,
                      "width": 854
                    }
                  },
                  {
                    "_id": "62a17bce47f5678267ec10c6",
                    "created_at": "2022-06-09T04:49:20.001Z",
                    "updated_at": "2022-06-09T04:54:10.345Z",
                    "status": "ready",
                    "estimated_time": "2022-06-09T04:53:59.772Z",
                    "index_id": "62a0906d47f5678267ec10a6",
                    "metadata": {
                      "duration": 741.875,
                      "filename": "02.mp4",
                      "height": 480,
                      "width": 854
                    }
                  }
                ],
                "page_info": {
                  "limit_per_page": 10,
                  "page": 1,
                  "total_page": 1,
                  "total_results": 2
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/tasks \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -d sort_by=created_at \\\n     -d sort_option=desc \\\n     -d _id=663da73b31cdd0c1f638a8e6 \\\n     -d index_id=630aff993fcee0532cb809d0 \\\n     -d filename=01.mp4 \\\n     --data-urlencode created_at=2024-03-01T00:00:00Z \\\n     --data-urlencode updated_at=2024-03-01T00:00:00Z \\\n     --data-urlencode estimated_time=2024-03-01T00:00:00Z",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.list();\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "page_limit": 0
            },
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/tasks \\\n     -H \"x-api-key: string\" \\\n     -d page=0 \\\n     -d page_limit=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.list();\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.tasks.list(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page_limit=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page_limit",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_by=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "sort_by",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_option=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "sort_option",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "index_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "filename=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "filename",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "duration=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "duration",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "width=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "width",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "height=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "height",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "created_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "created_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "updated_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "updated_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "estimated_time=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "estimated_time",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tasks.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "pageLimit: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page_limit"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sortBy: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "sort_by"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sortOption: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "sort_option"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "index_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "filename: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "filename"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "duration: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "duration"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "width: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "width"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "height: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "height"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "updatedAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "updated_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "estimatedTime: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "estimated_time"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tasks.create": {
        "id": "endpoint_tasks.create",
        "namespace": [
          "subpackage_tasks"
        ],
        "description": "This method creates a video indexing task that uploads and indexes a video.\nEnsure your video meets the requirements in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos** page.\n\nUpload options:\n\n- **Local file**: Use the `video_file` parameter.\n- **Publicly accessible URL**: Use the `video_url` parameter.\n\n**NOTES**:\n\n- The platform supports video URLs that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.\n- This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tasks"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "index_id",
                "description": "The unique identifier of the index to which the video is being uploaded.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "provide_transcription",
                "description": "A boolean value specifying whether or not you provide a transcription for this video.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "language",
                "description": "Must be set to `en`.",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "default": "en"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "video_file",
                "isOptional": true
              },
              {
                "type": "file",
                "key": "transcription_file",
                "isOptional": true
              },
              {
                "type": "property",
                "key": "video_url",
                "description": "Specify this parameter to upload a video from a publicly accessible URL.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "transcription_url",
                "description": "When the `provide_transcription` parameter is set to `true`, and you want to provide a transcription from a publicly accessible URL, use the `transcription_url` parameter to specify the URL of your transcription. The transcription must be in the SRT or VTT format.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "disable_video_stream",
                "description": "This parameter indicates if the platform stores the video for streaming. When set to `false`, the platform stores the video, and you can retrieve its URL by calling the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol.\n\n**Default:** `false`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "description": "A video indexing task has successfully been created.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_tasks:TasksCreateResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksCreateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "insufficient_funds",
                    "message": "Not enough free credit. Please register a payment method or contact sales@twelvelabs.io.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              },
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "index_id": {
                  "type": "json",
                  "value": "index_id"
                },
                "provide_transcription": {
                  "type": "json"
                },
                "language": {
                  "type": "json"
                },
                "video_file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "transcription_file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "video_url": {
                  "type": "json"
                },
                "transcription_url": {
                  "type": "json"
                },
                "disable_video_stream": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "62a1ec6d9ea24f052b971a0f"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/tasks \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F index_id=\"index_id\" \\\n     -F video_file=@<file1> \\\n     -F transcription_file=@<file1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.create(\n    index_id=\"index_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    indexId: \"index_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "index_id": {
                  "type": "json",
                  "value": "string"
                },
                "provide_transcription": {
                  "type": "json"
                },
                "language": {
                  "type": "json"
                },
                "video_url": {
                  "type": "json"
                },
                "transcription_url": {
                  "type": "json"
                },
                "disable_video_stream": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/tasks \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F index_id=\"string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.create(\n    index_id=\"index_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    indexId: \"index_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.tasks.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "index_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "provide_transcription=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "provide_transcription",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "language=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "language",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_file=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_file",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "transcription_file=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "transcription_file",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_url=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_url",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "transcription_url=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "transcription_url",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "disable_video_stream=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "disable_video_stream",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tasks.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                          "isOptional": false,
                          "templateInputs": []
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                          "isOptional": false,
                          "templateInputs": []
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "index_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "provideTranscription: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "provide_transcription"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "language: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "language"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoUrl: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_url"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "transcriptionUrl: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "transcription_url"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "disableVideoStream: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "disable_video_stream"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tasks.retrieve": {
        "id": "endpoint_tasks.retrieve",
        "namespace": [
          "subpackage_tasks"
        ],
        "description": "This method retrieves a video indexing task.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/"
          },
          {
            "type": "pathParameter",
            "value": "task_id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "task_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the video indexing task to retrieve."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The specified video indexing task has successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_tasks:TasksRetrieveResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksRetrieveRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks/6298d673f1090f1100476d4c",
            "responseStatusCode": 200,
            "pathParameters": {
              "task_id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "61e1789761c43d6d9b7362f3",
                "created_at": "2022-01-14T13:20:22.986Z",
                "updated_at": "2022-01-17T08:35:21.639Z",
                "estimated_time": "2022-01-14T14:18:52.175Z",
                "index_id": "61e165b061c43d6d9b73627b",
                "video_id": "61e1789761c43d6d9b7362f3",
                "status": "ready",
                "metadata": {
                  "duration": 4334.0297,
                  "filename": "WPK3hvTr8PU.mp4",
                  "height": 360,
                  "width": 544
                },
                "hls": {
                  "video_url": "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8",
                  "thumbnail_urls": [
                    "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg"
                  ],
                  "status": "COMPLETE",
                  "updated_at": "2024-01-16T07:59:40.879Z"
                },
                "process": {
                  "percentage": 50,
                  "remain_seconds": 120
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/tasks/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.retrieve(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks/:task_id",
            "responseStatusCode": 400,
            "pathParameters": {
              "task_id": ":task_id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/tasks/:task_id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.retrieve(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.tasks.retrieve(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "task_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "task_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tasks.retrieve(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "task_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tasks.delete": {
        "id": "endpoint_tasks.delete",
        "namespace": [
          "subpackage_tasks"
        ],
        "description": "This action cannot be undone.\nNote the following about deleting a video indexing task:\n\n- You can only delete video indexing tasks for which the status is `ready` or `failed`.\n- If the status of your video indexing task is `ready`, you must first delete the video vector associated with your video indexing task by calling the [`DELETE`](/reference/delete-video-information) method of the `/indexes/videos` endpoint.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/"
          },
          {
            "type": "pathParameter",
            "value": "task_id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "task_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the video indexing task you want to delete."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksDeleteRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks/6298d673f1090f1100476d4c",
            "responseStatusCode": 204,
            "pathParameters": {
              "task_id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.twelvelabs.io/v1.3/tasks/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.delete(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.delete(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks/:task_id",
            "responseStatusCode": 400,
            "pathParameters": {
              "task_id": ":task_id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.twelvelabs.io/v1.3/tasks/:task_id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.delete(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.delete(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.tasks.delete(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "task_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "task_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tasks.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "task_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tasks.status": {
        "id": "endpoint_tasks.status",
        "namespace": [
          "subpackage_tasks"
        ],
        "description": "This method retrieves the number video indexing tasks in each status for the specified index.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/status"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "queryParameters": [
          {
            "key": "index_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the index for which you want to retrieve the number video indexing tasks in each status."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "An object containing the number video indexing tasks in each status.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_tasks:TasksStatusResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksStatusRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks/status",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "index_id": "6298d673f1090f1100476d4c"
            },
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "index_id": "635be12062c8def3b96b2616",
                "ready": 7,
                "validating": 2,
                "pending": 0,
                "failed": 0,
                "total_result": 10
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/tasks/status \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -d index_id=6298d673f1090f1100476d4c",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.status(\n    index_id=\"index_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.status({\n    indexId: \"index_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks/status",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "index_id": "string"
            },
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/tasks/status \\\n     -H \"x-api-key: string\" \\\n     -d index_id=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.status(\n    index_id=\"index_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.status({\n    indexId: \"index_id\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.tasks.status(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "index_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tasks.status(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "index_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_tasks.transfers": {
        "id": "endpoint_tasks.transfers",
        "namespace": [
          "subpackage_tasks"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/transfers"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "examples": [
          {
            "path": "/tasks/transfers",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/tasks/transfers",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.tasks.transfers()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.tasks.transfers(fs.createReadStream(\"/path/to/your/file\"));\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.tasks.transfers(\n\t$FERN_INPUT\n)",
              "templateInputs": [],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.tasks.transfers(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                          "isOptional": false,
                          "templateInputs": []
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_uploadVideos.cloud-to-cloud-import-videos": {
        "id": "endpoint_uploadVideos.cloud-to-cloud-import-videos",
        "namespace": [
          "subpackage_uploadVideos"
        ],
        "description": "An import represents the process of uploading and indexing all videos from the specified integration. This method initiates an asynchronous import and returns two lists:\n\n- Videos that will be imported.\n- Videos that will not be imported, typically due to unmet [prerequisites](/docs/upload-single-videos#prerequisites).\n\nThe actual uploading and indexing of videos occur asynchronously after you invoke this method. To monitor the status of each upload after invoking this method, use the [`GET`](/reference/cloud-to-cloud-retrieve-status) method of the `/tasks/transfers/import/{integration-id}/status` endpoint.\n\n**NOTES**:\n\n- Before importing videos, you must set up an integration. For details, see the [Set up an integration](/docs/upload-cloud#set-up-an-integration) section.\n- The videos you wish to upload must meet the requirements in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos** page.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/transfers/import/"
          },
          {
            "type": "pathParameter",
            "value": "integration-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "integration-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the integration for which you want to import videos."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "index_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The unique identifier of the index to which the videos are being uploaded.\n"
              },
              {
                "key": "incremental_import",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Specifies whether or not incremental sync is enabled. If set to `false`, the platform will synchronize all the files in the bucket.\n\n**Default**: `true`.\n"
              },
              {
                "key": "retry_failed",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Determines whether the platform retries failed uploads. When set to `true`, the platform attempts to re-upload files that failed during the initial upload process.\n\n**Default**: `false`.\n"
              },
              {
                "key": "user_metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.\n\n**NOTES:**\n- The metadata you specify when calling this method applies to all videos imported in this request.\n-  If you want to store other types of data such as objects or arrays, you must convert your data into string values.\n- You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.\n"
              }
            ]
          }
        },
        "response": {
          "description": "An import has successfully been initiated.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_uploadVideos:CloudToCloudImportVideosResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CloudToCloudImportVideosRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks/transfers/import/6298d673f1090f1100476d4c",
            "responseStatusCode": 200,
            "pathParameters": {
              "integration-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_id": "6298d673f1090f1100476d4c",
                "incremental_import": true,
                "retry_failed": false,
                "user_metadata": {
                  "category": "recentlyAdded",
                  "batchNumber": 5
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "failed_files": [
                  {
                    "filename": "1.mp4",
                    "error_message": "The video is too big. Please use a video with a size less than %s. The current size is %s."
                  }
                ],
                "videos": [
                  {
                    "video_id": "66fcee250f9f7bcce21915a2",
                    "filename": "1.mp4"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/tasks/transfers/import/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"index_id\": \"6298d673f1090f1100476d4c\",\n  \"incremental_import\": true,\n  \"retry_failed\": false,\n  \"user_metadata\": {\n    \"category\": \"recentlyAdded\",\n    \"batchNumber\": 5\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks/transfers/import/:integration-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "integration-id": ":integration-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/tasks/transfers/import/:integration-id \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"index_id\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.upload_videos.cloud_to_cloud_import_videos(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "integration_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "integration-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "index_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "incremental_import=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "incremental_import",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "retry_failed=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "retry_failed",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "containerTemplateString": "user_metadata={\n\t\t$FERN_INPUT\n\t}",
                    "delimiter": ",\n\t\t",
                    "keyTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "templateInputs": [
                        {
                          "location": "RELATIVE",
                          "path": null,
                          "type": "payload"
                        }
                      ],
                      "type": "generic"
                    },
                    "valueTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "templateInputs": [
                        {
                          "location": "RELATIVE",
                          "path": null,
                          "type": "payload"
                        }
                      ],
                      "type": "generic"
                    },
                    "keyValueSeparator": ": ",
                    "templateInput": {
                      "location": "BODY",
                      "path": "user_metadata"
                    },
                    "type": "dict"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          }
        }
      },
      "endpoint_uploadVideos.cloud-to-cloud-retrieve-status": {
        "id": "endpoint_uploadVideos.cloud-to-cloud-retrieve-status",
        "namespace": [
          "subpackage_uploadVideos"
        ],
        "description": "This method retrieves the current status for each video from a specified integration and index. It returns an object containing lists of videos grouped by status. See the [Task object](/reference/the-task-object) page for details on each status.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/transfers/import/"
          },
          {
            "type": "pathParameter",
            "value": "integration-id"
          },
          {
            "type": "literal",
            "value": "/status"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "integration-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the integration for which you want to retrieve the status of your imported videos."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "index_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The unique identifier of the index for which you want to retrieve the status of your imported videos."
              }
            ]
          }
        },
        "response": {
          "description": "The status for each video from the specified integration and index has successfully been retrieved\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_uploadVideos:CloudToCloudRetrieveStatusResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CloudToCloudRetrieveStatusRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks/transfers/import/6298d673f1090f1100476d4c/status",
            "responseStatusCode": 200,
            "pathParameters": {
              "integration-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_id": "6298d673f1090f1100476d4c"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "not_imported": [
                  "NEW_VIDEO_1.mp4",
                  "NEW_VIDEO_2.mp4"
                ],
                "validating": [
                  {
                    "video_id": "66fcee250f9f7bcce21915a2",
                    "filename": "1.mp4",
                    "created_at": "2024-09-24T13:22:00Z"
                  }
                ],
                "pending": [
                  {
                    "video_id": "VIDEO_ID_3",
                    "filename": "VIDEO_3.mp4",
                    "created_at": "2024-09-24T13:22:00Z"
                  }
                ],
                "queued": [
                  {
                    "video_id": "66fcee250f9f7bcce21915a2",
                    "filename": "1.mp4",
                    "created_at": "2024-09-24T13:22:00Z"
                  }
                ],
                "indexing": [
                  {
                    "video_id": "66fcee250f9f7bcce21915a2",
                    "filename": "1.mp4",
                    "created_at": "2024-09-24T13:22:00Z"
                  }
                ],
                "ready": [
                  {
                    "video_id": "VIDEO_ID_1",
                    "filename": "VIDEO_1.mp4",
                    "created_at": "2024-09-24T13:22:00Z"
                  },
                  {
                    "video_id": "VIDEO_ID_2",
                    "filename": "VIDEO_2.mp4",
                    "created_at": "2024-09-24T13:22:00Z"
                  }
                ],
                "failed": [
                  {
                    "video_id": "66fcee250f9f7bcce21915a2",
                    "filename": "1.mp4",
                    "created_at": "2024-09-24T13:22:00Z",
                    "error_message": "The video is too big. Please use a video with a size less than %s. The current size is %s."
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/tasks/transfers/import/6298d673f1090f1100476d4c/status \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks/transfers/import/:integration-id/status",
            "responseStatusCode": 400,
            "pathParameters": {
              "integration-id": ":integration-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_id": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/tasks/transfers/import/:integration-id/status \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_uploadVideos.cloud-to-cloud-retrieve-import-logs": {
        "id": "endpoint_uploadVideos.cloud-to-cloud-retrieve-import-logs",
        "namespace": [
          "subpackage_uploadVideos"
        ],
        "description": "This endpoint returns a chronological list of import operations for the specified integration. The list is sorted by creation date, with the oldest imports first. Each item in the list contains:\n\n- The number of videos in each status\n- Detailed error information for failed uploads, including filenames and error messages.\n\nUse this endpoint to track import progress and troubleshoot potential issues across multiple operations.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/tasks/transfers/import/"
          },
          {
            "type": "pathParameter",
            "value": "integration-id"
          },
          {
            "type": "literal",
            "value": "/logs"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "integration-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the integration for which you want to retrieve the import logs."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The import logs have successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_uploadVideos:CloudToCloudRetrieveImportLogsResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/tasks/transfers/import/6298d673f1090f1100476d4c/logs",
            "responseStatusCode": 200,
            "pathParameters": {
              "integration-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "index_id": "66ed1ed7046a96796303a06f",
                    "index_name": "my sample index",
                    "created_at": "2024-09-24T13:22:00Z",
                    "ended_at": "2024-09-24T13:23:00Z",
                    "video_status": {
                      "ready": 5,
                      "validating": 2,
                      "queued": 0,
                      "pending": 1,
                      "indexing": 3,
                      "failed": 2
                    },
                    "failed_files": [
                      {
                        "filename": "VIDEO_3.mp4",
                        "error_message": "Video indexing has failed. Please try again."
                      }
                    ]
                  },
                  {
                    "index_id": "66ed1ed7046a96796303a06f",
                    "index_name": "my sample index",
                    "created_at": "2024-09-22T13:25:00Z",
                    "ended_at": "2024-09-24T13:26:00Z",
                    "video_status": {
                      "ready": 10,
                      "validating": 0,
                      "queued": 0,
                      "pending": 0,
                      "indexing": 0,
                      "failed": 3
                    },
                    "failed_files": [
                      {
                        "filename": "VIDEO_3.mp4",
                        "error_message": "No sound"
                      }
                    ]
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/tasks/transfers/import/6298d673f1090f1100476d4c/logs \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/tasks/transfers/import/:integration-id/logs",
            "responseStatusCode": 400,
            "pathParameters": {
              "integration-id": ":integration-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/tasks/transfers/import/:integration-id/logs \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_indexes.list": {
        "id": "endpoint_indexes.list",
        "namespace": [
          "subpackage_indexes"
        ],
        "description": "This method returns a list of the indexes in your account. The API returns indexes sorted by creation date, with the oldest indexes at the top of the list.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/indexes"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`."
          },
          {
            "key": "page_limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The field to sort on. The following options are available:\n\n- `updated_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was updated.\n- `created_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was created.\n\n**Default**: `created_at`."
          },
          {
            "key": "sort_option",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The sorting direction. The following options are available:\n\n- `asc`\n- `desc`\n\n**Default**: `desc`."
          },
          {
            "key": "_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the unique identifier of an index."
          },
          {
            "key": "index_name",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the name of an index."
          },
          {
            "key": "engine_options",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the engine options. When filtering by multiple engine options, the values must be comma-separated."
          },
          {
            "key": "engine_family",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the engine family. This parameter can take one of the following values: `marengo` or `pegasus`. You can specify a single value."
          },
          {
            "key": "index_options",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the indexing options. When filtering by multiple indexing options, the values must be comma-separated.\n\n**NOTE:** This parameter is supported for backward compatibility and will be deprecated in a future release. Instead, use `engine_options` or `engine_family`."
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter indexes by the creation date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the indexes that were created on the specified date at or after the given time."
          },
          {
            "key": "updated_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter indexes by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the indexes that were last updated on the specified date at or after the given time."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The indexes have successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_indexes:IndexesListResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:IndexesListRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "sort_by": "created_at",
              "sort_option": "desc",
              "_id": "6298d673f1090f1100476d4c",
              "index_name": "myIndex",
              "engine_options": "engine_options=visual,conversation",
              "engine_family": "marengo",
              "index_options": "index_options=visual,conversation",
              "created_at": "2024-08-16T16:53:59Z",
              "updated_at": "2024-08-16T16:55:59Z"
            },
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "_id": "62d85fe7340fa665f1fda5dd",
                    "created_at": "2024-01-09T11:11:20.463Z",
                    "updated_at": "2024-01-09T11:17:15.296Z",
                    "expires_at": "2024-04-08T11:11:20.463Z",
                    "index_name": "index-01",
                    "total_duration": 1363.76,
                    "video_count": 2,
                    "engines": [
                      {
                        "engine_name": "marengo2.7",
                        "engine_options": [
                          "visual",
                          "text_in_video",
                          "conversation",
                          "logo"
                        ],
                        "addons": [
                          "thumbnail"
                        ]
                      },
                      {
                        "engine_name": "pegasus1.1",
                        "engine_options": [
                          "visual",
                          "conversation"
                        ],
                        "addons": [
                          "thumbnail"
                        ]
                      }
                    ]
                  },
                  {
                    "_id": "62d858ee340fa665f1fda5d8",
                    "created_at": "2024-01-09T11:11:20.463Z",
                    "updated_at": "2024-01-09T11:17:15.296Z",
                    "expires_at": "2024-04-08T11:11:20.463Z",
                    "index_name": "index-02",
                    "total_duration": 579.12,
                    "video_count": 1,
                    "engines": [
                      {
                        "engine_name": "marengo2.7",
                        "engine_options": [
                          "visual",
                          "logo"
                        ],
                        "addons": [
                          "thumbnail"
                        ]
                      },
                      {
                        "engine_name": "pegasus1.1",
                        "engine_options": [
                          "visual",
                          "conversation"
                        ],
                        "addons": [
                          "thumbnail"
                        ]
                      }
                    ]
                  }
                ],
                "page_info": {
                  "limit_per_page": 10,
                  "page": 1,
                  "total_page": 1,
                  "total_results": 2
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/indexes \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -d sort_by=created_at \\\n     -d sort_option=desc \\\n     -d _id=6298d673f1090f1100476d4c \\\n     -d index_name=myIndex \\\n     --data-urlencode engine_options=engine_options=visual,conversation \\\n     -d engine_family=marengo \\\n     --data-urlencode index_options=index_options=visual,conversation \\\n     --data-urlencode created_at=2024-08-16T16:53:59Z \\\n     --data-urlencode updated_at=2024-08-16T16:55:59Z",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.list(\n    engine_options=\"engine_options=visual,conversation\",\n    index_options=\"index_options=visual,conversation\",\n    created_at=\"2024-08-16T16:53:59Z\",\n    updated_at=\"2024-08-16T16:55:59Z\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.list({\n    engineOptions: \"engine_options=visual,conversation\",\n    indexOptions: \"index_options=visual,conversation\",\n    createdAt: \"2024-08-16T16:53:59Z\",\n    updatedAt: \"2024-08-16T16:55:59Z\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "page": 0,
              "page_limit": 0
            },
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/indexes \\\n     -H \"x-api-key: string\" \\\n     -d page=0 \\\n     -d page_limit=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.list(\n    engine_options=\"engine_options=visual,conversation\",\n    index_options=\"index_options=visual,conversation\",\n    created_at=\"2024-08-16T16:53:59Z\",\n    updated_at=\"2024-08-16T16:55:59Z\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.list({\n    engineOptions: \"engine_options=visual,conversation\",\n    indexOptions: \"index_options=visual,conversation\",\n    createdAt: \"2024-08-16T16:53:59Z\",\n    updatedAt: \"2024-08-16T16:55:59Z\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.list(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page_limit=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page_limit",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_by=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "sort_by",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_option=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "sort_option",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_name=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "index_name",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "engine_options=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "engine_options",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "engine_family=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "engine_family",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_options=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "index_options",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "created_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "created_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "updated_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "updated_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "pageLimit: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page_limit"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sortBy: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "sort_by"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sortOption: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "sort_option"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexName: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "index_name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "engineOptions: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "engine_options"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "engineFamily: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "engine_family"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexOptions: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "index_options"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "updatedAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "updated_at"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes.create": {
        "id": "endpoint_indexes.create",
        "namespace": [
          "subpackage_indexes"
        ],
        "description": "This method creates an index.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/indexes"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "index_name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The name of the index. Make sure you use a succinct and descriptive name.\n"
              },
              {
                "key": "engines",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_indexes:IndexesCreateRequestEnginesItem"
                      }
                    }
                  }
                },
                "description": "An array that specifies the [video understanding engines](/docs/video-understanding-engines) and the [engine options](/docs/engine-options) to be enabled for this index. This determines how the platform processes your videos.\n"
              },
              {
                "key": "addons",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "An array specifying which add-ons should be enabled. Each entry in the array is an addon, and the following values are supported:\n- `thumbnail`: Enables [thumbnail generation](/docs/extract-video-data#retrieve-thumbnails).\n\nIf you don't provide this parameter, no add-ons will be enabled.\n\n**NOTES:**\n- You can only enable addons when using the Marengo video understanding engine.\n- You cannot disable an add-on once the index has been created.\n"
              }
            ]
          }
        },
        "response": {
          "description": "An index has successfully been created",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_indexes:IndexesCreateResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:IndexesCreateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_name": "myIndex",
                "engines": [
                  {
                    "engine_name": "marengo2.7",
                    "engine_options": [
                      "visual",
                      "conversation",
                      "text_in_video",
                      "logo"
                    ]
                  },
                  {
                    "engine_name": "pegasus1.1",
                    "engine_options": [
                      "visual",
                      "conversation"
                    ]
                  }
                ],
                "addons": [
                  "thumbnail"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "62d85fe7340fa665f1fda5dd"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/indexes \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"index_name\": \"myIndex\",\n  \"engines\": [\n    {\n      \"engine_name\": \"marengo2.7\",\n      \"engine_options\": [\n        \"visual\",\n        \"conversation\",\n        \"text_in_video\",\n        \"logo\"\n      ]\n    },\n    {\n      \"engine_name\": \"pegasus1.1\",\n      \"engine_options\": [\n        \"visual\",\n        \"conversation\"\n      ]\n    }\n  ],\n  \"addons\": [\n    \"thumbnail\"\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\nfrom twelvelabs.indexes import IndexesCreateRequestEnginesItem\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.create(\n    index_name=\"myIndex\",\n    engines=[\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"marengo2.6\",\n            engine_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n        ),\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"pagasus1.0\",\n            engine_options=[\"visual\", \"conversation\"],\n        ),\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.create({\n    indexName: \"myIndex\",\n    engines: [{\n            engineName: \"marengo2.6\",\n            engineOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n        }, {\n            engineName: \"pagasus1.0\",\n            engineOptions: [\"visual\", \"conversation\"]\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_name": "string",
                "engines": [
                  {
                    "engine_name": "string",
                    "engine_options": [
                      "string"
                    ]
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/indexes \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"index_name\": \"string\",\n  \"engines\": [\n    {\n      \"engine_name\": \"string\",\n      \"engine_options\": [\n        \"string\"\n      ]\n    }\n  ]\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\nfrom twelvelabs.indexes import IndexesCreateRequestEnginesItem\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.create(\n    index_name=\"myIndex\",\n    engines=[\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"marengo2.6\",\n            engine_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n        ),\n        IndexesCreateRequestEnginesItem(\n            engine_name=\"pagasus1.0\",\n            engine_options=[\"visual\", \"conversation\"],\n        ),\n    ],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.create({\n    indexName: \"myIndex\",\n    engines: [{\n            engineName: \"marengo2.6\",\n            engineOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n        }, {\n            engineName: \"pagasus1.0\",\n            engineOptions: [\"visual\", \"conversation\"]\n        }]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_name=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "index_name",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "containerTemplateString": "engines=[\n\t\t$FERN_INPUT\n\t]",
                    "delimiter": ",\n\t\t",
                    "innerTemplate": {
                      "imports": [
                        "from twelvelabs.indexes import IndexesCreateRequestEnginesItem"
                      ],
                      "isOptional": true,
                      "templateString": "IndexesCreateRequestEnginesItem(\n\t\t\t$FERN_INPUT\n\t\t)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine_name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "RELATIVE",
                                "path": "engine_name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "engine_options=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                            "delimiter": ",\n\t\t\t\t",
                            "innerTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "RELATIVE",
                              "path": "engine_options"
                            },
                            "type": "iterable"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t\t\t",
                      "type": "generic"
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "engines"
                    },
                    "type": "iterable"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "containerTemplateString": "addons=[\n\t\t$FERN_INPUT\n\t]",
                    "delimiter": ",\n\t\t",
                    "innerTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "templateInputs": [
                        {
                          "location": "RELATIVE",
                          "path": null,
                          "type": "payload"
                        }
                      ],
                      "type": "generic"
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "addons"
                    },
                    "type": "iterable"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexName: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "index_name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "engines: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engineName: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": "engine_name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "engineOptions: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                  "delimiter": ",\n\t\t\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "RELATIVE",
                                    "path": "engine_options"
                                  }
                                }
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "engines"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "addons: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "addons"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes.retrieve": {
        "id": "endpoint_indexes.retrieve",
        "namespace": [
          "subpackage_indexes"
        ],
        "description": "This method retrieves details about the specified index.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier of the index to retrieve."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The specified index has successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_indexes:IndexesRetrieveResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:IndexesRetrieveRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c",
            "responseStatusCode": 200,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "62d9bafa90077fc60af827a0",
                "created_at": "2024-01-09T11:11:20.463Z",
                "updated_at": "2024-01-09T11:17:15.296Z",
                "expires_at": "2024-04-08T11:11:20.463Z",
                "index_name": "myIndex",
                "total_duration": 8716.8969,
                "video_count": 12,
                "engines": [
                  {
                    "engine_name": "marengo2.7",
                    "engine_options": [
                      "visual",
                      "text_in_video",
                      "conversation",
                      "logo"
                    ],
                    "addons": [
                      "thumbnail"
                    ]
                  },
                  {
                    "engine_name": "pegasus1.1",
                    "engine_options": [
                      "visual",
                      "conversation"
                    ],
                    "addons": [
                      "thumbnail"
                    ]
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.retrieve(\n    index_id=\"index-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.retrieve(\"index-id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/indexes/:index-id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.retrieve(\n    index_id=\"index-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.retrieve(\"index-id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.retrieve(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.retrieve(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes.update": {
        "id": "endpoint_indexes.update",
        "namespace": [
          "subpackage_indexes"
        ],
        "description": "This method updates the name of the specified index.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier of the index to update."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "index_name",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The name of the index.\n"
              }
            ]
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:IndexesUpdateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c",
            "responseStatusCode": 204,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_name": "myIndex"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"index_name\": \"myIndex\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.update(\n    index_id=\"index-id\",\n    index_name=\"index_name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.update(\"index-id\", {\n    indexName: \"index_name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "index_name": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.twelvelabs.io/v1.3/indexes/:index-id \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"index_name\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.update(\n    index_id=\"index-id\",\n    index_name=\"index_name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.update(\"index-id\", {\n    indexName: \"index_name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.update(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_name=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "index_name",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.update(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexName: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "index_name"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes.delete": {
        "id": "endpoint_indexes.delete",
        "namespace": [
          "subpackage_indexes"
        ],
        "description": "This method deletes the specified index and all the videos within it. This action cannot be undone.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique identifier of the index to delete."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:IndexesDeleteRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c",
            "responseStatusCode": 204,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.delete(\n    index_id=\"index-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.delete(\"index-id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.twelvelabs.io/v1.3/indexes/:index-id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.delete(\n    index_id=\"index-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.delete(\"index-id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.delete(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_summarize.create": {
        "id": "endpoint_summarize.create",
        "namespace": [
          "subpackage_summarize"
        ],
        "description": "This endpoint generates summaries, chapters, or highlights for your videos. Optionally, you can provide a prompt to customize the output.\n\n**NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/summarize"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "video_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The unique identifier of the video that you want to summarize.\n"
              },
              {
                "key": "type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Specifies the type of summary. Use one of the following values:\n  - `summary`: A brief that encapsulates the key points of a video, presenting the most important information clearly and concisely.\n  - `chapter`: A chronological list of all the chapters in a video, providing a granular breakdown of its content. For each chapter, the platform returns its starting and end times, measured in seconds from the beginning of the video clip, a descriptive headline that offers a brief of the events or activities within that part of the video, and an accompanying summary that elaborates on the headline.\n  - `highlight`: A chronologically ordered list of the most important events within a video. Unlike chapters, highlights only capture the key moments, providing a snapshot of the video's main topics. For each highlight, the platform returns its starting and end times, measured in seconds from the beginning of the video, a title, and a brief description that captures the essence of this part of the video.\n"
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Use this field to provide context for the summarization task, such as the target audience, style, tone of voice, and purpose.\n\n**NOTES**:\n  - Your prompts can be instructive or descriptive, or you can also phrase them as questions.\n  - The maximum length of a prompt is 1500 characters.\n\n**Example**: Generate a summary of this video for a social media post, up to two sentences.\n"
              },
              {
                "key": "temperature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.\n\n**Default:** 0.7\n**Min:** 0\n**Max:** 1\n"
              }
            ]
          }
        },
        "response": {
          "description": "The specified video has successfully been summarized.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_summarize:SummarizeCreateResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SummarizeCreateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          },
          {
            "description": "If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.\n",
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/summarize",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "6298d673f1090f1100476d4c",
                "type": "summary",
                "prompt": "Generate a summary of this video for a social media post, up to two sentences.",
                "temperature": 0.7
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "663da73b31cdd0c1f638a8e6",
                "highlights": [
                  {
                    "start": 0,
                    "end": 30,
                    "highlight": "A woman vlogs about her summer day, sharing her experience while standing in her childhood home in Minnesota.",
                    "highlight_summary": "The woman talks about her love for getting some sun, despite not tanning well, and shows the camera around her house, mentioning her fake tanner."
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/summarize \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"6298d673f1090f1100476d4c\",\n  \"type\": \"summary\",\n  \"prompt\": \"Generate a summary of this video for a social media post, up to two sentences.\",\n  \"temperature\": 0.7\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.summarize.create(\n    video_id=\"video_id\",\n    type=\"type\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.summarize.create({\n    videoId: \"video_id\",\n    type: \"type\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/summarize",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "string",
                "type": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/summarize \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"string\",\n  \"type\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.summarize.create(\n    video_id=\"video_id\",\n    type=\"type\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.summarize.create({\n    videoId: \"video_id\",\n    type: \"type\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/summarize",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "string",
                "type": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/summarize \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"string\",\n  \"type\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.summarize.create(\n    video_id=\"video_id\",\n    type=\"type\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.summarize.create({\n    videoId: \"video_id\",\n    type: \"type\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.summarize.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "type=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "type",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "prompt=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "prompt",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "temperature=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "temperature",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.summarize.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "type: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "type"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "prompt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "prompt"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "temperature: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "temperature"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_generate.create": {
        "id": "endpoint_generate.create",
        "namespace": [
          "subpackage_generate"
        ],
        "description": "This endpoint generates open-ended texts based on your videos, including but not limited to tables of content, action items, memos, and detailed analyses.\n\n**NOTES**:\n\n- This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.\n- This endpoint supports streaming responses. For details on integrating this feature into your application, refer to the [Streaming response](/docs/streaming-responses) guide.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/generate"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "video_id",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "The unique identifier of the video for which you wish to generate a text."
              },
              {
                "key": "prompt",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "A prompt that guides the model on the desired format or content.\n\n**NOTES**:\n  - Even though the model behind this endpoint is trained to a high degree of accuracy, the preciseness of the generated text may vary based on the nature and quality of the video and the clarity of the prompt.\n  - Your prompts can be instructive or descriptive, or you can also phrase them as questions. \n  - The maximum length of a prompt is 1500 characters.\n\n**Examples**:\n  \n  - Based on this video, I want to generate five keywords for SEO (Search Engine Optimization).\n  - I want to generate a description for my video with the following format: Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.\n"
              },
              {
                "key": "temperature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                "description": "Controls the randomness of the text output generated by the model. A higher value generates more creative text, while a lower value produces more deterministic text output.\n\n**Default:** 0.7\n**Min:** 0\n**Max:** 1\n"
              },
              {
                "key": "stream",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "Set this parameter to `true` to enable streaming responses in the <a href=\"https://github.com/ndjson/ndjson-spec\" target=\"_blank\">NDJSON</a> format. \n\n**Default:** `true`\n"
              }
            ]
          }
        },
        "response": {
          "description": "The specified video has successfully been processed.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_generate:GenerateCreateResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:GenerateCreateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          },
          {
            "description": "If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.\n",
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/generate",
            "responseStatusCode": 200,
            "name": "Non-streamed response",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "6298d673f1090f1100476d4c",
                "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                "temperature": 0.7,
                "stream": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "2a22fd17-7bd4-446a-abd6-b9382cb18f90",
                "data": "1. Vlog\\n2. Minnesota\\n3. Mall of America\\n4. Shopping haul\\n5. Outdoor adventure"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/generate \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"6298d673f1090f1100476d4c\",\n  \"prompt\": \"I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.\",\n  \"temperature\": 0.7,\n  \"stream\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/generate",
            "responseStatusCode": 200,
            "name": "Stream start",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "6298d673f1090f1100476d4c",
                "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                "temperature": 0.7,
                "stream": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "event_type": "stream_start",
                "metadata": {
                  "generation_id": "2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/generate \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"6298d673f1090f1100476d4c\",\n  \"prompt\": \"I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.\",\n  \"temperature\": 0.7,\n  \"stream\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/generate",
            "responseStatusCode": 200,
            "name": "Text generation",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "6298d673f1090f1100476d4c",
                "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                "temperature": 0.7,
                "stream": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "event_type": "text_generation",
                "text": "light-hearted moments of cats"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/generate \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"6298d673f1090f1100476d4c\",\n  \"prompt\": \"I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.\",\n  \"temperature\": 0.7,\n  \"stream\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/generate",
            "responseStatusCode": 200,
            "name": "Stream end",
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "6298d673f1090f1100476d4c",
                "prompt": "I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.",
                "temperature": 0.7,
                "stream": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "event_type": "stream_end",
                "metadata": {
                  "generation_id": "2f6d0bdd-aed8-47b1-8124-3c9d8006cdc9"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/generate \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"6298d673f1090f1100476d4c\",\n  \"prompt\": \"I want to generate a description for my video with the following format - Title of the video, followed by a summary in 2-3 sentences, highlighting the main topic, key events, and concluding remarks.\",\n  \"temperature\": 0.7,\n  \"stream\": true\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/generate",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "string",
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/generate \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"string\",\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/generate",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_id": "string",
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/generate \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_id\": \"string\",\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.generate.create(\n    video_id=\"video_id\",\n    prompt=\"prompt\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.generate.create({\n    videoId: \"video_id\",\n    prompt: \"prompt\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.generate.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "prompt=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "prompt",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "temperature=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "temperature",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "stream=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "stream",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.generate.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "prompt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "prompt"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "temperature: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "temperature"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "stream: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "stream"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_embed.create": {
        "id": "endpoint_embed.create",
        "namespace": [
          "subpackage_embed"
        ],
        "description": "This method creates embedings for text, image, and audio content.\n\nBefore you create an embedding, ensure that the following prerequisites are met:\n\n- [Text embeddings](/docs/create-text-embeddings#prerequisites)\n- [Image embeddings](/docs/create-image-embeddings#prerequisites)\n- [Audio embeddings](/docs/create-audio-embeddings#prerequisites)\n\nParameters for embeddings:\n\n- **Common parameters**:\n  - `engine_name`: The video understanding engine you want to use. Example: \"Marengo-retrieval-2.6\".\n- **Text embeddings**:\n  - `text`: Text for which to create an embedding.\n- **Image embeddings**:\n  Provide one of the following:\n  - `image_url`: Publicly accessible URL of your image file.\n  - `image_file`: Local image file.\n- **Audio embeddings**:\n  Provide one of the following:\n  - `audio_url`: Publicly accessible URL of your audio file.\n  - `audio_file`: Local audio file.\n\n**NOTES**:\n\n- The “Marengo-retrieval-2.6” video understanding engine generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.\n- You can create multiple types of embeddings in a single API call.\n- Audio embeddings combine generic sound and human speech in a single embedding. For videos with transcriptions, you can [retrieve transcriptions](/reference/retrieve-transcription) and then [create text embeddings](/reference/create-text-embedding) from these transcriptions.\n\n> 🚧 Important\n> The response includes breaking changes that might require updates to your application code.\n> **Common changes**:\n>\n> - The `is_success` boolean flag has been removed.\n>   **Media-specific changes**:\n> - **Text**:The response now includes a nested array named `segments`.\n> - **Image**: The response now includes a nested array named `segments`.\n> - **Audio**: No additional changes.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/embed"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "engine_name",
                "description": "The name of the engine you want to use. The following engines are available:\n  - `Marengo-retrieval-2.6`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "text",
                "description": "The text for which you wish to create an embedding.\n\n**NOTE**:\nText embeddings are limited to 77 tokens. If the text exceeds this limit, the platform truncates it according to the value of the `text_truncate` parameter described below.\n\n**Example**: \"Man with a dog crossing the street\"\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "text_truncate",
                "description": "Specifies how the platform truncates text that exceeds 77 tokens to fit the maximum length allowed for an embedding.\nThis parameter can take one of the following values:\n- `start`: The platform will truncate the start of the provided text.\n- `end`: The platform will truncate the end of the provided text.\n- `none`: The platform will return an error if the text is longer than the maximum token limit.\n\n**Default**: `end`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "default": "end"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "image_url",
                "description": "The publicly accessible URL of the image for which you wish to create an embedding. This parameter is required for image embeddings if `image_file` is not provided.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "image_file",
                "isOptional": true
              },
              {
                "type": "property",
                "key": "audio_url",
                "description": "The publicly accessible URL of the audio file for which you wish to creae an emebdding. This parameter is required for audio embeddings if `audio_file` is not provided.   \n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "audio_file",
                "isOptional": true
              },
              {
                "type": "property",
                "key": "audio_start_offset_sec",
                "description": "Specifies the start time, in seconds, from which the platform generates the audio embeddings. This parameter allows you to skip the initial portion of the audio during processing.\n**Default**: `0`.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double",
                          "default": 0
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "description": "A text embedding has successfully been created. \n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:EmbeddingResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:EmbedCreateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/embed",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "engine_name": {
                  "type": "json",
                  "value": "engine_name"
                },
                "text": {
                  "type": "json"
                },
                "text_truncate": {
                  "type": "json"
                },
                "image_url": {
                  "type": "json"
                },
                "image_file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "audio_url": {
                  "type": "json"
                },
                "audio_file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "audio_start_offset_sec": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "audio_embedding": {
                  "segments": [
                    {
                      "float": [
                        -0.042632885,
                        0.014312328,
                        0.029209055
                      ],
                      "start_offset_sec": 0
                    }
                  ],
                  "error_message": "Audio file is not valid.",
                  "metadata": {
                    "input_url": "https://example.com/audio.mp3",
                    "input_filename": "01.mp3"
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/embed \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F engine_name=\"engine_name\" \\\n     -F image_file=@<file1> \\\n     -F audio_file=@<file1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.create(\n    engine_name=\"engine_name\",\n    text=\"text\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.create({\n    engineName: \"engine_name\",\n    text: \"text\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/embed",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "engine_name": {
                  "type": "json",
                  "value": "string"
                },
                "text": {
                  "type": "json"
                },
                "text_truncate": {
                  "type": "json"
                },
                "image_url": {
                  "type": "json"
                },
                "audio_url": {
                  "type": "json"
                },
                "audio_start_offset_sec": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/embed \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F engine_name=\"string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.create(\n    engine_name=\"engine_name\",\n    text=\"text\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.create({\n    engineName: \"engine_name\",\n    text: \"text\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.embed.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "engine_name=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "engine_name",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "text=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "text",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "text_truncate=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "text_truncate",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "image_url=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "image_url",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "image_file=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "image_file",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "audio_url=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "audio_url",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "audio_file=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "audio_file",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "audio_start_offset_sec=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "audio_start_offset_sec",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.embed.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "engineName: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "engine_name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "text: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "text"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "textTruncate: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "text_truncate"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_search.query": {
        "id": "endpoint_search.query",
        "namespace": [
          "subpackage_search"
        ],
        "description": "Use this endpoint to search for relevant matches in an index using text or various media queries.\n\n**Text queries**:\n\n- Use the `query_text` parameter to specify your query.\n\n**Media queries**:\n\n- Set the `query_media_type` parameter to the corresponding media type (example: `image`).\n- Specify either one of the following parameters:\n  - `query_media_url`: Publicly accessible URL of your media file.\n  - `query_media_file`: Local media file.\n    If both `query_media_url` and `query_media_file` are specified in the same request, `query_media_url` takes precedence.\n\nBefore using a media file as a query, ensure that the file meets the [prerequisites](/docs/single-queries-prerequisites).\n\n**NOTE**: This endpoint is rate-limited. For details, see the [Rate limits](/docs/rate-limits) page.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/search"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "query_media_type",
                "description": "The type of media you wish to use. This parameter is required for media queries. For example, to perform an image-based search, set this parameter to `image`.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "literal",
                        "value": {
                          "type": "stringLiteral",
                          "value": "image"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "query_media_url",
                "description": "The publicly accessible URL of the media file you wish to use. This parameter is required for media queries if `query_media_file` is not provided.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "query_media_file",
                "isOptional": true
              },
              {
                "type": "property",
                "key": "query_text",
                "description": "The text query to search for. This parameter is required for text queries. Note that the platform supports full natural language-based search.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "index_id",
                "description": "The unique identifier of the index to search.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "search_options",
                "description": "Specifies the [sources of information](/docs/search-options) the platform uses when performing a search. You must include the `search_options` parameter separately for each desired source of information.\n\n**NOTES:** \n- The search options you specify must be a subset of the [engine options](/docs/engine-options) used when you created the index.\n- You can specify multiple search options in conjunction with the `operator` parameter described below to broaden or narrow your search.\n\nExample:\nTo search using both visual and audio cues, include this parameter twice in the request as shown below:\n```JSON\n--form search_options=visual \\\n--form search_options=conversation \\\n```\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_search:SearchQueryRequestSearchOptionsItem"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "adjust_confidence_level",
                "description": "This parameter specifies the strictness of the thresholds for assigning the high, medium, or low confidence levels to search results. If you use a lower value, the thresholds become more relaxed, and more search results will be classified as having high, medium, or low confidence levels. You can use this parameter to include a broader range of potentially relevant video clips, even if some results might be less precise. \n\n**Min**: 0\n**Max**: 1\n**Default:** 0.5\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "group_by",
                "description": "Use this parameter to group or ungroup items in a response. It can take one of the following values:\n- `video`:  The platform will group the matching video clips in the response by video.\n- `clip`: The matching video clips in the response will not be grouped.\n\n**Default:** `clip`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_search:SearchQueryRequestGroupBy"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "threshold",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ThresholdSearch"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "sort_option",
                "description": "Use this parameter to specify the sort order for the response.\n\nWhen performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order. \n\nIf you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.\n\nIf you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.\n\n\n**Default:** `score`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_search:SearchQueryRequestSortOption"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "operator",
                "description": "When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.\n  \n  The following logical operators are supported:\n  \n  - `or`\n  \n  - `and`\n  \n  For details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.\n\n  \n  **Default**: `or`.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_search:SearchQueryRequestOperator"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "conversation_option",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ConversationOptionAnyToVideo"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "page_limit",
                "description": "The number of items to return on each page. When grouping by video, this parameter represents the number of videos per page. Otherwise, it represents the maximum number of video clips per page. \n\n**Max**: `50`.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer",
                          "default": 10
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "filter",
                "description": "This parameter accepts a stringified object to filter search results:\n- For string fields: Use the exact match operator (`=`) to return results that exactly equal the specified value. Syntax: `\"field\": \"value\"`.\n- For numeric fields: Use either exact match (`=`) or comparison operators (`gte`, `lte`) for arithmetic comparisons Syntax: `\"field\": number` or `\"field\": { \"gte\": number, \"lte\": number }`.\n\nThe filter object can contain the following properties:\n- `id`: An array of strings to filter by specific video IDs. Example: `\"id\": [\"video1\", \"video2\"]`.\n- `duration`: An object to filter your search results based on the duration of the video containing the segment that matches your query. Example: `\"duration\": { \"gte\": 600, \"lte\": 800 }`.\n- `width`: A numeric value to filter by video width. Example: `\"width\": 1920` or `\"width\": { \"gte\": 1280, \"lte\": 1920 }`\n- `height`: A numeric value to filter by video height. Example: `\"height\": 1080` or `\"height\": { \"gte\": 720, \"lte\": 1080 }`.\n- `size`: A numeric value to filter by video size in bytes. Example: `\"size\": 1048576` or `\"size\": { \"gte\": 1048576, \"lte\": 5242880 }`.\n- `title`: A string value to filter by video title. Example: `\"title\": \"Animal Encounters part 1\"`.\n\nTo enable filtering by custom fields:\n1. Add metadata to your video by calling the the [`PUT`](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint\n2. Use the custom fields as filter criteria in your queries. For example, to return only videos where a custom field named `needsReview` of type boolean is `true`, use: `\"needs_review\": true`.\n\nFor more details and examples, see the [Filter search results based on metadata](/docs/filtering-search-results) page.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "description": "Successfully performed a search request.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_search:SearchQueryResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SearchQueryRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          },
          {
            "description": "If the rate limit is reached, the platform returns an `HTTP 429 - Too many requests` error response. The response body is empty.\n",
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/search",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "query_media_type": {
                  "type": "json"
                },
                "query_media_url": {
                  "type": "json"
                },
                "query_media_file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "query_text": {
                  "type": "json"
                },
                "index_id": {
                  "type": "json",
                  "value": "index_id"
                },
                "search_options": {
                  "type": "json",
                  "value": [
                    "visual"
                  ]
                },
                "adjust_confidence_level": {
                  "type": "json"
                },
                "group_by": {
                  "type": "json"
                },
                "threshold": {
                  "type": "json"
                },
                "sort_option": {
                  "type": "json"
                },
                "operator": {
                  "type": "json"
                },
                "conversation_option": {
                  "type": "json"
                },
                "page_limit": {
                  "type": "json"
                },
                "filter": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "score": "85.08",
                    "start": 238.75,
                    "end": 259.62109375,
                    "video_id": "639963a1ce36463e0199c8c7",
                    "metadata": [
                      {
                        "type": "visual",
                        "text": "Hello, how are you?"
                      }
                    ],
                    "confidence": "high",
                    "thumbnail_url": "https://example.com/thumbnail.jpg",
                    "modules": [
                      {
                        "type": "visual",
                        "confidence": "high"
                      }
                    ]
                  }
                ],
                "page_info": {
                  "limit_per_page": 10,
                  "page_expired_at": "2024-03-01T00:00:00Z",
                  "total_results": 100,
                  "total_inner_matches": 10,
                  "next_page_token": "663da73b31cdd0c1f638a8e6"
                },
                "search_pool": {
                  "total_count": 10,
                  "total_duration": 8731,
                  "index_id": "639961c9e219c90227c371a2"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/search \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F query_media_file=@<file1> \\\n     -F index_id=\"index_id\" \\\n     -F search_options='[\n  \"visual\"\n]'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.query(\n    query=\"query\",\n    index_id=\"index_id\",\n    search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.query({\n    query: \"query\",\n    indexId: \"index_id\",\n    searchOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/search",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "query_media_type": {
                  "type": "json"
                },
                "query_media_url": {
                  "type": "json"
                },
                "query_text": {
                  "type": "json"
                },
                "index_id": {
                  "type": "json",
                  "value": "string"
                },
                "search_options": {
                  "type": "json",
                  "value": [
                    "visual"
                  ]
                },
                "adjust_confidence_level": {
                  "type": "json"
                },
                "group_by": {
                  "type": "json"
                },
                "threshold": {
                  "type": "json"
                },
                "sort_option": {
                  "type": "json"
                },
                "operator": {
                  "type": "json"
                },
                "conversation_option": {
                  "type": "json"
                },
                "page_limit": {
                  "type": "json"
                },
                "filter": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/search \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F index_id=\"string\" \\\n     -F search_options='[\n  \"visual\"\n]'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.query(\n    query=\"query\",\n    index_id=\"index_id\",\n    search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.query({\n    query: \"query\",\n    indexId: \"index_id\",\n    searchOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/search",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "query_media_type": {
                  "type": "json"
                },
                "query_media_url": {
                  "type": "json"
                },
                "query_text": {
                  "type": "json"
                },
                "index_id": {
                  "type": "json",
                  "value": "string"
                },
                "search_options": {
                  "type": "json",
                  "value": [
                    "visual"
                  ]
                },
                "adjust_confidence_level": {
                  "type": "json"
                },
                "group_by": {
                  "type": "json"
                },
                "threshold": {
                  "type": "json"
                },
                "sort_option": {
                  "type": "json"
                },
                "operator": {
                  "type": "json"
                },
                "conversation_option": {
                  "type": "json"
                },
                "page_limit": {
                  "type": "json"
                },
                "filter": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/search \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F index_id=\"string\" \\\n     -F search_options='[\n  \"visual\"\n]'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.query(\n    query=\"query\",\n    index_id=\"index_id\",\n    search_options=[\"visual\", \"conversation\", \"text_in_video\", \"logo\"],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.query({\n    query: \"query\",\n    indexId: \"index_id\",\n    searchOptions: [\"visual\", \"conversation\", \"text_in_video\", \"logo\"]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.search.query(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "query_media_url=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "query_media_url",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "query_media_file=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "query_media_file",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "query_text=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "query_text",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "index_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "containerTemplateString": "search_options=[\n\t\t$FERN_INPUT\n\t]",
                    "delimiter": ",\n\t\t",
                    "innerTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "values": {
                        "visual": "\"visual\"",
                        "conversation": "\"conversation\"",
                        "text_in_video": "\"text_in_video\"",
                        "logo": "\"logo\""
                      },
                      "templateInput": {
                        "location": "RELATIVE",
                        "path": null
                      },
                      "type": "enum"
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "search_options"
                    },
                    "type": "iterable"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "adjust_confidence_level=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "adjust_confidence_level",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "group_by=$FERN_INPUT",
                    "values": {
                      "video": "\"video\"",
                      "clip": "\"clip\""
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "group_by"
                    },
                    "type": "enum"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "threshold=$FERN_INPUT",
                    "values": {
                      "high": "\"high\"",
                      "medium": "\"medium\"",
                      "low": "\"low\"",
                      "none": "\"none\""
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "threshold"
                    },
                    "type": "enum"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_option=$FERN_INPUT",
                    "values": {
                      "score": "\"score\"",
                      "clip_count": "\"clip_count\""
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "sort_option"
                    },
                    "type": "enum"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "operator=$FERN_INPUT",
                    "values": {
                      "or": "\"or\"",
                      "and": "\"and\""
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "operator"
                    },
                    "type": "enum"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "conversation_option=$FERN_INPUT",
                    "values": {
                      "semantic": "\"semantic\"",
                      "exact_match": "\"exact_match\""
                    },
                    "templateInput": {
                      "location": "BODY",
                      "path": "conversation_option"
                    },
                    "type": "enum"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page_limit=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "page_limit",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "filter=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "filter",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.search.query(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "query: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "query"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "index_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "searchOptions: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "search_options"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "adjustConfidenceLevel: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "adjust_confidence_level"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "video": "\"video\"",
                            "clip": "\"clip\""
                          },
                          "templateString": "groupBy: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "group_by"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "high": "\"high\"",
                            "medium": "\"medium\"",
                            "low": "\"low\"",
                            "none": "\"none\""
                          },
                          "templateString": "threshold: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "threshold"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "score": "\"score\"",
                            "clip_count": "\"clip_count\""
                          },
                          "templateString": "sortOption: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "sort_option"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "operator: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "operator"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "enum",
                          "imports": [],
                          "isOptional": true,
                          "values": {
                            "semantic": "\"semantic\"",
                            "exact_match": "\"exact_match\""
                          },
                          "templateString": "conversationOption: $FERN_INPUT",
                          "templateInput": {
                            "location": "BODY",
                            "path": "conversation_option"
                          }
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "pageLimit: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "page_limit"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "filter: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "isOptional": true,
                          "inputDelimiter": ",\n\t\t\t",
                          "templateInputs": [
                            {
                              "type": "template",
                              "value": {
                                "type": "iterable",
                                "imports": [],
                                "isOptional": true,
                                "containerTemplateString": "id: [\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                "delimiter": ",\n\t\t\t\t",
                                "innerTemplate": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "RELATIVE",
                                      "path": null
                                    }
                                  ]
                                },
                                "templateInput": {
                                  "location": "BODY",
                                  "path": "filter.id"
                                }
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "duration: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                "isOptional": true,
                                "inputDelimiter": ",\n\t\t\t\t",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "gte: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "BODY",
                                          "path": "filter.duration.gte"
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "lte: $FERN_INPUT",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "payload",
                                          "location": "BODY",
                                          "path": "filter.duration.lte"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "width: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "filter.width"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "height: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "filter.height"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "size: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "filter.size"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "template",
                              "value": {
                                "type": "generic",
                                "imports": [],
                                "templateString": "title: $FERN_INPUT",
                                "isOptional": true,
                                "templateInputs": [
                                  {
                                    "type": "payload",
                                    "location": "BODY",
                                    "path": "filter.title"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_search.retrieve": {
        "id": "endpoint_search.retrieve",
        "namespace": [
          "subpackage_search"
        ],
        "description": "Use this endpoint to retrieve a specific page of search results.\n\n**NOTE**: When you use pagination, you will not be charged for retrieving subsequent pages of results.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/search/"
          },
          {
            "type": "pathParameter",
            "value": "page-token"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "page-token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "A token that identifies the page to retrieve."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "Successfully retrieved the specified page of search results.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_search:SearchRetrieveResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:SearchRetrieveRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "error_code": 104,
                    "message": "The conversation option of transcription is not allowed with multiple search options. You should use semantic instead."
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/search/1234567890",
            "responseStatusCode": 200,
            "pathParameters": {
              "page-token": "1234567890"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "score": "85.08",
                    "start": 238.75,
                    "end": 259.62109375,
                    "video_id": "639963a1ce36463e0199c8c7",
                    "metadata": [
                      {
                        "type": "visual",
                        "text": "Hello, how are you?"
                      }
                    ],
                    "confidence": "high",
                    "thumbnail_url": "https://example.com/thumbnail.jpg",
                    "modules": [
                      {
                        "type": "visual",
                        "confidence": "high"
                      }
                    ]
                  }
                ],
                "page_info": {
                  "limit_per_page": 10,
                  "page_expired_at": "2024-03-01T00:00:00Z",
                  "total_results": 100,
                  "total_inner_matches": 10,
                  "next_page_token": "663da73b31cdd0c1f638a8e6",
                  "prev_page_token": "663da73b31cdd0c1f638a8e6"
                },
                "search_pool": {
                  "total_count": 10,
                  "total_duration": 8731,
                  "index_id": "639961c9e219c90227c371a2"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/search/1234567890 \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.retrieve(\n    page_token=\"page-token\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.retrieve(\"page-token\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/search/:page-token",
            "responseStatusCode": 400,
            "pathParameters": {
              "page-token": ":page-token"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error_code": 0,
                "message": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/search/:page-token \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.search.retrieve(\n    page_token=\"page-token\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.search.retrieve(\"page-token\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.search.retrieve(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page_token=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "page-token",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.search.retrieve(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "page-token"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_gist.create": {
        "id": "endpoint_gist.create",
        "namespace": [
          "subpackage_gist"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/gist"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "examples": [
          {
            "path": "/gist",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/gist",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.gist.create(\n    video_id=\"video_id\",\n    types=[\"topic\"],\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.gist.create({\n    videoId: \"video_id\",\n    types: [\"topic\"]\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.gist.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.gist.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoId: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "iterable",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "types: [\n\t\t\t$FERN_INPUT\n\t\t]",
                          "delimiter": ",\n\t\t\t",
                          "innerTemplate": {
                            "type": "enum",
                            "imports": [],
                            "isOptional": true,
                            "values": {
                              "topic": "\"topic\"",
                              "hashtag": "\"hashtag\"",
                              "title": "\"title\""
                            },
                            "templateString": "$FERN_INPUT",
                            "templateInput": {
                              "location": "RELATIVE",
                              "path": null
                            }
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "types"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_embedNew.create": {
        "id": "endpoint_embedNew.create",
        "namespace": [
          "subpackage_embedNew"
        ],
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/embed-new"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "examples": [
          {
            "path": "/embed-new",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/embed-new",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed_new.create(\n    engine_name=\"engine_name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embedNew.create(fs.createReadStream(\"/path/to/your/file\"), fs.createReadStream(\"/path/to/your/file\"), {\n    engineName: \"engine_name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.embed_new.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.embedNew.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                          "isOptional": false,
                          "templateInputs": []
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                          "isOptional": false,
                          "templateInputs": []
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "engineName: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "engine_name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "text: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "text"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "textTruncate: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "text_truncate"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "imageUrl: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "image_url"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "audioUrl: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "audio_url"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "audioTruncate: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "audio_truncate"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_embed/tasks.list": {
        "id": "endpoint_embed/tasks.list",
        "namespace": [
          "subpackage_embed",
          "subpackage_embed/tasks"
        ],
        "description": "This method returns a list of the video embedding tasks in your account. The platform returns your video embedding tasks sorted by creation date, with the newest at the top of the list.\n\n**NOTES**:\n\n- Video embeddings are stored for seven days\n- When you invoke this method without specifying the `started_at` and `ended_at` parameters, the platform returns all the video embedding tasks created within the last seven days.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/embed/tasks"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "queryParameters": [
          {
            "key": "started_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Retrieve the video embedding tasks that were created after the given date and time, expressed in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\")."
          },
          {
            "key": "ended_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Retrieve the video embedding tasks that were created before the given date and time, expressed in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\")."
          },
          {
            "key": "status",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter video embedding tasks by their current status. Possible values are `processing`, `ready`, or `failed`."
          },
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`."
          },
          {
            "key": "page_limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "A list of video embedding tasks has successfully been retrieved.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_embed/tasks:TasksListResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksListRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/embed/tasks",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "started_at": "2024-03-01T00:00:00Z",
              "ended_at": "2024-03-01T00:00:00Z",
              "status": "processing"
            },
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "_id": "66f537778d9641fe5a0d101f",
                    "engine_name": "Marengo-retrieval-2.6",
                    "status": "processing",
                    "created_at": "2024-09-26T10:29:19Z",
                    "video_embedding": {
                      "metadata": {
                        "input_filename": "01.mp4",
                        "input_url": "https://myvideo.com/myvideo.mp4",
                        "video_clip_length": 6,
                        "video_embedding_scope": [
                          "clip"
                        ],
                        "duration": 13.4400001
                      }
                    }
                  },
                  {
                    "_id": "66f535874bd2802fc13293f4",
                    "engine_name": "Marengo-retrieval-2.6",
                    "status": "processing",
                    "created_at": "2024-09-26T10:21:04Z",
                    "video_embedding": {
                      "metadata": {
                        "input_filename": "01.mp4",
                        "input_url": "https://myvideo.com/myvideo.mp4",
                        "video_clip_length": 6,
                        "video_embedding_scope": [
                          "clip"
                        ],
                        "duration": 13.4400001
                      }
                    }
                  },
                  {
                    "_id": "66f534fd4bd2802fc13293ee",
                    "engine_name": "Marengo-retrieval-2.6",
                    "status": "processing",
                    "created_at": "2024-09-26T10:18:44Z",
                    "video_embedding": {
                      "metadata": {
                        "input_filename": "01.mp4",
                        "input_url": "https://myvideo.com/myvideo.mp4",
                        "video_clip_length": 6,
                        "video_embedding_scope": [
                          "clip"
                        ],
                        "duration": 13.4400001
                      }
                    }
                  }
                ],
                "page_info": {
                  "limit_per_page": 10,
                  "page": 1,
                  "total_page": 1,
                  "total_results": 3
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/embed/tasks \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     --data-urlencode started_at=2024-03-01T00:00:00Z \\\n     --data-urlencode ended_at=2024-03-01T00:00:00Z \\\n     -d status=processing",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.list();\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/embed/tasks",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "started_at": "string",
              "ended_at": "string"
            },
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/embed/tasks \\\n     -H \"x-api-key: string\" \\\n     -d started_at=string \\\n     -d ended_at=string",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.list()\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.list();\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.embed.tasks.list(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "started_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "started_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "ended_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "ended_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "status=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "status",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page_limit=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page_limit",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.embed.tasks.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "startedAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "started_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "endedAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "ended_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "status: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "status"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "pageLimit: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page_limit"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_embed/tasks.create": {
        "id": "endpoint_embed/tasks.create",
        "namespace": [
          "subpackage_embed",
          "subpackage_embed/tasks"
        ],
        "description": "This method creates a new video embedding task that uploads a video to the platform and creates one or multiple video embeddings.\n\nEnsure your video meets the requirements in the [Prerequisites](/docs/create-video-embeddings#prerequisites) section of the **Create video embeddings** page.\n\nUpload options:\n\n- **Local file**: Use the `video_file` parameter\n- **Publicly accessible URL**: Use the `video_url` parameter.\n\nSpecify at least one option. If both are provided, `video_url` takes precedence.\n\n**NOTES**:\n\n- The “Marengo-retrieval-2.6” video understanding engine generates embeddings for all modalities in the same latent space. This shared space enables any-to-any searches across different types of content.\n- Video embeddings are stored for seven days.\n- The platform supports uploading video files that can play without additional user interaction or custom video players. Ensure your URL points to the raw video file, not a web page containing the video. Links to third-party hosting sites, cloud storage services, or videos requiring extra steps to play are not supported.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/embed/tasks"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "engine_name",
                "description": "The name of the engine you want to use. The following engines are available:\n  - `Marengo-retrieval-2.6`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "video_file",
                "isOptional": true
              },
              {
                "type": "property",
                "key": "video_url",
                "description": "Specify this parameter to upload a video from a publicly accessible URL.\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "video_start_offset_sec",
                "description": "The start offset in seconds from the beginning of the video where processing should begin. Specifying 0 means starting from the beginning of the video.\n\n**Default**: 0\n**Min**: 0\n**Max**: Duration of the video minus 6\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "video_end_offset_sec",
                "description": "The end offset in seconds from the beginning of the video where processing should stop.\n\nEnsure the following when you specify this parameter:\n- The end offset does not exceed the total duration of the video file.\n- The end offset is greater than the start offset.\n- You must set both the start and end offsets. Setting only one of these offsets is not permitted, resulting in an error.\n\n**Min**: video_start_offset + 6\n**Max**: Duration of the video file\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "video_clip_length",
                "description": "The desired duration in seconds for each clip for which the platform generates an embedding. Ensure that the clip length does not exceed the interval between the start and end offsets.\n\n**Default**: 6\n**Min**: 2\n**Max**: 10\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "video_embedding_scope",
                "description": "Defines the scope of video embedding generation. Valid values are the following:\n- `clip`: Creates embeddings for each video segment of `video_clip_length` seconds, from `video_start_offset_sec` to `video_end_offset_sec`.\n- `clip` and `video`: Creates embeddings for video segments and the entire video.\n\nTo create embeddings for segments and the entire video in the same request, include this parameter twice as shown below:\n\n```json\n--form video_embedding_scope=clip \\\n--form video_embedding_scope=video\n```\n\n**Default**: `clip`\n",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string",
                          "default": "clip"
                        }
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "description": "A video embedding task has successfully been created.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_embed/tasks:TasksCreateResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksCreateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "insufficient_funds",
                    "message": "Not enough free credit. Please register a payment method or contact sales@twelvelabs.io.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              },
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/embed/tasks",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "engine_name": {
                  "type": "json",
                  "value": "engine_name"
                },
                "video_file": {
                  "type": "filename",
                  "value": "<file1>"
                },
                "video_url": {
                  "type": "json"
                },
                "video_start_offset_sec": {
                  "type": "json"
                },
                "video_end_offset_sec": {
                  "type": "json"
                },
                "video_clip_length": {
                  "type": "json"
                },
                "video_embedding_scope": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "66419a20c70bb578439bd8f4"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/embed/tasks \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F engine_name=\"engine_name\" \\\n     -F video_file=@<file1>",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.create(\n    engine_name=\"engine_name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.create(fs.createReadStream(\"/path/to/your/file\"), {\n    engineName: \"engine_name\"\n});\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/embed/tasks",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "form",
              "value": {
                "engine_name": {
                  "type": "json",
                  "value": "string"
                },
                "video_url": {
                  "type": "json"
                },
                "video_start_offset_sec": {
                  "type": "json"
                },
                "video_end_offset_sec": {
                  "type": "json"
                },
                "video_clip_length": {
                  "type": "json"
                },
                "video_embedding_scope": {
                  "type": "json"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.twelvelabs.io/v1.3/embed/tasks \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -F engine_name=\"string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.create(\n    engine_name=\"engine_name\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\nimport * as fs from \"fs\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.create(fs.createReadStream(\"/path/to/your/file\"), {\n    engineName: \"engine_name\"\n});\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.embed.tasks.create(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "engine_name=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "engine_name",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_file=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_file",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_url=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_url",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_start_offset_sec=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_start_offset_sec",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_end_offset_sec=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_end_offset_sec",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_clip_length=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_clip_length",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_embedding_scope=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_embedding_scope",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.embed.tasks.create(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [
                            "import fs from \"fs\";"
                          ],
                          "templateString": "fs.createReadStream(\"/path/to/your/file\")",
                          "isOptional": false,
                          "templateInputs": []
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "engineName: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "engine_name"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoUrl: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_url"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoStartOffsetSec: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_start_offset_sec"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoEndOffsetSec: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_end_offset_sec"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoClipLength: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_clip_length"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoEmbeddingScope: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_embedding_scope"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_embed/tasks.retrieve": {
        "id": "endpoint_embed/tasks.retrieve",
        "namespace": [
          "subpackage_embed",
          "subpackage_embed/tasks"
        ],
        "description": "This method retrieves embeddings for a specific video embedding task. Ensure the task status is `ready` before invoking this method. Refer to the [Retrieve a video embedding](/reference/retrieve-video-embeding-task) task page for instructions on checking the task status.\n\n> 🚧 Important\n> The response includes breaking changes that might require updates to your application code. Key differences:\n>\n> - The `video_embeddings` field has been renamed to `video_embedding` (plural to singular)\n> - The response now includes a nested array named `segments`.\n\n- The `metadata` field is now nested under `video_embedding`.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/embed/tasks/"
          },
          {
            "type": "pathParameter",
            "value": "task_id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "task_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of your video embedding task."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "Video embeddings have successfully been retrieved.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_embed/tasks:TasksRetrieveResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:TasksRetrieveRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/embed/tasks/663da73b31cdd0c1f638a8e6",
            "responseStatusCode": 200,
            "pathParameters": {
              "task_id": "663da73b31cdd0c1f638a8e6"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "663e16ac4d11aff765088b3a",
                "created_at": "2024-09-26T10:29:19.968Z",
                "engine_name": "Marengo-retrieval-2.6",
                "status": "ready",
                "video_embedding": {
                  "metadata": {
                    "input_filename": "01.mp4",
                    "input_url": "example.com/video.mp4",
                    "video_clip_length": 6,
                    "video_embedding_scope": [
                      "clip",
                      "video"
                    ],
                    "duration": 18
                  },
                  "segments": [
                    {
                      "start_offset_sec": 0,
                      "end_offset_sec": 6,
                      "embedding_scope": "clip",
                      "float": [
                        -0.060086973,
                        0.016479108
                      ]
                    },
                    {
                      "start_offset_sec": 6,
                      "end_offset_sec": 12,
                      "embedding_scope": "clip",
                      "float": [
                        -0.056660935,
                        0.012404642
                      ]
                    },
                    {
                      "start_offset_sec": 12,
                      "end_offset_sec": 18,
                      "embedding_scope": "clip",
                      "float": [
                        -0.05971131,
                        -0.00859428
                      ]
                    },
                    {
                      "start_offset_sec": 0,
                      "end_offset_sec": 18,
                      "embedding_scope": "video",
                      "float": [
                        -0.05971131,
                        -0.00859428
                      ]
                    }
                  ]
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/embed/tasks/663da73b31cdd0c1f638a8e6 \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.retrieve(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/embed/tasks/:task_id",
            "responseStatusCode": 400,
            "pathParameters": {
              "task_id": ":task_id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/embed/tasks/:task_id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.retrieve(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.retrieve(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.embed.tasks.retrieve(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "task_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "task_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.embed.tasks.retrieve(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "task_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_embed/tasks/status.retrieve": {
        "id": "endpoint_embed/tasks/status.retrieve",
        "namespace": [
          "subpackage_embed",
          "subpackage_embed/tasks",
          "subpackage_embed/tasks/status"
        ],
        "description": "This method retrieves the status of a video embedding task. Check the task status of a video embedding task to determine when you can retrieve the embedding.\n\nA task can have one of the following statuses:\n\n- `processing`: The platform is creating the embeddings.\n- `ready`: Processing is complete. Retrieve the embeddings by invoking the [`GET`](/reference/retrieve-video-embeding) method of the `/embed/tasks/{task_id} endpoint`.\n- `failed`: The task could not be completed, and the embeddings haven't been created.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/embed/tasks/"
          },
          {
            "type": "pathParameter",
            "value": "task_id"
          },
          {
            "type": "literal",
            "value": "/status"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "task_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of your video embedding task."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The status of your video embedding task has been retrieved.\n",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_embed/tasks/status:StatusRetrieveResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:StatusRetrieveRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/embed/tasks/663da73b31cdd0c1f638a8e6/status",
            "responseStatusCode": 200,
            "pathParameters": {
              "task_id": "663da73b31cdd0c1f638a8e6"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "6641c0efc70bb578439bd909",
                "status": "processing",
                "engine_name": "Marengo-retrieval-2.6",
                "metadata": {
                  "input_filename": "01.mp4",
                  "input_url": "example.com/video.mp4",
                  "video_clip_length": 6,
                  "video_embedding_scope": [
                    "clip",
                    "video"
                  ],
                  "duration": 18
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/embed/tasks/663da73b31cdd0c1f638a8e6/status \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.status.retrieve(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.status.retrieve(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/embed/tasks/:task_id/status",
            "responseStatusCode": 400,
            "pathParameters": {
              "task_id": ":task_id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/embed/tasks/:task_id/status \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.embed.tasks.status.retrieve(\n    task_id=\"task_id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.embed.tasks.status.retrieve(\"task_id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.embed.tasks.status.retrieve(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "task_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "task_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.embed.tasks.status.retrieve(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "task_id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes/videos.list": {
        "id": "endpoint_indexes/videos.list",
        "namespace": [
          "subpackage_indexes",
          "subpackage_indexes/videos"
        ],
        "description": "This method returns a list of the videos in the specified index. By default, the API returns your videos sorted by creation date, with the newest at the top of the list.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          },
          {
            "type": "literal",
            "value": "/videos"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the index for which the API will retrieve the videos."
          }
        ],
        "queryParameters": [
          {
            "key": "page",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "A number that identifies the page to retrieve.\n\n**Default**: `1`."
          },
          {
            "key": "page_limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "The number of items to return on each page.\n\n**Default**: `10`.\n**Max**: `50`."
          },
          {
            "key": "sort_by",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The field to sort on. The following options are available:\n\n- `updated_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was updated.\n- `created_at`: Sorts by the time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the item was created.\n\n**Default**: `created_at`."
          },
          {
            "key": "sort_option",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "The sorting direction. The following options are available:\n\n- `asc`\n- `desc`\n\n**Default**: `desc`."
          },
          {
            "key": "_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by the unique identifier of a video index."
          },
          {
            "key": "filename",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter by filename."
          },
          {
            "key": "duration",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "Filter by duration. Expressed in seconds."
          },
          {
            "key": "fps",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "Filter by frames per second."
          },
          {
            "key": "width",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "Filter by width."
          },
          {
            "key": "height",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "description": "Filter by height."
          },
          {
            "key": "size",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "Filter by size. Expressed in bytes."
          },
          {
            "key": "created_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter videos by the creation date and time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the videos whose indexing tasks were created on the specified date at or after the given time."
          },
          {
            "key": "updated_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "This filter applies only to videos updated using the [`PUT`](/reference/update-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint. It filters videos by the last update date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the video indexing tasks that were last updated on the specified date at or after the given time."
          },
          {
            "key": "indexed_at",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Filter videos by the completion time of their associated indexing tasks, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"). The platform returns the videos whose indexing tasks were completed on the specified date at or after the given time."
          },
          {
            "key": "metadata",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "map",
                    "keyShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    "valueShape": {
                      "type": "alias",
                      "value": {
                        "type": "optional",
                        "shape": {
                          "type": "alias",
                          "value": {
                            "type": "id",
                            "id": "type_indexes/videos:VideosListRequestMetadataValue"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description": "To enable filtering by custom fields, first add metadata to your video by calling the [`PUT](/reference/update-video-information) method of the `/indexes/:index-id/videos/:video-id` endpoint.\n\nExamples:\n\n- To filter on a string: `?category=recentlyAdded`\n- To filter on an integer: `?batchNumber=5`\n- To filter on a float: `?rating=9.3`\n- To filter on a boolean: `?needsReview=true`"
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The video vectors in the specified index have successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_indexes/videos:VideosListResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:VideosListRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c/videos",
            "responseStatusCode": 200,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {
              "sort_by": "created_at",
              "sort_option": "desc",
              "_id": "6298d673f1090f1100476d4c",
              "filename": "01.mp4",
              "created_at": "2024-08-16T16:53:59Z",
              "updated_at": "2024-08-16T16:53:59Z",
              "indexed_at": "2024-08-16T16:53:59Z"
            },
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "data": [
                  {
                    "_id": "62a17bf847f5678267ec10cc",
                    "created_at": "2022-06-09T04:50:00.879Z",
                    "updated_at": "2022-06-09T04:55:57.256Z",
                    "indexed_at": "2024-03-01T00:00:00Z",
                    "metadata": {
                      "filename": "01.mp4",
                      "duration": 531.998133,
                      "fps": 741.875,
                      "width": 854,
                      "height": 400,
                      "size": 65749715
                    }
                  },
                  {
                    "_id": "62a17bce47f5678267ec10c6",
                    "created_at": "2022-06-09T04:49:20.001Z",
                    "updated_at": "2022-06-09T04:54:10.345Z",
                    "indexed_at": "2024-03-01T00:00:00Z",
                    "metadata": {
                      "filename": "02.mp4",
                      "duration": 741.875,
                      "fps": 741.875,
                      "width": 854,
                      "height": 480,
                      "size": 65749715
                    }
                  }
                ],
                "page_info": {
                  "limit_per_page": 10,
                  "page": 1,
                  "total_page": 1,
                  "total_results": 2
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c/videos \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -d sort_by=created_at \\\n     -d sort_option=desc \\\n     -d _id=6298d673f1090f1100476d4c \\\n     -d filename=01.mp4 \\\n     --data-urlencode created_at=2024-08-16T16:53:59Z \\\n     --data-urlencode updated_at=2024-08-16T16:53:59Z \\\n     --data-urlencode indexed_at=2024-08-16T16:53:59Z",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.indexes.videos.list(\n    index_id=\"index-id\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.list(\"index-id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id/videos",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id"
            },
            "queryParameters": {
              "page": 0,
              "page_limit": 0
            },
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.twelvelabs.io/v1.3/indexes/:index-id/videos \\\n     -H \"x-api-key: string\" \\\n     -d page=0 \\\n     -d page_limit=0",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nresponse = client.indexes.videos.list(\n    index_id=\"index-id\",\n)\nfor item in response:\n    yield item\n# alternatively, you can paginate page-by-page\nfor page in response.iter_pages():\n    yield page\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.list(\"index-id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.videos.list(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "page_limit=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "page_limit",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_by=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "sort_by",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "sort_option=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "sort_option",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "_id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "filename=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "filename",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "duration=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "duration",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "fps=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "fps",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "width=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "width",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "height=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "height",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "size=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "size",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "created_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "created_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "updated_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "updated_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "indexed_at=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "indexed_at",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "containerTemplateString": "metadata={\n\t\t$FERN_INPUT\n\t}",
                    "delimiter": ",\n\t\t",
                    "keyTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "templateInputs": [
                        {
                          "location": "RELATIVE",
                          "path": null,
                          "type": "payload"
                        }
                      ],
                      "type": "generic"
                    },
                    "valueTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "members": [
                        {
                          "type": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "template": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "RELATIVE",
                                "path": null,
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": {
                            "type": "primitive",
                            "value": {
                              "type": "double"
                            }
                          },
                          "template": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "RELATIVE",
                                "path": null,
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          },
                          "template": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "RELATIVE",
                                "path": null,
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "templateInput": {
                        "location": "RELATIVE",
                        "path": null
                      },
                      "type": "union_v2"
                    },
                    "keyValueSeparator": ": ",
                    "templateInput": {
                      "location": "QUERY",
                      "path": "metadata"
                    },
                    "type": "dict"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.videos.list(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "page: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "pageLimit: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "page_limit"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sortBy: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "sort_by"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "sortOption: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "sort_option"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "id: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "_id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "filename: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "filename"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "duration: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "duration"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "fps: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "fps"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "width: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "width"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "height: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "height"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "size: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "size"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "createdAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "created_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "updatedAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "updated_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "indexedAt: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "QUERY",
                              "path": "indexed_at"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "QUERY",
                            "path": "metadata"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes/videos.retrieve": {
        "id": "endpoint_indexes/videos.retrieve",
        "namespace": [
          "subpackage_indexes",
          "subpackage_indexes/videos"
        ],
        "description": "This method retrieves information about the specified video.\n\n> 🚧 Important\n> When retrieving video embeddings, the response includes breaking changes that might require updates to your application code. Key differences:\n>\n> - The `video_embeddings` field has been renamed to `video_embedding` (plural to singular)\n> - The response now includes a nested array named `segments`.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          },
          {
            "type": "literal",
            "value": "/videos/"
          },
          {
            "type": "pathParameter",
            "value": "video-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the index to which the video has been uploaded."
          },
          {
            "key": "video-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the video to retrieve."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "response": {
          "description": "The specified video information has successfully been retrieved.",
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_indexes/videos:VideosRetrieveResponse"
            }
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:VideosRetrieveRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c",
            "responseStatusCode": 200,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c",
              "video-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "_id": "61e17be5777e6caec646fa07",
                "created_at": "2022-01-14T13:34:29Z",
                "updated_at": "2022-01-14T13:34:29Z",
                "indexed_at": "2022-01-14T14:05:55Z",
                "metadata": {
                  "duration": 3747.841667,
                  "filename": "IOKgzkakhlk.mp4",
                  "fps": 29.97002997002997,
                  "height": 360,
                  "width": 482
                },
                "hls": {
                  "video_url": "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/stream/c924f34a-144e-41df-bf2a-c693703fa134.m3u8",
                  "thumbnail_urls": [
                    "https://d2cp8xx7n5vxnu.cloudfront.net/6298aa0b535db125bf6e1d10/64902a28fb01304dd47be3cb/thumbnails/c924f34a-144e-41df-bf2a-c693703fa134.0000001.jpg"
                  ],
                  "status": "COMPLETE",
                  "updated_at": "2024-01-16T07:59:40.879Z"
                },
                "embedding": {
                  "engine_name": "Marengo-retrieval-2.6",
                  "video_embedding": {
                    "segments": [
                      {
                        "start_offset_sec": 0,
                        "end_offset_sec": 7.5666666,
                        "embedding_scope": "clip",
                        "float": [
                          -0.04747168,
                          0.030509098,
                          0.032282468
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.retrieve(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.retrieve(\"index-id\", \"video-id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id/videos/:video-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id",
              "video-id": ":video-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.twelvelabs.io/v1.3/indexes/:index-id/videos/:video-id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.retrieve(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.retrieve(\"index-id\", \"video-id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.videos.retrieve(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "video-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "embed=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "QUERY",
                        "path": "embed",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.videos.retrieve(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "video-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes/videos.update": {
        "id": "endpoint_indexes/videos.update",
        "namespace": [
          "subpackage_indexes",
          "subpackage_indexes/videos"
        ],
        "description": "Use this method to update the title and the metadata of a video.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          },
          {
            "type": "literal",
            "value": "/videos/"
          },
          {
            "type": "pathParameter",
            "value": "video-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the index to which the video has been uploaded."
          },
          {
            "key": "video-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the video to update."
          }
        ],
        "queryParameters": [
          {
            "key": "embed",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "Set this parameter to `true` to retrieve the video embedding in the response. The video must be indexed with the Marengo video understanding engine version 2.6 or later. For details on enabling this engine for an index, see the [Create an index](/reference/create-index) page.\n**Default**: `false`."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "video_title",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Specifies the new title of the video.\n"
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Metadata that helps you categorize your videos. You can specify a list of keys and values. Keys must be of type `string`, and values can be of the following types: `string`, `integer`, `float` or `boolean`.\n\n**NOTES:**\n-  If you want to store other types of data such as objects or arrays,  you must convert your data into string values.\n- You cannot override any of the predefined metadata (example: duration, width, length, etc) associated with a video.\n"
              }
            ]
          }
        },
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:VideosUpdateRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c",
            "responseStatusCode": 204,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c",
              "video-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "video_title": "My new video title",
                "metadata": {
                  "category": "recentlyAdded",
                  "batchNumber": 5,
                  "rating": 9.3,
                  "needsReview": true
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"video_title\": \"My new video title\",\n  \"metadata\": {\n    \"category\": \"recentlyAdded\",\n    \"batchNumber\": 5,\n    \"rating\": 9.3,\n    \"needsReview\": true\n  }\n}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.update(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.update(\"index-id\", \"video-id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id/videos/:video-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id",
              "video-id": ":video-id"
            },
            "queryParameters": {
              "embed": true
            },
            "headers": {
              "x-api-key": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT \"https://api.twelvelabs.io/v1.3/indexes/:index-id/videos/:video-id?embed=true\" \\\n     -H \"x-api-key: string\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.update(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.update(\"index-id\", \"video-id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.videos.update(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "video-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_title=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "BODY",
                        "path": "video_title",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "containerTemplateString": "metadata={\n\t\t$FERN_INPUT\n\t}",
                    "delimiter": ",\n\t\t",
                    "keyTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "templateInputs": [
                        {
                          "location": "RELATIVE",
                          "path": null,
                          "type": "payload"
                        }
                      ],
                      "type": "generic"
                    },
                    "valueTemplate": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "$FERN_INPUT",
                      "templateInputs": [
                        {
                          "location": "RELATIVE",
                          "path": null,
                          "type": "payload"
                        }
                      ],
                      "type": "generic"
                    },
                    "keyValueSeparator": ": ",
                    "templateInput": {
                      "location": "BODY",
                      "path": "metadata"
                    },
                    "type": "dict"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.videos.update(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "video-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                    "isOptional": true,
                    "inputDelimiter": ",\n\t\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "videoTitle: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "BODY",
                              "path": "video_title"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "dict",
                          "imports": [],
                          "isOptional": true,
                          "containerTemplateString": "metadata: {\n\t\t\t$FERN_INPUT\n\t\t}",
                          "delimiter": ",\n\t\t\t",
                          "keyValueSeparator": ": ",
                          "keyTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "valueTemplate": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": true,
                            "templateInputs": [
                              {
                                "type": "payload",
                                "location": "RELATIVE",
                                "path": null
                              }
                            ]
                          },
                          "templateInput": {
                            "location": "BODY",
                            "path": "metadata"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "endpoint_indexes/videos.delete": {
        "id": "endpoint_indexes/videos.delete",
        "namespace": [
          "subpackage_indexes",
          "subpackage_indexes/videos"
        ],
        "description": "This method deletes all the information about the specified video This action cannot be undone.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/indexes/"
          },
          {
            "type": "pathParameter",
            "value": "index-id"
          },
          {
            "type": "literal",
            "value": "/videos/"
          },
          {
            "type": "pathParameter",
            "value": "video-id"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.twelvelabs.io/v1.3"
          }
        ],
        "pathParameters": [
          {
            "key": "index-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the index to which the video has been uploaded."
          },
          {
            "key": "video-id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "The unique identifier of the video to delete."
          }
        ],
        "requestHeaders": [
          {
            "key": "x-api-key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Your API key.\n\n**NOTE:** You can find your API key on the <a href=\"https://playground.twelvelabs.io/dashboard/api-key\" target=\"_blank\">API Key</a> page."
          }
        ],
        "errors": [
          {
            "description": "The request has failed.",
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:VideosDeleteRequestBadRequestErrorBody"
              }
            },
            "examples": [
              {
                "responseBody": {
                  "type": "json",
                  "value": {
                    "code": "generic_error",
                    "message": "An error occurred.",
                    "docs_url": "https://docs.twelvelabs.io/reference/error-codes"
                  }
                }
              }
            ]
          }
        ],
        "examples": [
          {
            "path": "/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c",
            "responseStatusCode": 204,
            "pathParameters": {
              "index-id": "6298d673f1090f1100476d4c",
              "video-id": "6298d673f1090f1100476d4c"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "tlk-1234567890"
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.twelvelabs.io/v1.3/indexes/6298d673f1090f1100476d4c/videos/6298d673f1090f1100476d4c \\\n     -H \"x-api-key: tlk-1234567890\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.delete(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.delete(\"index-id\", \"video-id\");\n",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/indexes/:index-id/videos/:video-id",
            "responseStatusCode": 400,
            "pathParameters": {
              "index-id": ":index-id",
              "video-id": ":video-id"
            },
            "queryParameters": {},
            "headers": {
              "x-api-key": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {
                "code": "string",
                "message": "string",
                "docs_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.twelvelabs.io/v1.3/indexes/:index-id/videos/:video-id \\\n     -H \"x-api-key: string\"",
                  "generated": true
                }
              ],
              "python": [
                {
                  "language": "python",
                  "code": "from twelvelabs import TwelveLabs\n\nclient = TwelveLabs(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.indexes.videos.delete(\n    index_id=\"index-id\",\n    video_id=\"video-id\",\n)\n",
                  "generated": true
                }
              ],
              "typescript": [
                {
                  "language": "typescript",
                  "code": "import { TwelveLabsClient } from \"twelevelabs-js\";\n\nconst client = new TwelveLabsClient({ apiKey: \"YOUR_API_KEY\" });\nawait client.indexes.videos.delete(\"index-id\", \"video-id\");\n",
                  "generated": true
                }
              ]
            }
          }
        ],
        "snippetTemplates": {
          "python": {
            "type": "v1",
            "functionInvocation": {
              "imports": [],
              "isOptional": true,
              "templateString": "client.indexes.videos.delete(\n\t$FERN_INPUT\n)",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "index_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "index-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                },
                {
                  "type": "template",
                  "value": {
                    "imports": [],
                    "isOptional": true,
                    "templateString": "video_id=$FERN_INPUT",
                    "templateInputs": [
                      {
                        "location": "PATH",
                        "path": "video-id",
                        "type": "payload"
                      }
                    ],
                    "type": "generic"
                  }
                }
              ],
              "inputDelimiter": ",\n\t",
              "type": "generic"
            },
            "clientInstantiation": {
              "imports": [
                "from twelvelabs import TwelveLabs"
              ],
              "isOptional": true,
              "templateString": "client = TwelveLabs(api_key=\"YOUR_API_KEY\", )",
              "templateInputs": [],
              "inputDelimiter": ",",
              "type": "generic"
            }
          },
          "typescript": {
            "type": "v1",
            "functionInvocation": {
              "type": "generic",
              "imports": [],
              "templateString": "await client.indexes.videos.delete(\n\t$FERN_INPUT\n)",
              "isOptional": false,
              "inputDelimiter": ",\n\t",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "$FERN_INPUT",
                    "isOptional": false,
                    "inputDelimiter": ",\n\t",
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "index-id"
                            }
                          ]
                        }
                      },
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "$FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "PATH",
                              "path": "video-id"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            },
            "clientInstantiation": {
              "type": "generic",
              "imports": [
                "import { TwelveLabsClient } from \"twelevelabs-js\";"
              ],
              "templateString": "const client = new TwelveLabsClient($FERN_INPUT);",
              "isOptional": false,
              "inputDelimiter": ",",
              "templateInputs": [
                {
                  "type": "template",
                  "value": {
                    "type": "generic",
                    "imports": [],
                    "templateString": "{ $FERN_INPUT }",
                    "isOptional": true,
                    "templateInputs": [
                      {
                        "type": "template",
                        "value": {
                          "type": "generic",
                          "imports": [],
                          "templateString": "apiKey: $FERN_INPUT",
                          "isOptional": true,
                          "templateInputs": [
                            {
                              "type": "payload",
                              "location": "HEADERS",
                              "path": "x-api-key"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        }
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_tasks:TasksListResponsePageInfo": {
        "name": "TasksListResponsePageInfo",
        "description": "An object that provides information about pagination.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit_per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LimitPerPageSimple"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Page"
                    }
                  }
                }
              }
            },
            {
              "key": "total_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalPage"
                    }
                  }
                }
              }
            },
            {
              "key": "total_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalResults"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_tasks:TasksListResponse": {
        "name": "TasksListResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoIndexingTask"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains up to `page_limit` tasks."
            },
            {
              "key": "page_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_tasks:TasksListResponsePageInfo"
                    }
                  }
                }
              },
              "description": "An object that provides information about pagination."
            }
          ]
        }
      },
      "type_tasks:TasksCreateResponse": {
        "name": "TasksCreateResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of your video indexing task."
            }
          ]
        }
      },
      "type_tasks:TasksRetrieveResponseMetadata": {
        "name": "TasksRetrieveResponseMetadata",
        "description": "An object that contains details about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_tasks:TasksRetrieveResponseHls": {
        "name": "TasksRetrieveResponseHls",
        "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "video_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the URL of the video. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol."
            },
            {
              "key": "thumbnail_urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array containing the URL of the thumbnail."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the encoding status of the video file from its original format to a streamable format."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the encoding status was last updated."
            }
          ]
        }
      },
      "type_tasks:TasksRetrieveResponseProcess": {
        "name": "TasksRetrieveResponseProcess",
        "description": "If your video has not yet finished indexing, the platform returns the current progress of the indexing operation.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "percentage",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "A value between 0 and 100 that indicates the percentage complete."
            },
            {
              "key": "remain_seconds",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Estimated time left, expressed in seconds, until the video finishes indexing."
            }
          ]
        }
      },
      "type_tasks:TasksRetrieveResponse": {
        "name": "TasksRetrieveResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the video indexing task."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task object has been created."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state."
            },
            {
              "key": "estimated_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the estimated completion date and time of the video indexing process, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\")."
            },
            {
              "key": "index_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of index to which the video is uploaded."
            },
            {
              "key": "video_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the video associated with the specified video indexing task. The API returns this field only when the value of the `status` field is `ready`."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the status of the video indexing task. See the [Task object](/reference/the-task-object) page for a list of possible statuses."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_tasks:TasksRetrieveResponseMetadata"
                    }
                  }
                }
              },
              "description": "An object that contains details about the video."
            },
            {
              "key": "hls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_tasks:TasksRetrieveResponseHls"
                    }
                  }
                }
              },
              "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`."
            },
            {
              "key": "process",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_tasks:TasksRetrieveResponseProcess"
                    }
                  }
                }
              },
              "description": "If your video has not yet finished indexing, the platform returns the current progress of the indexing operation."
            }
          ]
        }
      },
      "type_tasks:TasksStatusResponse": {
        "name": "TasksStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "index_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the index."
            },
            {
              "key": "ready",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A value indicating the number of video indexing tasks for which the status is `ready`."
            },
            {
              "key": "validating",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A value indicating the number of video indexing tasks for which the status is `validating`."
            },
            {
              "key": "pending",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A value indicating the number of video indexing tasks for which the status is `pending`."
            },
            {
              "key": "failed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A value indicating the number of video indexing tasks for which the status is `failed`."
            },
            {
              "key": "total_result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A value indicating the total number of video indexing tasks in the specified index."
            }
          ]
        }
      },
      "type_uploadVideos:CloudToCloudImportVideosResponseFailedFilesItem": {
        "name": "CloudToCloudImportVideosResponseFailedFilesItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The filename of the video that failed to be imported."
            },
            {
              "key": "error_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The error message if the import failed."
            }
          ]
        }
      },
      "type_uploadVideos:CloudToCloudImportVideosResponseVideosItem": {
        "name": "CloudToCloudImportVideosResponseVideosItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "video_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of a video. This identifier serves a dual purpose:\n\n- It identifies the video itself.\n- It identifies the associated video indexing task.\n\nFor example, due to this dual functionality, you can use this identifier to:\n\n- Retrieve details about the video itself by invoking the [`GET`](/reference/retrieve-video-information) method of the `/indexes/{index-id}/videos/{video-id}` endpoint.\n- Retrieve the status of the video indexing task by invoking the [`GET`](/reference/retrieve-video-indexing-task) method of the `/tasks/{task_id}` endpoint."
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The filename of the video."
            }
          ]
        }
      },
      "type_uploadVideos:CloudToCloudImportVideosResponse": {
        "name": "CloudToCloudImportVideosResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "failed_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_uploadVideos:CloudToCloudImportVideosResponseFailedFilesItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A list of the video files that failed to import. Typically, these files did not meet the upload requirements. To resolve this, review the requirements listed in the [Prerequisites](/docs/upload-single-videos#prerequisites) section of the **Upload single videos page**."
            },
            {
              "key": "videos",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_uploadVideos:CloudToCloudImportVideosResponseVideosItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "A list of the videos that will be uploaded and indexed."
            }
          ]
        }
      },
      "type_uploadVideos:CloudToCloudRetrieveStatusResponse": {
        "name": "CloudToCloudRetrieveStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "not_imported",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of filenames that haven't yet been imported."
            },
            {
              "key": "validating",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of videos that are being validated."
            },
            {
              "key": "pending",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of videos that are pending."
            },
            {
              "key": "queued",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of videos that are queued for import."
            },
            {
              "key": "indexing",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of videos that are being indexed."
            },
            {
              "key": "ready",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of videos that have successfully been imported."
            },
            {
              "key": "failed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoItemFailed"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of videos that failed to import."
            }
          ]
        }
      },
      "type_uploadVideos:CloudToCloudRetrieveImportLogsResponse": {
        "name": "CloudToCloudRetrieveImportLogsResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ImportLog"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains the import logs."
            }
          ]
        }
      },
      "type_indexes:IndexesListResponsePageInfo": {
        "name": "IndexesListResponsePageInfo",
        "description": "An object that provides information about pagination.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit_per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LimitPerPageSimple"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Page"
                    }
                  }
                }
              }
            },
            {
              "key": "total_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalPage"
                    }
                  }
                }
              }
            },
            {
              "key": "total_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalResults"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_indexes:IndexesListResponse": {
        "name": "IndexesListResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:IndexSchema"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains up to `page_limit` indexes."
            },
            {
              "key": "page_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_indexes:IndexesListResponsePageInfo"
                    }
                  }
                }
              },
              "description": "An object that provides information about pagination."
            }
          ]
        }
      },
      "type_indexes:IndexesCreateRequestEnginesItem": {
        "name": "IndexesCreateRequestEnginesItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the engine. The following engines are available:\n\n- **Embedding**: These engines are proficient at performing tasks such as search and classification, enabling enhanced video understanding.\n\n  - `marengo2.7`\n\n- **Generative**: These engines generate text based on your videos.\n\n  - `pegasus1.1`\n\n**NOTE:** You cannot change the engines once the index has been created.\n\nFor more details, see the [Video understanding engines](/docs/video-understanding-engines) page."
            },
            {
              "key": "engine_options",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "An array that specifies how the platform will process the videos uploaded to this index. For more details, see the [Engine options](/docs/engine-options) page.\n\n**NOTES:**\n\n- When using the Marengo family of video understanding engines, specify any combination of the available engine options - `visual`, `conversation`, `text_in_video`, and `logo`.\n- When using the Pegasus family of video understanding engines, specify one or both of the following engine options: `visual` and `conversation`."
            }
          ]
        }
      },
      "type_indexes:IndexesCreateResponse": {
        "name": "IndexesCreateResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Represents the unique identifier of the `index` object."
            }
          ]
        }
      },
      "type_indexes:IndexesRetrieveResponseEnginesItem": {
        "name": "IndexesRetrieveResponseEnginesItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the name of the engine"
            },
            {
              "key": "engine_options",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of strings that contains the [engines options](/docs/engine-options) enabled for this index."
            },
            {
              "key": "addons",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of add-ons that are enabled for this index."
            }
          ]
        }
      },
      "type_indexes:IndexesRetrieveResponse": {
        "name": "IndexesRetrieveResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the index. It is assigned by the API when an index is created."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index was created."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index has been updated."
            },
            {
              "key": "expires_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format \"YYYY-MM-DDTHH:mm:ssZ\", when your index will expire.\n\nIf you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.\n\nIf you're on the Developer plan, this field is set to `null`, indicating no expiration."
            },
            {
              "key": "index_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the name of the index."
            },
            {
              "key": "total_duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "A number representing the total duration, in seconds, of the videos in the index."
            },
            {
              "key": "video_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The number of videos uploaded to this index."
            },
            {
              "key": "engines",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_indexes:IndexesRetrieveResponseEnginesItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array containing the list of the [video understanding engines](/docs/video-understanding-engines) enabled for this index."
            }
          ]
        }
      },
      "type_summarize:Summary": {
        "name": "Summary",
        "description": "When the value of the `type` parameter is set to `summary`, the response is as follows:",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier of the response."
            },
            {
              "key": "summary",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A brief report of the main points of the video."
            }
          ]
        }
      },
      "type_summarize:SummarizeCreateResponseChaptersChaptersItem": {
        "name": "SummarizeCreateResponseChaptersChaptersItem",
        "description": "An object that contains details about a chapter. Each chapter has a unique number, start time, end time, title, and summary.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "chapter_number",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Represents the sequence number of the chapter. Note that this field starts at 0. Ensure to interpret it accordingly in your application."
            },
            {
              "key": "start",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The starting time of the chapter, measured in seconds from the beginning of the video."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The ending time of the chapter, measured in seconds from the beginning of the video."
            },
            {
              "key": "chapter_title",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The title of the chapter."
            },
            {
              "key": "chapter_summary",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A brief summary describing the content of the chapter."
            }
          ]
        }
      },
      "type_summarize:Chapter": {
        "name": "Chapter",
        "description": "When the value of the `type` parameter is set to `chapter`, the response is as follows:",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier of the response."
            },
            {
              "key": "chapters",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_summarize:SummarizeCreateResponseChaptersChaptersItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains details about the detected chapters and their content."
            }
          ]
        }
      },
      "type_summarize:SummarizeCreateResponseHighlightsHighlightsItem": {
        "name": "SummarizeCreateResponseHighlightsHighlightsItem",
        "description": "An object that provides a brief snapshot of a specific part of the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The starting time of the highlight, measured in seconds from the beginning of the video."
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The ending time of the highlight, measured in seconds from the beginning of the video."
            },
            {
              "key": "highlight",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The tile of the highlight."
            },
            {
              "key": "highlight_summary",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A brief description that captures the essence of this part of the video."
            }
          ]
        }
      },
      "type_summarize:Highlight": {
        "name": "Highlight",
        "description": "When the value of the `type` parameter is set to `highlight`, the response is as follows:",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier of the response."
            },
            {
              "key": "highlights",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_summarize:SummarizeCreateResponseHighlightsHighlightsItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains the highlights."
            }
          ]
        }
      },
      "type_summarize:SummarizeCreateResponse": {
        "name": "SummarizeCreateResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Summary",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_summarize:Summary"
                }
              },
              "description": "When the value of the `type` parameter is set to `summary`, the response is as follows:\n"
            },
            {
              "displayName": "Chapter",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_summarize:Chapter"
                }
              },
              "description": "When the value of the `type` parameter is set to `chapter`, the response is as follows:\n"
            },
            {
              "displayName": "Highlight",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_summarize:Highlight"
                }
              },
              "description": "When the value of the `type` parameter is set to `highlight`, the response is as follows:\n"
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseData": {
        "name": "GenerateCreateResponseData",
        "description": "When the value of the `stream` parameter is set to `false`, the response is as follows:",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Unique identifier of the response."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The generated text based on the prompt you provided."
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseOneZeroMetadata": {
        "name": "GenerateCreateResponseOneZeroMetadata",
        "description": "An object containing metadata about the stream.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "generation_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A unique identifier for the generation session."
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseOneZero": {
        "name": "GenerateCreateResponseOneZero",
        "description": "Indicates the beginning of the stream.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "event_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "This field is always set to `stream_start` for this event."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_generate:GenerateCreateResponseOneZeroMetadata"
                    }
                  }
                }
              },
              "description": "An object containing metadata about the stream."
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseOneText": {
        "name": "GenerateCreateResponseOneText",
        "description": "Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "event_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "This field is always set to `text_generation` for this event."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A fragment of the generated text."
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseOneEventTypeMetadata": {
        "name": "GenerateCreateResponseOneEventTypeMetadata",
        "description": "An object containing metadata about the stream.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "generation_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The same unique identifier provided in the `stream_start` event."
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseOneEventType": {
        "name": "GenerateCreateResponseOneEventType",
        "description": "Indicates the end of the stream.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "event_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "This field is always set to `stream_end` for this event."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_generate:GenerateCreateResponseOneEventTypeMetadata"
                    }
                  }
                }
              },
              "description": "An object containing metadata about the stream."
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponseOne": {
        "name": "GenerateCreateResponseOne",
        "description": "When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.\n\nThe stream contains three types of events:\n\n1. Stream start\n2. Text generation\n3. Stream end\n\nTo integrate the response into your application, follow the guidelines below:\n\n- Parse each line of the response as a separate JSON object.\n- Check the `event_type` field to determine how to handle the event.\n- For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.\n- Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Generate Create Response One Zero",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_generate:GenerateCreateResponseOneZero"
                }
              },
              "description": "Indicates the beginning of the stream.\n"
            },
            {
              "displayName": "Generate Create Response One Text",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_generate:GenerateCreateResponseOneText"
                }
              },
              "description": "Contains a fragment of generated text. Note that text fragments may be split at arbitrary points, not necessarily at word or sentence boundaries.\n"
            },
            {
              "displayName": "Generate Create Response One Event Type",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_generate:GenerateCreateResponseOneEventType"
                }
              },
              "description": "Indicates the end of the stream.\n"
            }
          ]
        }
      },
      "type_generate:GenerateCreateResponse": {
        "name": "GenerateCreateResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Generate Create Response Data",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_generate:GenerateCreateResponseData"
                }
              },
              "description": "When the value of the `stream` parameter is set to `false`, the response is as follows:\n"
            },
            {
              "displayName": "Generate Create Response One",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_generate:GenerateCreateResponseOne"
                }
              },
              "description": "When the value of the `stream` parameter is set to `true`, the platform provides a streaming response in the NDJSON format.\n\nThe stream contains three types of events:\n1. Stream start\n2. Text generation\n3. Stream end\n\nTo integrate the response into your application, follow the guidelines below:\n- Parse each line of the response as a separate JSON object.\n- Check the `event_type` field to determine how to handle the event.\n- For `text_generation` events, process the `text` field as it arrives. Depending on your application's requirements, this may involve displaying the text incrementally, storing it for later use, or performing any tasks.\n- Use the `stream_start` and `stream_end` events to manage the lifecycle of your streaming session.\n"
            }
          ]
        }
      },
      "type_search:SearchQueryRequestSearchOptionsItem": {
        "name": "SearchQueryRequestSearchOptionsItem",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "visual"
            },
            {
              "value": "conversation"
            },
            {
              "value": "text_in_video"
            },
            {
              "value": "logo"
            }
          ]
        }
      },
      "type_search:SearchQueryRequestGroupBy": {
        "name": "SearchQueryRequestGroupBy",
        "description": "Use this parameter to group or ungroup items in a response. It can take one of the following values:\n\n- `video`: The platform will group the matching video clips in the response by video.\n- `clip`: The matching video clips in the response will not be grouped.\n\n**Default:** `clip`",
        "shape": {
          "type": "enum",
          "default": "clip",
          "values": [
            {
              "value": "video"
            },
            {
              "value": "clip"
            }
          ]
        }
      },
      "type_search:SearchQueryRequestSortOption": {
        "name": "SearchQueryRequestSortOption",
        "description": "Use this parameter to specify the sort order for the response.\n\nWhen performing a search, the platform determines the level of confidence that each video clip matches your search terms. By default, the search results are sorted on the level of confidence in descending order.\n\nIf you set this parameter to `score` and `group_by` is set to `video`, the platform will determine the maximum value of the `score` field for each video and sort the videos in the response by the maximum value of this field. For each video, the matching video clips will be sorted by the level of confidence.\n\nIf you set this parameter to `clip_count` and `group_by` is set to `video`, the platform will sort the videos in the response by the number of clips. For each video, the matching video clips will be sorted by the level of confidence. You can use `clip_count` only when the matching video clips are sorted by video.\n\n**Default:** `score`",
        "shape": {
          "type": "enum",
          "default": "score",
          "values": [
            {
              "value": "score"
            },
            {
              "value": "clip_count"
            }
          ]
        }
      },
      "type_search:SearchQueryRequestOperator": {
        "name": "SearchQueryRequestOperator",
        "description": "When you perform a search specifying multiple [sources of information](/docs/search-options), you can use the this parameter to broaden or narrow your search.\n\nThe following logical operators are supported:\n\n- `or`\n\n- `and`\n\nFor details and examples, see the [Using multiple sources of information](/docs/search-single-queries#using-multiple-sources-of-information) section.\n\n**Default**: `or`.",
        "shape": {
          "type": "enum",
          "default": "or",
          "values": [
            {
              "value": "or"
            },
            {
              "value": "and"
            }
          ]
        }
      },
      "type_search:SearchQueryResponseDataItemMetadataItem": {
        "name": "SearchQueryResponseDataItemMetadataItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string that indicates the type of match (`visual`, `conversation`, `text_in_video`, or `logo`)."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "For `conversation` and `text_in_video`, the API returns a transcription of the spoken words or the text that matches your search query."
            }
          ]
        }
      },
      "type_search:SearchQueryResponseDataItem": {
        "name": "SearchQueryResponseDataItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ScoreSearchTerms"
                    }
                  }
                }
              }
            },
            {
              "key": "start",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:StartTime"
                    }
                  }
                }
              }
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EndTime"
                    }
                  }
                }
              }
            },
            {
              "key": "video_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_search:SearchQueryResponseDataItemMetadataItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of objects where each object contains details about a specific type of match and has the following fields:"
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Confidence"
                    }
                  }
                }
              }
            },
            {
              "key": "thumbnail_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ThumbnailUrl"
                    }
                  }
                }
              }
            },
            {
              "key": "modules",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Modules"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_search:SearchQueryResponsePageInfo": {
        "name": "SearchQueryResponsePageInfo",
        "description": "An object that provides information about pagination.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit_per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page."
            },
            {
              "key": "page_expired_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the page expires."
            },
            {
              "key": "total_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos."
            },
            {
              "key": "total_inner_matches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalInnerMatches"
                    }
                  }
                }
              }
            },
            {
              "key": "next_page_token",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NextPageToken"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_search:SearchQueryResponse": {
        "name": "SearchQueryResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_search:SearchQueryResponseDataItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains your search results. For each match found, the engine returns the following fields:"
            },
            {
              "key": "page_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_search:SearchQueryResponsePageInfo"
                    }
                  }
                }
              },
              "description": "An object that provides information about pagination."
            },
            {
              "key": "search_pool",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchPool"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_search:SearchRetrieveResponseDataItemMetadataItem": {
        "name": "SearchRetrieveResponseDataItemMetadataItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string that indicates the type of match (`visual`, `conversation`, `text_in_video`, or `logo`)."
            },
            {
              "key": "text",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "For `conversation` and `text_in_video`, the API returns a transcription of the spoken words or the text that matches your search query."
            }
          ]
        }
      },
      "type_search:SearchRetrieveResponseDataItem": {
        "name": "SearchRetrieveResponseDataItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "score",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ScoreSearchTerms"
                    }
                  }
                }
              }
            },
            {
              "key": "start",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:StartTime"
                    }
                  }
                }
              }
            },
            {
              "key": "end",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:EndTime"
                    }
                  }
                }
              }
            },
            {
              "key": "video_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the video. Once the platform indexes a video, it assigns a unique identifier. Note that this is different from the identifier of the video indexing task."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_search:SearchRetrieveResponseDataItemMetadataItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of objects where each object contains details about a specific type of match and has the following fields:"
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Confidence"
                    }
                  }
                }
              }
            },
            {
              "key": "thumbnail_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ThumbnailUrl"
                    }
                  }
                }
              }
            },
            {
              "key": "modules",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Modules"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_search:SearchRetrieveResponsePageInfo": {
        "name": "SearchRetrieveResponsePageInfo",
        "description": "An object that provides information about pagination.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit_per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The maximum number of items on each page. When grouping by video, this field represents the maximum number of videos per page. Otherwise, it represents the maximum number of video clips per page."
            },
            {
              "key": "page_expired_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the page expires."
            },
            {
              "key": "total_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The total number of results. When grouping by video, this field represents the total number of video clips matching your query. Otherwise , this field represents the total number of videos."
            },
            {
              "key": "total_inner_matches",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalInnerMatches"
                    }
                  }
                }
              }
            },
            {
              "key": "next_page_token",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:NextPageToken"
                    }
                  }
                }
              }
            },
            {
              "key": "prev_page_token",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the previous page."
            }
          ]
        }
      },
      "type_search:SearchRetrieveResponse": {
        "name": "SearchRetrieveResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_search:SearchRetrieveResponseDataItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains your search results. For each match found, the engine returns the following fields."
            },
            {
              "key": "page_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_search:SearchRetrieveResponsePageInfo"
                    }
                  }
                }
              },
              "description": "An object that provides information about pagination."
            },
            {
              "key": "search_pool",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SearchPool"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_embed/tasks:TasksListResponsePageInfo": {
        "name": "TasksListResponsePageInfo",
        "description": "An object that provides information about pagination.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit_per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LimitPerPageSimple"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Page"
                    }
                  }
                }
              }
            },
            {
              "key": "total_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalPage"
                    }
                  }
                }
              }
            },
            {
              "key": "total_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalResults"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_embed/tasks:TasksListResponse": {
        "name": "TasksListResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoEmbeddingTask"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains up to `page_limit` video embedding tasks."
            },
            {
              "key": "page_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_embed/tasks:TasksListResponsePageInfo"
                    }
                  }
                }
              },
              "description": "An object that provides information about pagination."
            }
          ]
        }
      },
      "type_embed/tasks:TasksCreateResponse": {
        "name": "TasksCreateResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the video embedding task. You can use the identifier to:\n\n- Retrieve the status of your task by invoking the [`GET`](/reference/retrieve-video-embeding-task) method of the `/embed/tasks/{task_id}/status` endpoint.\n- Retrieve the embedding by invoking the [`GET`](/reference/retrieve-video-embeding) method of the `/embed/tasks/{task_id}` endpoint."
            }
          ]
        }
      },
      "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingMetadata": {
        "name": "TasksRetrieveResponseVideoEmbeddingMetadata",
        "description": "An object containing metadata about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "input_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video file. The platform returns this field when you upload a video from your local file system."
            },
            {
              "key": "input_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL."
            },
            {
              "key": "video_clip_length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds."
            },
            {
              "key": "video_embedding_scope",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video']."
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The total duration of the video in seconds."
            }
          ]
        }
      },
      "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingSegmentsItem": {
        "name": "TasksRetrieveResponseVideoEmbeddingSegmentsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_offset_sec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The start time of the video segment for this embedding. If the embedding scope is `video`, this field equals `0`."
            },
            {
              "key": "end_offset_sec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The end time of the video segment for this embedding. If the embedding scope is `video`, this field equals the duration of the video."
            },
            {
              "key": "embedding_scope",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Indicates the scope of this embedding. It can take the following values:\n\n- `video`: This embedding if for the entire video.\n- `clip`: This embedding is for a specific segment."
            },
            {
              "key": "float",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity."
            }
          ]
        }
      },
      "type_embed/tasks:TasksRetrieveResponseVideoEmbedding": {
        "name": "TasksRetrieveResponseVideoEmbedding",
        "description": "An object containing the generated embedding vectors and their metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingMetadata"
                    }
                  }
                }
              },
              "description": "An object containing metadata about the video."
            },
            {
              "key": "segments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_embed/tasks:TasksRetrieveResponseVideoEmbeddingSegmentsItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of objects containing the embeddings for each video segment and the associated information."
            }
          ]
        }
      },
      "type_embed/tasks:TasksRetrieveResponse": {
        "name": "TasksRetrieveResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the video embedding task."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video embedding task was created."
            },
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video understanding engine the platform used to create the embedding."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`."
            },
            {
              "key": "video_embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_embed/tasks:TasksRetrieveResponseVideoEmbedding"
                    }
                  }
                }
              },
              "description": "An object containing the generated embedding vectors and their metadata."
            }
          ]
        }
      },
      "type_embed/tasks/status:StatusRetrieveResponseMetadata": {
        "name": "StatusRetrieveResponseMetadata",
        "description": "An object containing metadata about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "input_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video file. The platform returns this field when you upload a video from your local file system."
            },
            {
              "key": "input_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL."
            },
            {
              "key": "video_clip_length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds."
            },
            {
              "key": "video_embedding_scope",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The scope of the video embedding. It can take one of the following values: ['clip'] or ['clip', 'video']."
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The total duration of the video in seconds."
            }
          ]
        }
      },
      "type_embed/tasks/status:StatusRetrieveResponse": {
        "name": "StatusRetrieveResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the video embedding task."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`."
            },
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video understanding engine the platform used to create the embedding."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_embed/tasks/status:StatusRetrieveResponseMetadata"
                    }
                  }
                }
              },
              "description": "An object containing metadata about the video."
            }
          ]
        }
      },
      "type_indexes/videos:VideosListRequestMetadataValue": {
        "name": "VideosListRequestMetadataValue",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "shape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            }
          ]
        }
      },
      "type_indexes/videos:VideosListResponsePageInfo": {
        "name": "VideosListResponsePageInfo",
        "description": "An object that provides information about pagination.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit_per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LimitPerPageSimple"
                    }
                  }
                }
              }
            },
            {
              "key": "page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Page"
                    }
                  }
                }
              }
            },
            {
              "key": "total_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalPage"
                    }
                  }
                }
              }
            },
            {
              "key": "total_results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:TotalResults"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_indexes/videos:VideosListResponse": {
        "name": "VideosListResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:VideoVector"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array that contains up to `page_limit` videos."
            },
            {
              "key": "page_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_indexes/videos:VideosListResponsePageInfo"
                    }
                  }
                }
              },
              "description": "An object that provides information about pagination."
            }
          ]
        }
      },
      "type_indexes/videos:VideosRetrieveResponseMetadata": {
        "name": "VideosRetrieveResponseMetadata",
        "description": "An object that contains the information about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "fps",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_indexes/videos:VideosRetrieveResponseHls": {
        "name": "VideosRetrieveResponseHls",
        "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "video_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the URL of the video. You can then use this URL to access the stream over the <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" target=\"_blank\">HLS</a> protocol."
            },
            {
              "key": "thumbnail_urls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array containing the URL of the thumbnail."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the encoding status of the video file from its original format to a streamable format."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the encoding status was last updated."
            }
          ]
        }
      },
      "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem": {
        "name": "VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start_offset_sec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The start time of the video segment for this embedding."
            },
            {
              "key": "end_offset_sec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The end time of the video segment for this embedding."
            },
            {
              "key": "embedding_scope",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Indicates the scope of this embedding."
            },
            {
              "key": "float",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of floating point numbers representing the embeddings for each individual segment. Each segment is between 2 and 10 seconds. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity."
            }
          ]
        }
      },
      "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbedding": {
        "name": "VideosRetrieveResponseEmbeddingVideoEmbedding",
        "description": "An object that contains the embeddings.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "segments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbeddingSegmentsItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of objects that contains the embeddings for each individual segment."
            }
          ]
        }
      },
      "type_indexes/videos:VideosRetrieveResponseEmbedding": {
        "name": "VideosRetrieveResponseEmbedding",
        "description": "Contains the embedding and the associated information. The platform returns this field when the `embed` query parameter is set to `true` in the request.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video understanding engine used to create the embedding."
            },
            {
              "key": "video_embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_indexes/videos:VideosRetrieveResponseEmbeddingVideoEmbedding"
                    }
                  }
                }
              },
              "description": "An object that contains the embeddings."
            }
          ]
        }
      },
      "type_indexes/videos:VideosRetrieveResponse": {
        "name": "VideosRetrieveResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the video."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the corresponding video indexing task was last updated. The platform updates this field every time the corresponding video indexing task transitions to a different state."
            },
            {
              "key": "indexed_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_indexes/videos:VideosRetrieveResponseMetadata"
                    }
                  }
                }
              },
              "description": "An object that contains the information about the video."
            },
            {
              "key": "hls",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_indexes/videos:VideosRetrieveResponseHls"
                    }
                  }
                }
              },
              "description": "The platform returns this object only for the videos that you uploaded with the `disable_video_stream` parameter set to `false`."
            },
            {
              "key": "embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_indexes/videos:VideosRetrieveResponseEmbedding"
                    }
                  }
                }
              },
              "description": "Contains the embedding and the associated information. The platform returns this field when the `embed` query parameter is set to `true` in the request."
            }
          ]
        }
      },
      "type_:TasksListRequestBadRequestErrorBody": {
        "name": "TasksListRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:TasksCreateRequestBadRequestErrorBody": {
        "name": "TasksCreateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:TasksRetrieveRequestBadRequestErrorBody": {
        "name": "TasksRetrieveRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:TasksDeleteRequestBadRequestErrorBody": {
        "name": "TasksDeleteRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:TasksStatusRequestBadRequestErrorBody": {
        "name": "TasksStatusRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:CloudToCloudImportVideosRequestBadRequestErrorBody": {
        "name": "CloudToCloudImportVideosRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:CloudToCloudRetrieveStatusRequestBadRequestErrorBody": {
        "name": "CloudToCloudRetrieveStatusRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody": {
        "name": "CloudToCloudRetrieveImportLogsRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:IndexesListRequestBadRequestErrorBody": {
        "name": "IndexesListRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:IndexesCreateRequestBadRequestErrorBody": {
        "name": "IndexesCreateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:IndexesRetrieveRequestBadRequestErrorBody": {
        "name": "IndexesRetrieveRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:IndexesUpdateRequestBadRequestErrorBody": {
        "name": "IndexesUpdateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:IndexesDeleteRequestBadRequestErrorBody": {
        "name": "IndexesDeleteRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:VideosListRequestBadRequestErrorBody": {
        "name": "VideosListRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:VideosRetrieveRequestBadRequestErrorBody": {
        "name": "VideosRetrieveRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:VideosUpdateRequestBadRequestErrorBody": {
        "name": "VideosUpdateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:VideosDeleteRequestBadRequestErrorBody": {
        "name": "VideosDeleteRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:SummarizeCreateRequestBadRequestErrorBody": {
        "name": "SummarizeCreateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:GenerateCreateRequestBadRequestErrorBody": {
        "name": "GenerateCreateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:EmbedCreateRequestBadRequestErrorBody": {
        "name": "EmbedCreateRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:StatusRetrieveRequestBadRequestErrorBody": {
        "name": "StatusRetrieveRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:SearchQueryRequestBadRequestErrorBody": {
        "name": "SearchQueryRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error, intended to be suitable for display in a user interface."
            },
            {
              "key": "docs_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the relevant documentation page."
            }
          ]
        }
      },
      "type_:SearchRetrieveRequestBadRequestErrorBody": {
        "name": "SearchRetrieveRequestBadRequestErrorBody",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Represents the code associated with the error. See the [Error codes](/reference/error-codes) page for details."
            },
            {
              "key": "message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable string describing the error."
            }
          ]
        }
      },
      "type_:ImportLogVideoStatus": {
        "name": "ImportLogVideoStatus",
        "description": "Counts of files in different statuses. See the [Task object](/reference/the-task-object) page for details on each status.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "ready",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "validating",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "queued",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "pending",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "indexing",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            },
            {
              "key": "failed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ImportLogFailedFilesItem": {
        "name": "ImportLogFailedFilesItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video file that failed to import."
            },
            {
              "key": "error_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A human-readable error message."
            }
          ]
        }
      },
      "type_:ImportLog": {
        "name": "ImportLog",
        "description": "An object that contains information about the import process.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "index_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the index associated with this import."
            },
            {
              "key": "index_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the index associated with this import."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format when the import process was initiated."
            },
            {
              "key": "ended_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format, when the platform completed importing your videos. A `null` value indicates that the import process is still ongoing."
            },
            {
              "key": "video_status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImportLogVideoStatus"
                    }
                  }
                }
              },
              "description": "Counts of files in different statuses. See the [Task object](/reference/the-task-object) page for details on each status."
            },
            {
              "key": "failed_files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ImportLogFailedFilesItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array containing the video files that failed to import, along with details about the error."
            }
          ]
        }
      },
      "type_:VideoItem": {
        "name": "VideoItem",
        "description": "An object that contains information about a video file.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "video_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique identifier of the video."
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the video file."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the video was added to the import process."
            }
          ]
        }
      },
      "type_:VideoItemFailed": {
        "name": "VideoItemFailed",
        "description": "An object that contains information about a video file that failed to import.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "video_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The unique identifier of the video."
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The name of the video file."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "The date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when the video was added to the import process."
            },
            {
              "key": "error_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "A human-readable error message."
            }
          ]
        }
      },
      "type_:EmbeddingResponse": {
        "name": "EmbeddingResponse",
        "description": "An object that contains the generated embedding vector and associated information.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Audio Embedding Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:AudioEmbeddingResponse"
                }
              }
            },
            {
              "displayName": "Image Embedding Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageEmbeddingResponse"
                }
              }
            },
            {
              "displayName": "Text Embedding Response",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TextEmbeddingResponse"
                }
              }
            }
          ]
        }
      },
      "type_:AudioEmbeddingResponse": {
        "name": "AudioEmbeddingResponse",
        "description": "An object that contains the generated audio embedding vector and associated information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "audio_embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AudioEmbeddingResult"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ImageEmbeddingResponse": {
        "name": "ImageEmbeddingResponse",
        "description": "An object that contains the generated image embedding vector and associated information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "image_embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageEmbeddingResult"
                }
              }
            }
          ]
        }
      },
      "type_:TextEmbeddingResponse": {
        "name": "TextEmbeddingResponse",
        "description": "An object that contains the generated text embedding vector and associated information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text_embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:TextEmbeddingResult"
                }
              }
            }
          ]
        }
      },
      "type_:TextEmbeddingResult": {
        "name": "TextEmbeddingResult",
        "description": "An object containing the generated embedding vector.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the embedding generation failed."
            },
            {
              "key": "segments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:TextSegment"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An object that contains the embedding."
            }
          ]
        }
      },
      "type_:AudioEmbeddingResultMetadata": {
        "name": "AudioEmbeddingResultMetadata",
        "description": "Metadata about the embedding.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "input_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the audio file used to generate the embedding. Present if a URL was provided in the request."
            },
            {
              "key": "input_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the audio file used to generate the embedding. Present if a file was provided in the request."
            }
          ]
        }
      },
      "type_:AudioEmbeddingResult": {
        "name": "AudioEmbeddingResult",
        "description": "An object that contains the generated embedding vector and associated information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "segments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:AudioSegment"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An object that contains the embedding and its start time."
            },
            {
              "key": "error_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the embedding generation failed."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AudioEmbeddingResultMetadata"
                    }
                  }
                }
              },
              "description": "Metadata about the embedding."
            }
          ]
        }
      },
      "type_:ImageEmbeddingResultMetadata": {
        "name": "ImageEmbeddingResultMetadata",
        "description": "Metadata about the embedding.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "input_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the image file used to generate the embedding. Present if a URL was provided in the request."
            },
            {
              "key": "input_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the image file used to generate the embedding. Present if a file was provided in the request."
            }
          ]
        }
      },
      "type_:ImageEmbeddingResult": {
        "name": "ImageEmbeddingResult",
        "description": "An object containing the generated embedding vector and associated information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error_message",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Error message if the embedding generation failed."
            },
            {
              "key": "segments",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ImageSegment"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An object that contains the embedding."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageEmbeddingResultMetadata"
                    }
                  }
                }
              },
              "description": "Metadata about the embedding."
            }
          ]
        }
      },
      "type_:TextSegment": {
        "name": "TextSegment",
        "description": "An object that contains the text embedding.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "float",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity."
            }
          ]
        }
      },
      "type_:AudioSegment": {
        "name": "AudioSegment",
        "description": "An object that contains the audio embedding and its start time.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "float",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity."
            },
            {
              "key": "start_offset_sec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The start time, in seconds, from which the platform generated the audio embedding."
            }
          ]
        }
      },
      "type_:ImageSegment": {
        "name": "ImageSegment",
        "description": "An object that contains the image embedding.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "float",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of floating point numbers representing the embedding. You can use this array with cosine similarity for various downstream tasks. Note that the example response was truncated for brevity."
            }
          ]
        }
      },
      "type_:EndTime": {
        "name": "EndTime",
        "description": "The end time of the matching video clip, expressed in seconds.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "double"
            }
          }
        }
      },
      "type_:StartTime": {
        "name": "StartTime",
        "description": "The start time of the matching video clip, expressed in seconds.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "double"
            }
          }
        }
      },
      "type_:ScoreSearchTerms": {
        "name": "ScoreSearchTerms",
        "description": "A quantitative value determined by the AI engine representing the level of confidence that the results match your search terms.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:Confidence": {
        "name": "Confidence",
        "description": "A qualitative indicator based on the value of the `score` field. This field can take one of the following values:\n\n- `high`\n- `medium`\n- `low`\n- `extremely low`",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:ModulesItem": {
        "name": "ModulesItem",
        "description": "Each element is a dictionary.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The source of information for which the video clip matched your search terms. It can take one of the following values: `conversation`, `visual`, `text_in_video`, and `logo`."
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The confidence level that the result is accurate."
            }
          ]
        }
      },
      "type_:Modules": {
        "name": "Modules",
        "description": "When the request specifies multiple sources of information, this array indicates the confidence level that the result is accurate for each matching source of information.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ModulesItem"
              }
            }
          }
        }
      },
      "type_:ThumbnailUrl": {
        "name": "ThumbnailUrl",
        "description": "If thumbnail generation has been enabled for this index, the platform returns a string representing the URL of the thumbnail. Note that the URL expires in one hour.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:TotalResults": {
        "name": "TotalResults",
        "description": "The total number of results.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "integer"
            }
          }
        }
      },
      "type_:Page": {
        "name": "Page",
        "description": "The page you retrieved.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "integer"
            }
          }
        }
      },
      "type_:TotalPage": {
        "name": "TotalPage",
        "description": "The total number of pages.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "integer"
            }
          }
        }
      },
      "type_:LimitPerPageSimple": {
        "name": "LimitPerPageSimple",
        "description": "The maximum number of items on each page.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "integer"
            }
          }
        }
      },
      "type_:TotalInnerMatches": {
        "name": "TotalInnerMatches",
        "description": "When grouping by video, the platform return this field that shows the total number of video clips matching your query.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "integer"
            }
          }
        }
      },
      "type_:NextPageToken": {
        "name": "NextPageToken",
        "description": "The unique identifier of the next page.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SearchPool": {
        "name": "SearchPool",
        "description": "An object that contains details about the index you queried.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "total_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "The number of videos in the index you queried."
            },
            {
              "key": "total_duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The total duration of the videos."
            },
            {
              "key": "index_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the index."
            }
          ]
        }
      },
      "type_:ConversationOptionAnyToVideo": {
        "name": "ConversationOptionAnyToVideo",
        "description": "Specifies the type of match the platform performs.\n\nWhen using image queries:\n\n- This parameter must be set to `semantic`.\n\nWhen using text queries, supported values are:\n\n- `semantic`\n- `exact_match`\n  For details, see the [Conversation option](/docs/conversation-option) page.\n\n**Default:** `semantic`",
        "shape": {
          "type": "enum",
          "default": "semantic",
          "values": [
            {
              "value": "semantic"
            },
            {
              "value": "exact_match"
            }
          ]
        }
      },
      "type_:ThresholdSearch": {
        "name": "ThresholdSearch",
        "description": "Use this parameter to filter on the level of confidence that the results match your query.\n\n**Default:** `low`",
        "shape": {
          "type": "enum",
          "default": "low",
          "values": [
            {
              "value": "high"
            },
            {
              "value": "medium"
            },
            {
              "value": "low"
            },
            {
              "value": "none"
            }
          ]
        }
      },
      "type_:IndexEnginesItem": {
        "name": "IndexEnginesItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the name of the engine."
            },
            {
              "key": "engine_options",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array of strings that contains the [engine options](/docs/engine-options) enabled for this index."
            },
            {
              "key": "addons",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of the add-ons that are enabled for this index."
            }
          ]
        }
      },
      "type_:IndexSchema": {
        "name": "IndexSchema",
        "description": "An index groups one or more videos stored as vectors and is the most granular level at which you can perform a search.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the index. It is assigned by the API when an index is created."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index was created."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the index has been updated."
            },
            {
              "key": "expires_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the date and time, in the <a href=\"https://datatracker.ietf.org/doc/html/rfc3339\" target=\"_blank\">RFC 3339</a> format (\"YYYY-MM-DDTHH:mm:ssZ\"), when your index will expire.\n\nIf you're on the Free plan, the platform retains your index data for 90 days from creation. After this period, the platform deletes your index data, and this action cannot be undone. To continue using your index beyond this period, consider upgrading to the Developer plan, which offers unlimited index retention. For details, see the [Upgrade your plan](/docs/manage-your-plan#upgrade-your-plan) section.\n\nIf you're on the Developer plan, this field is set to `null`, indicating no expiration."
            },
            {
              "key": "index_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the name of the index."
            },
            {
              "key": "total_duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "A number representing the total duration, in seconds, of the videos in the index."
            },
            {
              "key": "video_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The number of videos uploaded to this index."
            },
            {
              "key": "engines",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:IndexEnginesItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "An array containing the list of the [video understanding engines](/docs/video-understanding-engines) enabled for this index."
            }
          ]
        }
      },
      "type_:VideoEmbeddingTaskVideoEmbeddingMetadata": {
        "name": "VideoEmbeddingTaskVideoEmbeddingMetadata",
        "description": "An object containing metadata about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "input_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video file. The platform returns this field when you upload a video from your local file system."
            },
            {
              "key": "input_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The URL of the video. The platform returns this field when you upload a video from a publicly accessible URL."
            },
            {
              "key": "video_clip_length",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The duration for each clip in seconds, as specified by the `video_clip_length` parameter of the [`POST`](/reference/create-video-embeding-task) method of the `/embed/task` endpoint. Note that the platform automatically truncates video segments shorter than 2 seconds. For a 31-second video divided into 6-second segments, the final 1-second segment will be truncated. This truncation only applies to the last segment if it does not meet the minimum length requirement of 2 seconds."
            },
            {
              "key": "video_embedding_scope",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "The scope you've specified in the request. It can take one of the following values: ['clip'] or ['clip', 'video']."
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The total duration of the video in seconds."
            }
          ]
        }
      },
      "type_:VideoEmbeddingTaskVideoEmbedding": {
        "name": "VideoEmbeddingTaskVideoEmbedding",
        "description": "An object containing the metadata associated with the embedding.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoEmbeddingTaskVideoEmbeddingMetadata"
                    }
                  }
                }
              },
              "description": "An object containing metadata about the video."
            }
          ]
        }
      },
      "type_:VideoEmbeddingTask": {
        "name": "VideoEmbeddingTask",
        "description": "A video embedding task that describes the status of the task and the metadata about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The unique identifier of the video embedding task."
            },
            {
              "key": "engine_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "The name of the video understanding engine the platform used to create the embedding."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the status of the video indexing task. It can take one of the following values: `processing`, `ready` or `failed`."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "The date and time, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video embedding task was created."
            },
            {
              "key": "video_embedding",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoEmbeddingTaskVideoEmbedding"
                    }
                  }
                }
              },
              "description": "An object containing the metadata associated with the embedding."
            }
          ]
        }
      },
      "type_:VideoIndexingTaskMetadata": {
        "name": "VideoIndexingTaskMetadata",
        "description": "An object that contains information about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VideoIndexingTask": {
        "name": "VideoIndexingTask",
        "description": "A video indexing task that describes the status of the task and the metadata about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the task. It is assigned by the platform when a new task is created."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task was created."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the task object was last updated. The platform updates this field every time the video indexing task transitions to a different state."
            },
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the status of the video indexing task. See the [Task object](/reference/the-task-object) page for a list of possible statuses."
            },
            {
              "key": "estimated_time",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the estimated completion date and time of the video indexing task, in the [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\")."
            },
            {
              "key": "index_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of the index to which the video must be uploaded."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoIndexingTaskMetadata"
                    }
                  }
                }
              },
              "description": "An object that contains information about the video."
            }
          ]
        }
      },
      "type_:VideoVectorMetadata": {
        "name": "VideoVectorMetadata",
        "description": "An object that contains information about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "fps",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:VideoVector": {
        "name": "VideoVector",
        "description": "A video object that contains information about the video.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string representing the unique identifier of a video. The platform creates a new `video_vector` object and assigns it a unique identifier when the video has successfully been indexed. Note that video IDs are different from task IDs."
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task was created."
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task object was last updated. The platform updates this field every time the video indexing task transitions to a different state."
            },
            {
              "key": "indexed_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A string indicating the date and time, in the RFC [RFC 3339](https://datatracker.ietf.org/doc/html/rfc3339) format (\"YYYY-MM-DDTHH:mm:ssZ\"), that the video indexing task has been completed."
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoVectorMetadata"
                    }
                  }
                }
              },
              "description": "An object that contains information about the video."
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_tasks": {
        "id": "subpackage_tasks",
        "name": "tasks"
      },
      "subpackage_uploadVideos": {
        "id": "subpackage_uploadVideos",
        "name": "uploadVideos",
        "displayName": "Upload videos"
      },
      "subpackage_indexes": {
        "id": "subpackage_indexes",
        "name": "indexes"
      },
      "subpackage_summarize": {
        "id": "subpackage_summarize",
        "name": "summarize"
      },
      "subpackage_generate": {
        "id": "subpackage_generate",
        "name": "generate"
      },
      "subpackage_embed": {
        "id": "subpackage_embed",
        "name": "embed"
      },
      "subpackage_search": {
        "id": "subpackage_search",
        "name": "search"
      },
      "subpackage_gist": {
        "id": "subpackage_gist",
        "name": "gist"
      },
      "subpackage_embedNew": {
        "id": "subpackage_embedNew",
        "name": "embedNew"
      },
      "subpackage_embed/tasks": {
        "id": "subpackage_embed/tasks",
        "name": "tasks"
      },
      "subpackage_embed/tasks/status": {
        "id": "subpackage_embed/tasks/status",
        "name": "status"
      },
      "subpackage_indexes/videos": {
        "id": "subpackage_indexes/videos",
        "name": "videos"
      }
    },
    "auths": {}
  }
]