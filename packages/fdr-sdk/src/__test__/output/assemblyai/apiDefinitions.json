[
  {
    "id": "72c824a6-ca97-4592-a585-266e983022de",
    "endpoints": {
      "endpoint_files.upload": {
        "id": "endpoint_files.upload",
        "namespace": [
          "subpackage_files"
        ],
        "description": "Upload a media file to AssemblyAI's servers.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v2/upload"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/octet-stream",
          "body": {
            "type": "bytes",
            "isOptional": false,
            "contentType": "application/octet-stream"
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_files:UploadedFile"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/upload",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "upload_url": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/upload",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "bytes",
              "value": {
                "type": "base64",
                "value": "data:application/octet-stream;base64,SGVsbG8gd29ybGQh"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/upload \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/octet-stream\" \\\n     --data-binary @<filename>",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.list": {
        "id": "endpoint_transcripts.list",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Retrieve a list of transcripts you created.\nTranscripts are sorted from newest to oldest. The previous URL always points to a page with older transcripts.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Maximum amount of transcripts to retrieve"
          },
          {
            "key": "status",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "id",
                "id": "type_transcripts:TranscriptStatus"
              }
            },
            "description": "Filter by transcript status"
          },
          {
            "key": "created_on",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Only get transcripts created on this date"
          },
          {
            "key": "before_id",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Get transcripts that were created before this transcript ID"
          },
          {
            "key": "after_id",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Get transcripts that were created after this transcript ID"
          },
          {
            "key": "throttled_only",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Only get throttled transcripts, overrides the status filter"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:TranscriptList"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "page_details": {
                  "limit": 3,
                  "result_count": 3,
                  "current_url": "https://api.assemblyai.com/v2/transcript?limit=3",
                  "prev_url": "https://api.assemblyai.com/v2/transcript?limit=3&before_id=28a73d01-98db-41dd-9e98-2533ba0af117",
                  "next_url": "https://api.assemblyai.com/v2/transcript?limit=3&after_id=b33f4691-85b7-4f31-be12-a87cef1c1229"
                },
                "transcripts": [
                  {
                    "id": "b33f4691-85b7-4f31-be12-a87cef1c1229",
                    "resource_url": "https://api.assemblyai.com/v2/transcript/b33f4691-85b7-4f31-be12-a87cef1c1229",
                    "status": "completed",
                    "created": "2024-03-11T21:29:59Z",
                    "completed": "2024-03-11T21:30:07Z",
                    "audio_url": "http://deleted_by_user",
                    "error": "error"
                  },
                  {
                    "id": "ce522f10-d204-42e8-a838-6b95098145cc",
                    "resource_url": "https://api.assemblyai.com/v2/transcript/ce522f10-d204-42e8-a838-6b95098145cc",
                    "status": "error",
                    "created": "2024-03-11T21:23:59Z",
                    "completed": "2024-01-15T09:30:00Z",
                    "audio_url": "https://storage.googleapis.com/client-docs-samples/nbc.mp3",
                    "error": "Download error, unable to download https://storage.googleapis.com/client-docs-samples/nbc.mp3. Please make sure the file exists and is accessible from the internet."
                  },
                  {
                    "id": "28a73d01-98db-41dd-9e98-2533ba0af117",
                    "resource_url": "https://api.assemblyai.com/v2/transcript/28a73d01-98db-41dd-9e98-2533ba0af117",
                    "status": "completed",
                    "created": "2024-03-11T21:12:57Z",
                    "completed": "2024-03-11T21:13:03Z",
                    "audio_url": "https://storage.googleapis.com/aai-docs-samples/nbc.mp3",
                    "error": "error"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {
              "limit": 0,
              "status": "queued"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=0 \\\n     -d status=queued",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.submit": {
        "id": "endpoint_transcripts.submit",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Create a transcript from a media file that is accessible via a URL.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [
              "type_transcripts:TranscriptOptionalParams"
            ],
            "properties": [
              {
                "key": "audio_url",
                "valueShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "description": "The URL of the audio or video file to transcribe."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:Transcript"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "https://github.com/AssemblyAI-Examples/audio-examples/raw/main/20230607_me_canadian_wildfires.mp3",
                "audio_end_at": 280,
                "audio_start_from": 10,
                "auto_chapters": true,
                "auto_highlights": true,
                "boost_param": "high",
                "content_safety": true,
                "custom_spelling": [
                  {
                    "from": [
                      "dicarlo"
                    ],
                    "to": "Decarlo"
                  }
                ],
                "custom_topics": true,
                "disfluencies": false,
                "dual_channel": true,
                "entity_detection": true,
                "filter_profanity": true,
                "format_text": true,
                "iab_categories": true,
                "language_code": "en_us",
                "language_detection": false,
                "punctuate": true,
                "redact_pii": true,
                "redact_pii_audio": true,
                "redact_pii_audio_quality": "mp3",
                "redact_pii_policies": [
                  "us_social_security_number",
                  "credit_card_number"
                ],
                "redact_pii_sub": "hash",
                "sentiment_analysis": true,
                "speaker_labels": true,
                "speakers_expected": 2,
                "speech_threshold": 0.5,
                "summarization": true,
                "summary_model": "informative",
                "summary_type": "bullets",
                "topics": [
                  "topics"
                ],
                "webhook_auth_header_name": "webhook-secret",
                "webhook_auth_header_value": "webhook-secret-value",
                "webhook_url": "https://your-webhook-url/path",
                "word_boost": [
                  "aws",
                  "azure",
                  "google cloud"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "9ea68fd3-f953-42c1-9742-976c447fb463",
                "language_model": "assemblyai_default",
                "acoustic_model": "assemblyai_default",
                "status": "completed",
                "audio_url": "https://github.com/AssemblyAI-Examples/audio-examples/raw/main/20230607_me_canadian_wildfires.mp3",
                "webhook_auth": true,
                "auto_highlights": true,
                "redact_pii": true,
                "summarization": true,
                "language_code": "en_us",
                "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning. What is it about the conditions right now that have caused this round of wildfires to affect so many people so far away? Well, there's a couple of things. The season has been pretty dry already. And then the fact that we're getting hit in the US. Is because there's a couple of weather systems that are essentially channeling the smoke from those Canadian wildfires through Pennsylvania into the Mid Atlantic and the Northeast and kind of just dropping the smoke there. So what is it in this haze that makes it harmful? And I'm assuming it is harmful. It is. The levels outside right now in Baltimore are considered unhealthy. And most of that is due to what's called particulate matter, which are tiny particles, microscopic smaller than the width of your hair that can get into your lungs and impact your respiratory system, your cardiovascular system, and even your neurological your brain. What makes this particularly harmful? Is it the volume of particulant? Is it something in particular? What is it exactly? Can you just drill down on that a little bit more? Yeah. So the concentration of particulate matter I was looking at some of the monitors that we have was reaching levels of what are, in science, big 150 micrograms per meter cubed, which is more than ten times what the annual average should be and about four times higher than what you're supposed to have on a 24 hours average. And so the concentrations of these particles in the air are just much, much higher than we typically see. And exposure to those high levels can lead to a host of health problems. And who is most vulnerable? I noticed that in New York City, for example, they're canceling outdoor activities. And so here it is in the early days of summer, and they have to keep all the kids inside. So who tends to be vulnerable in a situation like this? It's the youngest. So children, obviously, whose bodies are still developing. The elderly, who are their bodies are more in decline and they're more susceptible to the health impacts of breathing, the poor air quality. And then people who have preexisting health conditions, people with respiratory conditions or heart conditions can be triggered by high levels of air pollution. Could this get worse? That's a good question. In some areas, it's much worse than others. And it just depends on kind of where the smoke is concentrated. I think New York has some of the higher concentrations right now, but that's going to change as that air moves away from the New York area. But over the course of the next few days, we will see different areas being hit at different times with the highest concentrations. I was going to ask you about more fires start burning. I don't expect the concentrations to go up too much higher. I was going to ask you how and you started to answer this, but how much longer could this last? Or forgive me if I'm asking you to speculate, but what do you think? Well, I think the fires are going to burn for a little bit longer, but the key for us in the US. Is the weather system changing. And so right now, it's kind of the weather systems that are pulling that air into our mid Atlantic and Northeast region. As those weather systems change and shift, we'll see that smoke going elsewhere and not impact us in this region as much. And so I think that's going to be the defining factor. And I think the next couple of days we're going to see a shift in that weather pattern and start to push the smoke away from where we are. And finally, with the impacts of climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences or circumstances? I mean, that is one of the predictions for climate change. Looking into the future, the fire season is starting earlier and lasting longer, and we're seeing more frequent fires. So, yeah, this is probably something that we'll be seeing more frequently. This tends to be much more of an issue in the Western US. So the eastern US. Getting hit right now is a little bit new. But yeah, I think with climate change moving forward, this is something that is going to happen more frequently. That's Peter De Carlo, associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University. Sergeant Carlo, thanks so much for joining us and sharing this expertise with us. Thank you for having me.",
                "words": [
                  {
                    "confidence": 0.97465,
                    "start": 250,
                    "end": 650,
                    "text": "Smoke",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99999,
                    "start": 730,
                    "end": 1022,
                    "text": "from",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99844,
                    "start": 1076,
                    "end": 1418,
                    "text": "hundreds",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.84,
                    "start": 1434,
                    "end": 1614,
                    "text": "of",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.89572,
                    "start": 1652,
                    "end": 2346,
                    "text": "wildfires",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99994,
                    "start": 2378,
                    "end": 2526,
                    "text": "in",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.93953,
                    "start": 2548,
                    "end": 3130,
                    "text": "Canada",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.999,
                    "start": 3210,
                    "end": 3454,
                    "text": "is",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.74794,
                    "start": 3492,
                    "end": 3946,
                    "text": "triggering",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 1,
                    "start": 3978,
                    "end": 4174,
                    "text": "air",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.88077,
                    "start": 4212,
                    "end": 4558,
                    "text": "quality",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.94814,
                    "start": 4644,
                    "end": 5114,
                    "text": "alerts",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99726,
                    "start": 5162,
                    "end": 5466,
                    "text": "throughout",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.79,
                    "start": 5498,
                    "end": 5694,
                    "text": "the",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.89,
                    "start": 5732,
                    "end": 6382,
                    "text": "US.",
                    "speaker": "speaker"
                  }
                ],
                "utterances": [
                  {
                    "confidence": 0.9359033333333334,
                    "start": 250,
                    "end": 26950,
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor.",
                    "words": [
                      {
                        "confidence": 0.97503,
                        "start": 250,
                        "end": 650,
                        "text": "Smoke",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99999,
                        "start": 730,
                        "end": 1022,
                        "text": "from",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99843,
                        "start": 1076,
                        "end": 1418,
                        "text": "hundreds",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.85,
                        "start": 1434,
                        "end": 1614,
                        "text": "of",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.89657,
                        "start": 1652,
                        "end": 2346,
                        "text": "wildfires",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99994,
                        "start": 2378,
                        "end": 2526,
                        "text": "in",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.93864,
                        "start": 2548,
                        "end": 3130,
                        "text": "Canada",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.999,
                        "start": 3210,
                        "end": 3454,
                        "text": "is",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.75366,
                        "start": 3492,
                        "end": 3946,
                        "text": "triggering",
                        "speaker": "A"
                      },
                      {
                        "confidence": 1,
                        "start": 3978,
                        "end": 4174,
                        "text": "air",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.87745,
                        "start": 4212,
                        "end": 4558,
                        "text": "quality",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.94739,
                        "start": 4644,
                        "end": 5114,
                        "text": "alerts",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99726,
                        "start": 5162,
                        "end": 5466,
                        "text": "throughout",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.79,
                        "start": 5498,
                        "end": 5694,
                        "text": "the",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.88,
                        "start": 5732,
                        "end": 6382,
                        "text": "US.",
                        "speaker": "A"
                      }
                    ],
                    "speaker": "A"
                  }
                ],
                "confidence": 0.9404651451800253,
                "audio_duration": 281,
                "punctuate": true,
                "format_text": true,
                "dual_channel": false,
                "speech_model": "best",
                "webhook_url": "https://your-webhook-url.tld/path",
                "webhook_status_code": 200,
                "webhook_auth_header_name": "webhook-secret",
                "speed_boost": true,
                "auto_highlights_result": {
                  "status": "success",
                  "results": [
                    {
                      "count": 1,
                      "rank": 0.08,
                      "text": "air quality alerts",
                      "timestamps": [
                        {
                          "start": 3978,
                          "end": 5114
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.08,
                      "text": "wide ranging air quality consequences",
                      "timestamps": [
                        {
                          "start": 235388,
                          "end": 238694
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.07,
                      "text": "more wildfires",
                      "timestamps": [
                        {
                          "start": 230972,
                          "end": 232354
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.07,
                      "text": "air pollution",
                      "timestamps": [
                        {
                          "start": 156004,
                          "end": 156910
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.07,
                      "text": "weather systems",
                      "timestamps": [
                        {
                          "start": 47344,
                          "end": 47958
                        },
                        {
                          "start": 205268,
                          "end": 205818
                        },
                        {
                          "start": 211588,
                          "end": 213434
                        }
                      ]
                    },
                    {
                      "count": 2,
                      "rank": 0.06,
                      "text": "high levels",
                      "timestamps": [
                        {
                          "start": 121128,
                          "end": 121646
                        },
                        {
                          "start": 155412,
                          "end": 155866
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.06,
                      "text": "health conditions",
                      "timestamps": [
                        {
                          "start": 152138,
                          "end": 152666
                        }
                      ]
                    },
                    {
                      "count": 2,
                      "rank": 0.06,
                      "text": "Peter de Carlo",
                      "timestamps": [
                        {
                          "start": 18948,
                          "end": 19930
                        },
                        {
                          "start": 268298,
                          "end": 269194
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.06,
                      "text": "New York City",
                      "timestamps": [
                        {
                          "start": 125768,
                          "end": 126274
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "respiratory conditions",
                      "timestamps": [
                        {
                          "start": 152964,
                          "end": 153786
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.05,
                      "text": "New York",
                      "timestamps": [
                        {
                          "start": 125768,
                          "end": 126034
                        },
                        {
                          "start": 171448,
                          "end": 171938
                        },
                        {
                          "start": 176008,
                          "end": 176322
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.05,
                      "text": "climate change",
                      "timestamps": [
                        {
                          "start": 229548,
                          "end": 230230
                        },
                        {
                          "start": 244576,
                          "end": 245162
                        },
                        {
                          "start": 263348,
                          "end": 263950
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "Johns Hopkins University Varsity",
                      "timestamps": [
                        {
                          "start": 23972,
                          "end": 25490
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "heart conditions",
                      "timestamps": [
                        {
                          "start": 153988,
                          "end": 154506
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "air quality warnings",
                      "timestamps": [
                        {
                          "start": 12308,
                          "end": 13434
                        }
                      ]
                    }
                  ]
                },
                "audio_start_from": 10,
                "audio_end_at": 280,
                "word_boost": [
                  "aws",
                  "azure",
                  "google cloud"
                ],
                "boost_param": "high",
                "filter_profanity": true,
                "redact_pii_audio": true,
                "redact_pii_audio_quality": "mp3",
                "redact_pii_policies": [
                  "us_social_security_number",
                  "credit_card_number"
                ],
                "redact_pii_sub": "hash",
                "speaker_labels": true,
                "speakers_expected": 2,
                "content_safety": true,
                "content_safety_labels": {
                  "status": "success",
                  "results": [
                    {
                      "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning.",
                      "labels": [
                        {
                          "label": "disasters",
                          "confidence": 0.8142836093902588,
                          "severity": 0.4093044400215149
                        }
                      ],
                      "sentences_idx_start": 0,
                      "sentences_idx_end": 5,
                      "timestamp": {
                        "start": 250,
                        "end": 28840
                      }
                    }
                  ],
                  "summary": {
                    "disasters": 0.9940800441842205,
                    "health_issues": 0.9216489289040967
                  },
                  "severity_score_summary": {
                    "disasters": {
                      "low": 0.5733263024656846,
                      "medium": 0.42667369753431533,
                      "high": 0
                    },
                    "health_issues": {
                      "low": 0.22863814977924785,
                      "medium": 0.45014154926938227,
                      "high": 0.32122030095136983
                    }
                  }
                },
                "iab_categories": true,
                "iab_categories_result": {
                  "status": "success",
                  "results": [
                    {
                      "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning.",
                      "labels": [
                        {
                          "relevance": 0.988274097442627,
                          "label": "Home&Garden>IndoorEnvironmentalQuality"
                        },
                        {
                          "relevance": 0.5821335911750793,
                          "label": "NewsAndPolitics>Weather"
                        },
                        {
                          "relevance": 0.0042327106930315495,
                          "label": "MedicalHealth>DiseasesAndConditions>LungAndRespiratoryHealth"
                        },
                        {
                          "relevance": 0.0033971222583204508,
                          "label": "NewsAndPolitics>Disasters"
                        },
                        {
                          "relevance": 0.002469958271831274,
                          "label": "BusinessAndFinance>Business>GreenSolutions"
                        },
                        {
                          "relevance": 0.0014376690378412604,
                          "label": "MedicalHealth>DiseasesAndConditions>Cancer"
                        },
                        {
                          "relevance": 0.0014294233405962586,
                          "label": "Science>Environment"
                        },
                        {
                          "relevance": 0.001234519761055708,
                          "label": "Travel>TravelLocations>PolarTravel"
                        },
                        {
                          "relevance": 0.0010231725173071027,
                          "label": "MedicalHealth>DiseasesAndConditions>ColdAndFlu"
                        },
                        {
                          "relevance": 0.0007445293595083058,
                          "label": "BusinessAndFinance>Industries>PowerAndEnergyIndustry"
                        }
                      ],
                      "timestamp": {
                        "start": 250,
                        "end": 28840
                      }
                    }
                  ],
                  "summary": {
                    "NewsAndPolitics>Weather": 1,
                    "Home&Garden>IndoorEnvironmentalQuality": 0.9043831825256348,
                    "Science>Environment": 0.16117265820503235,
                    "BusinessAndFinance>Industries>EnvironmentalServicesIndustry": 0.14393523335456848,
                    "MedicalHealth>DiseasesAndConditions>LungAndRespiratoryHealth": 0.11401086300611496,
                    "BusinessAndFinance>Business>GreenSolutions": 0.06348437070846558,
                    "NewsAndPolitics>Disasters": 0.05041387677192688,
                    "Travel>TravelLocations>PolarTravel": 0.01308488193899393,
                    "HealthyLiving": 0.008222488686442375,
                    "MedicalHealth>DiseasesAndConditions>ColdAndFlu": 0.0022315620444715023,
                    "MedicalHealth>DiseasesAndConditions>HeartAndCardiovascularDiseases": 0.00213034451007843,
                    "HealthyLiving>Wellness>SmokingCessation": 0.001540527562610805,
                    "MedicalHealth>DiseasesAndConditions>Injuries": 0.0013950627762824297,
                    "BusinessAndFinance>Industries>PowerAndEnergyIndustry": 0.0012570273829624057,
                    "MedicalHealth>DiseasesAndConditions>Cancer": 0.001097781932912767,
                    "MedicalHealth>DiseasesAndConditions>Allergies": 0.0010148967849090695,
                    "MedicalHealth>DiseasesAndConditions>MentalHealth": 0.000717321818228811,
                    "Style&Fashion>PersonalCare>DeodorantAndAntiperspirant": 0.0006022014422342181,
                    "Technology&Computing>Computing>ComputerNetworking": 0.0005461975233629346,
                    "MedicalHealth>DiseasesAndConditions>Injuries>FirstAid": 0.0004885646631009877
                  }
                },
                "language_detection": false,
                "custom_spelling": [
                  {
                    "from": [
                      "dicarlo"
                    ],
                    "to": "Decarlo"
                  }
                ],
                "auto_chapters": true,
                "chapters": [
                  {
                    "gist": "Smoggy air quality alerts across US",
                    "headline": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts across US",
                    "summary": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. In some places, the air quality warnings include the warning to stay inside.",
                    "start": 250,
                    "end": 28840
                  },
                  {
                    "gist": "What is it about the conditions right now that have caused this round",
                    "headline": "High particulate matter in wildfire smoke can lead to serious health problems",
                    "summary": "Air pollution levels in Baltimore are considered unhealthy. Exposure to high levels can lead to a host of health problems. With climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences?",
                    "start": 29610,
                    "end": 280340
                  }
                ],
                "summary_type": "bullets",
                "summary_model": "informative",
                "summary": "- Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. In some places, the air quality warnings include the warning to stay inside.\\n- Air pollution levels in Baltimore are considered unhealthy. Exposure to high levels can lead to a host of health problems. With climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences?",
                "custom_topics": true,
                "topics": [
                  "topics"
                ],
                "disfluencies": false,
                "sentiment_analysis": true,
                "sentiment_analysis_results": [
                  {
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US.",
                    "start": 250,
                    "end": 6350,
                    "sentiment": "NEGATIVE",
                    "confidence": 0.8181032538414001,
                    "speaker": "speaker"
                  }
                ],
                "entity_detection": true,
                "entities": [
                  {
                    "entity_type": "location",
                    "text": "Canada",
                    "start": 2548,
                    "end": 3130
                  },
                  {
                    "entity_type": "location",
                    "text": "the US",
                    "start": 5498,
                    "end": 6382
                  },
                  {
                    "entity_type": "location",
                    "text": "Maine",
                    "start": 7492,
                    "end": 7914
                  },
                  {
                    "entity_type": "location",
                    "text": "Maryland",
                    "start": 8212,
                    "end": 8634
                  },
                  {
                    "entity_type": "location",
                    "text": "Minnesota",
                    "start": 8932,
                    "end": 9578
                  },
                  {
                    "entity_type": "person_name",
                    "text": "Peter de Carlo",
                    "start": 18948,
                    "end": 19930
                  },
                  {
                    "entity_type": "occupation",
                    "text": "associate professor",
                    "start": 20292,
                    "end": 21194
                  },
                  {
                    "entity_type": "organization",
                    "text": "Department of Environmental Health and Engineering",
                    "start": 21508,
                    "end": 23706
                  },
                  {
                    "entity_type": "organization",
                    "text": "Johns Hopkins University Varsity",
                    "start": 23972,
                    "end": 25490
                  },
                  {
                    "entity_type": "occupation",
                    "text": "professor",
                    "start": 26076,
                    "end": 26950
                  },
                  {
                    "entity_type": "location",
                    "text": "the US",
                    "start": 45184,
                    "end": 45898
                  },
                  {
                    "entity_type": "nationality",
                    "text": "Canadian",
                    "start": 49728,
                    "end": 50086
                  }
                ],
                "speech_threshold": 0.5,
                "throttled": true,
                "error": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"https://github.com/AssemblyAI-Examples/audio-examples/raw/main/20230607_me_canadian_wildfires.mp3\",\n  \"audio_end_at\": 280,\n  \"audio_start_from\": 10,\n  \"auto_chapters\": true,\n  \"auto_highlights\": true,\n  \"boost_param\": \"high\",\n  \"content_safety\": true,\n  \"custom_spelling\": [\n    {\n      \"from\": [\n        \"dicarlo\"\n      ],\n      \"to\": \"Decarlo\"\n    }\n  ],\n  \"custom_topics\": true,\n  \"disfluencies\": false,\n  \"dual_channel\": true,\n  \"entity_detection\": true,\n  \"filter_profanity\": true,\n  \"format_text\": true,\n  \"iab_categories\": true,\n  \"language_code\": \"en_us\",\n  \"language_detection\": false,\n  \"punctuate\": true,\n  \"redact_pii\": true,\n  \"redact_pii_audio\": true,\n  \"redact_pii_audio_quality\": \"mp3\",\n  \"redact_pii_policies\": [\n    \"us_social_security_number\",\n    \"credit_card_number\"\n  ],\n  \"redact_pii_sub\": \"hash\",\n  \"sentiment_analysis\": true,\n  \"speaker_labels\": true,\n  \"speakers_expected\": 2,\n  \"speech_threshold\": 0.5,\n  \"summarization\": true,\n  \"summary_model\": \"informative\",\n  \"summary_type\": \"bullets\",\n  \"topics\": [\n    \"topics\"\n  ],\n  \"webhook_auth_header_name\": \"webhook-secret\",\n  \"webhook_auth_header_value\": \"webhook-secret-value\",\n  \"webhook_url\": \"https://your-webhook-url/path\",\n  \"word_boost\": [\n    \"aws\",\n    \"azure\",\n    \"google cloud\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "audio_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/transcript \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"audio_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.get": {
        "id": "endpoint_transcripts.get",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Get the transcript resource. The transcript is ready when the \"status\" is \"completed\".",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:Transcript"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/transcript_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": "transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "9ea68fd3-f953-42c1-9742-976c447fb463",
                "language_model": "assemblyai_default",
                "acoustic_model": "assemblyai_default",
                "status": "completed",
                "audio_url": "https://github.com/AssemblyAI-Examples/audio-examples/raw/main/20230607_me_canadian_wildfires.mp3",
                "webhook_auth": true,
                "auto_highlights": true,
                "redact_pii": true,
                "summarization": true,
                "language_code": "en_us",
                "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning. What is it about the conditions right now that have caused this round of wildfires to affect so many people so far away? Well, there's a couple of things. The season has been pretty dry already. And then the fact that we're getting hit in the US. Is because there's a couple of weather systems that are essentially channeling the smoke from those Canadian wildfires through Pennsylvania into the Mid Atlantic and the Northeast and kind of just dropping the smoke there. So what is it in this haze that makes it harmful? And I'm assuming it is harmful. It is. The levels outside right now in Baltimore are considered unhealthy. And most of that is due to what's called particulate matter, which are tiny particles, microscopic smaller than the width of your hair that can get into your lungs and impact your respiratory system, your cardiovascular system, and even your neurological your brain. What makes this particularly harmful? Is it the volume of particulant? Is it something in particular? What is it exactly? Can you just drill down on that a little bit more? Yeah. So the concentration of particulate matter I was looking at some of the monitors that we have was reaching levels of what are, in science, big 150 micrograms per meter cubed, which is more than ten times what the annual average should be and about four times higher than what you're supposed to have on a 24 hours average. And so the concentrations of these particles in the air are just much, much higher than we typically see. And exposure to those high levels can lead to a host of health problems. And who is most vulnerable? I noticed that in New York City, for example, they're canceling outdoor activities. And so here it is in the early days of summer, and they have to keep all the kids inside. So who tends to be vulnerable in a situation like this? It's the youngest. So children, obviously, whose bodies are still developing. The elderly, who are their bodies are more in decline and they're more susceptible to the health impacts of breathing, the poor air quality. And then people who have preexisting health conditions, people with respiratory conditions or heart conditions can be triggered by high levels of air pollution. Could this get worse? That's a good question. In some areas, it's much worse than others. And it just depends on kind of where the smoke is concentrated. I think New York has some of the higher concentrations right now, but that's going to change as that air moves away from the New York area. But over the course of the next few days, we will see different areas being hit at different times with the highest concentrations. I was going to ask you about more fires start burning. I don't expect the concentrations to go up too much higher. I was going to ask you how and you started to answer this, but how much longer could this last? Or forgive me if I'm asking you to speculate, but what do you think? Well, I think the fires are going to burn for a little bit longer, but the key for us in the US. Is the weather system changing. And so right now, it's kind of the weather systems that are pulling that air into our mid Atlantic and Northeast region. As those weather systems change and shift, we'll see that smoke going elsewhere and not impact us in this region as much. And so I think that's going to be the defining factor. And I think the next couple of days we're going to see a shift in that weather pattern and start to push the smoke away from where we are. And finally, with the impacts of climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences or circumstances? I mean, that is one of the predictions for climate change. Looking into the future, the fire season is starting earlier and lasting longer, and we're seeing more frequent fires. So, yeah, this is probably something that we'll be seeing more frequently. This tends to be much more of an issue in the Western US. So the eastern US. Getting hit right now is a little bit new. But yeah, I think with climate change moving forward, this is something that is going to happen more frequently. That's Peter De Carlo, associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University. Sergeant Carlo, thanks so much for joining us and sharing this expertise with us. Thank you for having me.",
                "words": [
                  {
                    "confidence": 0.97465,
                    "start": 250,
                    "end": 650,
                    "text": "Smoke",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99999,
                    "start": 730,
                    "end": 1022,
                    "text": "from",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99844,
                    "start": 1076,
                    "end": 1418,
                    "text": "hundreds",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.84,
                    "start": 1434,
                    "end": 1614,
                    "text": "of",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.89572,
                    "start": 1652,
                    "end": 2346,
                    "text": "wildfires",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99994,
                    "start": 2378,
                    "end": 2526,
                    "text": "in",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.93953,
                    "start": 2548,
                    "end": 3130,
                    "text": "Canada",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.999,
                    "start": 3210,
                    "end": 3454,
                    "text": "is",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.74794,
                    "start": 3492,
                    "end": 3946,
                    "text": "triggering",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 1,
                    "start": 3978,
                    "end": 4174,
                    "text": "air",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.88077,
                    "start": 4212,
                    "end": 4558,
                    "text": "quality",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.94814,
                    "start": 4644,
                    "end": 5114,
                    "text": "alerts",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99726,
                    "start": 5162,
                    "end": 5466,
                    "text": "throughout",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.79,
                    "start": 5498,
                    "end": 5694,
                    "text": "the",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.89,
                    "start": 5732,
                    "end": 6382,
                    "text": "US.",
                    "speaker": "speaker"
                  }
                ],
                "utterances": [
                  {
                    "confidence": 0.9359033333333334,
                    "start": 250,
                    "end": 26950,
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor.",
                    "words": [
                      {
                        "confidence": 0.97503,
                        "start": 250,
                        "end": 650,
                        "text": "Smoke",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99999,
                        "start": 730,
                        "end": 1022,
                        "text": "from",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99843,
                        "start": 1076,
                        "end": 1418,
                        "text": "hundreds",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.85,
                        "start": 1434,
                        "end": 1614,
                        "text": "of",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.89657,
                        "start": 1652,
                        "end": 2346,
                        "text": "wildfires",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99994,
                        "start": 2378,
                        "end": 2526,
                        "text": "in",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.93864,
                        "start": 2548,
                        "end": 3130,
                        "text": "Canada",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.999,
                        "start": 3210,
                        "end": 3454,
                        "text": "is",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.75366,
                        "start": 3492,
                        "end": 3946,
                        "text": "triggering",
                        "speaker": "A"
                      },
                      {
                        "confidence": 1,
                        "start": 3978,
                        "end": 4174,
                        "text": "air",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.87745,
                        "start": 4212,
                        "end": 4558,
                        "text": "quality",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.94739,
                        "start": 4644,
                        "end": 5114,
                        "text": "alerts",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99726,
                        "start": 5162,
                        "end": 5466,
                        "text": "throughout",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.79,
                        "start": 5498,
                        "end": 5694,
                        "text": "the",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.88,
                        "start": 5732,
                        "end": 6382,
                        "text": "US.",
                        "speaker": "A"
                      }
                    ],
                    "speaker": "A"
                  }
                ],
                "confidence": 0.9404651451800253,
                "audio_duration": 281,
                "punctuate": true,
                "format_text": true,
                "dual_channel": false,
                "speech_model": "best",
                "webhook_url": "https://your-webhook-url.tld/path",
                "webhook_status_code": 200,
                "webhook_auth_header_name": "webhook-secret",
                "speed_boost": true,
                "auto_highlights_result": {
                  "status": "success",
                  "results": [
                    {
                      "count": 1,
                      "rank": 0.08,
                      "text": "air quality alerts",
                      "timestamps": [
                        {
                          "start": 3978,
                          "end": 5114
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.08,
                      "text": "wide ranging air quality consequences",
                      "timestamps": [
                        {
                          "start": 235388,
                          "end": 238694
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.07,
                      "text": "more wildfires",
                      "timestamps": [
                        {
                          "start": 230972,
                          "end": 232354
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.07,
                      "text": "air pollution",
                      "timestamps": [
                        {
                          "start": 156004,
                          "end": 156910
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.07,
                      "text": "weather systems",
                      "timestamps": [
                        {
                          "start": 47344,
                          "end": 47958
                        },
                        {
                          "start": 205268,
                          "end": 205818
                        },
                        {
                          "start": 211588,
                          "end": 213434
                        }
                      ]
                    },
                    {
                      "count": 2,
                      "rank": 0.06,
                      "text": "high levels",
                      "timestamps": [
                        {
                          "start": 121128,
                          "end": 121646
                        },
                        {
                          "start": 155412,
                          "end": 155866
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.06,
                      "text": "health conditions",
                      "timestamps": [
                        {
                          "start": 152138,
                          "end": 152666
                        }
                      ]
                    },
                    {
                      "count": 2,
                      "rank": 0.06,
                      "text": "Peter de Carlo",
                      "timestamps": [
                        {
                          "start": 18948,
                          "end": 19930
                        },
                        {
                          "start": 268298,
                          "end": 269194
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.06,
                      "text": "New York City",
                      "timestamps": [
                        {
                          "start": 125768,
                          "end": 126274
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "respiratory conditions",
                      "timestamps": [
                        {
                          "start": 152964,
                          "end": 153786
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.05,
                      "text": "New York",
                      "timestamps": [
                        {
                          "start": 125768,
                          "end": 126034
                        },
                        {
                          "start": 171448,
                          "end": 171938
                        },
                        {
                          "start": 176008,
                          "end": 176322
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.05,
                      "text": "climate change",
                      "timestamps": [
                        {
                          "start": 229548,
                          "end": 230230
                        },
                        {
                          "start": 244576,
                          "end": 245162
                        },
                        {
                          "start": 263348,
                          "end": 263950
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "Johns Hopkins University Varsity",
                      "timestamps": [
                        {
                          "start": 23972,
                          "end": 25490
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "heart conditions",
                      "timestamps": [
                        {
                          "start": 153988,
                          "end": 154506
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "air quality warnings",
                      "timestamps": [
                        {
                          "start": 12308,
                          "end": 13434
                        }
                      ]
                    }
                  ]
                },
                "audio_start_from": 10,
                "audio_end_at": 280,
                "word_boost": [
                  "aws",
                  "azure",
                  "google cloud"
                ],
                "boost_param": "high",
                "filter_profanity": true,
                "redact_pii_audio": true,
                "redact_pii_audio_quality": "mp3",
                "redact_pii_policies": [
                  "us_social_security_number",
                  "credit_card_number"
                ],
                "redact_pii_sub": "hash",
                "speaker_labels": true,
                "speakers_expected": 2,
                "content_safety": true,
                "content_safety_labels": {
                  "status": "success",
                  "results": [
                    {
                      "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning.",
                      "labels": [
                        {
                          "label": "disasters",
                          "confidence": 0.8142836093902588,
                          "severity": 0.4093044400215149
                        }
                      ],
                      "sentences_idx_start": 0,
                      "sentences_idx_end": 5,
                      "timestamp": {
                        "start": 250,
                        "end": 28840
                      }
                    }
                  ],
                  "summary": {
                    "disasters": 0.9940800441842205,
                    "health_issues": 0.9216489289040967
                  },
                  "severity_score_summary": {
                    "disasters": {
                      "low": 0.5733263024656846,
                      "medium": 0.42667369753431533,
                      "high": 0
                    },
                    "health_issues": {
                      "low": 0.22863814977924785,
                      "medium": 0.45014154926938227,
                      "high": 0.32122030095136983
                    }
                  }
                },
                "iab_categories": true,
                "iab_categories_result": {
                  "status": "success",
                  "results": [
                    {
                      "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning.",
                      "labels": [
                        {
                          "relevance": 0.988274097442627,
                          "label": "Home&Garden>IndoorEnvironmentalQuality"
                        },
                        {
                          "relevance": 0.5821335911750793,
                          "label": "NewsAndPolitics>Weather"
                        },
                        {
                          "relevance": 0.0042327106930315495,
                          "label": "MedicalHealth>DiseasesAndConditions>LungAndRespiratoryHealth"
                        },
                        {
                          "relevance": 0.0033971222583204508,
                          "label": "NewsAndPolitics>Disasters"
                        },
                        {
                          "relevance": 0.002469958271831274,
                          "label": "BusinessAndFinance>Business>GreenSolutions"
                        },
                        {
                          "relevance": 0.0014376690378412604,
                          "label": "MedicalHealth>DiseasesAndConditions>Cancer"
                        },
                        {
                          "relevance": 0.0014294233405962586,
                          "label": "Science>Environment"
                        },
                        {
                          "relevance": 0.001234519761055708,
                          "label": "Travel>TravelLocations>PolarTravel"
                        },
                        {
                          "relevance": 0.0010231725173071027,
                          "label": "MedicalHealth>DiseasesAndConditions>ColdAndFlu"
                        },
                        {
                          "relevance": 0.0007445293595083058,
                          "label": "BusinessAndFinance>Industries>PowerAndEnergyIndustry"
                        }
                      ],
                      "timestamp": {
                        "start": 250,
                        "end": 28840
                      }
                    }
                  ],
                  "summary": {
                    "NewsAndPolitics>Weather": 1,
                    "Home&Garden>IndoorEnvironmentalQuality": 0.9043831825256348,
                    "Science>Environment": 0.16117265820503235,
                    "BusinessAndFinance>Industries>EnvironmentalServicesIndustry": 0.14393523335456848,
                    "MedicalHealth>DiseasesAndConditions>LungAndRespiratoryHealth": 0.11401086300611496,
                    "BusinessAndFinance>Business>GreenSolutions": 0.06348437070846558,
                    "NewsAndPolitics>Disasters": 0.05041387677192688,
                    "Travel>TravelLocations>PolarTravel": 0.01308488193899393,
                    "HealthyLiving": 0.008222488686442375,
                    "MedicalHealth>DiseasesAndConditions>ColdAndFlu": 0.0022315620444715023,
                    "MedicalHealth>DiseasesAndConditions>HeartAndCardiovascularDiseases": 0.00213034451007843,
                    "HealthyLiving>Wellness>SmokingCessation": 0.001540527562610805,
                    "MedicalHealth>DiseasesAndConditions>Injuries": 0.0013950627762824297,
                    "BusinessAndFinance>Industries>PowerAndEnergyIndustry": 0.0012570273829624057,
                    "MedicalHealth>DiseasesAndConditions>Cancer": 0.001097781932912767,
                    "MedicalHealth>DiseasesAndConditions>Allergies": 0.0010148967849090695,
                    "MedicalHealth>DiseasesAndConditions>MentalHealth": 0.000717321818228811,
                    "Style&Fashion>PersonalCare>DeodorantAndAntiperspirant": 0.0006022014422342181,
                    "Technology&Computing>Computing>ComputerNetworking": 0.0005461975233629346,
                    "MedicalHealth>DiseasesAndConditions>Injuries>FirstAid": 0.0004885646631009877
                  }
                },
                "language_detection": false,
                "custom_spelling": [
                  {
                    "from": [
                      "dicarlo"
                    ],
                    "to": "Decarlo"
                  }
                ],
                "auto_chapters": true,
                "chapters": [
                  {
                    "gist": "Smoggy air quality alerts across US",
                    "headline": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts across US",
                    "summary": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. In some places, the air quality warnings include the warning to stay inside.",
                    "start": 250,
                    "end": 28840
                  },
                  {
                    "gist": "What is it about the conditions right now that have caused this round",
                    "headline": "High particulate matter in wildfire smoke can lead to serious health problems",
                    "summary": "Air pollution levels in Baltimore are considered unhealthy. Exposure to high levels can lead to a host of health problems. With climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences?",
                    "start": 29610,
                    "end": 280340
                  }
                ],
                "summary_type": "bullets",
                "summary_model": "informative",
                "summary": "- Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. In some places, the air quality warnings include the warning to stay inside.\\n- Air pollution levels in Baltimore are considered unhealthy. Exposure to high levels can lead to a host of health problems. With climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences?",
                "custom_topics": true,
                "topics": [
                  "topics"
                ],
                "disfluencies": false,
                "sentiment_analysis": true,
                "sentiment_analysis_results": [
                  {
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US.",
                    "start": 250,
                    "end": 6350,
                    "sentiment": "NEGATIVE",
                    "confidence": 0.8181032538414001,
                    "speaker": "speaker"
                  }
                ],
                "entity_detection": true,
                "entities": [
                  {
                    "entity_type": "location",
                    "text": "Canada",
                    "start": 2548,
                    "end": 3130
                  },
                  {
                    "entity_type": "location",
                    "text": "the US",
                    "start": 5498,
                    "end": 6382
                  },
                  {
                    "entity_type": "location",
                    "text": "Maine",
                    "start": 7492,
                    "end": 7914
                  },
                  {
                    "entity_type": "location",
                    "text": "Maryland",
                    "start": 8212,
                    "end": 8634
                  },
                  {
                    "entity_type": "location",
                    "text": "Minnesota",
                    "start": 8932,
                    "end": 9578
                  },
                  {
                    "entity_type": "person_name",
                    "text": "Peter de Carlo",
                    "start": 18948,
                    "end": 19930
                  },
                  {
                    "entity_type": "occupation",
                    "text": "associate professor",
                    "start": 20292,
                    "end": 21194
                  },
                  {
                    "entity_type": "organization",
                    "text": "Department of Environmental Health and Engineering",
                    "start": 21508,
                    "end": 23706
                  },
                  {
                    "entity_type": "organization",
                    "text": "Johns Hopkins University Varsity",
                    "start": 23972,
                    "end": 25490
                  },
                  {
                    "entity_type": "occupation",
                    "text": "professor",
                    "start": 26076,
                    "end": 26950
                  },
                  {
                    "entity_type": "location",
                    "text": "the US",
                    "start": 45184,
                    "end": 45898
                  },
                  {
                    "entity_type": "nationality",
                    "text": "Canadian",
                    "start": 49728,
                    "end": 50086
                  }
                ],
                "speech_threshold": 0.5,
                "throttled": true,
                "error": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.delete": {
        "id": "endpoint_transcripts.delete",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Delete the transcript.\nDeleting does not delete the resource itself, but removes the data from the resource and marks it as deleted.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:Transcript"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/transcript_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": "transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "9ea68fd3-f953-42c1-9742-976c447fb463",
                "language_model": "assemblyai_default",
                "acoustic_model": "assemblyai_default",
                "status": "completed",
                "audio_url": "https://github.com/AssemblyAI-Examples/audio-examples/raw/main/20230607_me_canadian_wildfires.mp3",
                "webhook_auth": true,
                "auto_highlights": true,
                "redact_pii": true,
                "summarization": true,
                "language_code": "en_us",
                "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning. What is it about the conditions right now that have caused this round of wildfires to affect so many people so far away? Well, there's a couple of things. The season has been pretty dry already. And then the fact that we're getting hit in the US. Is because there's a couple of weather systems that are essentially channeling the smoke from those Canadian wildfires through Pennsylvania into the Mid Atlantic and the Northeast and kind of just dropping the smoke there. So what is it in this haze that makes it harmful? And I'm assuming it is harmful. It is. The levels outside right now in Baltimore are considered unhealthy. And most of that is due to what's called particulate matter, which are tiny particles, microscopic smaller than the width of your hair that can get into your lungs and impact your respiratory system, your cardiovascular system, and even your neurological your brain. What makes this particularly harmful? Is it the volume of particulant? Is it something in particular? What is it exactly? Can you just drill down on that a little bit more? Yeah. So the concentration of particulate matter I was looking at some of the monitors that we have was reaching levels of what are, in science, big 150 micrograms per meter cubed, which is more than ten times what the annual average should be and about four times higher than what you're supposed to have on a 24 hours average. And so the concentrations of these particles in the air are just much, much higher than we typically see. And exposure to those high levels can lead to a host of health problems. And who is most vulnerable? I noticed that in New York City, for example, they're canceling outdoor activities. And so here it is in the early days of summer, and they have to keep all the kids inside. So who tends to be vulnerable in a situation like this? It's the youngest. So children, obviously, whose bodies are still developing. The elderly, who are their bodies are more in decline and they're more susceptible to the health impacts of breathing, the poor air quality. And then people who have preexisting health conditions, people with respiratory conditions or heart conditions can be triggered by high levels of air pollution. Could this get worse? That's a good question. In some areas, it's much worse than others. And it just depends on kind of where the smoke is concentrated. I think New York has some of the higher concentrations right now, but that's going to change as that air moves away from the New York area. But over the course of the next few days, we will see different areas being hit at different times with the highest concentrations. I was going to ask you about more fires start burning. I don't expect the concentrations to go up too much higher. I was going to ask you how and you started to answer this, but how much longer could this last? Or forgive me if I'm asking you to speculate, but what do you think? Well, I think the fires are going to burn for a little bit longer, but the key for us in the US. Is the weather system changing. And so right now, it's kind of the weather systems that are pulling that air into our mid Atlantic and Northeast region. As those weather systems change and shift, we'll see that smoke going elsewhere and not impact us in this region as much. And so I think that's going to be the defining factor. And I think the next couple of days we're going to see a shift in that weather pattern and start to push the smoke away from where we are. And finally, with the impacts of climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences or circumstances? I mean, that is one of the predictions for climate change. Looking into the future, the fire season is starting earlier and lasting longer, and we're seeing more frequent fires. So, yeah, this is probably something that we'll be seeing more frequently. This tends to be much more of an issue in the Western US. So the eastern US. Getting hit right now is a little bit new. But yeah, I think with climate change moving forward, this is something that is going to happen more frequently. That's Peter De Carlo, associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University. Sergeant Carlo, thanks so much for joining us and sharing this expertise with us. Thank you for having me.",
                "words": [
                  {
                    "confidence": 0.97465,
                    "start": 250,
                    "end": 650,
                    "text": "Smoke",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99999,
                    "start": 730,
                    "end": 1022,
                    "text": "from",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99844,
                    "start": 1076,
                    "end": 1418,
                    "text": "hundreds",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.84,
                    "start": 1434,
                    "end": 1614,
                    "text": "of",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.89572,
                    "start": 1652,
                    "end": 2346,
                    "text": "wildfires",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99994,
                    "start": 2378,
                    "end": 2526,
                    "text": "in",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.93953,
                    "start": 2548,
                    "end": 3130,
                    "text": "Canada",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.999,
                    "start": 3210,
                    "end": 3454,
                    "text": "is",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.74794,
                    "start": 3492,
                    "end": 3946,
                    "text": "triggering",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 1,
                    "start": 3978,
                    "end": 4174,
                    "text": "air",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.88077,
                    "start": 4212,
                    "end": 4558,
                    "text": "quality",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.94814,
                    "start": 4644,
                    "end": 5114,
                    "text": "alerts",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.99726,
                    "start": 5162,
                    "end": 5466,
                    "text": "throughout",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.79,
                    "start": 5498,
                    "end": 5694,
                    "text": "the",
                    "speaker": "speaker"
                  },
                  {
                    "confidence": 0.89,
                    "start": 5732,
                    "end": 6382,
                    "text": "US.",
                    "speaker": "speaker"
                  }
                ],
                "utterances": [
                  {
                    "confidence": 0.9359033333333334,
                    "start": 250,
                    "end": 26950,
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor.",
                    "words": [
                      {
                        "confidence": 0.97503,
                        "start": 250,
                        "end": 650,
                        "text": "Smoke",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99999,
                        "start": 730,
                        "end": 1022,
                        "text": "from",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99843,
                        "start": 1076,
                        "end": 1418,
                        "text": "hundreds",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.85,
                        "start": 1434,
                        "end": 1614,
                        "text": "of",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.89657,
                        "start": 1652,
                        "end": 2346,
                        "text": "wildfires",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99994,
                        "start": 2378,
                        "end": 2526,
                        "text": "in",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.93864,
                        "start": 2548,
                        "end": 3130,
                        "text": "Canada",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.999,
                        "start": 3210,
                        "end": 3454,
                        "text": "is",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.75366,
                        "start": 3492,
                        "end": 3946,
                        "text": "triggering",
                        "speaker": "A"
                      },
                      {
                        "confidence": 1,
                        "start": 3978,
                        "end": 4174,
                        "text": "air",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.87745,
                        "start": 4212,
                        "end": 4558,
                        "text": "quality",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.94739,
                        "start": 4644,
                        "end": 5114,
                        "text": "alerts",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.99726,
                        "start": 5162,
                        "end": 5466,
                        "text": "throughout",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.79,
                        "start": 5498,
                        "end": 5694,
                        "text": "the",
                        "speaker": "A"
                      },
                      {
                        "confidence": 0.88,
                        "start": 5732,
                        "end": 6382,
                        "text": "US.",
                        "speaker": "A"
                      }
                    ],
                    "speaker": "A"
                  }
                ],
                "confidence": 0.9404651451800253,
                "audio_duration": 281,
                "punctuate": true,
                "format_text": true,
                "dual_channel": false,
                "speech_model": "best",
                "webhook_url": "https://your-webhook-url.tld/path",
                "webhook_status_code": 200,
                "webhook_auth_header_name": "webhook-secret",
                "speed_boost": true,
                "auto_highlights_result": {
                  "status": "success",
                  "results": [
                    {
                      "count": 1,
                      "rank": 0.08,
                      "text": "air quality alerts",
                      "timestamps": [
                        {
                          "start": 3978,
                          "end": 5114
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.08,
                      "text": "wide ranging air quality consequences",
                      "timestamps": [
                        {
                          "start": 235388,
                          "end": 238694
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.07,
                      "text": "more wildfires",
                      "timestamps": [
                        {
                          "start": 230972,
                          "end": 232354
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.07,
                      "text": "air pollution",
                      "timestamps": [
                        {
                          "start": 156004,
                          "end": 156910
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.07,
                      "text": "weather systems",
                      "timestamps": [
                        {
                          "start": 47344,
                          "end": 47958
                        },
                        {
                          "start": 205268,
                          "end": 205818
                        },
                        {
                          "start": 211588,
                          "end": 213434
                        }
                      ]
                    },
                    {
                      "count": 2,
                      "rank": 0.06,
                      "text": "high levels",
                      "timestamps": [
                        {
                          "start": 121128,
                          "end": 121646
                        },
                        {
                          "start": 155412,
                          "end": 155866
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.06,
                      "text": "health conditions",
                      "timestamps": [
                        {
                          "start": 152138,
                          "end": 152666
                        }
                      ]
                    },
                    {
                      "count": 2,
                      "rank": 0.06,
                      "text": "Peter de Carlo",
                      "timestamps": [
                        {
                          "start": 18948,
                          "end": 19930
                        },
                        {
                          "start": 268298,
                          "end": 269194
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.06,
                      "text": "New York City",
                      "timestamps": [
                        {
                          "start": 125768,
                          "end": 126274
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "respiratory conditions",
                      "timestamps": [
                        {
                          "start": 152964,
                          "end": 153786
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.05,
                      "text": "New York",
                      "timestamps": [
                        {
                          "start": 125768,
                          "end": 126034
                        },
                        {
                          "start": 171448,
                          "end": 171938
                        },
                        {
                          "start": 176008,
                          "end": 176322
                        }
                      ]
                    },
                    {
                      "count": 3,
                      "rank": 0.05,
                      "text": "climate change",
                      "timestamps": [
                        {
                          "start": 229548,
                          "end": 230230
                        },
                        {
                          "start": 244576,
                          "end": 245162
                        },
                        {
                          "start": 263348,
                          "end": 263950
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "Johns Hopkins University Varsity",
                      "timestamps": [
                        {
                          "start": 23972,
                          "end": 25490
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "heart conditions",
                      "timestamps": [
                        {
                          "start": 153988,
                          "end": 154506
                        }
                      ]
                    },
                    {
                      "count": 1,
                      "rank": 0.05,
                      "text": "air quality warnings",
                      "timestamps": [
                        {
                          "start": 12308,
                          "end": 13434
                        }
                      ]
                    }
                  ]
                },
                "audio_start_from": 10,
                "audio_end_at": 280,
                "word_boost": [
                  "aws",
                  "azure",
                  "google cloud"
                ],
                "boost_param": "high",
                "filter_profanity": true,
                "redact_pii_audio": true,
                "redact_pii_audio_quality": "mp3",
                "redact_pii_policies": [
                  "us_social_security_number",
                  "credit_card_number"
                ],
                "redact_pii_sub": "hash",
                "speaker_labels": true,
                "speakers_expected": 2,
                "content_safety": true,
                "content_safety_labels": {
                  "status": "success",
                  "results": [
                    {
                      "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning.",
                      "labels": [
                        {
                          "label": "disasters",
                          "confidence": 0.8142836093902588,
                          "severity": 0.4093044400215149
                        }
                      ],
                      "sentences_idx_start": 0,
                      "sentences_idx_end": 5,
                      "timestamp": {
                        "start": 250,
                        "end": 28840
                      }
                    }
                  ],
                  "summary": {
                    "disasters": 0.9940800441842205,
                    "health_issues": 0.9216489289040967
                  },
                  "severity_score_summary": {
                    "disasters": {
                      "low": 0.5733263024656846,
                      "medium": 0.42667369753431533,
                      "high": 0
                    },
                    "health_issues": {
                      "low": 0.22863814977924785,
                      "medium": 0.45014154926938227,
                      "high": 0.32122030095136983
                    }
                  }
                },
                "iab_categories": true,
                "iab_categories_result": {
                  "status": "success",
                  "results": [
                    {
                      "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter de Carlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University Varsity. Good morning, professor. Good morning.",
                      "labels": [
                        {
                          "relevance": 0.988274097442627,
                          "label": "Home&Garden>IndoorEnvironmentalQuality"
                        },
                        {
                          "relevance": 0.5821335911750793,
                          "label": "NewsAndPolitics>Weather"
                        },
                        {
                          "relevance": 0.0042327106930315495,
                          "label": "MedicalHealth>DiseasesAndConditions>LungAndRespiratoryHealth"
                        },
                        {
                          "relevance": 0.0033971222583204508,
                          "label": "NewsAndPolitics>Disasters"
                        },
                        {
                          "relevance": 0.002469958271831274,
                          "label": "BusinessAndFinance>Business>GreenSolutions"
                        },
                        {
                          "relevance": 0.0014376690378412604,
                          "label": "MedicalHealth>DiseasesAndConditions>Cancer"
                        },
                        {
                          "relevance": 0.0014294233405962586,
                          "label": "Science>Environment"
                        },
                        {
                          "relevance": 0.001234519761055708,
                          "label": "Travel>TravelLocations>PolarTravel"
                        },
                        {
                          "relevance": 0.0010231725173071027,
                          "label": "MedicalHealth>DiseasesAndConditions>ColdAndFlu"
                        },
                        {
                          "relevance": 0.0007445293595083058,
                          "label": "BusinessAndFinance>Industries>PowerAndEnergyIndustry"
                        }
                      ],
                      "timestamp": {
                        "start": 250,
                        "end": 28840
                      }
                    }
                  ],
                  "summary": {
                    "NewsAndPolitics>Weather": 1,
                    "Home&Garden>IndoorEnvironmentalQuality": 0.9043831825256348,
                    "Science>Environment": 0.16117265820503235,
                    "BusinessAndFinance>Industries>EnvironmentalServicesIndustry": 0.14393523335456848,
                    "MedicalHealth>DiseasesAndConditions>LungAndRespiratoryHealth": 0.11401086300611496,
                    "BusinessAndFinance>Business>GreenSolutions": 0.06348437070846558,
                    "NewsAndPolitics>Disasters": 0.05041387677192688,
                    "Travel>TravelLocations>PolarTravel": 0.01308488193899393,
                    "HealthyLiving": 0.008222488686442375,
                    "MedicalHealth>DiseasesAndConditions>ColdAndFlu": 0.0022315620444715023,
                    "MedicalHealth>DiseasesAndConditions>HeartAndCardiovascularDiseases": 0.00213034451007843,
                    "HealthyLiving>Wellness>SmokingCessation": 0.001540527562610805,
                    "MedicalHealth>DiseasesAndConditions>Injuries": 0.0013950627762824297,
                    "BusinessAndFinance>Industries>PowerAndEnergyIndustry": 0.0012570273829624057,
                    "MedicalHealth>DiseasesAndConditions>Cancer": 0.001097781932912767,
                    "MedicalHealth>DiseasesAndConditions>Allergies": 0.0010148967849090695,
                    "MedicalHealth>DiseasesAndConditions>MentalHealth": 0.000717321818228811,
                    "Style&Fashion>PersonalCare>DeodorantAndAntiperspirant": 0.0006022014422342181,
                    "Technology&Computing>Computing>ComputerNetworking": 0.0005461975233629346,
                    "MedicalHealth>DiseasesAndConditions>Injuries>FirstAid": 0.0004885646631009877
                  }
                },
                "language_detection": false,
                "custom_spelling": [
                  {
                    "from": [
                      "dicarlo"
                    ],
                    "to": "Decarlo"
                  }
                ],
                "auto_chapters": true,
                "chapters": [
                  {
                    "gist": "Smoggy air quality alerts across US",
                    "headline": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts across US",
                    "summary": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. In some places, the air quality warnings include the warning to stay inside.",
                    "start": 250,
                    "end": 28840
                  },
                  {
                    "gist": "What is it about the conditions right now that have caused this round",
                    "headline": "High particulate matter in wildfire smoke can lead to serious health problems",
                    "summary": "Air pollution levels in Baltimore are considered unhealthy. Exposure to high levels can lead to a host of health problems. With climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences?",
                    "start": 29610,
                    "end": 280340
                  }
                ],
                "summary_type": "bullets",
                "summary_model": "informative",
                "summary": "- Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. In some places, the air quality warnings include the warning to stay inside.\\n- Air pollution levels in Baltimore are considered unhealthy. Exposure to high levels can lead to a host of health problems. With climate change, we are seeing more wildfires. Will we be seeing more of these kinds of wide ranging air quality consequences?",
                "custom_topics": true,
                "topics": [
                  "topics"
                ],
                "disfluencies": false,
                "sentiment_analysis": true,
                "sentiment_analysis_results": [
                  {
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US.",
                    "start": 250,
                    "end": 6350,
                    "sentiment": "NEGATIVE",
                    "confidence": 0.8181032538414001,
                    "speaker": "speaker"
                  }
                ],
                "entity_detection": true,
                "entities": [
                  {
                    "entity_type": "location",
                    "text": "Canada",
                    "start": 2548,
                    "end": 3130
                  },
                  {
                    "entity_type": "location",
                    "text": "the US",
                    "start": 5498,
                    "end": 6382
                  },
                  {
                    "entity_type": "location",
                    "text": "Maine",
                    "start": 7492,
                    "end": 7914
                  },
                  {
                    "entity_type": "location",
                    "text": "Maryland",
                    "start": 8212,
                    "end": 8634
                  },
                  {
                    "entity_type": "location",
                    "text": "Minnesota",
                    "start": 8932,
                    "end": 9578
                  },
                  {
                    "entity_type": "person_name",
                    "text": "Peter de Carlo",
                    "start": 18948,
                    "end": 19930
                  },
                  {
                    "entity_type": "occupation",
                    "text": "associate professor",
                    "start": 20292,
                    "end": 21194
                  },
                  {
                    "entity_type": "organization",
                    "text": "Department of Environmental Health and Engineering",
                    "start": 21508,
                    "end": 23706
                  },
                  {
                    "entity_type": "organization",
                    "text": "Johns Hopkins University Varsity",
                    "start": 23972,
                    "end": 25490
                  },
                  {
                    "entity_type": "occupation",
                    "text": "professor",
                    "start": 26076,
                    "end": 26950
                  },
                  {
                    "entity_type": "location",
                    "text": "the US",
                    "start": 45184,
                    "end": 45898
                  },
                  {
                    "entity_type": "nationality",
                    "text": "Canadian",
                    "start": 49728,
                    "end": 50086
                  }
                ],
                "speech_threshold": 0.5,
                "throttled": true,
                "error": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/v2/transcript/:transcript_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.getSubtitles": {
        "id": "endpoint_transcripts.getSubtitles",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Export your transcript in SRT or VTT format to use with a video player for subtitles and closed captions.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          },
          {
            "type": "literal",
            "value": "/"
          },
          {
            "type": "pathParameter",
            "value": "subtitle_format"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          },
          {
            "key": "subtitle_format",
            "valueShape": {
              "type": "id",
              "id": "type_transcripts:SubtitleFormat"
            },
            "description": "The format of the captions"
          }
        ],
        "queryParameters": [
          {
            "key": "chars_per_caption",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The maximum number of characters per caption"
          }
        ],
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/srt",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id",
              "subtitle_format": "srt"
            },
            "queryParameters": {
              "chars_per_caption": 0
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/srt \\\n     -H \"Authorization: <apiKey>\" \\\n     -d chars_per_caption=0",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.getSentences": {
        "id": "endpoint_transcripts.getSentences",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Get the transcript split by sentences. The API will attempt to semantically segment the transcript into sentences to create more reader-friendly transcripts.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          },
          {
            "type": "literal",
            "value": "/sentences"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:SentencesResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/transcript_id/sentences",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": "transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "d5a3d302-066e-43fb-b63b-8f57baf185db",
                "confidence": 0.9579390654205628,
                "audio_duration": 281,
                "sentences": [
                  {
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US.",
                    "start": 250,
                    "end": 6350,
                    "confidence": 0.72412,
                    "words": [
                      {
                        "confidence": 0.72412,
                        "start": 250,
                        "end": 650,
                        "text": "Smoke"
                      },
                      {
                        "confidence": 0.99996,
                        "start": 730,
                        "end": 1022,
                        "text": "from"
                      },
                      {
                        "confidence": 0.99992,
                        "start": 1076,
                        "end": 1466,
                        "text": "hundreds"
                      },
                      {
                        "confidence": 1,
                        "start": 1498,
                        "end": 1646,
                        "text": "of"
                      }
                    ],
                    "speaker": "speaker"
                  },
                  {
                    "text": "Skylines from Maine to Maryland to Minnesota are gray and smoggy.",
                    "start": 6500,
                    "end": 11050,
                    "confidence": 0.99819,
                    "words": [
                      {
                        "confidence": 0.99819,
                        "start": 6500,
                        "end": 7306,
                        "text": "Skylines"
                      },
                      {
                        "confidence": 0.99987,
                        "start": 7338,
                        "end": 7534,
                        "text": "from"
                      },
                      {
                        "confidence": 0.9972,
                        "start": 7572,
                        "end": 7962,
                        "text": "Maine"
                      },
                      {
                        "confidence": 1,
                        "start": 8026,
                        "end": 8206,
                        "text": "to"
                      },
                      {
                        "confidence": 0.5192,
                        "start": 8228,
                        "end": 8650,
                        "text": "Maryland"
                      },
                      {
                        "confidence": 1,
                        "start": 8730,
                        "end": 8926,
                        "text": "to"
                      }
                    ],
                    "speaker": "speaker"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/sentences",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/sentences \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.getParagraphs": {
        "id": "endpoint_transcripts.getParagraphs",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Get the transcript split by paragraphs. The API will attempt to semantically segment your transcript into paragraphs to create more reader-friendly transcripts.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          },
          {
            "type": "literal",
            "value": "/paragraphs"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:ParagraphsResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/transcript_id/paragraphs",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": "transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "d5a3d302-066e-43fb-b63b-8f57baf185db",
                "confidence": 0.9578730257009361,
                "audio_duration": 281,
                "paragraphs": [
                  {
                    "text": "Smoke from hundreds of wildfires in Canada is triggering air quality alerts throughout the US. Skylines from Maine to Maryland to Minnesota are gray and smoggy. And in some places, the air quality warnings include the warning to stay inside. We wanted to better understand what's happening here and why, so we called Peter Decarlo, an associate professor in the Department of Environmental Health and Engineering at Johns Hopkins University. Good morning, professor.",
                    "start": 250,
                    "end": 26950,
                    "confidence": 0.73033,
                    "words": [
                      {
                        "confidence": 0.73033,
                        "start": 250,
                        "end": 650,
                        "text": "Smoke"
                      },
                      {
                        "confidence": 1,
                        "start": 730,
                        "end": 1022,
                        "text": "from"
                      },
                      {
                        "confidence": 0.99992,
                        "start": 1076,
                        "end": 1466,
                        "text": "hundreds"
                      },
                      {
                        "confidence": 1,
                        "start": 1498,
                        "end": 1646,
                        "text": "of"
                      }
                    ],
                    "speaker": "speaker"
                  },
                  {
                    "text": "Good morning. So what is it about the conditions right now that have caused this round of wildfires to affect so many people so far away? Well, there's a couple of things. The season has been pretty dry already, and then the fact that we're getting hit in the US. Is because there's a couple of weather systems that are essentially channeling the smoke from those Canadian wildfires through Pennsylvania into the Mid Atlantic and the Northeast and kind of just dropping the smoke there.",
                    "start": 27850,
                    "end": 56190,
                    "confidence": 0.99667,
                    "words": [
                      {
                        "confidence": 0.99667,
                        "start": 27850,
                        "end": 28262,
                        "text": "Good"
                      },
                      {
                        "confidence": 0.99742,
                        "start": 28316,
                        "end": 28920,
                        "text": "morning."
                      },
                      {
                        "confidence": 0.94736,
                        "start": 29290,
                        "end": 29702,
                        "text": "So"
                      }
                    ],
                    "speaker": "speaker"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/paragraphs",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/paragraphs \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.wordSearch": {
        "id": "endpoint_transcripts.wordSearch",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Search through the transcript for keywords. You can search for individual words, numbers, or phrases containing up to five words or numbers.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          },
          {
            "type": "literal",
            "value": "/word-search"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          }
        ],
        "queryParameters": [
          {
            "key": "words",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Keywords to search for"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:WordSearchResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "string",
                "total_count": 0,
                "matches": [
                  {
                    "text": "string",
                    "count": 0,
                    "timestamps": [
                      [
                        0
                      ]
                    ],
                    "indexes": [
                      0
                    ]
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/word-search",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {
              "words": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.assemblyai.com/v2/transcript/:transcript_id/word-search \\\n     -H \"Authorization: <apiKey>\" \\\n     -d words=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_transcripts.getRedactedAudio": {
        "id": "endpoint_transcripts.getRedactedAudio",
        "namespace": [
          "subpackage_transcripts"
        ],
        "description": "Retrieve the redacted audio object containing the status and URL to the redacted audio.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/v2/transcript/"
          },
          {
            "type": "pathParameter",
            "value": "transcript_id"
          },
          {
            "type": "literal",
            "value": "/redacted-audio"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "transcript_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "ID of the transcript"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_transcripts:RedactedAudioResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/transcript/transcript_id/redacted-audio",
            "responseStatusCode": 200,
            "pathParameters": {
              "transcript_id": "transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "redacted_audio_ready",
                "redacted_audio_url": "https://s3.us-west-2.amazonaws.com/api.assembly.ai.usw2/redacted-audio/785efd9e-0e20-45e1-967b-3db17770ed9f.wav?AWSAccessKeyId=ASIAVASQFLPGLUP5JD7Y&Signature=z1r2MOA46esiiAmk%2FreBkL8rl6g%3D&x-amz-security-token=IQoJb3JpZ2luX2VjEPv%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJHMEUCIHxKoUJdd5P%2Fdy4WlfvRNppQtauTy7OuAb5azR2OIoYSAiEA8iPx4xAx0pbZztT4e7fGnzPS4phvNCnYKflIijUoxDsq%2BwMIMxAEGgwzNDQ4MzkyNDg4NDQiDJxsCgo0cDg789FV0CrYAwPK3CHbRHoNPFiQ%2FO6EdHZ4OSFRcS%2FDvDyHQRNnYNSwG4JB2mUMWEVw808JWTya%2But4wEcmPiUCVJMTvh70cxhILAxP84CBTuWGM%2Fszbj4tn1thjVsqovf9YZmP17OCFa77Bc9%2F9RwtRaABEqJ2eb6%2Bsir7w0MMzhe1z%2F%2B1PUKxicJAZasBv3Ova%2BTY2eNkPZHQ4Njie4X5sh05b%2BrKnz58E7GTQ1sHZQDYHZecwb5fP0B3LR0vuqNtK%2BdpMAxw5H7BinQ4rdccLmsLLMQeVn8jdRDZNEvsdmoeQL0y0qD%2BUcyGMJoAjMT4FnXhBhVxc3bgkVUbHlZMn48FNCYcmzM8UB9wGmSnr6iQoqEaFElfQVbvAzsW7lnlfLROZxMvGXyliobPYPSaYZlVYgHcIxeWuOAXRtEtmL2jbaX4ghCVgJBVO3BBzTgub2jB0KPU6lYZLLM4kf%2B8hKX8iyxSRc6ZVEefTcyruoDppjB028pA9q75hLH1CZwhfLoM%2F3z5f0aFCl05zQnaa10nbcKj0hERELf4FXqS8yWbSutlRcd7Rr9o8jN31QGUscpsuIvl%2FpyJcZmItX8nO%2FF0s1QjrIi11DLYD9YoOh7eVkN8eKKn5w4cHldVI2sw4NCPqgY6pQE%2BM9va2ad1%2BNrXeQ9t8K41lojTN0BFmM8ERD5fF77xcTlW8VdV%2FiJeLLHDvnYYWVKcga9hSROlmsqvMyn3Tmhz7KQbIepSAOKhcHM%2FyUaLfErvCtjXGwo8nsKForL7SKiGkaRCBmwfQtkSVP6m4tGT50YdGxakh54f8uyC55SbkElknRbpl5haiZ%2F82UddFBkdPcM3t0s7vwbEy%2BbilYyetOr6htc%3D&Expires=1698966551"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 400,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 401,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 404,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 429,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 500,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "error",
                "error": "string"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 503,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/transcript/:transcript_id/redacted-audio",
            "responseStatusCode": 504,
            "pathParameters": {
              "transcript_id": ":transcript_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.assemblyai.com/v2/transcript/:transcript_id/redacted-audio \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_lemur.task": {
        "id": "endpoint_lemur.task",
        "namespace": [
          "subpackage_lemur"
        ],
        "description": "Use the LeMUR task endpoint to input your own LLM prompt.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/lemur/v3/generate/task"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [
              "type_lemur:LemurBaseParams"
            ],
            "properties": [
              {
                "key": "prompt",
                "valueShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "description": "Your text to prompt the model to produce a desired output, including any context you want to pass into the model."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_lemur:LemurTaskResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "List all the locations affected by wildfires.",
                "context": "This is an interview about wildfires.",
                "final_model": "default",
                "max_output_size": 3000,
                "temperature": 0,
                "transcript_ids": [
                  "64nygnr62k-405c-4ae8-8a6b-d90b40ff3cce"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
                "response": "Based on the transcript, the following locations were mentioned as being affected by wildfire smoke from Canada:\n\n- Maine\n- Maryland\n- Minnesota\n- Mid Atlantic region\n- Northeast region\n- New York City\n- Baltimore\n"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"List all the locations affected by wildfires.\",\n  \"context\": \"This is an interview about wildfires.\",\n  \"final_model\": \"default\",\n  \"max_output_size\": 3000,\n  \"temperature\": 0,\n  \"transcript_ids\": [\n    \"64nygnr62k-405c-4ae8-8a6b-d90b40ff3cce\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/task",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "prompt": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/task \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"prompt\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_lemur.summary": {
        "id": "endpoint_lemur.summary",
        "namespace": [
          "subpackage_lemur"
        ],
        "description": "Custom Summary allows you to distill a piece of audio into a few impactful sentences.\nYou can give the model context to obtain more targeted results while outputting the results in a variety of formats described in human language.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/lemur/v3/generate/summary"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [
              "type_lemur:LemurBaseParams"
            ],
            "properties": [
              {
                "key": "answer_format",
                "valueShape": {
                  "type": "optional",
                  "shape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "How you want the summary to be returned. This can be any text. Examples: \"TLDR\", \"bullet points\"\n"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_lemur:LemurSummaryResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "context": "This is an interview about wildfires.",
                "final_model": "default",
                "max_output_size": 3000,
                "temperature": 0,
                "transcript_ids": [
                  "47b95ba5-8889-44d8-bc80-5de38306e582"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
                "response": "- Wildfires in Canada are sending smoke and air pollution across parts of the US, triggering air quality alerts from Maine to Minnesota. Concentrations of particulate matter have exceeded safety levels.\n\n- Weather systems are channeling the smoke through Pennsylvania into the Mid-Atlantic and Northeast regions. New York City has canceled outdoor activities to keep children and vulnerable groups indoors.\n\n- Very small particulate matter can enter the lungs and impact respiratory, cardiovascular and neurological health. Young children, the elderly and those with preexisting conditions are most at risk.\n\n- The conditions causing the poor air quality could get worse or shift to different areas in coming days depending on weather patterns. More wildfires may also contribute to higher concentrations.\n\n- Climate change is leading to longer and more severe fire seasons. Events of smoke traveling long distances and affecting air quality over wide areas will likely become more common in the future.\"\n"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"context\": \"This is an interview about wildfires.\",\n  \"final_model\": \"default\",\n  \"max_output_size\": 3000,\n  \"temperature\": 0,\n  \"transcript_ids\": [\n    \"47b95ba5-8889-44d8-bc80-5de38306e582\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/summary",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/summary \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_lemur.questionAnswer": {
        "id": "endpoint_lemur.questionAnswer",
        "namespace": [
          "subpackage_lemur"
        ],
        "description": "Question & Answer allows you to ask free-form questions about a single transcript or a group of transcripts.\nThe questions can be any whose answers you find useful, such as judging whether a caller is likely to become a customer or whether all items on a meeting's agenda were covered.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/lemur/v3/generate/question-answer"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [
              "type_lemur:LemurBaseParams"
            ],
            "properties": [
              {
                "key": "questions",
                "valueShape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_lemur:LemurQuestion"
                  }
                },
                "description": "A list of questions to ask"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_lemur:LemurQuestionAnswerResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "Where are there wildfires?",
                    "answer_format": "List of countries in ISO 3166-1 alpha-2 format",
                    "answer_options": [
                      "US",
                      "CA"
                    ]
                  },
                  {
                    "question": "Is global warming affecting wildfires?",
                    "answer_options": [
                      "yes",
                      "no"
                    ]
                  }
                ],
                "context": "This is an interview about wildfires.",
                "final_model": "default",
                "max_output_size": 3000,
                "temperature": 0,
                "transcript_ids": [
                  "64nygnr62k-405c-4ae8-8a6b-d90b40ff3cce"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
                "response": [
                  {
                    "question": "Where are there wildfires?",
                    "answer": "CA, US"
                  },
                  {
                    "question": "Is global warming affecting wildfires?",
                    "answer": "yes"
                  }
                ]
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"Where are there wildfires?\",\n      \"answer_format\": \"List of countries in ISO 3166-1 alpha-2 format\",\n      \"answer_options\": [\n        \"US\",\n        \"CA\"\n      ]\n    },\n    {\n      \"question\": \"Is global warming affecting wildfires?\",\n      \"answer_options\": [\n        \"yes\",\n        \"no\"\n      ]\n    }\n  ],\n  \"context\": \"This is an interview about wildfires.\",\n  \"final_model\": \"default\",\n  \"max_output_size\": 3000,\n  \"temperature\": 0,\n  \"transcript_ids\": [\n    \"64nygnr62k-405c-4ae8-8a6b-d90b40ff3cce\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/question-answer",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "questions": [
                  {
                    "question": "string"
                  }
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/question-answer \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"questions\": [\n    {\n      \"question\": \"string\"\n    }\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_lemur.actionItems": {
        "id": "endpoint_lemur.actionItems",
        "namespace": [
          "subpackage_lemur"
        ],
        "description": "Use LeMUR to generate a list of action items from a transcript",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/lemur/v3/generate/action-items"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [
              "type_lemur:LemurBaseParams"
            ],
            "properties": [
              {
                "key": "answer_format",
                "valueShape": {
                  "type": "optional",
                  "shape": {
                    "type": "primitive",
                    "value": {
                      "type": "string",
                      "default": "Bullet Points"
                    }
                  }
                },
                "description": "How you want the action items to be returned. This can be any text.\nDefaults to \"Bullet Points\".\n"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_lemur:LemurActionItemsResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "answer_format": "Bullet Points",
                "context": "This is an interview about wildfires.",
                "final_model": "default",
                "max_output_size": 3000,
                "temperature": 0,
                "transcript_ids": [
                  "64nygnr62k-405c-4ae8-8a6b-d90b40ff3cce"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "5e1b27c2-691f-4414-8bc5-f14678442f9e",
                "response": "Here are some potential action items based on the transcript:\n\n- Monitor air quality levels in affected areas and issue warnings as needed.\n\n- Advise vulnerable populations like children, the elderly, and those with respiratory conditions to limit time outdoors.\n\n- Have schools cancel outdoor activities when air quality is poor.\n\n- Educate the public on health impacts of smoke inhalation and precautions to take.\n\n- Track progression of smoke plumes using weather and air quality monitoring systems.\n\n- Coordinate cross-regionally to manage smoke exposure as air masses shift.\n\n- Plan for likely increase in such events due to climate change. Expand monitoring and forecasting capabilities.\n\n- Conduct research to better understand health impacts of wildfire smoke and mitigation strategies.\n\n- Develop strategies to prevent and manage wildfires to limit air quality impacts.\n"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"answer_format\": \"Bullet Points\",\n  \"context\": \"This is an interview about wildfires.\",\n  \"final_model\": \"default\",\n  \"max_output_size\": 3000,\n  \"temperature\": 0,\n  \"transcript_ids\": [\n    \"64nygnr62k-405c-4ae8-8a6b-d90b40ff3cce\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/generate/action-items",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/lemur/v3/generate/action-items \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_lemur.purgeRequestData": {
        "id": "endpoint_lemur.purgeRequestData",
        "namespace": [
          "subpackage_lemur"
        ],
        "description": "Delete the data for a previously submitted LeMUR request.\nThe LLM response data, as well as any context provided in the original request will be removed.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/lemur/v3/"
          },
          {
            "type": "pathParameter",
            "value": "request_id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "pathParameters": [
          {
            "key": "request_id",
            "valueShape": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            },
            "description": "The ID of the LeMUR request whose data you want to delete. This would be found in the response of the original request."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_lemur:PurgeLemurRequestDataResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/lemur/v3/request_id",
            "responseStatusCode": 200,
            "pathParameters": {
              "request_id": "request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "914fe7e4-f10a-4364-8946-34614c2873f6",
                "request_id_to_purge": "b7eb03ec-1650-4181-949b-75d9de317de1",
                "deleted": true
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 400,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 401,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 404,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 429,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 500,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 503,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/lemur/v3/:request_id",
            "responseStatusCode": 504,
            "pathParameters": {
              "request_id": ":request_id"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.assemblyai.com/lemur/v3/:request_id \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "endpoint_realtime.createTemporaryToken": {
        "id": "endpoint_realtime.createTemporaryToken",
        "namespace": [
          "subpackage_streaming"
        ],
        "description": "Create a temporary authentication token for Streaming Speech-to-Text",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/v2/realtime/token"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.assemblyai.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "expires_in",
                "valueShape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer",
                    "minimum": 60
                  }
                },
                "description": "The amount of time until the token expires in seconds"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_realtime:RealtimeTemporaryTokenResponse"
            }
          }
        },
        "errors": [
          {
            "description": "Bad request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Not found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Too many requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "An error occurred while processing the request",
            "statusCode": 500,
            "shape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:Error"
              }
            },
            "examples": []
          },
          {
            "description": "Service unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          },
          {
            "description": "Gateway timeout",
            "statusCode": 504,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            },
            "examples": []
          }
        ],
        "examples": [
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 480
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "token": "fe4145dd1e7a2e149488dcd2d553a8018a89833fc5084837d66fd1bcf5a105d4"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 480\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 500,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "error": "string",
                "status": "error"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 503,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/v2/realtime/token",
            "responseStatusCode": 504,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "expires_in": 0
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.assemblyai.com/v2/realtime/token \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"expires_in\": 0\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {
      "subpackage_streaming.streaming": {
        "id": "subpackage_streaming.streaming",
        "namespace": [
          "subpackage_streaming"
        ],
        "path": [
          {
            "type": "literal",
            "value": "/v2/realtime/ws"
          }
        ],
        "messages": [
          {
            "type": "subscribe",
            "origin": "server",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_streaming:receiveMessage"
              }
            }
          },
          {
            "type": "publish",
            "origin": "client",
            "body": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_streaming:sendMessage"
              }
            }
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "wss://api.assemblyai.com"
          }
        ],
        "queryParameters": [
          {
            "key": "sample_rate",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "The sample rate of the streamed audio"
          },
          {
            "key": "word_boost",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Add up to 2500 characters of custom vocabulary.\nThe parameter value must be a JSON encoded array of strings."
          },
          {
            "key": "encoding",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "id",
                "id": "type_streaming:Streaming"
              }
            },
            "description": "The encoding of the audio data"
          },
          {
            "key": "token",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Authenticate using a [generated temporary token](https://www.assemblyai.com/docs/speech-to-text/streaming#authenticate-with-a-temporary-token)"
          },
          {
            "key": "disable_partial_transcripts",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Set to true to not receive partial transcripts. Defaults to false."
          },
          {
            "key": "enable_extra_session_information",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            },
            "description": "Set to true to receive the SessionInformation message before the session ends. Defaults to false."
          }
        ],
        "requestHeaders": [
          {
            "key": "Authentication",
            "valueShape": {
              "type": "optional",
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/v2/realtime/ws",
            "pathParameters": {},
            "queryParameters": {},
            "requestHeaders": {},
            "messages": [
              {
                "type": "publish",
                "body": "UklGRtjIAABXQVZFZ"
              },
              {
                "type": "subscribe",
                "body": {
                  "audio_start": 0,
                  "audio_end": 1500,
                  "confidence": 0.987190506414702,
                  "text": "there is a house in new orleans",
                  "words": [
                    {
                      "start": 0,
                      "end": 300,
                      "confidence": 1,
                      "text": "there"
                    }
                  ],
                  "created": "2023-05-24T08:09:10Z",
                  "message_type": "PartialTranscript"
                }
              },
              {
                "type": "subscribe",
                "body": {
                  "audio_start": 0,
                  "audio_end": 1500,
                  "confidence": 0.987190506414702,
                  "text": "there is a house in new orleans",
                  "words": [
                    {
                      "start": 0,
                      "end": 300,
                      "confidence": 1,
                      "text": "there"
                    }
                  ],
                  "created": "2023-05-24T08:09:10Z",
                  "message_type": "FinalTranscript",
                  "punctuated": true,
                  "text_formatted": true
                }
              },
              {
                "type": "publish",
                "body": {
                  "terminate_session": true
                }
              },
              {
                "type": "subscribe",
                "body": {
                  "message_type": "SessionTerminated"
                }
              }
            ]
          }
        ]
      }
    },
    "webhooks": {},
    "types": {
      "type_files:UploadedFile": {
        "name": "UploadedFile",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "upload_url",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "A URL that points to your audio file, accessible only by AssemblyAI's servers"
            }
          ]
        }
      },
      "type_transcripts:TranscriptReadyNotification": {
        "name": "TranscriptReadyNotification",
        "description": "The notification when the transcript status is completed or error.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "transcript_id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The ID of the transcript"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:TranscriptReadyStatus"
              },
              "description": "The status of the transcript. Either completed or error."
            }
          ]
        }
      },
      "type_transcripts:RedactedAudioResponse": {
        "name": "RedactedAudioResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:RedactedAudioStatus"
              },
              "description": "The status of the redacted audio"
            },
            {
              "key": "redacted_audio_url",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The URL of the redacted audio file"
            }
          ]
        }
      },
      "type_transcripts:RedactedAudioStatus": {
        "name": "RedactedAudioStatus",
        "description": "The status of the redacted audio",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "redacted_audio_ready"
            }
          }
        }
      },
      "type_transcripts:SubtitleFormat": {
        "name": "SubtitleFormat",
        "description": "Format of the subtitles",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "srt"
            },
            {
              "value": "vtt"
            }
          ]
        }
      },
      "type_transcripts:WordSearchResponse": {
        "name": "WordSearchResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The ID of the transcript"
            },
            {
              "key": "total_count",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The total count of all matched instances. For e.g., word 1 matched 2 times, and word 2 matched 3 times, `total_count` will equal 5."
            },
            {
              "key": "matches",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:WordSearchMatch"
                }
              },
              "description": "The matches of the search"
            }
          ]
        }
      },
      "type_transcripts:WordSearchMatch": {
        "name": "WordSearchMatch",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The matched word"
            },
            {
              "key": "count",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The total amount of times the word is in the transcript"
            },
            {
              "key": "timestamps",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:WordSearchTimestamp"
                }
              },
              "description": "An array of timestamps"
            },
            {
              "key": "indexes",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "An array of all index locations for that word within the `words` array of the completed transcript"
            }
          ]
        }
      },
      "type_transcripts:WordSearchTimestamp": {
        "name": "WordSearchTimestamp",
        "description": "An array of timestamps structured as [`start_time`, `end_time`] in milliseconds",
        "shape": {
          "type": "alias",
          "value": {
            "type": "list",
            "itemShape": {
              "type": "primitive",
              "value": {
                "type": "integer"
              }
            }
          }
        }
      },
      "type_transcripts:Timestamp": {
        "name": "Timestamp",
        "description": "Timestamp containing a start and end property in milliseconds",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The start time in milliseconds"
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The end time in milliseconds"
            }
          ]
        }
      },
      "type_transcripts:TranscriptOptionalParams": {
        "name": "TranscriptOptionalParams",
        "description": "The parameters for creating a transcript",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "language_code",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptLanguageCode"
                }
              }
            },
            {
              "key": "punctuate",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable Automatic Punctuation, can be true or false"
            },
            {
              "key": "format_text",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable Text Formatting, can be true or false"
            },
            {
              "key": "dual_channel",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Dual Channel](https://www.assemblyai.com/docs/models/speech-recognition#dual-channel-transcription) transcription, can be true or false."
            },
            {
              "key": "speech_model",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:SpeechModel"
                }
              }
            },
            {
              "key": "webhook_url",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL to which AssemblyAI send webhooks upon transcription completion"
            },
            {
              "key": "webhook_auth_header_name",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The header name which should be sent back with webhook calls"
            },
            {
              "key": "webhook_auth_header_value",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Specify a header name and value to send back with a webhook call for added security"
            },
            {
              "key": "auto_highlights",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable Key Phrases, either true or false"
            },
            {
              "key": "audio_start_from",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The point in time, in milliseconds, to begin transcribing in your media file"
            },
            {
              "key": "audio_end_at",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The point in time, in milliseconds, to stop transcribing in your media file"
            },
            {
              "key": "word_boost",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "The list of custom vocabulary to boost transcription probability for"
            },
            {
              "key": "boost_param",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptBoostParam"
                }
              },
              "description": "The word boost parameter value"
            },
            {
              "key": "filter_profanity",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Filter profanity from the transcribed text, can be true or false"
            },
            {
              "key": "redact_pii",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Redact PII from the transcribed text using the Redact PII model, can be true or false"
            },
            {
              "key": "redact_pii_audio",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Generate a copy of the original media file with spoken PII \"beeped\" out, can be true or false. See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more details."
            },
            {
              "key": "redact_pii_audio_quality",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:RedactPiiAudioQuality"
                }
              },
              "description": "Controls the filetype of the audio created by redact_pii_audio. Currently supports mp3 (default) and wav. See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more details."
            },
            {
              "key": "redact_pii_policies",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:PiiPolicy"
                  }
                }
              },
              "description": "The list of PII Redaction policies to enable. See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more details."
            },
            {
              "key": "redact_pii_sub",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:SubstitutionPolicy"
                }
              }
            },
            {
              "key": "speaker_labels",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Speaker diarization](https://www.assemblyai.com/docs/models/speaker-diarization), can be true or false"
            },
            {
              "key": "speakers_expected",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Tells the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/models/speaker-diarization) for more details."
            },
            {
              "key": "content_safety",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Content Moderation](https://www.assemblyai.com/docs/models/content-moderation), can be true or false"
            },
            {
              "key": "content_safety_confidence",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The confidence threshold for the Content Moderation model. Values must be between 25 and 100."
            },
            {
              "key": "iab_categories",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Topic Detection](https://www.assemblyai.com/docs/models/topic-detection), can be true or false"
            },
            {
              "key": "language_detection",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Automatic language detection](https://www.assemblyai.com/docs/models/speech-recognition#automatic-language-detection), either true or false."
            },
            {
              "key": "custom_spelling",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:TranscriptCustomSpelling"
                  }
                }
              },
              "description": "Customize how words are spelled and formatted using to and from values"
            },
            {
              "key": "disfluencies",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false"
            },
            {
              "key": "sentiment_analysis",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Sentiment Analysis](https://www.assemblyai.com/docs/models/sentiment-analysis), can be true or false"
            },
            {
              "key": "auto_chapters",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Auto Chapters](https://www.assemblyai.com/docs/models/auto-chapters), can be true or false"
            },
            {
              "key": "entity_detection",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Entity Detection](https://www.assemblyai.com/docs/models/entity-detection), can be true or false"
            },
            {
              "key": "speech_threshold",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive."
            },
            {
              "key": "summarization",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable [Summarization](https://www.assemblyai.com/docs/models/summarization), can be true or false"
            },
            {
              "key": "summary_model",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:SummaryModel"
                }
              },
              "description": "The model to summarize the transcript"
            },
            {
              "key": "summary_type",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:SummaryType"
                }
              },
              "description": "The type of summary"
            },
            {
              "key": "custom_topics",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Enable custom topics, either true or false"
            },
            {
              "key": "topics",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "The list of custom topics"
            }
          ]
        }
      },
      "type_transcripts:SummaryModel": {
        "name": "SummaryModel",
        "description": "The model to summarize the transcript",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "informative"
            },
            {
              "value": "conversational"
            },
            {
              "value": "catchy"
            }
          ]
        }
      },
      "type_transcripts:SummaryType": {
        "name": "SummaryType",
        "description": "The type of summary",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "bullets"
            },
            {
              "value": "bullets_verbose"
            },
            {
              "value": "gist"
            },
            {
              "value": "headline"
            },
            {
              "value": "paragraph"
            }
          ]
        }
      },
      "type_transcripts:TranscriptBoostParam": {
        "name": "TranscriptBoostParam",
        "description": "The word boost parameter value",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "low"
            },
            {
              "value": "default"
            },
            {
              "value": "high"
            }
          ]
        }
      },
      "type_transcripts:TranscriptCustomSpelling": {
        "name": "TranscriptCustomSpelling",
        "description": "Object containing words or phrases to replace, and the word or phrase to replace with",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "from",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Words or phrases to replace"
            },
            {
              "key": "to",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "Word or phrase to replace with"
            }
          ]
        }
      },
      "type_transcripts:TranscriptUtterance": {
        "name": "TranscriptUtterance",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "The confidence score for the transcript of this utterance"
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The starting time, in milliseconds, of the utterance in the audio file"
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The ending time, in milliseconds, of the utterance in the audio file"
            },
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The text for this utterance"
            },
            {
              "key": "words",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptWord"
                }
              },
              "description": "The words in the utterance."
            },
            {
              "key": "speaker",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The speaker of this utterance, where each speaker is assigned a sequential capital letter - e.g. \"A\" for Speaker A, \"B\" for Speaker B, etc."
            }
          ]
        }
      },
      "type_transcripts:SubstitutionPolicy": {
        "name": "SubstitutionPolicy",
        "description": "The replacement logic for detected PII, can be \"entity_name\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more details.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "entity_name"
            },
            {
              "value": "hash"
            }
          ]
        }
      },
      "type_transcripts:RedactPiiAudioQuality": {
        "name": "RedactPiiAudioQuality",
        "description": "Controls the filetype of the audio created by redact_pii_audio. Currently supports mp3 (default) and wav. See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more details.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "MP3 audio format is lower quality and lower size than WAV.",
              "value": "mp3"
            },
            {
              "description": "WAV audio format is the highest quality (no compression) and larger size than MP3.",
              "value": "wav"
            }
          ]
        }
      },
      "type_transcripts:PiiPolicy": {
        "name": "PiiPolicy",
        "description": "The type of PII to redact",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "Customer account or membership identification number (e.g., Policy No. 10042992, Member ID: HZ-5235-001)",
              "value": "account_number"
            },
            {
              "description": "Banking information, including account and routing numbers",
              "value": "banking_information"
            },
            {
              "description": "Blood type (e.g., O-, AB positive)",
              "value": "blood_type"
            },
            {
              "description": "Credit card verification code (e.g., CVV: 080)",
              "value": "credit_card_cvv"
            },
            {
              "description": "Expiration date of a credit card",
              "value": "credit_card_expiration"
            },
            {
              "description": "Credit card number",
              "value": "credit_card_number"
            },
            {
              "description": "Specific calendar date (e.g., December 18)",
              "value": "date"
            },
            {
              "description": "Broader time periods, including date ranges, months, seasons, years, and decades (e.g., 2020-2021, 5-9 May, January 1984)",
              "value": "date_interval"
            },
            {
              "description": "Date of birth (e.g., Date of Birth: March 7,1961)",
              "value": "date_of_birth"
            },
            {
              "description": "Driver's license number. (e.g., DL# 356933-540)",
              "value": "drivers_license"
            },
            {
              "description": "Medications, vitamins, or supplements (e.g., Advil, Acetaminophen, Panadol)",
              "value": "drug"
            },
            {
              "description": "Periods of time, specified as a number and a unit of time (e.g., 8 months, 2 years)",
              "value": "duration"
            },
            {
              "description": "Email address (e.g., support@assemblyai.com)",
              "value": "email_address"
            },
            {
              "description": "Name of an event or holiday (e.g., Olympics, Yom Kippur)",
              "value": "event"
            },
            {
              "description": "Names of computer files, including the extension or filepath (e.g., Taxes/2012/brad-tax-returns.pdf)",
              "value": "filename"
            },
            {
              "description": "Terms indicating gender identity or sexual orientation, including slang terms (e.g., female, bisexual, trans)",
              "value": "gender_sexuality"
            },
            {
              "description": "Healthcare numbers and health plan beneficiary numbers (e.g., Policy No.: 5584-486-674-YM)",
              "value": "healthcare_number"
            },
            {
              "description": "Bodily injury (e.g., I broke my arm, I have a sprained wrist)",
              "value": "injury"
            },
            {
              "description": "Internet IP address, including IPv4 and IPv6 formats (e.g., 192.168.0.1)",
              "value": "ip_address"
            },
            {
              "description": "Name of a natural language (e.g., Spanish, French)",
              "value": "language"
            },
            {
              "description": "Any Location reference including mailing address, postal code, city, state, province, country, or coordinates. (e.g., Lake Victoria, 145 Windsor St., 90210)",
              "value": "location"
            },
            {
              "description": "Terms indicating marital status (e.g., Single, common-law, ex-wife, married)",
              "value": "marital_status"
            },
            {
              "description": "Name of a medical condition, disease, syndrome, deficit, or disorder (e.g., chronic fatigue syndrome, arrhythmia, depression)",
              "value": "medical_condition"
            },
            {
              "description": "Medical process, including treatments, procedures, and tests (e.g., heart surgery, CT scan)",
              "value": "medical_process"
            },
            {
              "description": "Name and/or amount of currency (e.g., 15 pesos, $94.50)",
              "value": "money_amount"
            },
            {
              "description": "Terms indicating nationality, ethnicity, or race (e.g., American, Asian, Caucasian)",
              "value": "nationality"
            },
            {
              "description": "Numerical PII (including alphanumeric strings) that doesn't fall under other categories",
              "value": "number_sequence"
            },
            {
              "description": "Job title or profession (e.g., professor, actors, engineer, CPA)",
              "value": "occupation"
            },
            {
              "description": "Name of an organization (e.g., CNN, McDonalds, University of Alaska, Northwest General Hospital)",
              "value": "organization"
            },
            {
              "description": "Passport numbers, issued by any country (e.g., PA4568332, NU3C6L86S12)",
              "value": "passport_number"
            },
            {
              "description": "Account passwords, PINs, access keys, or verification answers (e.g., 27%alfalfa, temp1234, My mother's maiden name is Smith)",
              "value": "password"
            },
            {
              "description": "Number associated with an age (e.g., 27, 75)",
              "value": "person_age"
            },
            {
              "description": "Name of a person (e.g., Bob, Doug Jones, Dr. Kay Martinez, MD)",
              "value": "person_name"
            },
            {
              "description": "Telephone or fax number",
              "value": "phone_number"
            },
            {
              "description": "Distinctive bodily attributes, including terms indicating race (e.g., I'm 190cm tall, He belongs to the Black students' association)",
              "value": "physical_attribute"
            },
            {
              "description": "Terms referring to a political party, movement, or ideology (e.g., Republican, Liberal)",
              "value": "political_affiliation"
            },
            {
              "description": "Terms indicating religious affiliation (e.g., Hindu, Catholic)",
              "value": "religion"
            },
            {
              "description": "Medical statistics (e.g., 18%, 18 percent)",
              "value": "statistics"
            },
            {
              "description": "Expressions indicating clock times (e.g., 19:37:28, 10pm EST)",
              "value": "time"
            },
            {
              "description": "Internet addresses (e.g., https://www.assemblyai.com/)",
              "value": "url"
            },
            {
              "description": "Social Security Number or equivalent",
              "value": "us_social_security_number"
            },
            {
              "description": "Usernames, login names, or handles (e.g., @AssemblyAI)",
              "value": "username"
            },
            {
              "description": "Vehicle identification numbers (VINs), vehicle serial numbers, and license plate numbers (e.g., 5FNRL38918B111818, BIF7547)",
              "value": "vehicle_id"
            },
            {
              "description": "Names of Zodiac signs (e.g., Aries, Taurus)",
              "value": "zodiac_sign"
            }
          ]
        }
      },
      "type_transcripts:SpeechModel": {
        "name": "SpeechModel",
        "description": "The speech model to use for the transcription.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "The best model optimized for accuracy.",
              "value": "best"
            },
            {
              "description": "A lightweight, lower cost model for a wide range of languages.",
              "value": "nano"
            },
            {
              "description": "Deprecated: Conformer-2 is a heavy-duty model optimized for accuracy.\nThis option will stop working in the near future. Use best or nano instead.",
              "value": "conformer-2"
            }
          ]
        }
      },
      "type_transcripts:TranscriptLanguageCode": {
        "name": "TranscriptLanguageCode",
        "description": "The language of your audio file. Possible values are found in [Supported Languages](https://www.assemblyai.com/docs/concepts/supported-languages).\nThe default value is 'en_us'.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "en"
            },
            {
              "value": "en_au"
            },
            {
              "value": "en_uk"
            },
            {
              "value": "en_us"
            },
            {
              "value": "es"
            },
            {
              "value": "fr"
            },
            {
              "value": "de"
            },
            {
              "value": "it"
            },
            {
              "value": "pt"
            },
            {
              "value": "nl"
            },
            {
              "value": "af"
            },
            {
              "value": "sq"
            },
            {
              "value": "am"
            },
            {
              "value": "ar"
            },
            {
              "value": "hy"
            },
            {
              "value": "as"
            },
            {
              "value": "az"
            },
            {
              "value": "ba"
            },
            {
              "value": "eu"
            },
            {
              "value": "be"
            },
            {
              "value": "bn"
            },
            {
              "value": "bs"
            },
            {
              "value": "br"
            },
            {
              "value": "bg"
            },
            {
              "value": "my"
            },
            {
              "value": "ca"
            },
            {
              "value": "zh"
            },
            {
              "value": "hr"
            },
            {
              "value": "cs"
            },
            {
              "value": "da"
            },
            {
              "value": "et"
            },
            {
              "value": "fo"
            },
            {
              "value": "fi"
            },
            {
              "value": "gl"
            },
            {
              "value": "ka"
            },
            {
              "value": "el"
            },
            {
              "value": "gu"
            },
            {
              "value": "ht"
            },
            {
              "value": "ha"
            },
            {
              "value": "haw"
            },
            {
              "value": "he"
            },
            {
              "value": "hi"
            },
            {
              "value": "hu"
            },
            {
              "value": "is"
            },
            {
              "value": "id"
            },
            {
              "value": "ja"
            },
            {
              "value": "jw"
            },
            {
              "value": "kn"
            },
            {
              "value": "kk"
            },
            {
              "value": "km"
            },
            {
              "value": "ko"
            },
            {
              "value": "lo"
            },
            {
              "value": "la"
            },
            {
              "value": "lv"
            },
            {
              "value": "ln"
            },
            {
              "value": "lt"
            },
            {
              "value": "lb"
            },
            {
              "value": "mk"
            },
            {
              "value": "mg"
            },
            {
              "value": "ms"
            },
            {
              "value": "ml"
            },
            {
              "value": "mt"
            },
            {
              "value": "mi"
            },
            {
              "value": "mr"
            },
            {
              "value": "mn"
            },
            {
              "value": "ne"
            },
            {
              "value": "no"
            },
            {
              "value": "nn"
            },
            {
              "value": "oc"
            },
            {
              "value": "pa"
            },
            {
              "value": "ps"
            },
            {
              "value": "fa"
            },
            {
              "value": "pl"
            },
            {
              "value": "ro"
            },
            {
              "value": "ru"
            },
            {
              "value": "sa"
            },
            {
              "value": "sr"
            },
            {
              "value": "sn"
            },
            {
              "value": "sd"
            },
            {
              "value": "si"
            },
            {
              "value": "sk"
            },
            {
              "value": "sl"
            },
            {
              "value": "so"
            },
            {
              "value": "su"
            },
            {
              "value": "sw"
            },
            {
              "value": "sv"
            },
            {
              "value": "tl"
            },
            {
              "value": "tg"
            },
            {
              "value": "ta"
            },
            {
              "value": "tt"
            },
            {
              "value": "te"
            },
            {
              "value": "th"
            },
            {
              "value": "bo"
            },
            {
              "value": "tr"
            },
            {
              "value": "tk"
            },
            {
              "value": "uk"
            },
            {
              "value": "ur"
            },
            {
              "value": "uz"
            },
            {
              "value": "vi"
            },
            {
              "value": "cy"
            },
            {
              "value": "yi"
            },
            {
              "value": "yo"
            }
          ]
        }
      },
      "type_transcripts:TranscriptStatus": {
        "name": "TranscriptStatus",
        "description": "The status of your transcript. Possible values are queued, processing, completed, or error.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "The audio file is in the queue to be processed by the API.",
              "value": "queued"
            },
            {
              "description": "The audio file is being processed by the API.",
              "value": "processing"
            },
            {
              "description": "The transcript job has been completed successfully.",
              "value": "completed"
            },
            {
              "description": "An error occurred while processing the audio file.",
              "value": "error"
            }
          ]
        }
      },
      "type_transcripts:TranscriptReadyStatus": {
        "name": "TranscriptReadyStatus",
        "description": "The status of the transcript. Either completed or error.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "The transcript job has been completed successfully.",
              "value": "completed"
            },
            {
              "description": "An error occurred while processing the audio file.",
              "value": "error"
            }
          ]
        }
      },
      "type_transcripts:Transcript": {
        "name": "Transcript",
        "description": "A transcript object",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The unique identifier of your transcript"
            },
            {
              "key": "language_model",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The language model that was used for the transcript"
            },
            {
              "key": "acoustic_model",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The acoustic model that was used for the transcript"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:TranscriptStatus"
              },
              "description": "The status of your transcript. Possible values are queued, processing, completed, or error."
            },
            {
              "key": "language_code",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptLanguageCode"
                }
              },
              "description": "The language of your audio file.\nPossible values are found in [Supported Languages](https://www.assemblyai.com/docs/concepts/supported-languages).\nThe default value is 'en_us'."
            },
            {
              "key": "audio_url",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The URL of the media that was transcribed"
            },
            {
              "key": "text",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The textual transcript of your media file"
            },
            {
              "key": "words",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:TranscriptWord"
                  }
                }
              },
              "description": "An array of temporally-sequential word objects, one for each word in the transcript.\nSee [Speech recognition](https://www.assemblyai.com/docs/models/speech-recognition) for more information."
            },
            {
              "key": "utterances",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:TranscriptUtterance"
                  }
                }
              },
              "description": "When dual_channel or speaker_labels is enabled, a list of turn-by-turn utterance objects.\nSee [Speaker diarization](https://www.assemblyai.com/docs/models/speaker-diarization) for more information."
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "double",
                    "minimum": 0,
                    "maximum": 1
                  }
                }
              },
              "description": "The confidence score for the transcript, between 0.0 (low confidence) and 1.0 (high confidence)"
            },
            {
              "key": "audio_duration",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The duration of this transcript object's media file, in seconds"
            },
            {
              "key": "punctuate",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether Automatic Punctuation is enabled, either true or false"
            },
            {
              "key": "format_text",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether Text Formatting is enabled, either true or false"
            },
            {
              "key": "dual_channel",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Dual channel transcription](https://www.assemblyai.com/docs/models/speech-recognition#dual-channel-transcription) was enabled in the transcription request, either true or false"
            },
            {
              "key": "speech_model",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:SpeechModel"
                }
              }
            },
            {
              "key": "webhook_url",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL to which we send webhooks upon transcription completion"
            },
            {
              "key": "webhook_status_code",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The status code we received from your server when delivering your webhook, if a webhook URL was provided"
            },
            {
              "key": "webhook_auth",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether webhook authentication details were provided"
            },
            {
              "key": "webhook_auth_header_name",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The header name which should be sent back with webhook calls"
            },
            {
              "key": "speed_boost",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether speed boost is enabled"
            },
            {
              "key": "auto_highlights",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether Key Phrases is enabled, either true or false"
            },
            {
              "key": "auto_highlights_result",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:AutoHighlightsResult"
                }
              }
            },
            {
              "key": "audio_start_from",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The point in time, in milliseconds, in the file at which the transcription was started"
            },
            {
              "key": "audio_end_at",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "The point in time, in milliseconds, in the file at which the transcription was terminated"
            },
            {
              "key": "word_boost",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "The list of custom vocabulary to boost transcription probability for"
            },
            {
              "key": "boost_param",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The word boost parameter value"
            },
            {
              "key": "filter_profanity",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Profanity Filtering](https://www.assemblyai.com/docs/models/speech-recognition#profanity-filtering) is enabled, either true or false"
            },
            {
              "key": "redact_pii",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether [PII Redaction](https://www.assemblyai.com/docs/models/pii-redaction) is enabled, either true or false"
            },
            {
              "key": "redact_pii_audio",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether a redacted version of the audio file was generated,\neither true or false. See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more information."
            },
            {
              "key": "redact_pii_audio_quality",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:RedactPiiAudioQuality"
                }
              }
            },
            {
              "key": "redact_pii_policies",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:PiiPolicy"
                  }
                }
              },
              "description": "The list of PII Redaction policies that were enabled, if PII Redaction is enabled.\nSee [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more information."
            },
            {
              "key": "redact_pii_sub",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:SubstitutionPolicy"
                }
              },
              "description": "The replacement logic for detected PII, can be \"entity_type\" or \"hash\". See [PII redaction](https://www.assemblyai.com/docs/models/pii-redaction) for more details."
            },
            {
              "key": "speaker_labels",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Speaker diarization](https://www.assemblyai.com/docs/models/speaker-diarization) is enabled, can be true or false"
            },
            {
              "key": "speakers_expected",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Tell the speaker label model how many speakers it should attempt to identify, up to 10. See [Speaker diarization](https://www.assemblyai.com/docs/models/speaker-diarization) for more details."
            },
            {
              "key": "content_safety",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Content Moderation](https://www.assemblyai.com/docs/models/content-moderation) is enabled, can be true or false"
            },
            {
              "key": "content_safety_labels",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:ContentSafetyLabelsResult"
                }
              }
            },
            {
              "key": "iab_categories",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Topic Detection](https://www.assemblyai.com/docs/models/topic-detection) is enabled, can be true or false"
            },
            {
              "key": "iab_categories_result",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:TopicDetectionModelResult"
                }
              }
            },
            {
              "key": "language_detection",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Automatic language detection](https://www.assemblyai.com/docs/models/speech-recognition#automatic-language-detection) is enabled, either true or false"
            },
            {
              "key": "custom_spelling",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:TranscriptCustomSpelling"
                  }
                }
              },
              "description": "Customize how words are spelled and formatted using to and from values"
            },
            {
              "key": "auto_chapters",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Auto Chapters](https://www.assemblyai.com/docs/models/auto-chapters) is enabled, can be true or false"
            },
            {
              "key": "chapters",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:Chapter"
                  }
                }
              },
              "description": "An array of temporally sequential chapters for the audio file"
            },
            {
              "key": "summarization",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether [Summarization](https://www.assemblyai.com/docs/models/summarization) is enabled, either true or false"
            },
            {
              "key": "summary_type",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The type of summary generated, if [Summarization](https://www.assemblyai.com/docs/models/summarization) is enabled"
            },
            {
              "key": "summary_model",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The Summarization model used to generate the summary,\nif [Summarization](https://www.assemblyai.com/docs/models/summarization) is enabled"
            },
            {
              "key": "summary",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The generated summary of the media file, if [Summarization](https://www.assemblyai.com/docs/models/summarization) is enabled"
            },
            {
              "key": "custom_topics",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether custom topics is enabled, either true or false"
            },
            {
              "key": "topics",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "The list of custom topics provided if custom topics is enabled"
            },
            {
              "key": "disfluencies",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Transcribe Filler Words, like \"umm\", in your media file; can be true or false"
            },
            {
              "key": "sentiment_analysis",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Sentiment Analysis](https://www.assemblyai.com/docs/models/sentiment-analysis) is enabled, can be true or false"
            },
            {
              "key": "sentiment_analysis_results",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:SentimentAnalysisResult"
                  }
                }
              },
              "description": "An array of results for the Sentiment Analysis model, if it is enabled.\nSee [Sentiment Analysis](https://www.assemblyai.com/docs/models/sentiment-analysis) for more information."
            },
            {
              "key": "entity_detection",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Whether [Entity Detection](https://www.assemblyai.com/docs/models/entity-detection) is enabled, can be true or false"
            },
            {
              "key": "entities",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:Entity"
                  }
                }
              },
              "description": "An array of results for the Entity Detection model, if it is enabled.\nSee [Entity detection](https://www.assemblyai.com/docs/models/entity-detection) for more information."
            },
            {
              "key": "speech_threshold",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Defaults to null. Reject audio files that contain less than this fraction of speech.\nValid values are in the range [0, 1] inclusive."
            },
            {
              "key": "throttled",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "True while a request is throttled and false when a request is no longer throttled"
            },
            {
              "key": "error",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error message of why the transcript failed"
            }
          ]
        }
      },
      "type_transcripts:TopicDetectionModelResult": {
        "name": "TopicDetectionModelResult",
        "description": "The result of the Topic Detection model, if it is enabled.\nSee [Topic Detection](https://www.assemblyai.com/docs/models/topic-detection) for more information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:AudioIntelligenceModelStatus"
              },
              "description": "The status of the Topic Detection model. Either success, or unavailable in the rare case that the model failed."
            },
            {
              "key": "results",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TopicDetectionResult"
                }
              },
              "description": "An array of results for the Topic Detection model"
            },
            {
              "key": "summary",
              "valueShape": {
                "type": "map",
                "keyShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueShape": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The overall relevance of topic to the entire audio file"
            }
          ]
        }
      },
      "type_transcripts:ContentSafetyLabelsResult": {
        "name": "ContentSafetyLabelsResult",
        "description": "An array of results for the Content Moderation model, if it is enabled.\nSee [Content moderation](https://www.assemblyai.com/docs/models/content-moderation) for more information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:AudioIntelligenceModelStatus"
              },
              "description": "The status of the Content Moderation model. Either success, or unavailable in the rare case that the model failed."
            },
            {
              "key": "results",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:ContentSafetyLabelResult"
                }
              }
            },
            {
              "key": "summary",
              "valueShape": {
                "type": "map",
                "keyShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueShape": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "A summary of the Content Moderation confidence results for the entire audio file"
            },
            {
              "key": "severity_score_summary",
              "valueShape": {
                "type": "map",
                "keyShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueShape": {
                  "type": "id",
                  "id": "type_transcripts:SeverityScoreSummary"
                }
              },
              "description": "A summary of the Content Moderation severity results for the entire audio file"
            }
          ]
        }
      },
      "type_transcripts:Chapter": {
        "name": "Chapter",
        "description": "Chapter of the audio file",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "gist",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "An ultra-short summary (just a few words) of the content spoken in the chapter"
            },
            {
              "key": "headline",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "A single sentence summary of the content spoken during the chapter"
            },
            {
              "key": "summary",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "A one paragraph summary of the content spoken during the chapter"
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The starting time, in milliseconds, for the chapter"
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The starting time, in milliseconds, for the chapter"
            }
          ]
        }
      },
      "type_transcripts:Entity": {
        "name": "Entity",
        "description": "A detected entity",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "entity_type",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:EntityType"
              },
              "description": "The type of entity for the detected entity"
            },
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The text for the detected entity"
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The starting time, in milliseconds, at which the detected entity appears in the audio file"
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The ending time, in milliseconds, for the detected entity in the audio file"
            }
          ]
        }
      },
      "type_transcripts:EntityType": {
        "name": "EntityType",
        "description": "The type of entity for the detected entity",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "Customer account or membership identification number (e.g., Policy No. 10042992, Member ID: HZ-5235-001)",
              "value": "account_number"
            },
            {
              "description": "Banking information, including account and routing numbers",
              "value": "banking_information"
            },
            {
              "description": "Blood type (e.g., O-, AB positive)",
              "value": "blood_type"
            },
            {
              "description": "Credit card verification code (e.g., CVV: 080)",
              "value": "credit_card_cvv"
            },
            {
              "description": "Expiration date of a credit card",
              "value": "credit_card_expiration"
            },
            {
              "description": "Credit card number",
              "value": "credit_card_number"
            },
            {
              "description": "Specific calendar date (e.g., December 18)",
              "value": "date"
            },
            {
              "description": "Broader time periods, including date ranges, months, seasons, years, and decades (e.g., 2020-2021, 5-9 May, January 1984)",
              "value": "date_interval"
            },
            {
              "description": "Date of birth (e.g., Date of Birth: March 7,1961)",
              "value": "date_of_birth"
            },
            {
              "description": "Driver's license number. (e.g., DL# 356933-540)",
              "value": "drivers_license"
            },
            {
              "description": "Medications, vitamins, or supplements (e.g., Advil, Acetaminophen, Panadol)",
              "value": "drug"
            },
            {
              "description": "Periods of time, specified as a number and a unit of time (e.g., 8 months, 2 years)",
              "value": "duration"
            },
            {
              "description": "Email address (e.g., support@assemblyai.com)",
              "value": "email_address"
            },
            {
              "description": "Name of an event or holiday (e.g., Olympics, Yom Kippur)",
              "value": "event"
            },
            {
              "description": "Names of computer files, including the extension or filepath (e.g., Taxes/2012/brad-tax-returns.pdf)",
              "value": "filename"
            },
            {
              "description": "Terms indicating gender identity or sexual orientation, including slang terms (e.g., female, bisexual, trans)",
              "value": "gender_sexuality"
            },
            {
              "description": "Healthcare numbers and health plan beneficiary numbers (e.g., Policy No.: 5584-486-674-YM)",
              "value": "healthcare_number"
            },
            {
              "description": "Bodily injury (e.g., I broke my arm, I have a sprained wrist)",
              "value": "injury"
            },
            {
              "description": "Internet IP address, including IPv4 and IPv6 formats (e.g., 192.168.0.1)",
              "value": "ip_address"
            },
            {
              "description": "Name of a natural language (e.g., Spanish, French)",
              "value": "language"
            },
            {
              "description": "Any Location reference including mailing address, postal code, city, state, province, country, or coordinates. (e.g., Lake Victoria, 145 Windsor St., 90210)",
              "value": "location"
            },
            {
              "description": "Terms indicating marital status (e.g., Single, common-law, ex-wife, married)",
              "value": "marital_status"
            },
            {
              "description": "Name of a medical condition, disease, syndrome, deficit, or disorder (e.g., chronic fatigue syndrome, arrhythmia, depression)",
              "value": "medical_condition"
            },
            {
              "description": "Medical process, including treatments, procedures, and tests (e.g., heart surgery, CT scan)",
              "value": "medical_process"
            },
            {
              "description": "Name and/or amount of currency (e.g., 15 pesos, $94.50)",
              "value": "money_amount"
            },
            {
              "description": "Terms indicating nationality, ethnicity, or race (e.g., American, Asian, Caucasian)",
              "value": "nationality"
            },
            {
              "description": "Numerical PII (including alphanumeric strings) that doesn't fall under other categories",
              "value": "number_sequence"
            },
            {
              "description": "Job title or profession (e.g., professor, actors, engineer, CPA)",
              "value": "occupation"
            },
            {
              "description": "Name of an organization (e.g., CNN, McDonalds, University of Alaska, Northwest General Hospital)",
              "value": "organization"
            },
            {
              "description": "Passport numbers, issued by any country (e.g., PA4568332, NU3C6L86S12)",
              "value": "passport_number"
            },
            {
              "description": "Account passwords, PINs, access keys, or verification answers (e.g., 27%alfalfa, temp1234, My mother's maiden name is Smith)",
              "value": "password"
            },
            {
              "description": "Number associated with an age (e.g., 27, 75)",
              "value": "person_age"
            },
            {
              "description": "Name of a person (e.g., Bob, Doug Jones, Dr. Kay Martinez, MD)",
              "value": "person_name"
            },
            {
              "description": "Telephone or fax number",
              "value": "phone_number"
            },
            {
              "description": "Distinctive bodily attributes, including terms indicating race (e.g., I'm 190cm tall, He belongs to the Black students' association)",
              "value": "physical_attribute"
            },
            {
              "description": "Terms referring to a political party, movement, or ideology (e.g., Republican, Liberal)",
              "value": "political_affiliation"
            },
            {
              "description": "Terms indicating religious affiliation (e.g., Hindu, Catholic)",
              "value": "religion"
            },
            {
              "description": "Medical statistics (e.g., 18%, 18 percent)",
              "value": "statistics"
            },
            {
              "description": "Expressions indicating clock times (e.g., 19:37:28, 10pm EST)",
              "value": "time"
            },
            {
              "description": "Internet addresses (e.g., https://www.assemblyai.com/)",
              "value": "url"
            },
            {
              "description": "Social Security Number or equivalent",
              "value": "us_social_security_number"
            },
            {
              "description": "Usernames, login names, or handles (e.g., @AssemblyAI)",
              "value": "username"
            },
            {
              "description": "Vehicle identification numbers (VINs), vehicle serial numbers, and license plate numbers (e.g., 5FNRL38918B111818, BIF7547)",
              "value": "vehicle_id"
            },
            {
              "description": "Names of Zodiac signs (e.g., Aries, Taurus)",
              "value": "zodiac_sign"
            }
          ]
        }
      },
      "type_transcripts:SentimentAnalysisResult": {
        "name": "SentimentAnalysisResult",
        "description": "The result of the Sentiment Analysis model",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The transcript of the sentence"
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The starting time, in milliseconds, of the sentence"
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The ending time, in milliseconds, of the sentence"
            },
            {
              "key": "sentiment",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:Sentiment"
              },
              "description": "The detected sentiment for the sentence, one of POSITIVE, NEUTRAL, NEGATIVE"
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "The confidence score for the detected sentiment of the sentence, from 0 to 1"
            },
            {
              "key": "speaker",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The speaker of the sentence if [Speaker Diarization](https://www.assemblyai.com/docs/models/speaker-diarization) is enabled, else null"
            }
          ]
        }
      },
      "type_transcripts:Sentiment": {
        "name": "Sentiment",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "POSITIVE"
            },
            {
              "value": "NEUTRAL"
            },
            {
              "value": "NEGATIVE"
            }
          ]
        }
      },
      "type_transcripts:TopicDetectionResultLabelsItem": {
        "name": "TopicDetectionResultLabelsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "relevance",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "How relevant the detected topic is of a detected topic"
            },
            {
              "key": "label",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The IAB taxonomical label for the label of the detected topic, where > denotes supertopic/subtopic relationship"
            }
          ]
        }
      },
      "type_transcripts:TopicDetectionResult": {
        "name": "TopicDetectionResult",
        "description": "The result of the topic detection model",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The text in the transcript in which a detected topic occurs"
            },
            {
              "key": "labels",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "id",
                    "id": "type_transcripts:TopicDetectionResultLabelsItem"
                  }
                }
              }
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_transcripts:Timestamp"
                }
              }
            }
          ]
        }
      },
      "type_transcripts:ContentSafetyLabel": {
        "name": "ContentSafetyLabel",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "label",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The label of the sensitive topic"
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "The confidence score for the topic being discussed, from 0 to 1"
            },
            {
              "key": "severity",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "How severely the topic is discussed in the section, from 0 to 1"
            }
          ]
        }
      },
      "type_transcripts:ContentSafetyLabelResult": {
        "name": "ContentSafetyLabelResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The transcript of the section flagged by the Content Moderation model"
            },
            {
              "key": "labels",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:ContentSafetyLabel"
                }
              },
              "description": "An array of safety labels, one per sensitive topic that was detected in the section"
            },
            {
              "key": "sentences_idx_start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The sentence index at which the section begins"
            },
            {
              "key": "sentences_idx_end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The sentence index at which the section ends"
            },
            {
              "key": "timestamp",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:Timestamp"
              },
              "description": "Timestamp information for the section"
            }
          ]
        }
      },
      "type_transcripts:SeverityScoreSummary": {
        "name": "SeverityScoreSummary",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "low",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "medium",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "high",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            }
          ]
        }
      },
      "type_transcripts:AutoHighlightsResult": {
        "name": "AutoHighlightsResult",
        "description": "An array of results for the Key Phrases model, if it is enabled.\nSee [Key phrases](https://www.assemblyai.com/docs/models/key-phrases) for more information.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:AudioIntelligenceModelStatus"
              },
              "description": "The status of the Key Phrases model. Either success, or unavailable in the rare case that the model failed."
            },
            {
              "key": "results",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:AutoHighlightResult"
                }
              },
              "description": "A temporally-sequential array of Key Phrases"
            }
          ]
        }
      },
      "type_transcripts:AutoHighlightResult": {
        "name": "AutoHighlightResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "count",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The total number of times the key phrase appears in the audio file"
            },
            {
              "key": "rank",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              },
              "description": "The total relevancy to the overall audio file of this key phrase - a greater number means more relevant"
            },
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The text itself of the key phrase"
            },
            {
              "key": "timestamps",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:Timestamp"
                }
              },
              "description": "The timestamp of the of the key phrase"
            }
          ]
        }
      },
      "type_transcripts:TranscriptWord": {
        "name": "TranscriptWord",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "speaker",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The speaker of the sentence if [Speaker Diarization](https://www.assemblyai.com/docs/models/speaker-diarization) is enabled, else null"
            }
          ]
        }
      },
      "type_transcripts:TranscriptSentence": {
        "name": "TranscriptSentence",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "words",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptWord"
                }
              }
            },
            {
              "key": "speaker",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The speaker of the sentence if [Speaker Diarization](https://www.assemblyai.com/docs/models/speaker-diarization) is enabled, else null"
            }
          ]
        }
      },
      "type_transcripts:SentencesResponse": {
        "name": "SentencesResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "audio_duration",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            {
              "key": "sentences",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptSentence"
                }
              }
            }
          ]
        }
      },
      "type_transcripts:TranscriptParagraph": {
        "name": "TranscriptParagraph",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "words",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptWord"
                }
              }
            },
            {
              "key": "speaker",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The speaker of the sentence if [Speaker Diarization](https://www.assemblyai.com/docs/models/speaker-diarization) is enabled, else null"
            }
          ]
        }
      },
      "type_transcripts:ParagraphsResponse": {
        "name": "ParagraphsResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              }
            },
            {
              "key": "audio_duration",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            {
              "key": "paragraphs",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptParagraph"
                }
              }
            }
          ]
        }
      },
      "type_transcripts:PageDetails": {
        "name": "PageDetails",
        "description": "Details of the transcript page. Transcripts are sorted from newest to oldest. The previous URL always points to a page with older transcripts.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "limit",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The number of results this page is limited to"
            },
            {
              "key": "result_count",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "The actual number of results in the page"
            },
            {
              "key": "current_url",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The URL used to retrieve the current page of transcripts"
            },
            {
              "key": "prev_url",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL to the next page of transcripts. The previous URL always points to a page with older transcripts."
            },
            {
              "key": "next_url",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "The URL to the next page of transcripts. The next URL always points to a page with newer transcripts."
            }
          ]
        }
      },
      "type_transcripts:TranscriptListItem": {
        "name": "TranscriptListItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "resource_url",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "status",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:TranscriptStatus"
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            {
              "key": "completed",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            },
            {
              "key": "audio_url",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Error message of why the transcript failed"
            }
          ]
        }
      },
      "type_transcripts:TranscriptList": {
        "name": "TranscriptList",
        "description": "A list of transcripts. Transcripts are sorted from newest to oldest. The previous URL always points to a page with older transcripts.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "page_details",
              "valueShape": {
                "type": "id",
                "id": "type_transcripts:PageDetails"
              }
            },
            {
              "key": "transcripts",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_transcripts:TranscriptListItem"
                }
              }
            }
          ]
        }
      },
      "type_transcripts:AudioIntelligenceModelStatus": {
        "name": "AudioIntelligenceModelStatus",
        "description": "Either success, or unavailable in the rare case that the model failed",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "success"
            },
            {
              "value": "unavailable"
            }
          ]
        }
      },
      "type_realtime:RealtimeBaseMessage": {
        "name": "RealtimeBaseMessage",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message_type",
              "valueShape": {
                "type": "id",
                "id": "type_realtime:MessageType"
              },
              "description": "Describes the type of the message"
            }
          ]
        }
      },
      "type_realtime:RealtimeMessage": {
        "name": "RealtimeMessage",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Session Begins",
              "shape": {
                "type": "id",
                "id": "type_realtime:SessionBegins"
              }
            },
            {
              "displayName": "Partial Transcript",
              "shape": {
                "type": "id",
                "id": "type_realtime:PartialTranscript"
              }
            },
            {
              "displayName": "Final Transcript",
              "shape": {
                "type": "id",
                "id": "type_realtime:FinalTranscript"
              }
            },
            {
              "displayName": "Session Information",
              "shape": {
                "type": "id",
                "id": "type_realtime:SessionInformation"
              }
            },
            {
              "displayName": "Session Terminated",
              "shape": {
                "type": "id",
                "id": "type_realtime:SessionTerminated"
              }
            },
            {
              "displayName": "Realtime Error",
              "shape": {
                "type": "id",
                "id": "type_realtime:RealtimeError"
              }
            }
          ]
        }
      },
      "type_realtime:RealtimeError": {
        "name": "RealtimeError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          ]
        }
      },
      "type_realtime:MessageType": {
        "name": "MessageType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "SessionBegins"
            },
            {
              "value": "PartialTranscript"
            },
            {
              "value": "FinalTranscript"
            },
            {
              "value": "SessionInformation"
            },
            {
              "value": "SessionTerminated"
            }
          ]
        }
      },
      "type_realtime:RealtimeTranscriptType": {
        "name": "RealtimeTranscriptType",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "PartialTranscript"
            },
            {
              "value": "FinalTranscript"
            }
          ]
        }
      },
      "type_realtime:RealtimeTranscript": {
        "name": "RealtimeTranscript",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Partial Transcript",
              "shape": {
                "type": "id",
                "id": "type_realtime:PartialTranscript"
              }
            },
            {
              "displayName": "Final Transcript",
              "shape": {
                "type": "id",
                "id": "type_realtime:FinalTranscript"
              }
            }
          ]
        }
      },
      "type_realtime:SessionBegins": {
        "name": "SessionBegins",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message_type",
              "valueShape": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "SessionBegins"
                }
              },
              "description": "Describes the type of the message"
            },
            {
              "key": "session_id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "Unique identifier for the established session"
            },
            {
              "key": "expires_at",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              },
              "description": "Timestamp when this session will expire"
            }
          ]
        }
      },
      "type_realtime:SessionInformation": {
        "name": "SessionInformation",
        "description": "Information about the session that is concluding.\nThis message is sent at the end of the session, before the SessionTerminated message.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message_type",
              "valueShape": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "SessionInformation"
                }
              },
              "description": "Describes the type of the message"
            },
            {
              "key": "audio_duration_seconds",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              },
              "description": "The total duration of the audio in seconds"
            }
          ]
        }
      },
      "type_realtime:SessionTerminated": {
        "name": "SessionTerminated",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "message_type",
              "valueShape": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "SessionTerminated"
                }
              },
              "description": "Describes the type of the message"
            }
          ]
        }
      },
      "type_realtime:RealtimeBaseTranscript": {
        "name": "RealtimeBaseTranscript",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "audio_start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "Start time of audio sample relative to session start, in milliseconds"
            },
            {
              "key": "audio_end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "End time of audio sample relative to session start, in milliseconds"
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "The confidence score of the entire transcription, between 0 and 1"
            },
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The partial transcript for your audio"
            },
            {
              "key": "words",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_realtime:Word"
                }
              },
              "description": "An array of objects, with the information for each word in the transcription text.\nIncludes the start and end time of the word in milliseconds, the confidence score of the word, and the text, which is the word itself."
            },
            {
              "key": "created",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              },
              "description": "The timestamp for the partial transcript"
            }
          ]
        }
      },
      "type_realtime:PartialTranscript": {
        "name": "PartialTranscript",
        "shape": {
          "type": "object",
          "extends": [
            "type_realtime:RealtimeBaseTranscript"
          ],
          "properties": [
            {
              "key": "message_type",
              "valueShape": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "PartialTranscript"
                }
              },
              "description": "Describes the type of message"
            }
          ]
        }
      },
      "type_realtime:FinalTranscript": {
        "name": "FinalTranscript",
        "shape": {
          "type": "object",
          "extends": [
            "type_realtime:RealtimeBaseTranscript"
          ],
          "properties": [
            {
              "key": "message_type",
              "valueShape": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "FinalTranscript"
                }
              },
              "description": "Describes the type of message"
            },
            {
              "key": "punctuated",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether the text is punctuated and cased"
            },
            {
              "key": "text_formatted",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether the text is formatted, for example Dollar -> $"
            }
          ]
        }
      },
      "type_realtime:Word": {
        "name": "Word",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "start",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "Start time of the word in milliseconds"
            },
            {
              "key": "end",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              },
              "description": "End time of the word in milliseconds"
            },
            {
              "key": "confidence",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "double",
                  "minimum": 0,
                  "maximum": 1
                }
              },
              "description": "Confidence score of the word"
            },
            {
              "key": "text",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The word itself"
            }
          ]
        }
      },
      "type_realtime:AudioData": {
        "name": "AudioData",
        "description": "Binary audio data",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_realtime:ForceEndUtterance": {
        "name": "ForceEndUtterance",
        "description": "Manually end an utterance",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "force_end_utterance",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "A boolean value to communicate that you wish to force the end of the utterance"
            }
          ]
        }
      },
      "type_realtime:ConfigureEndUtteranceSilenceThreshold": {
        "name": "ConfigureEndUtteranceSilenceThreshold",
        "description": "Configure the threshold for how long to wait before ending an utterance. Default is 700ms.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "end_utterance_silence_threshold",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 20000
                }
              },
              "description": "The duration threshold in milliseconds"
            }
          ]
        }
      },
      "type_realtime:TerminateSession": {
        "name": "TerminateSession",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "terminate_session",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Set to true to end your streaming session forever"
            }
          ]
        }
      },
      "type_realtime:AudioEncoding": {
        "name": "AudioEncoding",
        "description": "The encoding of the audio data",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "PCM signed 16-bit little-endian",
              "value": "pcm_s16le"
            },
            {
              "description": "PCM Mu-law",
              "value": "pcm_mulaw"
            }
          ]
        }
      },
      "type_realtime:RealtimeTemporaryTokenResponse": {
        "name": "RealtimeTemporaryTokenResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "token",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The temporary authentication token for Streaming Speech-to-Text"
            }
          ]
        }
      },
      "type_lemur:PurgeLemurRequestDataResponse": {
        "name": "PurgeLemurRequestDataResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The ID of the deletion request of the LeMUR request"
            },
            {
              "key": "request_id_to_purge",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The ID of the LeMUR request to purge the data for"
            },
            {
              "key": "deleted",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              },
              "description": "Whether the request data was deleted"
            }
          ]
        }
      },
      "type_lemur:LemurBaseResponse": {
        "name": "LemurBaseResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The ID of the LeMUR request"
            }
          ]
        }
      },
      "type_lemur:LemurSummaryResponse": {
        "name": "LemurSummaryResponse",
        "shape": {
          "type": "object",
          "extends": [
            "type_lemur:LemurBaseResponse"
          ],
          "properties": [
            {
              "key": "response",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The response generated by LeMUR"
            }
          ]
        }
      },
      "type_lemur:LemurQuestionAnswerResponse": {
        "name": "LemurQuestionAnswerResponse",
        "shape": {
          "type": "object",
          "extends": [
            "type_lemur:LemurBaseResponse"
          ],
          "properties": [
            {
              "key": "response",
              "valueShape": {
                "type": "list",
                "itemShape": {
                  "type": "id",
                  "id": "type_lemur:LemurQuestionAnswer"
                }
              },
              "description": "The answers generated by LeMUR and their questions"
            }
          ]
        }
      },
      "type_lemur:LemurQuestionAnswer": {
        "name": "LemurQuestionAnswer",
        "description": "An answer generated by LeMUR and its question",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "question",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The question for LeMUR to answer"
            },
            {
              "key": "answer",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The answer generated by LeMUR"
            }
          ]
        }
      },
      "type_lemur:LemurActionItemsResponse": {
        "name": "LemurActionItemsResponse",
        "shape": {
          "type": "object",
          "extends": [
            "type_lemur:LemurBaseResponse"
          ],
          "properties": [
            {
              "key": "response",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The response generated by LeMUR"
            }
          ]
        }
      },
      "type_lemur:LemurTaskResponse": {
        "name": "LemurTaskResponse",
        "shape": {
          "type": "object",
          "extends": [
            "type_lemur:LemurBaseResponse"
          ],
          "properties": [
            {
              "key": "response",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The response generated by LeMUR."
            }
          ]
        }
      },
      "type_lemur:LemurBaseParamsContext": {
        "name": "LemurBaseParamsContext",
        "description": "Context to provide the model. This can be a string or a free-form JSON value.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "shape": {
                "type": "map",
                "keyShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueShape": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_lemur:LemurBaseParams": {
        "name": "LemurBaseParams",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "transcript_ids",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "A list of completed transcripts with text. Up to a maximum of 100 files or 100 hours, whichever is lower.\nUse either transcript_ids or input_text as input into LeMUR."
            },
            {
              "key": "input_text",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Custom formatted transcript data. Maximum size is the context limit of the selected model, which defaults to 100000.\nUse either transcript_ids or input_text as input into LeMUR."
            },
            {
              "key": "context",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_lemur:LemurBaseParamsContext"
                }
              },
              "description": "Context to provide the model. This can be a string or a free-form JSON value."
            },
            {
              "key": "final_model",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_lemur:LemurModel"
                }
              },
              "description": "The model that is used for the final prompt after compression is performed.\nDefaults to \"default\"."
            },
            {
              "key": "max_output_size",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Max output size in tokens, up to 4000"
            },
            {
              "key": "temperature",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "The temperature to use for the model.\nHigher values result in answers that are more creative, lower values are more conservative.\nCan be any value between 0.0 and 1.0 inclusive."
            }
          ]
        }
      },
      "type_lemur:LemurQuestionContext": {
        "name": "LemurQuestionContext",
        "description": "Any context about the transcripts you wish to provide. This can be a string or any object.",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "shape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "shape": {
                "type": "map",
                "keyShape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                },
                "valueShape": {
                  "type": "unknown"
                }
              }
            }
          ]
        }
      },
      "type_lemur:LemurQuestion": {
        "name": "LemurQuestion",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "question",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "The question you wish to ask. For more complex questions use default model."
            },
            {
              "key": "context",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "id",
                  "id": "type_lemur:LemurQuestionContext"
                }
              },
              "description": "Any context about the transcripts you wish to provide. This can be a string or any object."
            },
            {
              "key": "answer_format",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "How you want the answer to be returned. This can be any text. Can't be used with answer_options. Examples: \"short sentence\", \"bullet points\""
            },
            {
              "key": "answer_options",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "list",
                  "itemShape": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              },
              "description": "What discrete options to return. Useful for precise responses. Can't be used with answer_format. Example: [\"Yes\", \"No\"]"
            }
          ]
        }
      },
      "type_lemur:LemurModel": {
        "name": "LemurModel",
        "description": "The model that is used for the final prompt after compression is performed.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "LeMUR Default is best at complex reasoning. It offers more nuanced responses and improved contextual comprehension.",
              "value": "default"
            },
            {
              "description": "LeMUR Basic is a simplified model optimized for speed and cost. LeMUR Basic can complete requests up to 20% faster than Default.",
              "value": "basic"
            },
            {
              "description": "LeMUR Mistral 7B is an LLM self-hosted by AssemblyAI. It's the fastest and cheapest of the LLM options. We recommend it for use cases like basic summaries and factual Q&A.",
              "value": "assemblyai/mistral-7b"
            },
            {
              "description": "Claude 2.1 is similar to Default, with key improvements: it minimizes model hallucination and system prompts, has a larger context window, and performs better in citations.",
              "value": "anthropic/claude-2-1"
            }
          ]
        }
      },
      "type_streaming:Streaming": {
        "name": "Streaming",
        "description": "The encoding of the audio data",
        "shape": {
          "type": "enum",
          "values": [
            {
              "description": "PCM signed 16-bit little-endian",
              "value": "pcm_s16le"
            },
            {
              "description": "PCM Mu-law",
              "value": "pcm_mulaw"
            }
          ]
        }
      },
      "type_streaming:receiveMessage": {
        "name": "receiveMessage",
        "description": "Receive messages from the WebSocket",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Session Begins",
              "shape": {
                "type": "id",
                "id": "type_realtime:SessionBegins"
              }
            },
            {
              "displayName": "Partial Transcript",
              "shape": {
                "type": "id",
                "id": "type_realtime:PartialTranscript"
              }
            },
            {
              "displayName": "Final Transcript",
              "shape": {
                "type": "id",
                "id": "type_realtime:FinalTranscript"
              }
            },
            {
              "displayName": "Session Information",
              "shape": {
                "type": "id",
                "id": "type_realtime:SessionInformation"
              }
            },
            {
              "displayName": "Session Terminated",
              "shape": {
                "type": "id",
                "id": "type_realtime:SessionTerminated"
              }
            },
            {
              "displayName": "Realtime Error",
              "shape": {
                "type": "id",
                "id": "type_realtime:RealtimeError"
              }
            }
          ]
        }
      },
      "type_streaming:sendMessage": {
        "name": "sendMessage",
        "description": "Send messages to the WebSocket",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "Audio Data",
              "shape": {
                "type": "id",
                "id": "type_realtime:AudioData"
              }
            },
            {
              "displayName": "Terminate Session",
              "shape": {
                "type": "id",
                "id": "type_realtime:TerminateSession"
              }
            },
            {
              "displayName": "Force End Utterance",
              "shape": {
                "type": "id",
                "id": "type_realtime:ForceEndUtterance"
              }
            },
            {
              "displayName": "Configure End Utterance Silence Threshold",
              "shape": {
                "type": "id",
                "id": "type_realtime:ConfigureEndUtteranceSilenceThreshold"
              }
            }
          ]
        }
      },
      "type_:Error": {
        "name": "Error",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              },
              "description": "Error message"
            },
            {
              "key": "status",
              "valueShape": {
                "type": "optional",
                "shape": {
                  "type": "literal",
                  "value": {
                    "type": "stringLiteral",
                    "value": "error"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_files": {
        "id": "subpackage_files",
        "name": "files"
      },
      "subpackage_transcripts": {
        "id": "subpackage_transcripts",
        "name": "transcripts"
      },
      "subpackage_lemur": {
        "id": "subpackage_lemur",
        "name": "lemur",
        "displayName": "LeMUR"
      },
      "subpackage_streaming": {
        "id": "subpackage_streaming",
        "name": "streaming"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "Authorization",
        "nameOverride": "apiKey"
      }
    }
  }
]