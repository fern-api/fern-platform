[
  {
    "id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
    "endpoints": {
      "subpackage_fileInformation.fileInfoJson": {
        "id": "subpackage_fileInformation.fileInfoJson",
        "namespace": [
          "subpackage_fileInformation"
        ],
        "description": "Returns file-related information, such as image dimensions or geo\ntagging data in the JSON format.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/-/json"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://ucarecdn.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique file identifier"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:File"
            }
          }
        },
        "errors": [
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/d7fe74ac-65b8-4ade-875f-ccd92759a70f/-/json",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "d7fe74ac-65b8-4ade-875f-ccd92759a70f"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                "dpi": [
                  300,
                  300
                ],
                "width": 3432,
                "format": "JPEG",
                "height": 3432,
                "sequence": false,
                "color_mode": "RGB",
                "orientation": 6,
                "geo_location": {
                  "latitude": -1.1884555555555556,
                  "longitude": 52.66996666666667
                },
                "datetime_original": "2020-06-07T14:38:16Z",
                "hash": "e98d9466a33a9c8b"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://ucarecdn.com/d7fe74ac-65b8-4ade-875f-ccd92759a70f/-/json",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/:uuid/-/json",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://ucarecdn.com/:uuid/-/json",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_fileInformation.fileInfoJsonp": {
        "id": "subpackage_fileInformation.fileInfoJsonp",
        "namespace": [
          "subpackage_fileInformation"
        ],
        "description": "Same as the example above, but it returns data as the\n`application/javascript` type.\nThe callback name should always be `uploadcare_callback`. It should\nreceive the two following arguments: `id` and a response object.\nFor original files, id is equivalent to their UUIDs.\nFor processed files, `id` is equivalent to their URLs, excluding\nthe last operation, `jsonp`.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/-/jsonp"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://ucarecdn.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique file identifier"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:File"
            }
          }
        },
        "errors": [
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/d7fe74ac-65b8-4ade-875f-ccd92759a70f/-/jsonp",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "d7fe74ac-65b8-4ade-875f-ccd92759a70f"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                "dpi": [
                  300,
                  300
                ],
                "width": 3432,
                "format": "JPEG",
                "height": 3432,
                "sequence": false,
                "color_mode": "RGB",
                "orientation": 6,
                "geo_location": {
                  "latitude": -1.1884555555555556,
                  "longitude": 52.66996666666667
                },
                "datetime_original": "2020-06-07T14:38:16Z",
                "hash": "e98d9466a33a9c8b"
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://ucarecdn.com/d7fe74ac-65b8-4ade-875f-ccd92759a70f/-/jsonp",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/:uuid/-/jsonp",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://ucarecdn.com/:uuid/-/jsonp",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_fileNames.fileWithName": {
        "id": "subpackage_fileNames.fileWithName",
        "namespace": [
          "subpackage_fileNames"
        ],
        "description": "You can set an optional filename that users will see instead of\nthe original name.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/"
          },
          {
            "type": "pathParameter",
            "value": "filename"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://ucarecdn.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Unique file identifier"
          },
          {
            "key": "filename",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "An optional filename that users will see instead of the original name."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "fileDownload"
          }
        },
        "examples": [
          {
            "path": "/d7fe74ac-65b8-4ade-875f-ccd92759a70f/cat.jpg",
            "responseStatusCode": 204,
            "pathParameters": {
              "uuid": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
              "filename": "cat.jpg"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://ucarecdn.com/d7fe74ac-65b8-4ade-875f-ccd92759a70f/cat.jpg",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_:FileColorMode": {
        "name": "FileColorMode",
        "description": "Image color mode.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "RGB"
            },
            {
              "value": "RGBA"
            },
            {
              "value": "RGBa"
            },
            {
              "value": "RGBX"
            },
            {
              "value": "L"
            },
            {
              "value": "LA"
            },
            {
              "value": "La"
            },
            {
              "value": "P"
            },
            {
              "value": "PA"
            },
            {
              "value": "CMYK"
            },
            {
              "value": "YCbCr"
            },
            {
              "value": "HSV"
            },
            {
              "value": "LAB"
            }
          ]
        }
      },
      "type_:FileGeoLocation": {
        "name": "FileGeoLocation",
        "description": "Geo-location of image from EXIF.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location latitude."
            },
            {
              "key": "longitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location longitude."
            }
          ]
        }
      },
      "type_:File": {
        "name": "File",
        "description": "File object.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File UUID."
            },
            {
              "key": "dpi",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Image DPI for two dimensions."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Image width in pixels."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Image format."
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Image height in pixels."
            },
            {
              "key": "sequence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Set to true if a file contains a sequence of images (GIF for example)."
            },
            {
              "key": "color_mode",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FileColorMode"
                    }
                  }
                }
              },
              "description": "Image color mode."
            },
            {
              "key": "orientation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Image orientation from EXIF."
            },
            {
              "key": "geo_location",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FileGeoLocation"
                    }
                  }
                }
              },
              "description": "Geo-location of image from EXIF."
            },
            {
              "key": "datetime_original",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF."
            },
            {
              "key": "hash",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "File info response includes a value of a perceptual hash calculated\nusing pixel contents of an image. Perceptual hashing is a common\nfingerprinting technique to quickly compare images and find duplicates\nor similar images. Uploadcare automatically calculates a 64-bit long\nperceptual hash value and returns it as a HEX string. It's easy to find\nimage duplicates by quickly comparing their perceptual hash values.\nTo find similar images, it's important to compare perceptual hash values\nbitwise (<a href=\"https://en.wikipedia.org/wiki/Hamming_distance\">Hamming distance</a>).\nA small number of unmatched bits (e.g., up to 8 bits) will correspond\nto subtle changes in the visual contents, while non-similar images\nwill usually have more than 8 different bits."
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_fileInformation": {
        "id": "subpackage_fileInformation",
        "name": "File information"
      },
      "subpackage_fileNames": {
        "id": "subpackage_fileNames",
        "name": "File names"
      }
    },
    "auths": {}
  },
  {
    "id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
    "endpoints": {
      "subpackage_upload.baseUpload": {
        "id": "subpackage_upload.baseUpload",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "Direct file uploads comply with the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) standard.\nIn other words, you can perform a direct upload by making an HTTP POST request with the Content-Type\nheader set to `multipart/form-data`.\n\n**Note**: Direct file uploads support files smaller than 100 megabytes only.\nIf you would like to upload larger files, please use [Multipart Uploads](/api-refs/upload-api/#operation/multipartFileUploadStart) instead.\n\nFile upload example with curl:\n\n```\ncurl -F \"UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY\" -F \"my_file.jpg=@my_file.jpg\" \"https://upload.uploadcare.com/base/\"\n```",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/base"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "formData",
            "fields": [
              {
                "type": "property",
                "key": "UPLOADCARE_PUB_KEY",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectPublicKeyType"
                  }
                }
              },
              {
                "type": "property",
                "key": "UPLOADCARE_STORE",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:StoreType"
                      }
                    }
                  }
                }
              },
              {
                "type": "file",
                "key": "{filename}",
                "isOptional": false
              },
              {
                "type": "property",
                "key": "metadata[{key}]",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:MetadataValue"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "signature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:SignatureType"
                      }
                    }
                  }
                }
              },
              {
                "type": "property",
                "key": "expire",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ExpireType"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_upload:BaseUploadResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Payload Too Large",
            "statusCode": 413,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/base",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                "metadata[{key}]": "#/components/examples/metadataValue/value",
                "signature": "04b29480233f4def5c875875b6bdc3b1",
                "expire": 1454902434
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "filename": "filename"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { base } from '@uploadcare/upload-client'\n\n// fileData must be `Blob` or `File` or `Buffer`\nconst result = await base(\n  fileData,\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    store: 'auto',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$fileInfo = $uploader->fromPath(__DIR__ . '/squirrel.jpg', null, null, 'auto', [\n    'system' => 'php-uploader',\n    'pet' => 'cat',\n]);\necho \\sprintf(\"URL: %s, ID: %s, Mime type: %s\\n\", $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\nforeach ($fileInfo->getMetadata() as $key => $value) {\n    echo \\sprintf(\"%s: %s\\n\", $key, $value);\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.upload(file_object)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"squirrel\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\n\nlet file = try await uploadcare.uploadFile(data, withName: \"random_file_name.jpg\", store: .auto) { progress in\n  print(\"progress: \\(progress)\")\n}\nprkint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/base \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"caa9d29da887ee88ffe6\",\n  \"metadata[{key}]\": \"#/components/examples/metadataValue/value\",\n  \"signature\": \"04b29480233f4def5c875875b6bdc3b1\",\n  \"expire\": 1454902434\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/base",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/base \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/base",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/base \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/base",
            "responseStatusCode": 413,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/base \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/base",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/base \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_upload.multipartFileUploadStart": {
        "id": "subpackage_upload.multipartFileUploadStart",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to\nexplicitly trigger [AWS S3 Transfer Acceleration](https://aws.amazon.com/s3/transfer-acceleration/).\nWhen you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.\n\nTo upload large files, 3 requests are sent in sequence:\n\n1. `/multipart/start/`\n2. `<presigned-url-x>`\n3. `/multipart/complete/`.\n\n**Note**: Multipart uploads support files larger than 10 megabytes only.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/multipart/start"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "UPLOADCARE_PUB_KEY",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectPublicKeyType"
                  }
                }
              },
              {
                "key": "UPLOADCARE_STORE",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:StoreType"
                      }
                    }
                  }
                }
              },
              {
                "key": "filename",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Original file name of the uploaded file"
              },
              {
                "key": "size",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                "description": "Precise file size of the uploaded file (in bytes).\n**Note**: The size should not exceed max file size cap for your project.\n"
              },
              {
                "key": "part_size",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "description": "Multipart Uploads expect that you will split the uploaded file into equally sized\nparts (except for the last part) and then will upload them to AWS S3 (possibly in parallel).\nBy default, we assume that you will upload the files in 5 megabyte chunks,\nso we return a list of presigned AWS S3 URLs accordingly.\nIf you intend to upload large files (for example, larger than a gigabyte),\nwe recommend to bump the part size and to pass the expected chunk size\nto us as a value of the `part_size` parameter (in bytes).\n"
              },
              {
                "key": "content_type",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "File's MIME-type."
              },
              {
                "key": "metadata[{key}]",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:MetadataValue"
                      }
                    }
                  }
                }
              },
              {
                "key": "signature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:SignatureType"
                      }
                    }
                  }
                }
              },
              {
                "key": "expire",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ExpireType"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_upload:MultipartFileUploadStartResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/multipart/start",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                "filename": "filename",
                "size": 1,
                "content_type": "content_type",
                "metadata[{key}]": "#/components/examples/metadataValue/value",
                "signature": "04b29480233f4def5c875875b6bdc3b1",
                "expire": 1454902434
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841",
                "parts": [
                  "<presigned-url-1>",
                  "<presigned-url-2>",
                  "<presigned-url-3>",
                  "<presigned-url-4>",
                  "<presigned-url-5>"
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { multipartStart } from '@uploadcare/upload-client'\n\nconst result = await multipartStart(\n  27796904,\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    store: 'auto',\n    fileName: 'myfile.mp4',\n    contentType: 'video/mp4',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/start \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"caa9d29da887ee88ffe6\",\n  \"filename\": \"filename\",\n  \"size\": 1,\n  \"content_type\": \"content_type\",\n  \"metadata[{key}]\": \"#/components/examples/metadataValue/value\",\n  \"signature\": \"04b29480233f4def5c875875b6bdc3b1\",\n  \"expire\": 1454902434\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/multipart/start",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string",
                "filename": "string",
                "size": 0,
                "content_type": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/start \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\",\n  \"filename\": \"string\",\n  \"size\": 0,\n  \"content_type\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/multipart/start",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string",
                "filename": "string",
                "size": 0,
                "content_type": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/start \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\",\n  \"filename\": \"string\",\n  \"size\": 0,\n  \"content_type\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/multipart/start",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string",
                "filename": "string",
                "size": 0,
                "content_type": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/start \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\",\n  \"filename\": \"string\",\n  \"size\": 0,\n  \"content_type\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_upload.multipartFileUploadPart": {
        "id": "subpackage_upload.multipartFileUploadPart",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the\n`/multipart/start/` endpoint.\n\nEach uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.\nYou can upload the file parts in parallel provided that the byte order stays unchanged.\n\n**Note**: You MUST define `Content-Type` header for your data.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/<presigned-url-x>"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/octet-stream",
          "body": {
            "type": "bytes",
            "isOptional": false,
            "contentType": "application/octet-stream"
          }
        },
        "examples": [
          {
            "path": "/<presigned-url-x>",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://upload.uploadcare.com/<presigned-url-x> \\\n     -H \"Content-Type: application/octet-stream\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_upload.multipartFileUploadComplete": {
        "id": "subpackage_upload.multipartFileUploadComplete",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "Once all the file parts have been uploaded successfully, complete the\nupload session to assemble all the file parts into a single resulting file.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/multipart/complete"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "UPLOADCARE_PUB_KEY",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectPublicKeyType"
                  }
                }
              },
              {
                "key": "uuid",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "File's UUID from the `/multipart/start/` endpoint."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FileUploadInfo"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/multipart/complete",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                "uuid": "uuid"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                "size": 2667636,
                "total": 2667636,
                "done": 2667636,
                "original_filename": "IMG-0412_123.JPG",
                "filename": "IMG0412_123.JPG",
                "mime_type": "image/jpeg",
                "is_image": true,
                "is_stored": true,
                "is_ready": true,
                "image_info": {
                  "color_mode": "RGB",
                  "format": "JPEG",
                  "sequence": false,
                  "height": 4032,
                  "width": 3024,
                  "orientation": 6,
                  "geo_location": {
                    "latitude": 55.62013611111111,
                    "longitude": 37.66299166666666
                  },
                  "datetime_original": "2018-08-20T12:59:50Z",
                  "dpi": [
                    72,
                    72
                  ]
                },
                "video_info": {
                  "duration": 261827,
                  "format": "mp4",
                  "bitrate": 393,
                  "audio": {
                    "bitrate": 78,
                    "codec": "aac",
                    "sample_rate": 44100,
                    "channels": "2"
                  },
                  "video": {
                    "height": 360,
                    "width": 640,
                    "frame_rate": 30,
                    "bitrate": 315,
                    "codec": "h264"
                  }
                },
                "content_info": {
                  "mime": {
                    "mime": "image/jpeg",
                    "type": "image",
                    "subtype": "jpeg"
                  },
                  "image": {
                    "color_mode": "RGB",
                    "format": "JPEG",
                    "sequence": false,
                    "height": 4032,
                    "width": 3024,
                    "orientation": 6,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "2018-08-20T12:59:50Z",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video": {
                    "format": "mp4",
                    "audio": [
                      {
                        "bitrate": 78,
                        "codec": "aac",
                        "sample_rate": 44100,
                        "channels": 2
                      }
                    ],
                    "video": [
                      {
                        "height": 360,
                        "width": 640,
                        "frame_rate": 30,
                        "bitrate": 315,
                        "codec": "h264"
                      }
                    ],
                    "duration": 261827,
                    "bitrate": 393
                  }
                },
                "metadata": {
                  "subsystem": "uploader",
                  "pet": "cat"
                },
                "s3_bucket": "custom-s3-bucket-name"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { multipartComplete } from '@uploadcare/upload-client'\n\nconst result = await multipartComplete(\n  '67947755-1584-4e3f-902b-d4e2bf76a841',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/complete \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"caa9d29da887ee88ffe6\",\n  \"uuid\": \"uuid\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/multipart/complete",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string",
                "uuid": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/complete \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\",\n  \"uuid\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/multipart/complete",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string",
                "uuid": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/complete \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\",\n  \"uuid\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/multipart/complete",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "UPLOADCARE_PUB_KEY": "string",
                "uuid": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/multipart/complete \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"UPLOADCARE_PUB_KEY\": \"string\",\n  \"uuid\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_upload.fromURLUpload": {
        "id": "subpackage_upload.fromURLUpload",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the\nfetched file to your project.\n\n#### Upload tokens\n\nRequests to the endpoint return a JSON dictionary with a `token` that can be further used\nto [check the status](/api-refs/upload-api/#operation/fromURLUploadStatus) of the upload\nrequest.\n\n**Note:** The token is not a file ID and can't be used to address the file directly.\nThe actual file ID should be retrieved by calling the `/from_url/status/` endpoint.\n\n#### Duplicates prevention\n\nBy default, every call to the `/from_url/` endpoint with the same `source_url` results in\na new upload leading to file duplication.\n\nIf you would like Uploadcare to keep track of the requested URLs and avoid the duplicate\nuploads, pass the `save_URL_duplicates` and `check_URL_duplicates` parameters described below.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/from_url"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "pub_key",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectPublicKeyType"
                  }
                }
              },
              {
                "key": "source_url",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Source URL of the file to fetch and upload.\n\n**Note**: The URL should point to a resource publicly available via HTTP/HTTPS.\n"
              },
              {
                "key": "store",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:StoreType"
                      }
                    }
                  }
                }
              },
              {
                "key": "filename",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Sets the file name of the resource fetched from the source URL.\nIf not defined, the file name is obtained from either HTTP\nresponse headers or the `source_url`'s path.\n\n**Note:** The filename will be sanitized to only contain the following symbols:\n`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._`.\n"
              },
              {
                "key": "check_URL_duplicates",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_upload:FromUrlUploadRequestCheckUrlDuplicates"
                      }
                    }
                  }
                },
                "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.\n"
              },
              {
                "key": "save_URL_duplicates",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_upload:FromUrlUploadRequestSaveUrlDuplicates"
                      }
                    }
                  }
                },
                "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.\n"
              },
              {
                "key": "metadata[{key}]",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:MetadataValue"
                      }
                    }
                  }
                }
              },
              {
                "key": "signature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:SignatureType"
                      }
                    }
                  }
                }
              },
              {
                "key": "expire",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ExpireType"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_upload:FromUrlUploadResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/from_url",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "caa9d29da887ee88ffe6",
                "source_url": "source_url",
                "metadata[{key}]": "#/components/examples/metadataValue/value",
                "signature": "04b29480233f4def5c875875b6bdc3b1",
                "expire": 1454902434
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "type": "token",
                "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { fromUrl } from '@uploadcare/upload-client'\n\nconst result = await fromUrl(\n  'https://source.unsplash.com/featured',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$url = 'https://source.unsplash.com/featured';\n$token = $uploader->fromUrl($url, null, null, 'auto', [\n    'action' => 'upload from URL', // The \"Action\" is the metadata key\n    'checkDuplicates' => true,\n    'storeDuplicates' => false,\n]);\necho \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nucare_file = uploadcare.upload_from_url_sync(\n    \"https://source.unsplash.com/featured\",\n    check_duplicates=True,\n    save_duplicates=False\n)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nsource_url = \"https://source.unsplash.com/featured\"\nuploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://source.unsplash.com/featured\")!\nlet task = UploadFromURLTask(sourceUrl: url)\n  .store(.auto)\n  .setMetadata(\"uploader\", forKey: \"subsystem\")\n  .setMetadata(\"cat\", forKey: \"pet\")\n\nlet file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uploader = UrlUploader(\n    client = uploadcare,\n    sourceUrl = \"https://source.unsplash.com/featured\"\n)\nval file = uploader.upload()\nLog.d(\"TAG\", file.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/from_url \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"caa9d29da887ee88ffe6\",\n  \"source_url\": \"source_url\",\n  \"metadata[{key}]\": \"#/components/examples/metadataValue/value\",\n  \"signature\": \"04b29480233f4def5c875875b6bdc3b1\",\n  \"expire\": 1454902434\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/from_url",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "string",
                "source_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/from_url \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"string\",\n  \"source_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/from_url",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "string",
                "source_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/from_url \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"string\",\n  \"source_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/from_url",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "string",
                "source_url": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/from_url \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"string\",\n  \"source_url\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_upload.fromURLUploadStatus": {
        "id": "subpackage_upload.fromURLUploadStatus",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "The endpoint notifies about the progress of the task by changing the value of the `status` field:\n\n- the field is set to `waiting` initially\n- once the system starts processing the request, the field is set to `progress`\n- if the file is fetched and uploaded successfully, the `status` field is set to `success`\n  and the endpoint returns a JSON object holding information about the uploaded file\n- if the system fails to fetch/upload the file, the `status` field is set to `error` and\n  the `error` field is set to the cause of the error.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/from_url/status"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Token returned by the `/from_url/` endpoint that identifies a request to fetch/upload a file from a URL."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_upload:FromUrlUploadStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/from_url/status",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "token": "token"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "waiting"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/from_url/status \\\n     -d token=token",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/from_url/status",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "token": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/from_url/status \\\n     -d token=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_upload.fileUploadInfo": {
        "id": "subpackage_upload.fileUploadInfo",
        "namespace": [
          "subpackage_upload"
        ],
        "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/info"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "pub_key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ProjectPublicKeyType"
              }
            }
          },
          {
            "key": "file_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File's unique ID."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:FileUploadInfo"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/info",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "caa9d29da887ee88ffe6",
              "file_id": "file_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                "size": 2667636,
                "total": 2667636,
                "done": 2667636,
                "original_filename": "IMG-0412_123.JPG",
                "filename": "IMG0412_123.JPG",
                "mime_type": "image/jpeg",
                "is_image": true,
                "is_stored": true,
                "is_ready": true,
                "image_info": {
                  "color_mode": "RGB",
                  "format": "JPEG",
                  "sequence": false,
                  "height": 4032,
                  "width": 3024,
                  "orientation": 6,
                  "geo_location": {
                    "latitude": 55.62013611111111,
                    "longitude": 37.66299166666666
                  },
                  "datetime_original": "2018-08-20T12:59:50Z",
                  "dpi": [
                    72,
                    72
                  ]
                },
                "video_info": {
                  "duration": 261827,
                  "format": "mp4",
                  "bitrate": 393,
                  "audio": {
                    "bitrate": 78,
                    "codec": "aac",
                    "sample_rate": 44100,
                    "channels": "2"
                  },
                  "video": {
                    "height": 360,
                    "width": 640,
                    "frame_rate": 30,
                    "bitrate": 315,
                    "codec": "h264"
                  }
                },
                "content_info": {
                  "mime": {
                    "mime": "image/jpeg",
                    "type": "image",
                    "subtype": "jpeg"
                  },
                  "image": {
                    "color_mode": "RGB",
                    "format": "JPEG",
                    "sequence": false,
                    "height": 4032,
                    "width": 3024,
                    "orientation": 6,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "2018-08-20T12:59:50Z",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video": {
                    "format": "mp4",
                    "audio": [
                      {
                        "bitrate": 78,
                        "codec": "aac",
                        "sample_rate": 44100,
                        "channels": 2
                      }
                    ],
                    "video": [
                      {
                        "height": 360,
                        "width": 640,
                        "frame_rate": 30,
                        "bitrate": 315,
                        "codec": "h264"
                      }
                    ],
                    "duration": 261827,
                    "bitrate": 393
                  }
                },
                "metadata": {
                  "subsystem": "uploader",
                  "pet": "cat"
                },
                "s3_bucket": "custom-s3-bucket-name"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { info } from '@uploadcare/upload-client'\n\nconst result = await info(\n  'be3b4d5e-179d-460e-8a5d-69112ac86cbb',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->fileInfo(string $uuid);\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file('740e1b8c-1ad8-4324-b7ec-112c79d8eac2')\nprint(file.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '740e1b8c-1ad8-4324-b7ec-112c79d8eac2'\ninfo = Uploadcare::File.info(uuid)\nputs info.inspect\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.uploadAPI.fileInfo(withFileId: \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getUploadedFile(fileId = \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nLog.d(\"TAG\", file.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/info \\\n     -d pub_key=caa9d29da887ee88ffe6 \\\n     -d file_id=file_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/info",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "string",
              "file_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/info \\\n     -d pub_key=string \\\n     -d file_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/info",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "string",
              "file_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/info \\\n     -d pub_key=string \\\n     -d file_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/info",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "string",
              "file_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/info \\\n     -d pub_key=string \\\n     -d file_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_groups.createFilesGroup": {
        "id": "subpackage_groups.createFilesGroup",
        "namespace": [
          "subpackage_groups"
        ],
        "description": "Create a file group from a set of already uploaded files.\n\nThe most common use case for creating a file group is when a user uploads\nmultiple files at once and then wants to display them together.\n\n**Note:** A group itself and files within it MUST belong to the same project.\n\n**Note:** Groups are immutable and the only way to add/remove a file to a group\nis to create a new one.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/group"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "multipart/form-data",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "pub_key",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_:ProjectPublicKeyType"
                  }
                }
              },
              {
                "key": "files[]",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "list",
                    "itemShape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "description": "Set of files you want to add to the group.\nEach element can be a file UUID with or without the applied image\nprocessing operations.\n"
              },
              {
                "key": "signature",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:SignatureType"
                      }
                    }
                  }
                }
              },
              {
                "key": "expire",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_:ExpireType"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:GroupInfo"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/group",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "caa9d29da887ee88ffe6",
                "files[]": [
                  "files[]"
                ],
                "signature": "04b29480233f4def5c875875b6bdc3b1",
                "expire": 1454902434
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                "datetime_created": "2018-09-12T10:03:38Z",
                "datetime_stored": "2015-09-21T12:39:13Z",
                "files_count": 1,
                "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                "files": [
                  {
                    "default_effects": "resize/x800/",
                    "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "size": 2667636,
                    "total": 2667636,
                    "done": 2667636,
                    "original_filename": "IMG-0412_123.JPG",
                    "filename": "IMG0412_123.JPG",
                    "mime_type": "image/jpeg",
                    "image_info": {
                      "color_mode": "RGB",
                      "orientation": 6,
                      "format": "JPEG",
                      "height": 4032,
                      "width": 3024,
                      "sequence": false,
                      "geo_location": {
                        "latitude": 55.62013611111111,
                        "longitude": 37.66299166666666
                      },
                      "datetime_original": "2018-08-20T08:59:50",
                      "dpi": {
                        "0": 72,
                        "1": 72
                      }
                    },
                    "content_info": {
                      "mime": {
                        "mime": "image/jpeg",
                        "type": "image",
                        "subtype": "jpeg"
                      },
                      "image": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "height": 4032,
                        "width": 3024,
                        "sequence": false,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T08:59:50",
                        "dpi": {
                          "0": 72,
                          "1": 72
                        }
                      }
                    },
                    "metadata": {
                      "subsystem": "uploader",
                      "pet": "cat"
                    },
                    "is_image": true,
                    "is_stored": true,
                    "is_ready": true
                  }
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { group } from '@uploadcare/upload-client'\n\nconst result = await group(\n  [\n    'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n    'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n  ],\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$result = $uploader->groupFiles(['d6d34fa9-addd-472c-868d-2e5c105f9fcd', 'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/']);\necho \\sprintf('Response status is %s', $result->getStatusCode());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, File, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_1 = uploadcare.file('d6d34fa9-addd-472c-868d-2e5c105f9fcd')\nfile_2 = uploadcare.file('b1026315-8116-4632-8364-607e64fca723/-/resize/x800/')\nfile_group = uploadcare.create_file_group([file_1, file_2])\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nuuids = [\n  'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n  'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n]\ngroup = Uploadcare::Group.create(uuids)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet filesIds = [\"d6d34fa9-addd-472c-868d-2e5c105f9fcd\", \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"]\nlet group = try await uploadAPI.createFilesGroup(fileIds: filesIds)\nprint(group)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"d6d34fa9-addd-472c-868d-2e5c105f9fcd\",\n    \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"\n)\nval group = uploadcare.createGroup(fileIds = uuids)\nLog.d(\"TAG\", group.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/group \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"caa9d29da887ee88ffe6\",\n  \"files[]\": [\n    \"files[]\"\n  ],\n  \"signature\": \"04b29480233f4def5c875875b6bdc3b1\",\n  \"expire\": 1454902434\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/group",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "string",
                "files[]": [
                  "string"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/group \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"string\",\n  \"files[]\": [\n    \"string\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/group",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "pub_key": "string",
                "files[]": [
                  "string"
                ]
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://upload.uploadcare.com/group \\\n     -H \"Content-Type: multipart/form-data\" \\\n     -d '{\n  \"pub_key\": \"string\",\n  \"files[]\": [\n    \"string\"\n  ]\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_groups.filesGroupInfo": {
        "id": "subpackage_groups.filesGroupInfo",
        "namespace": [
          "subpackage_groups"
        ],
        "description": "Returns a JSON object with information about a file group (when the group was created,\nnumber of the files in the group, etc).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/group/info"
          }
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://upload.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "pub_key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "id",
                "id": "type_:ProjectPublicKeyType"
              }
            }
          },
          {
            "key": "group_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Group's unique ID. Group IDs look like `UUID~N`, where the `~N` part reflects the number of the files in the group."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:GroupInfo"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Forbidden",
            "statusCode": 403,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/group/info",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "caa9d29da887ee88ffe6",
              "group_id": "group_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                "datetime_created": "2018-09-12T10:03:38Z",
                "datetime_stored": "2015-09-21T12:39:13Z",
                "files_count": 1,
                "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                "files": [
                  {
                    "default_effects": "resize/x800/",
                    "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                    "size": 2667636,
                    "total": 2667636,
                    "done": 2667636,
                    "original_filename": "IMG-0412_123.JPG",
                    "filename": "IMG0412_123.JPG",
                    "mime_type": "image/jpeg",
                    "image_info": {
                      "color_mode": "RGB",
                      "orientation": 6,
                      "format": "JPEG",
                      "height": 4032,
                      "width": 3024,
                      "sequence": false,
                      "geo_location": {
                        "latitude": 55.62013611111111,
                        "longitude": 37.66299166666666
                      },
                      "datetime_original": "2018-08-20T08:59:50",
                      "dpi": {
                        "0": 72,
                        "1": 72
                      }
                    },
                    "content_info": {
                      "mime": {
                        "mime": "image/jpeg",
                        "type": "image",
                        "subtype": "jpeg"
                      },
                      "image": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "height": 4032,
                        "width": 3024,
                        "sequence": false,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T08:59:50",
                        "dpi": {
                          "0": 72,
                          "1": 72
                        }
                      }
                    },
                    "metadata": {
                      "subsystem": "uploader",
                      "pet": "cat"
                    },
                    "is_image": true,
                    "is_stored": true,
                    "is_ready": true
                  }
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import { groupInfo } from '@uploadcare/upload-client'\n\nconst result = await groupInfo(\n  '0d712319-b970-4602-850c-bae1ced521a6~1',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$groupInfo = $uploader->groupInfo('0d712319-b970-4602-850c-bae1ced521a6~1');\necho $groupInfo->getBody()->getContents();\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_group = uploadcare.file_group('0d712319-b970-4602-850c-bae1ced521a6~1')\nprint(file_group.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '0d712319-b970-4602-850c-bae1ced521a6~1'\ninfo = Uploadcare::Group.info(uuid)\nputs info.inspect\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.uploadAPI.filesGroupInfo(groupId: \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nprint(group)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getUploadedGroup(groupId = \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nLog.d(\"TAG\", group.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/group/info \\\n     -d pub_key=caa9d29da887ee88ffe6 \\\n     -d group_id=group_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/group/info",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "string",
              "group_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/group/info \\\n     -d pub_key=string \\\n     -d group_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/group/info",
            "responseStatusCode": 403,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "string",
              "group_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/group/info \\\n     -d pub_key=string \\\n     -d group_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/group/info",
            "responseStatusCode": 404,
            "pathParameters": {},
            "queryParameters": {
              "pub_key": "string",
              "group_id": "string"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://upload.uploadcare.com/group/info \\\n     -d pub_key=string \\\n     -d group_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_upload:BaseUploadResponse": {
        "name": "BaseUploadResponse",
        "description": "JSON object where the key is the file name of the uploaded file and\nthe value is the unique ID of the file on our systems.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_upload:MultipartFileUploadStartResponse": {
        "name": "MultipartFileUploadStartResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File's UUID."
            },
            {
              "key": "parts",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_upload:FromUrlUploadRequestCheckUrlDuplicates": {
        "name": "FromUrlUploadRequestCheckUrlDuplicates",
        "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0"
            },
            {
              "value": "1"
            }
          ]
        }
      },
      "type_upload:FromUrlUploadRequestSaveUrlDuplicates": {
        "name": "FromUrlUploadRequestSaveUrlDuplicates",
        "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0"
            },
            {
              "value": "1"
            }
          ]
        }
      },
      "type_upload:FromUrlUploadResponse": {
        "name": "FromUrlUploadResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "From Url Upload Response Schema",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FromUrlUploadResponseSchema"
                }
              }
            },
            {
              "displayName": "File Upload Info From Url",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileUploadInfoFromUrl"
                }
              }
            }
          ]
        }
      },
      "type_upload:FromUrlUploadStatusResponse": {
        "name": "FromUrlUploadStatusResponse",
        "shape": {
          "type": "undiscriminatedUnion",
          "variants": [
            {
              "displayName": "File Upload Info Waiting Status",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileUploadInfoWaitingStatus"
                }
              }
            },
            {
              "displayName": "File Upload Info Progress Status",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileUploadInfoProgressStatus"
                }
              }
            },
            {
              "displayName": "File Upload Info Success Status",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileUploadInfoSuccessStatus"
                }
              }
            },
            {
              "displayName": "File Upload Info Error Status",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileUploadInfoErrorStatus"
                }
              }
            },
            {
              "displayName": "File Upload Info Unknown Status",
              "shape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:FileUploadInfoUnknownStatus"
                }
              }
            }
          ]
        }
      },
      "type_:SignatureType": {
        "name": "SignatureType",
        "description": "`signature` must be sent along with your upload request if you would like to use signed uploads.\nThe signature should be generated on your backend.\n**Note**: the process requires knowledge of your Uploadcare Project's Secret key.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:ExpireType": {
        "name": "ExpireType",
        "description": "`expire` must be sent along with your upload request if you would like to use signed uploads.\nThe parameter defines the time during which your signature is valid. It's a UNIX timestamp.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "double"
            }
          }
        }
      },
      "type_:StoreType": {
        "name": "StoreType",
        "description": "Determines if an uploaded file should be marked as temporary or permanent.\n\nThe parameter can have the following values:\n\n- `0` - do not mark an uploaded file as stored and remove it after 24 hours\n- `1` - mark the uploaded file as stored\n- `auto` - delegate the choice of the file-storing behavior to a project-wide setting called\n  [auto-store](https://app.uploadcare.com/projects/-/settings/#storage).\n\nThe default value depends on the user registration date.\n\nFor all users registered after February 12, 2024 (UTC 13:30), the default value is `auto`.\nFile-storing behavior depends entirely on what is set in the\n[storage settings](https://app.uploadcare.com/projects/-/settings/#storage) in the Dashboard.\n\nFor users registered before February 12, 2024, the default value is `0`.\nTo ensure that file storage in the project matches the settings in the Dashboard,\nchange the value to `auto`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0"
            },
            {
              "value": "1"
            },
            {
              "value": "auto"
            }
          ]
        }
      },
      "type_:ProjectPublicKeyType": {
        "name": "ProjectPublicKeyType",
        "description": "Public key identifying an Uploadcare project your uploads will go to.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileUploadInfo": {
        "name": "FileUploadInfo",
        "description": "Information about an uploaded file.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File's unique ID."
            },
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Same as `uuid`"
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "File's size in bytes."
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Same as `size`."
            },
            {
              "key": "done",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Same as `size`."
            },
            {
              "key": "original_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Original file of the uploaded file."
            },
            {
              "key": "filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Sanitized `original_filename`."
            },
            {
              "key": "mime_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File's MIME-type."
            },
            {
              "key": "image_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageInfo"
                    }
                  }
                }
              }
            },
            {
              "key": "video_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LegacyVideoInfo"
                    }
                  }
                }
              }
            },
            {
              "key": "content_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ContentInfo"
                    }
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Metadata"
                    }
                  }
                }
              }
            },
            {
              "key": "is_image",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "True if the uploaded file is an image of a supported file format."
            },
            {
              "key": "is_stored",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "True if the file has been marked as stored."
            },
            {
              "key": "is_ready",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "True if the file is ready to be fetched from Uploadcare's CDN."
            },
            {
              "key": "s3_bucket",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project."
            }
          ]
        }
      },
      "type_:FileUploadInfoWaitingStatus": {
        "name": "FileUploadInfoWaitingStatus",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "waiting"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FileUploadInfoProgressStatus": {
        "name": "FileUploadInfoProgressStatus",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "progress"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "The expected size of the fetched file (in bytes).\n\n**Note:** the value can be missing if the server we are fetching the file from\ndoes not provide the information or if the server is returning the file in, for\nexample, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding)."
            },
            {
              "key": "done",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "How many bytes of the file have been fetched so far."
            }
          ]
        }
      },
      "type_:FileUploadInfoSuccessStatus": {
        "name": "FileUploadInfoSuccessStatus",
        "shape": {
          "type": "object",
          "extends": [
            "type_:FileUploadInfo"
          ],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "success"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FileUploadInfoErrorStatus": {
        "name": "FileUploadInfoErrorStatus",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "error"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Human readable description of the issue with the fetch/upload task."
            },
            {
              "key": "error_code",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Machine readable error code.\n\nNote: See the [Errors > FromURL upload errors](#tag/Errors) section of this\npage for a full list of all possible error codes."
            }
          ]
        }
      },
      "type_:FileUploadInfoUnknownStatus": {
        "name": "FileUploadInfoUnknownStatus",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "unknown"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FileUploadInfoFromUrl": {
        "name": "FileUploadInfoFromUrl",
        "shape": {
          "type": "object",
          "extends": [
            "type_:FileUploadInfo"
          ],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "file_info"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:FromUrlUploadResponseSchema": {
        "name": "FromUrlUploadResponseSchema",
        "description": "`/from_url/` upload response.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "token"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "token",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Token to identify a `/from_url/` request."
            }
          ]
        }
      },
      "type_:GroupInfo": {
        "name": "GroupInfo",
        "description": "File group information object.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Group's unique ID."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "ISO-8601 date and time when the group was created."
            },
            {
              "key": "datetime_stored",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "ISO-8601 date and time when the group was marked as stored."
            },
            {
              "key": "files_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Number of the files in the group."
            },
            {
              "key": "cdn_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Group's CDN URL."
            },
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Group's API resource URL. See the [REST API](/api-refs/rest-api/) documentation for details."
            },
            {
              "key": "files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of files in the group. An array may contain null values if a file has been removed."
            }
          ]
        }
      },
      "type_:MetadataValue": {
        "name": "MetadataValue",
        "description": "Arbitrary metadata associated with the file.\nSee [docs](https://uploadcare.com/docs/file-metadata/) and [REST API v0.7](/api-refs/rest-api/v0.7.0/#tag/File-metadata) for more information.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:AutoStoreDisabledError": {
        "name": "AutoStoreDisabledError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UploadcarePublicKeyRequiredError": {
        "name": "UploadcarePublicKeyRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:PublicKeyRequiredError": {
        "name": "PublicKeyRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UploadcarePublicKeyInvalidError": {
        "name": "UploadcarePublicKeyInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:PublicKeyInvalidError": {
        "name": "PublicKeyInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:ProjectPublicKeyRemovedError": {
        "name": "ProjectPublicKeyRemovedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:AccountBlockedError": {
        "name": "AccountBlockedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:AccountUnpaidError": {
        "name": "AccountUnpaidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UploadFailedError": {
        "name": "UploadFailedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:AccountLimitsExceededError": {
        "name": "AccountLimitsExceededError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SignatureExpirationError": {
        "name": "SignatureExpirationError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SignatureInvalidError": {
        "name": "SignatureInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:RequestFiledsNumberLimitExceededError": {
        "name": "RequestFiledsNumberLimitExceededError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:PostRequestParserFailedError": {
        "name": "PostRequestParserFailedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:NullCharactersForbiddenError": {
        "name": "NullCharactersForbiddenError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataKeyDuplicatedError": {
        "name": "FileMetadataKeyDuplicatedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataKeyEmptyError": {
        "name": "FileMetadataKeyEmptyError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataKeyForbiddenError": {
        "name": "FileMetadataKeyForbiddenError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataKeyLengthTooBigError": {
        "name": "FileMetadataKeyLengthTooBigError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataValueEmptyError": {
        "name": "FileMetadataValueEmptyError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataValueForbiddenError": {
        "name": "FileMetadataValueForbiddenError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataValueLengthTooBigError": {
        "name": "FileMetadataValueLengthTooBigError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileMetadataKeysNumberTooBigError": {
        "name": "FileMetadataKeysNumberTooBigError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FilesRequiredError": {
        "name": "FilesRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileSizeLimitExceededError": {
        "name": "FileSizeLimitExceededError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileTypeForbiddenError": {
        "name": "FileTypeForbiddenError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileInfectedError": {
        "name": "FileInfectedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:RequestParamRequiredError": {
        "name": "RequestParamRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartSizeInvalidError": {
        "name": "MultipartSizeInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartFileSizeLimitExceededError": {
        "name": "MultipartFileSizeLimitExceededError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartFileSizeTooSmallError": {
        "name": "MultipartFileSizeTooSmallError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartPartSizeInvalidError": {
        "name": "MultipartPartSizeInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartPartSizeTooSmallError": {
        "name": "MultipartPartSizeTooSmallError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartPartSizeTooBigError": {
        "name": "MultipartPartSizeTooBigError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartFileIdRequiredError": {
        "name": "MultipartFileIdRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartFileAlreadyUploadedError": {
        "name": "MultipartFileAlreadyUploadedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartUploadSizeTooLargeError": {
        "name": "MultipartUploadSizeTooLargeError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartUploadSizeTooSmallError": {
        "name": "MultipartUploadSizeTooSmallError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:MultipartFileCompletionFailedError": {
        "name": "MultipartFileCompletionFailedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UuidInvalidError": {
        "name": "UuidInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SourceUrlRequiredError": {
        "name": "SourceUrlRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlParsingFailedError": {
        "name": "UrlParsingFailedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlSchemeRequiredError": {
        "name": "UrlSchemeRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlSchemeInvalidError": {
        "name": "UrlSchemeInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlHostRequiredError": {
        "name": "UrlHostRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlBlacklistedError": {
        "name": "UrlBlacklistedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:HostnameNotFoundError": {
        "name": "HostnameNotFoundError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlHostMalformedError": {
        "name": "UrlHostMalformedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:UrlHostPrivateIpForbiddenError": {
        "name": "UrlHostPrivateIpForbiddenError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:TokenRequiredError": {
        "name": "TokenRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileIdRequiredError": {
        "name": "FileIdRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileIdInvalidError": {
        "name": "FileIdInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:FileNotFoundError": {
        "name": "FileNotFoundError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:GroupFilesInvalidError": {
        "name": "GroupFilesInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:GroupFileUrlParsingFailedError": {
        "name": "GroupFileUrlParsingFailedError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:GroupFilesNotFoundError": {
        "name": "GroupFilesNotFoundError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:GroupIdRequiredError": {
        "name": "GroupIdRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:GroupNotFoundError": {
        "name": "GroupNotFoundError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SignatureRequiredError": {
        "name": "SignatureRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SignatureExpirationRequiredError": {
        "name": "SignatureExpirationRequiredError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:SignatureExpirationInvalidError": {
        "name": "SignatureExpirationInvalidError",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:ImageInfoColorMode": {
        "name": "ImageInfoColorMode",
        "description": "Image color mode.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "RGB"
            },
            {
              "value": "RGBA"
            },
            {
              "value": "RGBa"
            },
            {
              "value": "RGBX"
            },
            {
              "value": "L"
            },
            {
              "value": "LA"
            },
            {
              "value": "La"
            },
            {
              "value": "P"
            },
            {
              "value": "PA"
            },
            {
              "value": "CMYK"
            },
            {
              "value": "YCbCr"
            },
            {
              "value": "HSV"
            },
            {
              "value": "LAB"
            }
          ]
        }
      },
      "type_:ImageInfoGeoLocation": {
        "name": "ImageInfoGeoLocation",
        "description": "Geo-location of image from EXIF.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location latitude."
            },
            {
              "key": "longitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location longitude."
            }
          ]
        }
      },
      "type_:ImageInfo": {
        "name": "ImageInfo",
        "description": "Image metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "color_mode",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageInfoColorMode"
                }
              },
              "description": "Image color mode."
            },
            {
              "key": "orientation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Image orientation from EXIF."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Image format."
            },
            {
              "key": "sequence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Set to true if a file contains a sequence of images (GIF for example)."
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Image height in pixels."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Image width in pixels."
            },
            {
              "key": "geo_location",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageInfoGeoLocation"
                    }
                  }
                }
              },
              "description": "Geo-location of image from EXIF."
            },
            {
              "key": "datetime_original",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF."
            },
            {
              "key": "dpi",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Image DPI for two dimensions."
            }
          ]
        }
      },
      "type_:LegacyVideoInfoAudio": {
        "name": "LegacyVideoInfoAudio",
        "description": "Audio stream's metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's bitrate."
            },
            {
              "key": "codec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's codec."
            },
            {
              "key": "sample_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's sample rate."
            },
            {
              "key": "channels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's number of channels."
            }
          ]
        }
      },
      "type_:LegacyVideoInfoVideo": {
        "name": "LegacyVideoInfoVideo",
        "description": "Video stream's metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's image height."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's image width."
            },
            {
              "key": "frame_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's frame rate."
            },
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's bitrate."
            },
            {
              "key": "codec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Video stream codec."
            }
          ]
        }
      },
      "type_:LegacyVideoInfo": {
        "name": "LegacyVideoInfo",
        "description": "Video metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Video file's duration in milliseconds."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Video file's format."
            },
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Video file's bitrate."
            },
            {
              "key": "audio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LegacyVideoInfoAudio"
                    }
                  }
                }
              },
              "description": "Audio stream's metadata."
            },
            {
              "key": "video",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:LegacyVideoInfoVideo"
                    }
                  }
                }
              },
              "description": "Video stream's metadata."
            }
          ]
        }
      },
      "type_:SchemasImageInfoColorMode": {
        "name": "SchemasImageInfoColorMode",
        "description": "Image color mode.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "RGB"
            },
            {
              "value": "RGBA"
            },
            {
              "value": "RGBa"
            },
            {
              "value": "RGBX"
            },
            {
              "value": "L"
            },
            {
              "value": "LA"
            },
            {
              "value": "La"
            },
            {
              "value": "P"
            },
            {
              "value": "PA"
            },
            {
              "value": "CMYK"
            },
            {
              "value": "YCbCr"
            },
            {
              "value": "HSV"
            },
            {
              "value": "LAB"
            }
          ]
        }
      },
      "type_:SchemasImageInfoGeoLocation": {
        "name": "SchemasImageInfoGeoLocation",
        "description": "Geo-location of image from EXIF.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location latitude."
            },
            {
              "key": "longitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location longitude."
            }
          ]
        }
      },
      "type_:SchemasImageInfo": {
        "name": "SchemasImageInfo",
        "description": "Image metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "color_mode",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:SchemasImageInfoColorMode"
                }
              },
              "description": "Image color mode."
            },
            {
              "key": "orientation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Image orientation from EXIF."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Image format."
            },
            {
              "key": "sequence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Set to true if a file contains a sequence of images (GIF for example)."
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Image height in pixels."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Image width in pixels."
            },
            {
              "key": "geo_location",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SchemasImageInfoGeoLocation"
                    }
                  }
                }
              },
              "description": "Geo-location of image from EXIF."
            },
            {
              "key": "datetime_original",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF."
            },
            {
              "key": "dpi",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Image DPI for two dimensions."
            }
          ]
        }
      },
      "type_:VideoInfoAudioItem": {
        "name": "VideoInfoAudioItem",
        "description": "Audio stream's metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's bitrate."
            },
            {
              "key": "codec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's codec."
            },
            {
              "key": "sample_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's sample rate."
            },
            {
              "key": "channels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's number of channels."
            }
          ]
        }
      },
      "type_:VideoInfoVideoItem": {
        "name": "VideoInfoVideoItem",
        "description": "Video stream's metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Video stream's image height."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Video stream's image width."
            },
            {
              "key": "frame_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Video stream's frame rate."
            },
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's bitrate."
            },
            {
              "key": "codec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's codec."
            }
          ]
        }
      },
      "type_:VideoInfo": {
        "name": "VideoInfo",
        "description": "Video metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Video file's duration in milliseconds."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Video file's format."
            },
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Video file's bitrate."
            },
            {
              "key": "audio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoInfoAudioItem"
                    }
                  }
                }
              }
            },
            {
              "key": "video",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoInfoVideoItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ContentInfoMime": {
        "name": "ContentInfoMime",
        "description": "MIME type.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "mime",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Full MIME type."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of MIME type."
            },
            {
              "key": "subtype",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Subtype of MIME type."
            }
          ]
        }
      },
      "type_:ContentInfo": {
        "name": "ContentInfo",
        "description": "Information about file content.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "mime",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ContentInfoMime"
                    }
                  }
                }
              },
              "description": "MIME type."
            },
            {
              "key": "image",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:SchemasImageInfo"
                    }
                  }
                }
              }
            },
            {
              "key": "video",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoInfo"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Metadata": {
        "name": "Metadata",
        "description": "Arbitrary metadata associated with a file.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "optional",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "unknown"
                  }
                }
              }
            }
          }
        }
      }
    },
    "subpackages": {
      "subpackage_upload": {
        "id": "subpackage_upload",
        "name": "Upload"
      },
      "subpackage_groups": {
        "id": "subpackage_groups",
        "name": "Groups"
      }
    },
    "auths": {}
  },
  {
    "id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
    "endpoints": {
      "__package__.File metadata": {
        "id": "__package__.File metadata",
        "namespace": [],
        "description": "Get file's metadata keys and values.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/metadata"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "map",
              "keyShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "unknown"
                }
              }
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "string": {
                  "key": "value"
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  getMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await getMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf(\"File %s metadata:\\n\", $fileInfo->getUuid());\nforeach ($fileInfo->getMetadata() as $metaKey => $metaItem) {\n    echo \\sprintf(\"%s: %s\\n\", $metaKey, $metaItem);\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nvalue = uploadcare.metadata_api.get_all_metadata(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(value)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::FileMetadata.show(uuid, 'pet')\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet metadata = try await uploadcare.fileMetadata(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(metadata)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval metadata = uploadcare.getFileMetadata(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", metadata.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/:uuid/metadata \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/:uuid/metadata \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.filesList": {
        "id": "subpackage_file.filesList",
        "namespace": [
          "subpackage_file"
        ],
        "description": "Getting a paginated list of files. If you need multiple results pages, use `previous`/`next` from the response to navigate back/forth.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/files"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "removed",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`true` to only include removed files in the response, `false` to include existing files. Defaults to `false`."
          },
          {
            "key": "stored",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "description": "`true` to only include files that were stored, `false` to include temporary ones. The default is unset: both stored and not stored files are returned."
          },
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "A preferred amount of files in a list for a single response. Defaults to 100, while the maximum is 1000."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_file:FilesListRequestOrdering"
                  }
                }
              }
            },
            "description": "Specifies the way files are sorted in a returned list. `datetime_uploaded` for ascending order, `-datetime_uploaded` for descending order."
          },
          {
            "key": "from",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "A starting point for filtering the files. If provided, the value MUST adhere to the ISO 8601 Extended Date/Time Format (`YYYY-MM-DDTHH:MM:SSZ`)."
          },
          {
            "key": "include",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Include additional fields to the file object, such as: appdata."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_file:FilesListResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "removed": true,
              "stored": true,
              "limit": 100,
              "from": "2015-09-10T10:00:00Z"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "next": "https://api.uploadcare.com/files/?from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&limit=3&offset=0",
                "previous": "https://api.uploadcare.com/files/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                "total": 26,
                "totals": {
                  "removed": 0,
                  "stored": 25,
                  "unstored": 1
                },
                "per_page": 100,
                "results": [
                  {
                    "datetime_uploaded": "2018-11-26T12:49:09Z",
                    "is_image": true,
                    "is_ready": true,
                    "mime_type": "image/jpeg",
                    "original_filename": "pineapple.jpg",
                    "size": 642,
                    "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                    "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                    "datetime_removed": "2024-01-15T09:30:00Z",
                    "datetime_stored": "2018-11-26T12:49:10Z",
                    "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                    "appdata": {
                      "aws_rekognition_detect_labels": {
                        "datetime_created": "2021-09-21T11:25:31Z",
                        "datetime_updated": "2021-09-21T11:27:33Z",
                        "version": "2016-06-27",
                        "data": {
                          "LabelModelVersion": "2.0",
                          "Labels": [
                            {
                              "Confidence": 93.41645812988281,
                              "Instances": [
                                {}
                              ],
                              "Name": "Home Decor",
                              "Parents": [
                                {}
                              ]
                            },
                            {
                              "Confidence": 70.75951385498047,
                              "Instances": [
                                {}
                              ],
                              "Name": "Linen",
                              "Parents": [
                                {
                                  "Name": "Home Decor"
                                }
                              ]
                            },
                            {
                              "Confidence": 64.7123794555664,
                              "Instances": [
                                {}
                              ],
                              "Name": "Sunlight",
                              "Parents": [
                                {}
                              ]
                            },
                            {
                              "Confidence": 56.264793395996094,
                              "Instances": [
                                {}
                              ],
                              "Name": "Flare",
                              "Parents": [
                                {
                                  "Name": "Light"
                                }
                              ]
                            },
                            {
                              "Confidence": 50.47153854370117,
                              "Instances": [
                                {}
                              ],
                              "Name": "Tree",
                              "Parents": [
                                {
                                  "Name": "Plant"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "aws_rekognition_detect_moderation_labels": {
                        "datetime_created": "2023-02-21T11:25:31Z",
                        "datetime_updated": "2023-02-21T11:27:33Z",
                        "version": "2016-06-27",
                        "data": {
                          "ModerationModelVersion": "6.0",
                          "ModerationLabels": [
                            {
                              "Confidence": 93.41645812988281,
                              "Name": "Weapons",
                              "ParentName": "Violence"
                            }
                          ]
                        }
                      },
                      "remove_bg": {
                        "datetime_created": "2021-07-25T12:24:33Z",
                        "datetime_updated": "2021-07-25T12:24:33Z",
                        "version": "1.0",
                        "data": {
                          "foreground_type": "person"
                        }
                      },
                      "uc_clamav_virus_scan": {
                        "datetime_created": "2021-09-21T11:24:33Z",
                        "datetime_updated": "2021-09-21T11:24:33Z",
                        "version": "0.104.2",
                        "data": {
                          "infected": true,
                          "infected_with": "Win.Test.EICAR_HDB-1"
                        }
                      }
                    },
                    "content_info": {
                      "mime": {
                        "mime": "image/jpeg",
                        "type": "image",
                        "subtype": "jpeg"
                      },
                      "image": {
                        "color_mode": "RGB",
                        "format": "JPEG",
                        "sequence": false,
                        "height": 500,
                        "width": 500,
                        "orientation": 6,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T12:59:50Z",
                        "dpi": [
                          72,
                          72
                        ]
                      },
                      "video": {
                        "format": "mp4",
                        "audio": [
                          {
                            "bitrate": 78,
                            "codec": "aac",
                            "sample_rate": 44100,
                            "channels": 2
                          }
                        ],
                        "video": [
                          {
                            "height": 360,
                            "width": 640,
                            "frame_rate": 30,
                            "bitrate": 315,
                            "codec": "h264"
                          }
                        ],
                        "duration": 261827,
                        "bitrate": 393
                      }
                    },
                    "metadata": {
                      "subsystem": "uploader",
                      "pet": "cat"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  listOfFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfFiles(\n  {},\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$list = $api->listFiles();\nforeach ($list->getResults() as $result) {\n    echo \\sprintf('URL: %s', $result->getUrl());\n}\nwhile (($next = $api->nextPage($list)) !== null) {\n    foreach ($next->getResults() as $result) {\n        echo \\sprintf('URL: %s', $result->getUrl());\n    }\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = uploadcare.list_files(stored=True, limit=10)\nfor file in files:\n    print(file.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nlist = Uploadcare::FileList.file_list(stored: true, removed: false, limit: 100)\nlist.each { |file| puts file.inspect }\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet query = PaginationQuery()\n  .stored(true)\n  .ordering(.dateTimeUploadedDESC)\n  .limit(10)\nvar list = uploadcare.listOfFiles()\n\ntry await list.get(withQuery: query)\nprint(list)\n\n// Next page\nif list.next != nil {\n  try await list.nextPage()\n  print(list)\n}\n\n// Previous page\nif list.previous != nil {\n  try await filesList.previousPage()\n  print(list)\n}\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval filesQueryBuilder = uploadcare.getFiles()\nval files = filesQueryBuilder\n    .stored(true)\n    .ordering(Order.UPLOAD_TIME_DESC)\n    .asList()\nLog.d(\"TAG\", files.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files \\\n     -H \"Authorization: <apiKey>\" \\\n     -d removed=true \\\n     -d stored=true \\\n     -d limit=100 \\\n     --data-urlencode from=2015-09-10T10:00:00Z",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "removed": true,
              "stored": true
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d removed=true \\\n     -d stored=true",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "removed": true,
              "stored": true
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d removed=true \\\n     -d stored=true",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {
              "removed": true,
              "stored": true
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d removed=true \\\n     -d stored=true",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.storeFile": {
        "id": "subpackage_file.storeFile",
        "namespace": [
          "subpackage_file"
        ],
        "description": "Store a single file by UUID. When file is stored, it is available permanently. If not stored — it will only be available for 24 hours. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/storage"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:File"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/storage",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "datetime_uploaded": "2018-11-26T12:49:09Z",
                "is_image": true,
                "is_ready": true,
                "mime_type": "image/jpeg",
                "original_filename": "pineapple.jpg",
                "size": 642,
                "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                "datetime_removed": "2024-01-15T09:30:00Z",
                "datetime_stored": "2018-11-26T12:49:10Z",
                "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                "appdata": {
                  "aws_rekognition_detect_labels": {
                    "datetime_created": "2021-09-21T11:25:31Z",
                    "datetime_updated": "2021-09-21T11:27:33Z",
                    "version": "2016-06-27",
                    "data": {
                      "LabelModelVersion": "2.0",
                      "Labels": [
                        {
                          "Confidence": 93.41645812988281,
                          "Instances": [
                            {}
                          ],
                          "Name": "Home Decor",
                          "Parents": [
                            {}
                          ]
                        },
                        {
                          "Confidence": 70.75951385498047,
                          "Instances": [
                            {}
                          ],
                          "Name": "Linen",
                          "Parents": [
                            {
                              "Name": "Home Decor"
                            }
                          ]
                        },
                        {
                          "Confidence": 64.7123794555664,
                          "Instances": [
                            {}
                          ],
                          "Name": "Sunlight",
                          "Parents": [
                            {}
                          ]
                        },
                        {
                          "Confidence": 56.264793395996094,
                          "Instances": [
                            {}
                          ],
                          "Name": "Flare",
                          "Parents": [
                            {
                              "Name": "Light"
                            }
                          ]
                        },
                        {
                          "Confidence": 50.47153854370117,
                          "Instances": [
                            {}
                          ],
                          "Name": "Tree",
                          "Parents": [
                            {
                              "Name": "Plant"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "aws_rekognition_detect_moderation_labels": {
                    "datetime_created": "2023-02-21T11:25:31Z",
                    "datetime_updated": "2023-02-21T11:27:33Z",
                    "version": "2016-06-27",
                    "data": {
                      "ModerationModelVersion": "6.0",
                      "ModerationLabels": [
                        {
                          "Confidence": 93.41645812988281,
                          "Name": "Weapons",
                          "ParentName": "Violence"
                        }
                      ]
                    }
                  },
                  "remove_bg": {
                    "datetime_created": "2021-07-25T12:24:33Z",
                    "datetime_updated": "2021-07-25T12:24:33Z",
                    "version": "1.0",
                    "data": {
                      "foreground_type": "person"
                    }
                  },
                  "uc_clamav_virus_scan": {
                    "datetime_created": "2021-09-21T11:24:33Z",
                    "datetime_updated": "2021-09-21T11:24:33Z",
                    "version": "0.104.2",
                    "data": {
                      "infected": true,
                      "infected_with": "Win.Test.EICAR_HDB-1"
                    }
                  }
                },
                "variations": {
                  "variations": {
                    "key": "value"
                  }
                },
                "content_info": {
                  "mime": {
                    "mime": "image/jpeg",
                    "type": "image",
                    "subtype": "jpeg"
                  },
                  "image": {
                    "color_mode": "RGB",
                    "format": "JPEG",
                    "sequence": false,
                    "height": 500,
                    "width": 500,
                    "orientation": 6,
                    "geo_location": {
                      "latitude": 55.62013611111111,
                      "longitude": 37.66299166666666
                    },
                    "datetime_original": "2018-08-20T12:59:50Z",
                    "dpi": [
                      72,
                      72
                    ]
                  },
                  "video": {
                    "format": "mp4",
                    "audio": [
                      {
                        "bitrate": 78,
                        "codec": "aac",
                        "sample_rate": 44100,
                        "channels": 2
                      }
                    ],
                    "video": [
                      {
                        "height": 360,
                        "width": 640,
                        "frame_rate": 30,
                        "bitrate": 315,
                        "codec": "h264"
                      }
                    ],
                    "duration": 261827,
                    "bitrate": 393
                  }
                },
                "metadata": {
                  "subsystem": "uploader",
                  "pet": "cat"
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  storeFile,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await storeFile(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->storeFile('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('File %s is stored at %s', $result->getUuid(), $result->getDatetimeStored()->format(\\DateTimeInterface::ATOM));\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nfile.store()\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::File.store(uuid)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.storeFile(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.saveFile(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/21975c81-7f57-4c7a-aef9-acfe28779f78/storage \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 429,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.deleteFileStorage": {
        "id": "subpackage_file.deleteFileStorage",
        "namespace": [
          "subpackage_file"
        ],
        "description": "Removes individual files. Returns file info.\n\nNote: this operation removes the file from storage but doesn't invalidate CDN cache.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/storage"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:File"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/storage",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "datetime_uploaded": "2024-01-15T09:30:00Z",
                "is_image": true,
                "is_ready": true,
                "mime_type": "image/jpeg",
                "original_filename": "EU_4.jpg",
                "size": 145212,
                "url": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                "datetime_removed": "2024-01-15T09:30:00Z",
                "datetime_stored": "2024-01-15T09:30:00Z",
                "original_file_url": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                "appdata": {
                  "aws_rekognition_detect_labels": {
                    "datetime_created": "2024-01-15T09:30:00Z",
                    "datetime_updated": "2024-01-15T09:30:00Z",
                    "version": "2016-06-27",
                    "data": {
                      "LabelModelVersion": "LabelModelVersion",
                      "Labels": [
                        {
                          "Confidence": 1.1,
                          "Instances": [
                            {}
                          ],
                          "Name": "Name",
                          "Parents": [
                            {}
                          ]
                        }
                      ]
                    }
                  },
                  "aws_rekognition_detect_moderation_labels": {
                    "datetime_created": "2024-01-15T09:30:00Z",
                    "datetime_updated": "2024-01-15T09:30:00Z",
                    "version": "2016-06-27",
                    "data": {
                      "ModerationModelVersion": "ModerationModelVersion",
                      "ModerationLabels": [
                        {
                          "Confidence": 1.1,
                          "Name": "Name",
                          "ParentName": "ParentName"
                        }
                      ]
                    }
                  },
                  "uc_clamav_virus_scan": {
                    "datetime_created": "2024-01-15T09:30:00Z",
                    "datetime_updated": "2024-01-15T09:30:00Z",
                    "version": "0.104.2",
                    "data": {
                      "infected": true
                    }
                  }
                },
                "variations": {
                  "variations": {
                    "key": "value"
                  }
                },
                "content_info": {
                  "mime": {
                    "mime": "image/jpeg",
                    "type": "image",
                    "subtype": "jpeg"
                  },
                  "image": {
                    "color_mode": "RGB",
                    "format": "JPEG",
                    "sequence": false,
                    "height": 2352,
                    "width": 2935,
                    "orientation": 6,
                    "geo_location": {
                      "latitude": -1.1884555555555556,
                      "longitude": 52.66996666666667
                    },
                    "datetime_original": "2018-09-13T20:23:40Z",
                    "dpi": [
                      72
                    ]
                  },
                  "video": {
                    "format": "mp4",
                    "audio": [
                      {
                        "bitrate": 78,
                        "codec": "aac",
                        "sample_rate": 44100,
                        "channels": 2
                      }
                    ],
                    "video": [
                      {
                        "height": 360,
                        "width": 640,
                        "frame_rate": 30,
                        "bitrate": 315,
                        "codec": "h264"
                      }
                    ],
                    "duration": 261827,
                    "bitrate": 393
                  }
                },
                "metadata": {
                  "metadata": {
                    "key": "value"
                  }
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  deleteFile,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteFile(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->deleteFile('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('File \\'%s\\' deleted at \\'%s\\'', $fileInfo->getUuid(), $fileInfo->getDatetimeRemoved()->format(\\DateTimeInterface::ATOM));\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nfile.delete()\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::File.delete('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.deleteFile(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteFile(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/21975c81-7f57-4c7a-aef9-acfe28779f78/storage \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/storage",
            "responseStatusCode": 429,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/:uuid/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.info": {
        "id": "subpackage_file.info",
        "namespace": [
          "subpackage_file"
        ],
        "description": "Get file information by its UUID (immutable).",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          }
        ],
        "queryParameters": [
          {
            "key": "include",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "description": "Include additional fields to the file object, such as: appdata."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:File"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/03ccf9ab-f266-43fb-973d-a6529c55c2ae",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "03ccf9ab-f266-43fb-973d-a6529c55c2ae"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "datetime_uploaded": "2024-01-15T09:30:00Z",
                "is_image": true,
                "is_ready": true,
                "mime_type": "image/jpeg",
                "original_filename": "EU_4.jpg",
                "size": 145212,
                "url": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                "datetime_removed": "2024-01-15T09:30:00Z",
                "datetime_stored": "2024-01-15T09:30:00Z",
                "original_file_url": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                "appdata": {
                  "aws_rekognition_detect_labels": {
                    "datetime_created": "2024-01-15T09:30:00Z",
                    "datetime_updated": "2024-01-15T09:30:00Z",
                    "version": "2016-06-27",
                    "data": {
                      "LabelModelVersion": "LabelModelVersion",
                      "Labels": [
                        {
                          "Confidence": 1.1,
                          "Instances": [
                            {}
                          ],
                          "Name": "Name",
                          "Parents": [
                            {}
                          ]
                        }
                      ]
                    }
                  },
                  "aws_rekognition_detect_moderation_labels": {
                    "datetime_created": "2024-01-15T09:30:00Z",
                    "datetime_updated": "2024-01-15T09:30:00Z",
                    "version": "2016-06-27",
                    "data": {
                      "ModerationModelVersion": "ModerationModelVersion",
                      "ModerationLabels": [
                        {
                          "Confidence": 1.1,
                          "Name": "Name",
                          "ParentName": "ParentName"
                        }
                      ]
                    }
                  },
                  "uc_clamav_virus_scan": {
                    "datetime_created": "2024-01-15T09:30:00Z",
                    "datetime_updated": "2024-01-15T09:30:00Z",
                    "version": "0.104.2",
                    "data": {
                      "infected": true
                    }
                  }
                },
                "variations": {
                  "variations": {
                    "key": "value"
                  }
                },
                "content_info": {
                  "mime": {
                    "mime": "image/jpeg",
                    "type": "image",
                    "subtype": "jpeg"
                  },
                  "image": {
                    "color_mode": "RGB",
                    "format": "JPEG",
                    "sequence": false,
                    "height": 2352,
                    "width": 2935,
                    "orientation": 6,
                    "geo_location": {
                      "latitude": -1.1884555555555556,
                      "longitude": 52.66996666666667
                    },
                    "datetime_original": "2018-09-13T20:23:40Z",
                    "dpi": [
                      72
                    ]
                  },
                  "video": {
                    "format": "mp4",
                    "audio": [
                      {
                        "bitrate": 78,
                        "codec": "aac",
                        "sample_rate": 44100,
                        "channels": 2
                      }
                    ],
                    "video": [
                      {
                        "height": 360,
                        "width": 640,
                        "frame_rate": 30,
                        "bitrate": 315,
                        "codec": "h264"
                      }
                    ],
                    "duration": 261827,
                    "bitrate": 393
                  }
                },
                "metadata": {
                  "metadata": {
                    "key": "value"
                  }
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  fileInfo,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await fileInfo(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nputs Uploadcare::File.info(uuid).inspect\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet fileInfoQuery = FileInfoQuery().include(.appdata)\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", withQuery: fileInfoQuery)\nprint(file)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getFile(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", file.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/03ccf9ab-f266-43fb-973d-a6529c55c2ae \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {
              "include": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d include=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {
              "include": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d include=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {
              "include": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d include=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid",
            "responseStatusCode": 429,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {
              "include": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/files/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d include=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.filesStoring": {
        "id": "subpackage_file.filesStoring",
        "namespace": [
          "subpackage_file"
        ],
        "description": "Used to store multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/files/storage"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_file:FilesStoringResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/storage",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "ok",
                "problems": {
                  "problems": {
                    "key": "value"
                  }
                },
                "result": [
                  {
                    "datetime_uploaded": "2018-11-26T12:49:09Z",
                    "is_image": true,
                    "is_ready": true,
                    "mime_type": "image/jpeg",
                    "original_filename": "pineapple.jpg",
                    "size": 642,
                    "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                    "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                    "datetime_removed": "2024-01-15T09:30:00Z",
                    "datetime_stored": "2018-11-26T12:49:10Z",
                    "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                    "appdata": {
                      "aws_rekognition_detect_labels": {
                        "datetime_created": "2021-09-21T11:25:31Z",
                        "datetime_updated": "2021-09-21T11:27:33Z",
                        "version": "2016-06-27",
                        "data": {
                          "LabelModelVersion": "2.0",
                          "Labels": [
                            {
                              "Confidence": 93.41645812988281,
                              "Instances": [
                                {}
                              ],
                              "Name": "Home Decor",
                              "Parents": [
                                {}
                              ]
                            },
                            {
                              "Confidence": 70.75951385498047,
                              "Instances": [
                                {}
                              ],
                              "Name": "Linen",
                              "Parents": [
                                {
                                  "Name": "Home Decor"
                                }
                              ]
                            },
                            {
                              "Confidence": 64.7123794555664,
                              "Instances": [
                                {}
                              ],
                              "Name": "Sunlight",
                              "Parents": [
                                {}
                              ]
                            },
                            {
                              "Confidence": 56.264793395996094,
                              "Instances": [
                                {}
                              ],
                              "Name": "Flare",
                              "Parents": [
                                {
                                  "Name": "Light"
                                }
                              ]
                            },
                            {
                              "Confidence": 50.47153854370117,
                              "Instances": [
                                {}
                              ],
                              "Name": "Tree",
                              "Parents": [
                                {
                                  "Name": "Plant"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "aws_rekognition_detect_moderation_labels": {
                        "datetime_created": "2023-02-21T11:25:31Z",
                        "datetime_updated": "2023-02-21T11:27:33Z",
                        "version": "2016-06-27",
                        "data": {
                          "ModerationModelVersion": "6.0",
                          "ModerationLabels": [
                            {
                              "Confidence": 93.41645812988281,
                              "Name": "Weapons",
                              "ParentName": "Violence"
                            }
                          ]
                        }
                      },
                      "remove_bg": {
                        "datetime_created": "2021-07-25T12:24:33Z",
                        "datetime_updated": "2021-07-25T12:24:33Z",
                        "version": "1.0",
                        "data": {
                          "foreground_type": "person"
                        }
                      },
                      "uc_clamav_virus_scan": {
                        "datetime_created": "2021-09-21T11:24:33Z",
                        "datetime_updated": "2021-09-21T11:24:33Z",
                        "version": "0.104.2",
                        "data": {
                          "infected": true,
                          "infected_with": "Win.Test.EICAR_HDB-1"
                        }
                      }
                    },
                    "content_info": {
                      "mime": {
                        "mime": "image/jpeg",
                        "type": "image",
                        "subtype": "jpeg"
                      },
                      "image": {
                        "color_mode": "RGB",
                        "format": "JPEG",
                        "sequence": false,
                        "height": 500,
                        "width": 500,
                        "orientation": 6,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T12:59:50Z",
                        "dpi": [
                          72,
                          72
                        ]
                      },
                      "video": {
                        "format": "mp4",
                        "audio": [
                          {
                            "bitrate": 78,
                            "codec": "aac",
                            "sample_rate": 44100,
                            "channels": 2
                          }
                        ],
                        "video": [
                          {
                            "height": 360,
                            "width": 640,
                            "frame_rate": 30,
                            "bitrate": 315,
                            "codec": "h264"
                          }
                        ],
                        "duration": 261827,
                        "bitrate": 393
                      }
                    },
                    "metadata": {
                      "subsystem": "uploader",
                      "pet": "cat"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  storeFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await storeFiles(\n  {\n      uuids: [\n          'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n          '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n        ]\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\nuse Uploadcare\\Interfaces\\File\\FileInfoInterface;\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->batchStoreFile(['b7a301d1-1bd0-473d-8d32-708dd55addc0', '1bac376c-aa7e-4356-861b-dd2657b5bfd2']);\nforeach ($result->getResult() as $result) {\n    if (!$result instanceof FileInfoInterface) {\n        continue;\n    }\n    \\sprintf('Result %s is stored at %s', $result->getUuid(), $result->getDatetimeStored()->format(\\DateTimeInterface::ATOM));\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = [\n    'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n    '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\n]\nuploadcare.store_files(files)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuids = [\n  'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n  '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\n]\nUploadcare::FileList.batch_store(uuids)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet uuids = [\n  \"b7a301d1-1bd0-473d-8d32-708dd55addc0\",\n  \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\n]\nlet response = try await uploadcare.storeFiles(withUUIDs: uuids)\nprint(response)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"b7a301d1-1bd0-473d-8d32-708dd55addc0\",\n    \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\n)\nuploadcare.saveFiles(uuids)\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/storage \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/storage",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/storage",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/storage",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.filesDelete": {
        "id": "subpackage_file.filesDelete",
        "namespace": [
          "subpackage_file"
        ],
        "description": "Used to delete multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.\n\nNote: this operation removes files from storage but doesn't invalidate CDN cache.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/files/storage"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_file:FilesDeleteResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/storage",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {
                "status": "ok",
                "problems": {
                  "problems": {
                    "key": "value"
                  }
                },
                "result": [
                  {
                    "datetime_uploaded": "2018-11-26T12:49:09Z",
                    "is_image": true,
                    "is_ready": true,
                    "mime_type": "image/jpeg",
                    "original_filename": "pineapple.jpg",
                    "size": 642,
                    "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                    "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                    "datetime_removed": "2024-01-15T09:30:00Z",
                    "datetime_stored": "2018-11-26T12:49:10Z",
                    "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                    "appdata": {
                      "aws_rekognition_detect_labels": {
                        "datetime_created": "2021-09-21T11:25:31Z",
                        "datetime_updated": "2021-09-21T11:27:33Z",
                        "version": "2016-06-27",
                        "data": {
                          "LabelModelVersion": "2.0",
                          "Labels": [
                            {
                              "Confidence": 93.41645812988281,
                              "Instances": [
                                {}
                              ],
                              "Name": "Home Decor",
                              "Parents": [
                                {}
                              ]
                            },
                            {
                              "Confidence": 70.75951385498047,
                              "Instances": [
                                {}
                              ],
                              "Name": "Linen",
                              "Parents": [
                                {
                                  "Name": "Home Decor"
                                }
                              ]
                            },
                            {
                              "Confidence": 64.7123794555664,
                              "Instances": [
                                {}
                              ],
                              "Name": "Sunlight",
                              "Parents": [
                                {}
                              ]
                            },
                            {
                              "Confidence": 56.264793395996094,
                              "Instances": [
                                {}
                              ],
                              "Name": "Flare",
                              "Parents": [
                                {
                                  "Name": "Light"
                                }
                              ]
                            },
                            {
                              "Confidence": 50.47153854370117,
                              "Instances": [
                                {}
                              ],
                              "Name": "Tree",
                              "Parents": [
                                {
                                  "Name": "Plant"
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "aws_rekognition_detect_moderation_labels": {
                        "datetime_created": "2023-02-21T11:25:31Z",
                        "datetime_updated": "2023-02-21T11:27:33Z",
                        "version": "2016-06-27",
                        "data": {
                          "ModerationModelVersion": "6.0",
                          "ModerationLabels": [
                            {
                              "Confidence": 93.41645812988281,
                              "Name": "Weapons",
                              "ParentName": "Violence"
                            }
                          ]
                        }
                      },
                      "remove_bg": {
                        "datetime_created": "2021-07-25T12:24:33Z",
                        "datetime_updated": "2021-07-25T12:24:33Z",
                        "version": "1.0",
                        "data": {
                          "foreground_type": "person"
                        }
                      },
                      "uc_clamav_virus_scan": {
                        "datetime_created": "2021-09-21T11:24:33Z",
                        "datetime_updated": "2021-09-21T11:24:33Z",
                        "version": "0.104.2",
                        "data": {
                          "infected": true,
                          "infected_with": "Win.Test.EICAR_HDB-1"
                        }
                      }
                    },
                    "content_info": {
                      "mime": {
                        "mime": "image/jpeg",
                        "type": "image",
                        "subtype": "jpeg"
                      },
                      "image": {
                        "color_mode": "RGB",
                        "format": "JPEG",
                        "sequence": false,
                        "height": 500,
                        "width": 500,
                        "orientation": 6,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T12:59:50Z",
                        "dpi": [
                          72,
                          72
                        ]
                      },
                      "video": {
                        "format": "mp4",
                        "audio": [
                          {
                            "bitrate": 78,
                            "codec": "aac",
                            "sample_rate": 44100,
                            "channels": 2
                          }
                        ],
                        "video": [
                          {
                            "height": 360,
                            "width": 640,
                            "frame_rate": 30,
                            "bitrate": 315,
                            "codec": "h264"
                          }
                        ],
                        "duration": 261827,
                        "bitrate": 393
                      }
                    },
                    "metadata": {
                      "subsystem": "uploader",
                      "pet": "cat"
                    }
                  }
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  deleteFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteFiles(\n  {\n      uuids: [\n          '21975c81-7f57-4c7a-aef9-acfe28779f78',\n          'cbaf2d73-5169-4b2b-a543-496cf2813dff',\n        ]\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('21975c81-7f57-4c7a-aef9-acfe28779f78');\n$api->deleteFile($fileInfo);\necho \\sprintf('File \\'%s\\' deleted at \\'%s\\'', $fileInfo->getUuid(), $fileInfo->getDatetimeRemoved()->format(\\DateTimeInterface::ATOM));\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = [\n    '21975c81-7f57-4c7a-aef9-acfe28779f78',\n    'cbaf2d73-5169-4b2b-a543-496cf2813dff'\n    ]\nuploadcare.delete_files(files)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuids = [\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\"]\nputs Uploadcare::FileList.batch_delete(uuids)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet uuids = [\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\"]\ntry await uploadcare.deleteFiles(withUUIDs: uuids)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\")\nuploadcare.deleteFiles(fileIds = uuids)\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/storage \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/storage",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/storage",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/storage",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": [
                "string"
              ]
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/storage \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '[\n  \"string\"\n]'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.createLocalCopy": {
        "id": "subpackage_file.createLocalCopy",
        "namespace": [
          "subpackage_file"
        ],
        "description": "POST requests are used to copy original files or their modified versions to a default storage.\n\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\n\nCopying of large files is not supported at the moment. If the file CDN URL includes transformation operators, its size MUST NOT exceed 100 MB. If not, the size MUST NOT exceed 5 GB.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/files/local_copy"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "A CDN URL or just UUID of a file subjected to copy."
              },
              {
                "key": "store",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_file:CreateLocalCopyRequestStore"
                      }
                    }
                  }
                },
                "description": "The parameter only applies to the Uploadcare storage and MUST be either true or false."
              },
              {
                "key": "metadata",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "map",
                        "keyShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        },
                        "valueShape": {
                          "type": "alias",
                          "value": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  }
                },
                "description": "Arbitrary additional metadata."
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:LocalCopyResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/local_copy",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                "store": "true",
                "metadata": {
                  "subsystem": "uploader",
                  "pet": "cat"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "type": "file",
                "result": {
                  "datetime_uploaded": "2024-01-15T09:30:00Z",
                  "is_image": true,
                  "is_ready": true,
                  "mime_type": "image/jpeg",
                  "original_filename": "EU_4.jpg",
                  "size": 0,
                  "url": "url",
                  "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                  "variations": "variations",
                  "content_info": "content_info",
                  "datetime_removed": "2024-01-15T09:30:00Z",
                  "datetime_stored": "2024-01-15T09:30:00Z",
                  "original_file_url": "original_file_url",
                  "metadata": {
                    "metadata": {
                      "key": "value"
                    }
                  }
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  copyFileToLocalStorage,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await copyFileToLocalStorage(\n  {\n    source: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    store: true,\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->copyToLocalStorage('03ccf9ab-f266-43fb-973d-a6529c55c2ae', true);\necho \\sprintf('File \\'%s\\' copied to local storage', $fileInfo->getUuid());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\ncopied_file = file.create_local_copy(store=True)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\ncopied_file = Uploadcare::File.local_copy(source, store: true)\nputs copied_file.uuid\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.copyFileToLocalStorage(source: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval copyFile = uploadcare.copyFileLocalStorage(source = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", copyFile.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/local_copy \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"03ccf9ab-f266-43fb-973d-a6529c55c2ae\",\n  \"store\": \"true\",\n  \"metadata\": {\n    \"subsystem\": \"uploader\",\n    \"pet\": \"cat\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/local_copy",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "source": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/local_copy \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/local_copy",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "source": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/local_copy \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/local_copy",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "source": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/local_copy \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_file.createRemoteCopy": {
        "id": "subpackage_file.createRemoteCopy",
        "namespace": [
          "subpackage_file"
        ],
        "description": "POST requests are used to copy original files or their modified versions to a custom storage.\n\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\n\nCopying of large files is not supported at the moment. File size MUST NOT exceed 5 GB.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/files/remote_copy"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "source",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "A CDN URL or just UUID of a file subjected to copy."
              },
              {
                "key": "target",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Identifies a custom storage name related to your project. It implies that you are copying a file to a specified custom storage. Keep in mind that you can have multiple storages associated with a single S3 bucket."
              },
              {
                "key": "make_public",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "description": "MUST be either `true` or `false`. The `true` value makes copied files available via public links, `false` does the opposite."
              },
              {
                "key": "pattern",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_file:CreateRemoteCopyRequestPattern"
                      }
                    }
                  }
                },
                "description": "The parameter is used to specify file names Uploadcare passes to a custom storage. If the parameter is omitted, your custom storages pattern is used. Use any combination of allowed values.\n\nParameter values:\n- `${default}` = `${uuid}/${auto_filename}`\n- `${auto_filename}` = `${filename}${effects}${ext}`\n- `${effects}` = processing operations put into a CDN URL\n- `${filename}` = original filename without extension\n- `${uuid}` = file UUID\n- `${ext}` = file extension, including period, e.g. .jpg\n"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:CopiedFileUrl"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/remote_copy",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                "target": "mytarget",
                "make_public": true
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "type": "url",
                "result": "s3://mybucket/03ccf9ab-f266-43fb-973d-a6529c55c2ae/image.png"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  copyFileToRemoteStorage,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await copyFileToRemoteStorage(\n  {\n    source: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    target: 'custom_storage_connected_to_the_project',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->copyToRemoteStorage('03ccf9ab-f266-43fb-973d-a6529c55c2ae', true);\necho \\sprintf('File \\'%s\\' copied to local storage', $result);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nr_copied_file = file.create_remote_copy(\n    target='custom_storage_connected_to_the_project',\n    make_public=True,\n    pattern='${uuid}/${filename}${ext}',\n)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\ntarget = 'custom_storage_connected_to_the_project'\ncopied_file = Uploadcare::File.remote_copy(source, target, make_public: true)\nputs copied_file.uuid\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.copyFileToRemoteStorage(source: \"03ccf9ab-f266-43fb-973d-a6529c55c2ae\", target: \"mytarget\", pattern: .uuid)\nprint(response)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval copyFile = uploadcare.copyFileRemoteStorage(\n    source = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    target = \"custom_storage_connected_to_the_project\"\n)\nLog.d(\"TAG\", copyFile.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/remote_copy \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"03ccf9ab-f266-43fb-973d-a6529c55c2ae\",\n  \"target\": \"mytarget\",\n  \"make_public\": true\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/remote_copy",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "source": "string",
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/remote_copy \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"string\",\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/remote_copy",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "source": "string",
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/remote_copy \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"string\",\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/remote_copy",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "source": "string",
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/files/remote_copy \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"source\": \"string\",\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.awsRekognitionExecute": {
        "id": "subpackage_addOns.awsRekognitionExecute",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Execute [AWS Rekognition](https://docs.aws.amazon.com/rekognition/latest/dg/labels-detect-labels-image.html) Add-On for a given target to detect labels in an image. **Note:** Detected labels are stored in the file's appdata.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/addons/aws_rekognition_detect_labels/execute"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "target",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Unique ID of the file to process"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:AwsRekognitionExecuteResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Conflict",
            "statusCode": 409,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/aws_rekognition_detect_labels/execute",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "target": "21975c81-7f57-4c7a-aef9-acfe28779f78"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAwsRecognition('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Recognition requested. Key is \\'%s\\'', $resultKey);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\naws_recognition_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.AWS_LABEL_RECOGNITION,\n)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nUploadcare::Addons.ws_rekognition_detect_labels(uuid)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.executeAWSRekognition(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performAWSRekognition(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"21975c81-7f57-4c7a-aef9-acfe28779f78\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_labels/execute",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_labels/execute",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_labels/execute",
            "responseStatusCode": 409,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_labels/execute",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.awsRekognitionExecutionStatus": {
        "id": "subpackage_addOns.awsRekognitionExecutionStatus",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/awsRekognitionExecute) operation.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/addons/aws_rekognition_detect_labels/execute/status"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "request_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Request ID returned by the Add-On execution request described above."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:AwsRekognitionExecutionStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/aws_rekognition_detect_labels/execute/status",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "request_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "in_progress"
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAwsRecognition('request-id');\necho \\sprintf('Recognition status: %s', $status);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.AWS_LABEL_RECOGNITION)\nprint(addon_task_status)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nrequest_id = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\"\nresult = Uploadcare::Addons.ws_rekognition_detect_labels_status(request_id)\nputs result.status\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkAWSRekognitionStatus(requestID: \"requestID\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute/status \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=request_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_labels/execute/status",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_labels/execute/status",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/aws_rekognition_detect_labels/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.awsRekognitionDetectModerationLabelsExecute": {
        "id": "subpackage_addOns.awsRekognitionDetectModerationLabelsExecute",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Execute [AWS Rekognition Moderation](https://docs.aws.amazon.com/rekognition/latest/dg/moderation.html) Add-On for a given target to detect moderation labels in an image. **Note:** Detected moderation labels are stored in the file's appdata.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/addons/aws_rekognition_detect_moderation_labels/execute"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "target",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Unique ID of the file to process"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:AwsRekognitionDetectModerationLabelsExecuteResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Conflict",
            "statusCode": 409,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "target": "21975c81-7f57-4c7a-aef9-acfe28779f78"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAwsRecognitionModeration('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Recognition requested. Key is \\'%s\\'', $resultKey);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\naws_recognition_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.AWS_MODERATION_LABELS,\n)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.executeAWSRekognitionModeration(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performAWSRekognitionModeration(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionModerationAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"21975c81-7f57-4c7a-aef9-acfe28779f78\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
            "responseStatusCode": 409,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus": {
        "id": "subpackage_addOns.awsRekognitionDetectModerationLabelsExecutionStatus",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/awsRekognitionDetectModerationLabelsExecute) operation.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/addons/aws_rekognition_detect_moderation_labels/execute/status"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "request_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Request ID returned by the Add-On execution request described above."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "request_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "in_progress"
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAwsRecognitionModeration('request-id');\necho \\sprintf('Recognition status: %s', $status);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.AWS_MODERATION_LABEL)\nprint(addon_task_status)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkAWSRekognitionModerationStatus(requestID: \"requestID\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionModerationAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute/status \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=request_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/aws_rekognition_detect_moderation_labels/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.ucClamavVirusScanExecute": {
        "id": "subpackage_addOns.ucClamavVirusScanExecute",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Execute [ClamAV](https://www.clamav.net/) virus checking Add-On for a given target.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/addons/uc_clamav_virus_scan/execute"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "target",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Unique ID of the file to process"
              },
              {
                "key": "params",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_addOns:UcClamavVirusScanExecuteRequestParams"
                      }
                    }
                  }
                },
                "description": "Optional object with Add-On specific parameters"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:UcClamavVirusScanExecuteResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Conflict",
            "statusCode": 409,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/uc_clamav_virus_scan/execute",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "target": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                "params": {
                  "purge_infected": true
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  executeAddon,\n  AddonName,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await executeAddon(\n  {\n    addonName: AddonName.UC_CLAMAV_VIRUS_SCAN,\n    target: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAntivirusScan('21975c81-7f57-4c7a-aef9-acfe28779f78');\necho \\sprintf('Antivirus scan requested. Key is \\'%s\\'', $resultKey);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nclamav_params = AddonClamAVExecutionParams(purge_infected=True)\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nclamav_result = uploadcare.addons_api.execute(\n    target_file.uuid,\n    AddonLabels.CLAM_AV,\n    clamav_params\n)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nUploadcare::Addons.uc_clamav_virus_scan(uuid, purge_infected: true)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet parameters = ClamAVAddonExecutionParams(purgeInfected: true)\nlet response = try await uploadcare.executeClamav(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performClamav(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = ClamAVAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"21975c81-7f57-4c7a-aef9-acfe28779f78\",\n  \"params\": {\n    \"purge_infected\": true\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/uc_clamav_virus_scan/execute",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/uc_clamav_virus_scan/execute",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/uc_clamav_virus_scan/execute",
            "responseStatusCode": 409,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/uc_clamav_virus_scan/execute",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.ucClamavVirusScanExecutionStatus": {
        "id": "subpackage_addOns.ucClamavVirusScanExecutionStatus",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/ucClamavVirusScanExecute) operation.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/addons/uc_clamav_virus_scan/execute/status"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "request_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Request ID returned by the Add-On execution request described above."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:UcClamavVirusScanExecutionStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/uc_clamav_virus_scan/execute/status",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "request_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "in_progress"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  addonExecutionStatus,\n  AddonName,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await addonExecutionStatus(\n  {\n    addonName: AddonName.UC_CLAMAV_VIRUS_SCAN,\n    requestId: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAntivirusScan('request-id');\necho \\sprintf('Antivirus scan status: %s', $status);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.CLAM_AV)\nprint(addon_task_status)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nrequest_id = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nresult = Uploadcare::Addons.uc_clamav_virus_scan_status(request_id)\nputs result.status\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkClamAVStatus(requestID: \"requestID\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = ClamAVAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute/status \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=request_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/uc_clamav_virus_scan/execute/status",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/uc_clamav_virus_scan/execute/status",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/uc_clamav_virus_scan/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.removeBgExecute": {
        "id": "subpackage_addOns.removeBgExecute",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Execute [remove.bg](https://remove.bg/) background image removal Add-On for a given target.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/addons/remove_bg/execute"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "target",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "description": "Unique ID of the file to process"
              },
              {
                "key": "params",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_addOns:RemoveBgExecuteRequestParams"
                      }
                    }
                  }
                },
                "description": "Optional object with Add-On specific parameters"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:RemoveBgExecuteResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Conflict",
            "statusCode": 409,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/remove_bg/execute",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "target": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                "params": {
                  "crop": true,
                  "scale": "30%",
                  "type_level": "2",
                  "roi": "0% 0% 90% 90%"
                }
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestRemoveBackground('21975c81-7f57-4c7a-aef9-acfe28779f78');\necho \\sprintf('Remove background requested. Key is \\'%s\\'', $resultKey);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nremove_bg_params = AddonRemoveBGExecutionParams(\n    crop=True,\n    crop_margin=\"20px\",\n    scale=\"15%\",\n    position ='',\n    roi = ''\n)\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nremove_bg_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.REMOVE_BG,\n    remove_bg_params\n)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nUploadcare::Addons.remove_bg(uuid, crop: true)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet parameters = RemoveBGAddonExecutionParams(crop: true, typeLevel: .two)\nlet response = try await uploadcare.executeRemoveBG(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performRemoveBG(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = RemoveBgAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/remove_bg/execute \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"21975c81-7f57-4c7a-aef9-acfe28779f78\",\n  \"params\": {\n    \"crop\": true,\n    \"scale\": \"30%\",\n    \"type_level\": \"2\",\n    \"roi\": \"0% 0% 90% 90%\"\n  }\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/remove_bg/execute",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/remove_bg/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/remove_bg/execute",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/remove_bg/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/remove_bg/execute",
            "responseStatusCode": 409,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/remove_bg/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/remove_bg/execute",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {
                "target": "string"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/addons/remove_bg/execute \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"target\": \"string\"\n}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_addOns.removeBgExecutionStatus": {
        "id": "subpackage_addOns.removeBgExecutionStatus",
        "namespace": [
          "subpackage_addOns"
        ],
        "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/removeBgExecute) operation.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/addons/remove_bg/execute/status"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "request_id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Request ID returned by the Add-On execution request described above."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_addOns:RemoveBgExecutionStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/addons/remove_bg/execute/status",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "request_id"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "result": {
                  "file_id": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                },
                "status": "done"
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkRemoveBackground('request-id');\necho \\sprintf('Remove background status: %s', $status);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.REMOVE_BG)\nprint(addon_task_status)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nrequest_id = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nresult = Uploadcare::Addons.remove_bg_status(request_id)\nputs result.status\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkRemoveBGStatus(requestID: \"requestID\")\nprint(status)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = RemoveBgAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/remove_bg/execute/status \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=request_id",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/remove_bg/execute/status",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/remove_bg/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/addons/remove_bg/execute/status",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "request_id": "string"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/addons/remove_bg/execute/status \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d request_id=string",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_fileMetadata.key": {
        "id": "subpackage_fileMetadata.key",
        "namespace": [
          "subpackage_fileMetadata"
        ],
        "description": "Get the value of a single metadata key.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/metadata/"
          },
          {
            "type": "pathParameter",
            "value": "key"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          },
          {
            "key": "key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Key of file metadata.\nList of allowed characters for the key:\n\n- Latin letters in lower or upper case (a-z,A-Z)\n- digits (0-9)\n- underscore `_`\n- a hyphen `-`\n- dot `.`\n- colon `:`"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:MetadataItemValue"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78",
              "key": "subsystem"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": "uploader"
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  getMetadataValue,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await getMetadataValue(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'pet'\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->metadata();\n$metadata = $api->getMetadata('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Value for key \\'pet\\' %s', $metadata['pet'] ?? 'does not exists');\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nvalue = uploadcare.metadata_api.get_key(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", \"pet\")\nprint(value)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::FileMetadata.index(uuid).inspect\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet value = try await uploadcare.fileMetadataValue(forKey: \"pet\", withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(value)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval value = uploadcare.getFileMetadataKeyValue(\n    fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    key = \"pet\"\n)\nLog.d(\"TAG\", value)\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata/:key",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid",
              "key": ":key"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/:uuid/metadata/:key \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata/:key",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid",
              "key": ":key"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/files/:uuid/metadata/:key \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_fileMetadata.updateFileMetadataKey": {
        "id": "subpackage_fileMetadata.updateFileMetadataKey",
        "namespace": [
          "subpackage_fileMetadata"
        ],
        "description": "Update the value of a single metadata key. If the key does not exist, it will be created.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/metadata/"
          },
          {
            "type": "pathParameter",
            "value": "key"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          },
          {
            "key": "key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Key of file metadata.\nList of allowed characters for the key:\n\n- Latin letters in lower or upper case (a-z,A-Z)\n- digits (0-9)\n- underscore `_`\n- a hyphen `-`\n- dot `.`\n- colon `:`"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "alias",
            "value": {
              "type": "primitive",
              "value": {
                "type": "string"
              }
            }
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:MetadataItemValue"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78",
              "key": "subsystem"
            },
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": "string"
            },
            "responseBody": {
              "type": "json",
              "value": "uploader"
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  updateMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await updateMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'pet',\n    value: 'dog',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->metadata();\n$result = $api->setKey('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet', 'dog');\necho \\sprintf('Metadata key \\'pet\\' is set to %s', $result['pet']);\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_uuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nkey, value = \"pet\", \"dog\"\nuploadcare.metadata_api.update_or_create_key(file_uuid, key, value)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nkey = 'pet'\nvalue = 'dog'\nUploadcare::FileMetadata.update(uuid, key, value)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.updateFileMetadata(\n  withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", \n  key: \"pet\", \n  value: dog\n)\n print(response)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval value = uploadcare.updateFileMetadataKeyValue(\n    fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    key = \"pet\",\n    value = \"dog\"\n)\nLog.d(\"TAG\", value)\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"string\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata/:key",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid",
              "key": ":key"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/:uuid/metadata/:key \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"string\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata/:key",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid",
              "key": ":key"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/files/:uuid/metadata/:key \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"string\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_fileMetadata.deleteFileMetadataKey": {
        "id": "subpackage_fileMetadata.deleteFileMetadataKey",
        "namespace": [
          "subpackage_fileMetadata"
        ],
        "description": "Delete a file's metadata key.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/files/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          },
          {
            "type": "literal",
            "value": "/metadata/"
          },
          {
            "type": "pathParameter",
            "value": "key"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File UUID."
          },
          {
            "key": "key",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Key of file metadata.\nList of allowed characters for the key:\n\n- Latin letters in lower or upper case (a-z,A-Z)\n- digits (0-9)\n- underscore `_`\n- a hyphen `-`\n- dot `.`\n- colon `:`"
          }
        ],
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem",
            "responseStatusCode": 204,
            "pathParameters": {
              "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78",
              "key": "subsystem"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  deleteMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'delete_key',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$metadataApi = (new Uploadcare\\Api($configuration))->metadata();\ntry {\n    $metadataApi->removeKey('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet');\n} catch (\\Throwable $e) {\n    echo \\sprintf('Error while key removing: %s', $e->getMessage());\n}\necho 'Key was successfully removed';\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_uuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nuploadcare.metadata_api.delete_key(file_uuid, mkey='pet')\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::FileMetadata.delete('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet')\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\ntry await uploadcare.deleteFileMetadata(forKey: \"pet\",  withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteFileMetadataKey(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", key = \"pet\")\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata/:key",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid",
              "key": ":key"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/:uuid/metadata/:key \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/files/:uuid/metadata/:key",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid",
              "key": ":key"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/files/:uuid/metadata/:key \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_group.groupsList": {
        "id": "subpackage_group.groupsList",
        "namespace": [
          "subpackage_group"
        ],
        "description": "Get a paginated list of groups.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/groups"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "queryParameters": [
          {
            "key": "limit",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              }
            },
            "description": "A preferred amount of groups in a list for a single response.\nDefaults to 100, while the maximum is 1000."
          },
          {
            "key": "from",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              }
            },
            "description": "A starting point for filtering the list of groups.\nIf passed, MUST be a date and time value in ISO-8601 format."
          },
          {
            "key": "ordering",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "shape": {
                  "type": "alias",
                  "value": {
                    "type": "id",
                    "id": "type_group:GroupsListRequestOrdering"
                  }
                }
              }
            },
            "description": "Specifies the way groups should be sorted in the returned list.\n`datetime_created` for the ascending order (default),\n`-datetime_created` for the descending one."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_group:GroupsListResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/groups",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {
              "limit": 150,
              "from": "2015-01-02T10:00:00Z"
            },
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "next": "https://api.uploadcare.com/groups/?limit=3&from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&offset=0",
                "previous": "https://api.uploadcare.com/groups/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                "total": 26,
                "per_page": 100,
                "results": [
                  {
                    "id": "dd43982b-5447-44b2-86f6-1c3b52afa0ff~1",
                    "datetime_created": "2018-11-27T14:14:37Z",
                    "files_count": 1,
                    "cdn_url": "https://ucarecdn.com/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                    "url": "https://api.uploadcare.com/groups/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/"
                  }
                ]
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  listOfGroups,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfGroups({}, { authSchema: uploadcareSimpleAuthSchema })\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\n$list = $api->listGroups();\nforeach ($list->getResults() as $group) {\n    \\sprintf('Group URL: %s, ID: %s', $group->getUrl(), $group->getUuid());\n}\nwhile (($next = $api->nextPage($list)) !== null) {\n    foreach ($next->getResults() as $group) {\n        \\sprintf('Group URL: %s, ID: %s', $group->getUrl(), $group->getUuid());\n    }\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ngroups_list = uploadcare.list_file_groups()\nprint('Number of groups is', groups_list.count())\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ngroups = Uploadcare::GroupList.list(limit: 10)\ngroups.each { |group| puts group.inspect }\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet query = GroupsListQuery()\n  .limit(10)\n  .ordering(.datetimeCreatedDESC)\n  \nlet groupsList = uploadcare.listOfGroups()\n\nlet list = try await groupsList.get(withQuery: query)\nprint(list)\n\n// Next page\nlet next = try await groupsList.nextPage()\nprint(list)\n\n// Previous page\nlet previous = try await groupsList.previousPage()\nprint(list)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval groupsQueryBuilder = uploadcare.getGroups()\nval groups = groupsQueryBuilder\n    .ordering(Order.UPLOAD_TIME_DESC)\n    .asList()\nLog.d(\"TAG\", groups.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/groups \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=150 \\\n     --data-urlencode from=2015-01-02T10:00:00Z",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {
              "limit": 1,
              "from": "2023-01-01T00:00:00Z"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/groups \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=1 \\\n     --data-urlencode from=2023-01-01T00:00:00Z",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {
              "limit": 1,
              "from": "2023-01-01T00:00:00Z"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/groups \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=1 \\\n     --data-urlencode from=2023-01-01T00:00:00Z",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {
              "limit": 1,
              "from": "2023-01-01T00:00:00Z"
            },
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -G https://api.uploadcare.com/groups \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -d limit=1 \\\n     --data-urlencode from=2023-01-01T00:00:00Z",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_group.info": {
        "id": "subpackage_group.info",
        "namespace": [
          "subpackage_group"
        ],
        "description": "Get a file group by its ID.\n\nGroups are identified in a way similar to individual files. A group ID consists of a UUID\nfollowed by a “~” (tilde) character and a group size: integer number of the files in the group.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/groups/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Group UUID."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:GroupWithFiles"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/groups/badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "cdn_url": "cdn_url",
                "datetime_created": "2024-01-15T09:30:00Z",
                "files": [
                  {
                    "key": "value"
                  }
                ],
                "files_count": 1,
                "id": "id",
                "url": "url"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  groupInfo,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await groupInfo(\n  {\n    uuid: 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\n$groupInfo = $api->groupInfo('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1');\necho \\sprintf(\"Group: %s files:\\n\", $groupInfo->getUrl());\nforeach ($groupInfo->getFiles() as $file) {\n    \\sprintf('File: %s (%s)', $file->getUrl(), $file->getUuid());\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ngroup = uploadcare.file_group(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nprint(group.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\"\nputs Uploadcare::Group.info(uuid).inspect\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.groupInfo(withUUID: \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nprint(group)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getGroup(groupId = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nLog.d(\"TAG\", group.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/groups/badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12 \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 429,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_group.deleteGroup": {
        "id": "subpackage_group.deleteGroup",
        "namespace": [
          "subpackage_group"
        ],
        "description": "Delete a file group by its ID.\n\n**Note**: The operation only removes the group object itself. **All the files that were part of the group are left as is.**",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/groups/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "Group UUID."
          }
        ],
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/groups/badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12",
            "responseStatusCode": 204,
            "pathParameters": {
              "uuid": "badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12"
            },
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  deleteGroup,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteGroup(\n  {\n    uuid: 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\ntry {\n    $api->removeGroup('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1');\n} catch (\\Throwable $e) {\n    echo \\sprintf('Error while group deletion: %s', $e->getMessage());\n}\necho 'Group successfully deleted';\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_group = uploadcare.file_group(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nfile_group.delete()\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::Group.delete(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\ntry await uploadcare.deleteGroup(withUUID: \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteGroup(groupId = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/groups/badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12 \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/groups/:uuid",
            "responseStatusCode": 429,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/groups/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_project.info": {
        "id": "subpackage_project.info",
        "namespace": [
          "subpackage_project"
        ],
        "description": "Getting info about account project.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/project"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:Project"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/project",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "collaborators": [
                  {
                    "email": "email",
                    "name": "name"
                  }
                ],
                "name": "demo",
                "pub_key": "YOUR_PUBLIC_KEY",
                "autostore_enabled": true
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->project();\n$projectInfo = $api->getProjectInfo();\necho \\sprintf(\"Project %s info:\\n\", $projectInfo->getName());\necho \\sprintf(\"Public key: %s\\n\", $projectInfo->getPubKey());\necho \\sprintf(\"Auto-store enabled: %s\\n\", $projectInfo->isAutostoreEnabled() ? 'yes' : 'no');\nforeach ($projectInfo->getCollaborators() as $email => $name) {\n    echo \\sprintf(\"%s: %s\\n\", $name, $email);\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, ProjectInfo\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nproject_info = uploadcare.get_project_info()\nprint(project_info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nproject_info = Uploadcare::Project.show\nputs project_info.inspect\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet project = try await uploadcare.getProjectInfo()\nprint(project)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval project = uploadcare.getProject()\nLog.d(\"TAG\", project.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/project \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/project",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/project \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/project",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/project \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/project",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/project \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_webhook.webhooksList": {
        "id": "subpackage_webhook.webhooksList",
        "namespace": [
          "subpackage_webhook"
        ],
        "description": "List of project webhooks.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/webhooks"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "list",
              "itemShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookOfListResponse"
                }
              }
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/webhooks",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": [
                {
                  "id": 1,
                  "project": 13,
                  "created": "2016-04-27T11:49:54Z",
                  "updated": "2016-04-27T12:04:57Z",
                  "event": "file.infected",
                  "target_url": "http://example.com/hooks/receiver",
                  "is_active": true,
                  "version": "0.7",
                  "signing_secret": "7kMVZivndx0ErgvhRKAr"
                }
              ]
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  listOfWebhooks,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfWebhooks({}, { authSchema: uploadcareSimpleAuthSchema })\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\nforeach ($api->listWebhooks() as $webhook) {\n    \\sprintf(\"Webhook with url %s is %s\\n\", $webhook->getTargetUrl(), $webhook->isActive() ? 'active' : 'not active');\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhooks: list[Webhook] = list(uploadcare.list_webhooks(limit=10))\nfor w in webhooks:\n    print(w.id)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nwebhooks = Uploadcare::Webhook.list\nwebhooks.each { |webhook| puts webhook.inspect }\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet webhooks = try await uploadcare.getListOfWebhooks()\nfor webhook in webhooks {\n  print(webhook)\n}\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval webhooks = uploadcare.getWebhooks()\nLog.d(\"TAG\", webhooks.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/webhooks \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/webhooks \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/webhooks \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/webhooks \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_webhook.create": {
        "id": "subpackage_webhook.create",
        "namespace": [
          "subpackage_webhook"
        ],
        "description": "Create and subscribe to a webhook. You can use webhooks to receive notifications about your uploads. For instance, once a file gets uploaded to your project, we can notify you by sending a message to a target URL.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/webhooks"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:WebhookOfListResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/webhooks",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": 1,
                "project": 13,
                "created": "2016-04-27T11:49:54Z",
                "updated": "2016-04-27T12:04:57Z",
                "event": "file.infected",
                "target_url": "http://example.com/hooks/receiver",
                "is_active": true,
                "version": "0.7",
                "signing_secret": "7kMVZivndx0ErgvhRKAr"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  createWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await createWebhook(\n  {\n    targetUrl: 'https://yourwebhook.com',\n    event: 'file.uploaded',\n    isActive: true,\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$result = $api->createWebhook('https://yourwebhook.com', true, 'sign-secret', 'file.uploaded');\necho \\sprintf('Webhook %s created', $result->getId());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook = uploadcare.webhooks_api.create(\n    {\n        \"event\": \"file.uploaded\",\n        \"target_url\": \"https://yourwebhook.com\",\n        \"is_active\": True,\n    }\n)\nprint(webhook)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\noptions = {\n  target_url: \"https://yourwebhook.com\",\n  event: \"file.uploaded\",\n  is_active: true\n}\nUploadcare::Webhook.create(**options)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\nlet webhook = try await uploadcare.createWebhook(targetUrl: url,  event: .fileUploaded, isActive: true, signingSecret: \"sign-secret\")\nprint(webhook)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nval webhook = uploadcare.createWebhook(\n    targetUrl = url,\n    event = EventType.UPLOADED,\n    isActive = true,\n    signingSecret = \"sign-secret\"\n)\nLog.d(\"TAG\", webhook.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/webhooks \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/webhooks \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/webhooks \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/webhooks \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_webhook.updateWebhook": {
        "id": "subpackage_webhook.updateWebhook",
        "namespace": [
          "subpackage_webhook"
        ],
        "description": "Update webhook attributes.",
        "method": "PUT",
        "path": [
          {
            "type": "literal",
            "value": "/webhooks/"
          },
          {
            "type": "pathParameter",
            "value": "id"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "id",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            },
            "description": "Webhook ID."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_:Webhook"
            }
          }
        },
        "errors": [
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/webhooks/143",
            "responseStatusCode": 200,
            "pathParameters": {
              "id": 143
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "id": 1,
                "project": 13,
                "created": "2016-04-27T11:49:54Z",
                "updated": "2016-04-27T12:04:57Z",
                "event": "file.infected",
                "target_url": "http://example.com/hooks/receiver",
                "is_active": true,
                "version": "0.7",
                "signing_secret": "7kMVZivndx0ErgvhRKAr"
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  updateWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await updateWebhook(\n  {\n    id: 1473151,\n    targetUrl: 'https://yourwebhook.com',\n    event: 'file.uploaded',\n    isActive: true,\n    signingSecret: 'webhook-secret',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$webhook = $api->updateWebhook(1473151, [\n    'target_url' => 'https://yourwebhook.com',\n    'event' => 'file.uploaded',\n    'is_active' => true,\n    'signing_secret' => 'webhook-secret',\n]);\n\\sprintf(\"Webhook with url %s is %s\\n\", $webhook->getTargetUrl(), $webhook->isActive() ? 'active' : 'not active');\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook_id = 1473151\nwebhook = uploadcare.webhooks_api.update(webhook_id, {\"is_active\": False})\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nwebhook_id = 1473151\noptions = {\n  target_url: 'https://yourwebhook.com',\n  event: 'file.uploaded',\n  is_active:  true,\n  signing_secret: 'webhook-secret'\n}\nUploadcare::Webhook.update(webhook_id, options)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\nlet webhook = try await uploadcare.updateWebhook(id: 1473151, targetUrl: url, event: .fileInfoUpdated, isActive: true, signingSecret: \"webhook-secret\")\nprint(webhook)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nval webhook = uploadcare.updateWebhook(\n    webhookId = 1473151,\n    targetUrl = url,\n    event = EventType.UPLOADED,\n    isActive = true,\n    signingSecret = \"\",\n)\nLog.d(\"TAG\", webhook.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/webhooks/143 \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks/1",
            "responseStatusCode": 401,
            "pathParameters": {
              "id": 1
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/webhooks/1 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks/1",
            "responseStatusCode": 404,
            "pathParameters": {
              "id": 1
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/webhooks/1 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks/1",
            "responseStatusCode": 429,
            "pathParameters": {
              "id": 1
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X PUT https://api.uploadcare.com/webhooks/1 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_webhook.unsubscribe": {
        "id": "subpackage_webhook.unsubscribe",
        "namespace": [
          "subpackage_webhook"
        ],
        "description": "Unsubscribe and delete a webhook.",
        "method": "DELETE",
        "path": [
          {
            "type": "literal",
            "value": "/webhooks/unsubscribe"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/webhooks/unsubscribe",
            "responseStatusCode": 204,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  deleteWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteWebhook(\n  {\n    targetUrl: 'https://yourwebhook.com',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$result = $api->deleteWebhook('https://yourwebhook.com');\necho $result ? 'Webhook has been deleted' : 'Webhook is not deleted, something went wrong';\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook_id = 1473151\nuploadcare.delete_webhook(webhook_id)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::Webhook.delete('https://yourwebhook.com')\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\ntry await uploadcare.deleteWebhook(forTargetUrl: url)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nuploadcare.deleteWebhook(url)\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/webhooks/unsubscribe \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks/unsubscribe",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/webhooks/unsubscribe \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks/unsubscribe",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/webhooks/unsubscribe \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/webhooks/unsubscribe",
            "responseStatusCode": 429,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X DELETE https://api.uploadcare.com/webhooks/unsubscribe \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_conversion.documentConvertInfo": {
        "id": "subpackage_conversion.documentConvertInfo",
        "namespace": [
          "subpackage_conversion"
        ],
        "description": "The endpoint allows you to determine the document format and possible conversion formats.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/convert/document/"
          },
          {
            "type": "pathParameter",
            "value": "uuid"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "uuid",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            },
            "description": "File uuid."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_conversion:DocumentConvertInfoResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Service Unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/convert/document/86c91c35-58e1-41f7-9b23-2d7652cfcd17",
            "responseStatusCode": 200,
            "pathParameters": {
              "uuid": "86c91c35-58e1-41f7-9b23-2d7652cfcd17"
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "error": "error",
                "format": {
                  "name": "txt",
                  "conversion_formats": [
                    {
                      "name": "epub"
                    },
                    {
                      "name": "pdf"
                    }
                  ]
                },
                "converted_groups": {
                  "{conversion_format}": "{conversion_format}"
                }
              }
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/86c91c35-58e1-41f7-9b23-2d7652cfcd17 \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/:uuid",
            "responseStatusCode": 400,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/:uuid",
            "responseStatusCode": 401,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/:uuid",
            "responseStatusCode": 404,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/:uuid",
            "responseStatusCode": 429,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/:uuid",
            "responseStatusCode": 503,
            "pathParameters": {
              "uuid": ":uuid"
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/:uuid \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_conversion.documentConvert": {
        "id": "subpackage_conversion.documentConvert",
        "namespace": [
          "subpackage_conversion"
        ],
        "description": "Uploadcare allows you to convert files to different target formats. Check out the [conversion capabilities](https://uploadcare.com/docs/transformations/document-conversion/#document-file-formats) for each supported format.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/convert/document"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "paths",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "An array of UUIDs of your source documents to convert together with the specified target format (see [documentation](https://uploadcare.com/docs/transformations/document-conversion/))."
              },
              {
                "key": "store",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_conversion:DocumentJobSubmitParametersStore"
                      }
                    }
                  }
                },
                "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.\n"
              },
              {
                "key": "save_in_group",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_conversion:DocumentJobSubmitParametersSaveInGroup"
                      }
                    }
                  }
                },
                "description": "When `save_in_group` is set to `\"1\"`, multi-page documents additionally will be saved as a file group.\n"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_conversion:DocumentConvertResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/convert/document",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "paths": [
                  "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                  "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                  "8ddbbb48-0927-4df7-afac-c6031668b01b/document/"
                ],
                "store": "0",
                "save_in_group": "1"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "problems": {
                  "8ddbbb48-0927-4df7-afac-c6031668b01b": "Bad path \"8ddbbb48-0927-4df7-afac-c6031668b01b\". Use UUID or CDN URL"
                },
                "result": [
                  {
                    "original_source": "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                    "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                    "token": 445630631
                  },
                  {
                    "original_source": "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                    "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                    "token": 445630637
                  }
                ]
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\nuse Uploadcare\\Interfaces\\Conversion\\ConvertedItemInterface;\nuse Uploadcare\\Interfaces\\Response\\ResponseProblemInterface;\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$request = new Uploadcare\\Conversion\\DocumentConversionRequest('pdf');\n$result = $api->convertDocument('1bac376c-aa7e-4356-861b-dd2657b5bfd2', $request);\nif ($result instanceof ConvertedItemInterface) {\n    echo \\sprintf('Conversion requested. Key is \\'%s\\'', $result->getToken());\n}\nif ($result instanceof ResponseProblemInterface) {\n    echo \\sprintf('Error in request: %s', $result->getReason());\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\ntransformation = DocumentTransformation().format(DocumentFormat.pdf)\nconverted_file = file.convert(transformation)\nprint(converted_file.info)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ndocument_params = { uuid: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", format: :pdf }\noptions = { store: true }\nUploadcare::DocumentConverter.convert(document_params, options)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nlet settings = DocumentConversionJobSettings(forFile: file)\n  .format(.pdf)\n  \nlet response = try await uploadcare.convertDocumentsWithSettings([settings])\nprint(response)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval conversionJob = DocumentConversionJob(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n    .apply { setFormat(DocumentFormat.PDF) }\nval converter = DocumentConverter(uploadcare, listOf(conversionJob))\nval files = converter.convert()\nLog.d(\"TAG\", files.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/convert/document \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"paths\": [\n    \"https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/\",\n    \"88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/\",\n    \"8ddbbb48-0927-4df7-afac-c6031668b01b/document/\"\n  ],\n  \"store\": \"0\",\n  \"save_in_group\": \"1\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/convert/document \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/convert/document \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_conversion.documentConvertStatus": {
        "id": "subpackage_conversion.documentConvertStatus",
        "namespace": [
          "subpackage_conversion"
        ],
        "description": "Once you get a conversion job result, you can acquire a conversion job status via token. Just put it in your request URL as `:token`.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/convert/document/status/"
          },
          {
            "type": "pathParameter",
            "value": "token"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Job token."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_conversion:DocumentConvertStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Service Unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/convert/document/status/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "token": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "processing",
                "error": "error",
                "result": {
                  "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae"
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  conversionJobStatus,\n  ConversionType,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await conversionJobStatus(\n  {\n    type: ConversionType.DOCUMENT,\n    token: 32921143\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$status = $api->documentJobStatus(32921143);\necho \\sprintf('Conversion status: %s', $status->getError() ?? $status->getStatus());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntoken = 32921143\ndocument_convert_status = uploadcare.document_convert_api.status(token)\nprint(document_convert_status.status)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = 32921143\nputs Uploadcare::DocumentConverter.status(token)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet job = try await uploadcare.documentConversionJobStatus(token: 32921143)\nprint(job.statusString)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getDocumentConversionStatus(token = 32921143)\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/status/1 \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/status/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/status/0",
            "responseStatusCode": 401,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/status/0",
            "responseStatusCode": 404,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/status/0",
            "responseStatusCode": 429,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/document/status/0",
            "responseStatusCode": 503,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/document/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_conversion.videoConvert": {
        "id": "subpackage_conversion.videoConvert",
        "namespace": [
          "subpackage_conversion"
        ],
        "description": "Uploadcare video processing adjusts video quality, format (mp4, webm, ogg), and size, cuts it, and generates thumbnails. Processed video is instantly available over CDN.",
        "method": "POST",
        "path": [
          {
            "type": "literal",
            "value": "/convert/video"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "request": {
          "contentType": "application/json",
          "body": {
            "type": "object",
            "extends": [],
            "properties": [
              {
                "key": "paths",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "list",
                        "itemShape": {
                          "type": "alias",
                          "value": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "description": "An array of UUIDs of your video files to process together with a set of assigned operations (see [documentation](https://uploadcare.com/docs/transformations/video-encoding/))."
              },
              {
                "key": "store",
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "optional",
                    "shape": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "id": "type_conversion:VideoJobSubmitParametersStore"
                      }
                    }
                  }
                },
                "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.\n"
              }
            ]
          }
        },
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_conversion:VideoConvertResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/convert/video",
            "responseStatusCode": 200,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {},
            "requestBody": {
              "type": "json",
              "value": {
                "paths": [
                  "d52d7136-a2e5-4338-9f45-affbf83b857d/video/",
                  "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                  "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2"
                ],
                "store": "1"
              }
            },
            "responseBody": {
              "type": "json",
              "value": {
                "problems": {
                  "13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d": "Bad path \"13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d\". Use UUID or CDN URL"
                },
                "result": [
                  {
                    "original_source": "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                    "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                    "token": 445630631,
                    "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1"
                  },
                  {
                    "original_source": "500196bc-9da5-4aaf-8f3e-70a4ce86edae/video/",
                    "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                    "token": 445630637,
                    "thumbnails_group_uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb~1"
                  }
                ]
              }
            },
            "snippets": {
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\nuse Uploadcare\\Interfaces\\Conversion\\ConvertedItemInterface;\nuse Uploadcare\\Interfaces\\Response\\ResponseProblemInterface;\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$request = (new Uploadcare\\Conversion\\VideoEncodingRequest())\n    ->setHorizontalSize(1024)\n    ->setVerticalSize(768)\n    ->setResizeMode('preserve_ratio')\n    ->setTargetFormat('mp4');\n$result = $api->convertVideo('1bac376c-aa7e-4356-861b-dd2657b5bfd2', $request);\nif ($result instanceof ConvertedItemInterface) {\n    echo \\sprintf('Conversion requested. Key is \\'%s\\'', $result->getToken());\n}\nif ($result instanceof ResponseProblemInterface) {\n    echo \\sprintf('Error in request: %s', $result->getReason());\n}\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntransformation = (\n    VideoTransformation()\n    .format(VideoFormat.mp4)\n    .size(width=640, height=480, resize_mode=ResizeMode.add_padding)\n    .quality(Quality.lighter)\n    .cut(start_time=\"0:1.535\", length=\"0:10.0\")\n    .thumbs(10)\n)\n\npath = transformation.path('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\nresponse = uploadcare.video_convert_api.convert([path])\nvideo_convert_info = response.result[0]\nconverted_file = uploadcare.file(video_convert_info.uuid)\nvideo_convert_status = uploadcare.video_convert_api.status(video_convert_info.token)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nvideo_params = {\n  uuid: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n  format: :mp4,\n  quality: :lighter\n}\noptions = { store: true }\nUploadcare::VideoConverter.convert(video_params, options)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nlet settings = VideoConversionJobSettings(forFile: videoFile)\n  .format(.mp4)\n  .size(VideoSize(width: 640, height: 480))\n  .resizeMode(.addPadding)\n  .quality(.lighter)\n  .cut( VideoCut(startTime: \"0:0:5.000\", length: \"15\") )\n  .thumbs(10)\n\nlet response = try await uploadcare.convertVideosWithSettings([settings])\nprint(response)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval conversionJob = VideoConversionJob(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n    .apply {\n        setFormat(VideoFormat.MP4)\n        resize(width = 640, height = 480, resizeMode = VideoResizeMode.LETTERBOX)\n        quality(VideoQuality.LIGHTER)\n        cut(startTime = \"0:0:5.000\", length = \"15\")\n        thumbnails(10)\n    }\nval converter = VideoConverter(uploadcare, listOf(conversionJob))\nval files = converter.convert()\nLog.d(\"TAG\", files.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/convert/video \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n  \"paths\": [\n    \"d52d7136-a2e5-4338-9f45-affbf83b857d/video/\",\n    \"d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/\",\n    \"28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2\"\n  ],\n  \"store\": \"1\"\n}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video",
            "responseStatusCode": 400,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/convert/video \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video",
            "responseStatusCode": 401,
            "pathParameters": {},
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "requestBody": {
              "type": "json",
              "value": {}
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl -X POST https://api.uploadcare.com/convert/video \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{}'",
                  "generated": true
                }
              ]
            }
          }
        ]
      },
      "subpackage_conversion.videoConvertStatus": {
        "id": "subpackage_conversion.videoConvertStatus",
        "namespace": [
          "subpackage_conversion"
        ],
        "description": "Once you get a processing job result, you can acquire a processing job status via token. Just put it in your request URL as `:token`.",
        "method": "GET",
        "path": [
          {
            "type": "literal",
            "value": "/convert/video/status/"
          },
          {
            "type": "pathParameter",
            "value": "token"
          }
        ],
        "auth": [
          "default"
        ],
        "defaultEnvironment": "Default",
        "environments": [
          {
            "id": "Default",
            "baseUrl": "https://api.uploadcare.com"
          }
        ],
        "pathParameters": [
          {
            "key": "token",
            "valueShape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "integer"
                }
              }
            },
            "description": "Job token."
          }
        ],
        "response": {
          "statusCode": 200,
          "body": {
            "type": "alias",
            "value": {
              "type": "id",
              "id": "type_conversion:VideoConvertStatusResponse"
            }
          }
        },
        "errors": [
          {
            "name": "Bad Request",
            "statusCode": 400,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Unauthorized",
            "statusCode": 401,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Not Found",
            "statusCode": 404,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Too Many Requests",
            "statusCode": 429,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          },
          {
            "name": "Service Unavailable",
            "statusCode": 503,
            "shape": {
              "type": "alias",
              "value": {
                "type": "unknown"
              }
            }
          }
        ],
        "examples": [
          {
            "path": "/convert/video/status/1",
            "responseStatusCode": 200,
            "pathParameters": {
              "token": 1
            },
            "queryParameters": {},
            "headers": {},
            "responseBody": {
              "type": "json",
              "value": {
                "status": "processing",
                "error": "error",
                "result": {
                  "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae",
                  "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1"
                }
              }
            },
            "snippets": {
              "javascript": [
                {
                  "name": "JS",
                  "language": "javascript",
                  "code": "import {\n  conversionJobStatus,\n  ConversionType,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await conversionJobStatus(\n  {\n    type: ConversionType.VIDEO,\n    token: 1201016744\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                  "generated": false
                }
              ],
              "php": [
                {
                  "name": "PHP",
                  "language": "php",
                  "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$status = $api->videoJobStatus(1201016744);\necho \\sprintf('Conversion status: %s', $status->getError() ?? $status->getStatus());\n",
                  "generated": false
                }
              ],
              "python": [
                {
                  "name": "Python",
                  "language": "python",
                  "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntoken = 1201016744\nvideo_convert_status = uploadcare.video_convert_api.status(token)\nprint(video_convert_status.status)\n",
                  "generated": false
                }
              ],
              "ruby": [
                {
                  "name": "Ruby",
                  "language": "ruby",
                  "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = 1201016744\nputs Uploadcare::VideoConverter.status(token)\n",
                  "generated": false
                }
              ],
              "swift": [
                {
                  "name": "Swift",
                  "language": "swift",
                  "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet job = try await uploadcare.videoConversionJobStatus(token: 1201016744)\nprint(job.statusString)\n",
                  "generated": false
                }
              ],
              "kotlin": [
                {
                  "name": "Kotlin",
                  "language": "kotlin",
                  "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getVideoConversionStatus(token = 1201016744)\nLog.d(\"TAG\", status.toString())\n",
                  "generated": false
                }
              ],
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/video/status/1 \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video/status/0",
            "responseStatusCode": 400,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/video/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video/status/0",
            "responseStatusCode": 401,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/video/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video/status/0",
            "responseStatusCode": 404,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/video/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video/status/0",
            "responseStatusCode": 429,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/video/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          },
          {
            "path": "/convert/video/status/0",
            "responseStatusCode": 503,
            "pathParameters": {
              "token": 0
            },
            "queryParameters": {},
            "headers": {
              "Accept": "string",
              "Uploadcare": "string",
              "Uploadcare.Simple": "string"
            },
            "responseBody": {
              "type": "json",
              "value": {}
            },
            "snippets": {
              "curl": [
                {
                  "language": "curl",
                  "code": "curl https://api.uploadcare.com/convert/video/status/0 \\\n     -H \"Accept: string\" \\\n     -H \"Uploadcare: string\" \\\n     -H \"Uploadcare.Simple: string\" \\\n     -H \"Authorization: <apiKey>\"",
                  "generated": true
                }
              ]
            }
          }
        ]
      }
    },
    "websockets": {},
    "webhooks": {},
    "types": {
      "type_file:FilesListRequestOrdering": {
        "name": "FilesListRequestOrdering",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "datetime_uploaded"
            },
            {
              "value": "-datetime_uploaded"
            }
          ]
        }
      },
      "type_file:FilesListResponseTotals": {
        "name": "FilesListResponseTotals",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "removed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Total number of the files that are marked as removed."
            },
            {
              "key": "stored",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Total number of the files that are marked as stored."
            },
            {
              "key": "unstored",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Total number of the files that are not marked as stored."
            }
          ]
        }
      },
      "type_file:FilesListResponse": {
        "name": "FilesListResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Next page URL."
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Previous page URL."
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Total number of the files of the queried type. The queried type depends on the stored and removed query parameters."
            },
            {
              "key": "totals",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_file:FilesListResponseTotals"
                    }
                  }
                }
              }
            },
            {
              "key": "per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Number of the files per page."
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:File"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_file:FilesStoringResponse": {
        "name": "FilesStoringResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "problems",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Dictionary of passed files UUIDs and problems associated with these UUIDs."
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:File"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of file objects that have been stored/deleted."
            }
          ]
        }
      },
      "type_file:FilesDeleteResponse": {
        "name": "FilesDeleteResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "problems",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Dictionary of passed files UUIDs and problems associated with these UUIDs."
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:File"
                        }
                      }
                    }
                  }
                }
              },
              "description": "List of file objects that have been stored/deleted."
            }
          ]
        }
      },
      "type_file:CreateLocalCopyRequestStore": {
        "name": "CreateLocalCopyRequestStore",
        "description": "The parameter only applies to the Uploadcare storage and MUST be either true or false.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "true"
            },
            {
              "value": "false"
            }
          ]
        }
      },
      "type_file:CreateRemoteCopyRequestPattern": {
        "name": "CreateRemoteCopyRequestPattern",
        "description": "The parameter is used to specify file names Uploadcare passes to a custom storage. If the parameter is omitted, your custom storages pattern is used. Use any combination of allowed values.\n\nParameter values:\n\n- `${default}` = `${uuid}/${auto_filename}`\n- `${auto_filename}` = `${filename}${effects}${ext}`\n- `${effects}` = processing operations put into a CDN URL\n- `${filename}` = original filename without extension\n- `${uuid}` = file UUID\n- `${ext}` = file extension, including period, e.g. .jpg",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "${default}"
            },
            {
              "value": "${auto_filename}"
            },
            {
              "value": "${effects}"
            },
            {
              "value": "${filename}"
            },
            {
              "value": "${uuid}"
            },
            {
              "value": "${ext}"
            }
          ]
        }
      },
      "type_addOns:AwsRekognitionExecuteResponse": {
        "name": "AwsRekognitionExecuteResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Request ID."
            }
          ]
        }
      },
      "type_addOns:AwsRekognitionExecutionStatusResponseStatus": {
        "name": "AwsRekognitionExecutionStatusResponseStatus",
        "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "in_progress"
            },
            {
              "value": "error"
            },
            {
              "value": "done"
            },
            {
              "value": "unknown"
            }
          ]
        }
      },
      "type_addOns:AwsRekognitionExecutionStatusResponse": {
        "name": "AwsRekognitionExecutionStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:AwsRekognitionExecutionStatusResponseStatus"
                    }
                  }
                }
              },
              "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution."
            }
          ]
        }
      },
      "type_addOns:AwsRekognitionDetectModerationLabelsExecuteResponse": {
        "name": "AwsRekognitionDetectModerationLabelsExecuteResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Request ID."
            }
          ]
        }
      },
      "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus": {
        "name": "AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus",
        "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "in_progress"
            },
            {
              "value": "error"
            },
            {
              "value": "done"
            },
            {
              "value": "unknown"
            }
          ]
        }
      },
      "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponse": {
        "name": "AwsRekognitionDetectModerationLabelsExecutionStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus"
                    }
                  }
                }
              },
              "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution."
            }
          ]
        }
      },
      "type_addOns:UcClamavVirusScanExecuteRequestParams": {
        "name": "UcClamavVirusScanExecuteRequestParams",
        "description": "Optional object with Add-On specific parameters",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "purge_infected",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Purge infected file."
            }
          ]
        }
      },
      "type_addOns:UcClamavVirusScanExecuteResponse": {
        "name": "UcClamavVirusScanExecuteResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Request ID."
            }
          ]
        }
      },
      "type_addOns:UcClamavVirusScanExecutionStatusResponseStatus": {
        "name": "UcClamavVirusScanExecutionStatusResponseStatus",
        "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "in_progress"
            },
            {
              "value": "error"
            },
            {
              "value": "done"
            },
            {
              "value": "unknown"
            }
          ]
        }
      },
      "type_addOns:UcClamavVirusScanExecutionStatusResponse": {
        "name": "UcClamavVirusScanExecutionStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:UcClamavVirusScanExecutionStatusResponseStatus"
                    }
                  }
                }
              },
              "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution."
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecuteRequestParamsTypeLevel": {
        "name": "RemoveBgExecuteRequestParamsTypeLevel",
        "description": "\"none\" = No classification (foreground_type won't bet set in the application data)\n\n\"1\" = Use coarse classification classes: [person, product, animal, car, other]\n\n\"2\" = Use more specific classification classes: [person, product, animal, car,\ncar_interior, car_part, transportation, graphics, other]\n\n\"latest\" = Always use the latest classification classes available",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "none"
            },
            {
              "value": "1"
            },
            {
              "value": "2"
            },
            {
              "value": "latest"
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecuteRequestParamsType": {
        "name": "RemoveBgExecuteRequestParamsType",
        "description": "Foreground type.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "auto"
            },
            {
              "value": "person"
            },
            {
              "value": "product"
            },
            {
              "value": "car"
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecuteRequestParamsChannels": {
        "name": "RemoveBgExecuteRequestParamsChannels",
        "description": "Request either the finalized image ('rgba', default) or an alpha mask ('alpha').",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "rgba"
            },
            {
              "value": "alpha"
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecuteRequestParams": {
        "name": "RemoveBgExecuteRequestParams",
        "description": "Optional object with Add-On specific parameters",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "crop",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to crop off all empty regions"
            },
            {
              "key": "crop_margin",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Adds a margin around the cropped subject, e.g 30px or 30%"
            },
            {
              "key": "scale",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Scales the subject relative to the total image size, e.g 80%"
            },
            {
              "key": "add_shadow",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to add an artificial shadow to the result"
            },
            {
              "key": "type_level",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:RemoveBgExecuteRequestParamsTypeLevel"
                    }
                  }
                }
              },
              "description": "\"none\" = No classification (foreground_type won't bet set in the application data)\n\n\"1\" = Use coarse classification classes: [person, product, animal, car, other]\n\n\"2\" = Use more specific classification classes: [person, product, animal, car,\ncar_interior, car_part, transportation, graphics, other]\n\n\"latest\" = Always use the latest classification classes available"
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:RemoveBgExecuteRequestParamsType"
                    }
                  }
                }
              },
              "description": "Foreground type."
            },
            {
              "key": "semitransparency",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              },
              "description": "Whether to have semi-transparent regions in the result"
            },
            {
              "key": "channels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:RemoveBgExecuteRequestParamsChannels"
                    }
                  }
                }
              },
              "description": "Request either the finalized image ('rgba', default) or an alpha mask ('alpha')."
            },
            {
              "key": "roi",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Region of interest: Only contents of this rectangular region can be detected\nas foreground. Everything outside is considered background and will be removed.\nThe rectangle is defined as two x/y coordinates in the format \"x1 y1 x2 y2\".\nThe coordinates can be in absolute pixels (suffix 'px') or relative to the\nwidth/height of the image (suffix '%'). By default, the whole image is the\nregion of interest (\"0% 0% 100% 100%\")."
            },
            {
              "key": "position",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Positions the subject within the image canvas. Can be \"original\"\n(default unless \"scale\" is given), \"center\" (default when \"scale\" is given) or a value from \"0%\" to \"100%\"\n(both horizontal and vertical) or two values (horizontal, vertical)."
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecuteResponse": {
        "name": "RemoveBgExecuteResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Request ID."
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecutionStatusResponseResult": {
        "name": "RemoveBgExecutionStatusResponseResult",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "file_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "UUID of the file with removed background."
            }
          ]
        }
      },
      "type_addOns:RemoveBgExecutionStatusResponse": {
        "name": "RemoveBgExecutionStatusResponse",
        "shape": {
          "type": "object",
          "extends": [
            "type_:AddonExecutionStatus"
          ],
          "properties": [
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_addOns:RemoveBgExecutionStatusResponseResult"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_group:GroupsListRequestOrdering": {
        "name": "GroupsListRequestOrdering",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "datetime_created"
            },
            {
              "value": "-datetime_created"
            }
          ]
        }
      },
      "type_group:GroupsListResponse": {
        "name": "GroupsListResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "next",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Next page URL."
            },
            {
              "key": "previous",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Previous page URL."
            },
            {
              "key": "total",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Total number of groups in the project."
            },
            {
              "key": "per_page",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              },
              "description": "Number of groups per page."
            },
            {
              "key": "results",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:Group"
                        }
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_conversion:DocumentConvertInfoResponseFormatConversionFormatsItem": {
        "name": "DocumentConvertInfoResponseFormatConversionFormatsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Supported target document format."
            }
          ]
        }
      },
      "type_conversion:DocumentConvertInfoResponseFormat": {
        "name": "DocumentConvertInfoResponseFormat",
        "description": "Document format details.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A detected document format."
            },
            {
              "key": "conversion_formats",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_conversion:DocumentConvertInfoResponseFormatConversionFormatsItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The conversions that are supported for the document."
            }
          ]
        }
      },
      "type_conversion:DocumentConvertInfoResponseConvertedGroups": {
        "name": "DocumentConvertInfoResponseConvertedGroups",
        "description": "Information about already converted groups.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "{conversion_format}",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Converted group UUID."
            }
          ]
        }
      },
      "type_conversion:DocumentConvertInfoResponse": {
        "name": "DocumentConvertInfoResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Holds an error if your document can't be handled."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_conversion:DocumentConvertInfoResponseFormat"
                    }
                  }
                }
              },
              "description": "Document format details."
            },
            {
              "key": "converted_groups",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_conversion:DocumentConvertInfoResponseConvertedGroups"
                    }
                  }
                }
              },
              "description": "Information about already converted groups."
            }
          ]
        }
      },
      "type_conversion:DocumentJobSubmitParametersStore": {
        "name": "DocumentJobSubmitParametersStore",
        "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0"
            },
            {
              "value": "false"
            },
            {
              "value": "1"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "type_conversion:DocumentJobSubmitParametersSaveInGroup": {
        "name": "DocumentJobSubmitParametersSaveInGroup",
        "description": "When `save_in_group` is set to `\"1\"`, multi-page documents additionally will be saved as a file group.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0"
            },
            {
              "value": "false"
            },
            {
              "value": "1"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "type_conversion:DocumentConvertResponseResultItem": {
        "name": "DocumentConvertResponseResultItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "original_source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Source file identifier including a target format, if present."
            },
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A UUID of your converted document."
            },
            {
              "key": "token",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A conversion job token that can be used to get a job status."
            }
          ]
        }
      },
      "type_conversion:DocumentConvertResponse": {
        "name": "DocumentConvertResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "problems",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Dictionary of problems related to your processing job, if any. A key is the `path` you requested."
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_conversion:DocumentConvertResponseResultItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Result for each requested path, in case of no errors for that path."
            }
          ]
        }
      },
      "type_conversion:DocumentConvertStatusResponseStatus": {
        "name": "DocumentConvertStatusResponseStatus",
        "description": "Conversion job status, can have one of the following values: - `pending` — a source file is being prepared for conversion. - `processing` — conversion is in progress. - `finished` — the conversion is finished. - `failed` — failed to convert the source, see `error` for details. - `canceled` — the conversion was canceled.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pending"
            },
            {
              "value": "processing"
            },
            {
              "value": "finished"
            },
            {
              "value": "failed"
            },
            {
              "value": "cancelled"
            }
          ]
        }
      },
      "type_conversion:DocumentConvertStatusResponseResult": {
        "name": "DocumentConvertStatusResponseResult",
        "description": "Repeats the contents of your processing output.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A UUID of a converted target file."
            }
          ]
        }
      },
      "type_conversion:DocumentConvertStatusResponse": {
        "name": "DocumentConvertStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_conversion:DocumentConvertStatusResponseStatus"
                    }
                  }
                }
              },
              "description": "Conversion job status, can have one of the following values: - `pending` — a source file is being prepared for conversion. - `processing` — conversion is in progress. - `finished` — the conversion is finished. - `failed` — failed to convert the source, see `error` for details. - `canceled` — the conversion was canceled."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Holds a conversion error if your file can't be handled."
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_conversion:DocumentConvertStatusResponseResult"
                    }
                  }
                }
              },
              "description": "Repeats the contents of your processing output."
            }
          ]
        }
      },
      "type_conversion:VideoJobSubmitParametersStore": {
        "name": "VideoJobSubmitParametersStore",
        "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0"
            },
            {
              "value": "false"
            },
            {
              "value": "1"
            },
            {
              "value": "true"
            }
          ]
        }
      },
      "type_conversion:VideoConvertResponseResultItem": {
        "name": "VideoConvertResponseResultItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "original_source",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Input file identifier including operations, if present."
            },
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A UUID of your processed video file."
            },
            {
              "key": "token",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "A processing job token that can be used to get a job status."
            },
            {
              "key": "thumbnails_group_uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "UUID of a file group with thumbnails for an output video, based on the `thumbs` operation parameters."
            }
          ]
        }
      },
      "type_conversion:VideoConvertResponse": {
        "name": "VideoConvertResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "problems",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Dictionary of problems related to your processing job, if any. Key is the `path` you requested."
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_conversion:VideoConvertResponseResultItem"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Result for each requested path, in case of no errors for that path."
            }
          ]
        }
      },
      "type_conversion:VideoConvertStatusResponseStatus": {
        "name": "VideoConvertStatusResponseStatus",
        "description": "Processing job status, can have one of the following values: - `pending` — video file is being prepared for conversion. - `processing` — video file processing is in progress. - `finished` — the processing is finished. - `failed` — we failed to process the video, see `error` for details. - `canceled` — video processing was canceled.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "pending"
            },
            {
              "value": "processing"
            },
            {
              "value": "finished"
            },
            {
              "value": "failed"
            },
            {
              "value": "cancelled"
            }
          ]
        }
      },
      "type_conversion:VideoConvertStatusResponseResult": {
        "name": "VideoConvertStatusResponseResult",
        "description": "Repeats the contents of your processing output.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A UUID of your processed video file."
            },
            {
              "key": "thumbnails_group_uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "A UUID of a file group with thumbnails for an output video, based on the `thumbs` operation parameters."
            }
          ]
        }
      },
      "type_conversion:VideoConvertStatusResponse": {
        "name": "VideoConvertStatusResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_conversion:VideoConvertStatusResponseStatus"
                    }
                  }
                }
              },
              "description": "Processing job status, can have one of the following values: - `pending` — video file is being prepared for conversion. - `processing` — video file processing is in progress. - `finished` — the processing is finished. - `failed` — we failed to process the video, see `error` for details. - `canceled` — video processing was canceled."
            },
            {
              "key": "error",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Holds a processing error if we failed to handle your video."
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_conversion:VideoConvertStatusResponseResult"
                    }
                  }
                }
              },
              "description": "Repeats the contents of your processing output."
            }
          ]
        }
      },
      "type_:AddonExecutionStatusStatus": {
        "name": "AddonExecutionStatusStatus",
        "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "in_progress"
            },
            {
              "value": "error"
            },
            {
              "value": "done"
            },
            {
              "value": "unknown"
            }
          ]
        }
      },
      "type_:AddonExecutionStatus": {
        "name": "AddonExecutionStatus",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "status",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AddonExecutionStatusStatus"
                    }
                  }
                }
              },
              "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution."
            }
          ]
        }
      },
      "type_:WebhookFilePayload": {
        "name": "WebhookFilePayload",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "initiator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookInitiator"
                }
              }
            },
            {
              "key": "hook",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookPublicInfo"
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:File"
                }
              }
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File CDN URL."
            }
          ]
        }
      },
      "type_:WebhookFileInfoUpdatedPayloadPreviousValues": {
        "name": "WebhookFileInfoUpdatedPayloadPreviousValues",
        "description": "Object containing the values of the updated file data attributes and their values prior to the event.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "appdata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ApplicationDataObject"
                    }
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Metadata"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WebhookFileInfoUpdatedPayload": {
        "name": "WebhookFileInfoUpdatedPayload",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "initiator",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookInitiator"
                }
              }
            },
            {
              "key": "hook",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookPublicInfo"
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:File"
                }
              }
            },
            {
              "key": "file",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File CDN URL."
            },
            {
              "key": "previous_values",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookFileInfoUpdatedPayloadPreviousValues"
                }
              },
              "description": "Object containing the values of the updated file data attributes and their values prior to the event."
            }
          ]
        }
      },
      "type_:FileCopy": {
        "name": "FileCopy",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "datetime_removed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Date and time when a file was removed, if any."
            },
            {
              "key": "datetime_stored",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Date and time of the last store request, if any."
            },
            {
              "key": "datetime_uploaded",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when a file was uploaded."
            },
            {
              "key": "is_image",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Is file is image."
            },
            {
              "key": "is_ready",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Is file is ready to be used after upload."
            },
            {
              "key": "mime_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File MIME-type."
            },
            {
              "key": "original_file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Publicly available file CDN URL. Available if a file is not deleted."
            },
            {
              "key": "original_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Original file name taken from uploaded file."
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "File size in bytes."
            },
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "API resource URL for a particular file."
            },
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File UUID."
            },
            {
              "key": "variations",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "content_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Metadata"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:File": {
        "name": "File",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "datetime_removed",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Date and time when a file was removed, if any."
            },
            {
              "key": "datetime_stored",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Date and time of the last store request, if any."
            },
            {
              "key": "datetime_uploaded",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when a file was uploaded."
            },
            {
              "key": "is_image",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Is file is image."
            },
            {
              "key": "is_ready",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Is file is ready to be used after upload."
            },
            {
              "key": "mime_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File MIME-type."
            },
            {
              "key": "original_file_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Publicly available file CDN URL. Available if a file is not deleted."
            },
            {
              "key": "original_filename",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Original file name taken from uploaded file."
            },
            {
              "key": "size",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "File size in bytes."
            },
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "API resource URL for a particular file."
            },
            {
              "key": "uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "File UUID."
            },
            {
              "key": "appdata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ApplicationDataObject"
                    }
                  }
                }
              }
            },
            {
              "key": "variations",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "map",
                      "keyShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      "valueShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "Dictionary of other files that were created using this file as a source. It's used for video processing and document conversion jobs. E.g., `<conversion_path>: <uuid>`."
            },
            {
              "key": "content_info",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ContentInfo"
                    }
                  }
                }
              }
            },
            {
              "key": "metadata",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:Metadata"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:Metadata": {
        "name": "Metadata",
        "description": "Arbitrary metadata associated with a file.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "optional",
            "shape": {
              "type": "alias",
              "value": {
                "type": "map",
                "keyShape": {
                  "type": "alias",
                  "value": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                "valueShape": {
                  "type": "alias",
                  "value": {
                    "type": "unknown"
                  }
                }
              }
            }
          }
        }
      },
      "type_:MetadataItemValue": {
        "name": "MetadataItemValue",
        "description": "Value of metadata key.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:ContentInfoMime": {
        "name": "ContentInfoMime",
        "description": "MIME type.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "mime",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Full MIME type."
            },
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Type of MIME type."
            },
            {
              "key": "subtype",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Subtype of MIME type."
            }
          ]
        }
      },
      "type_:ContentInfo": {
        "name": "ContentInfo",
        "description": "Information about file content.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "mime",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ContentInfoMime"
                    }
                  }
                }
              },
              "description": "MIME type."
            },
            {
              "key": "image",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageInfo"
                    }
                  }
                }
              }
            },
            {
              "key": "video",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoInfo"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ImageInfoColorMode": {
        "name": "ImageInfoColorMode",
        "description": "Image color mode.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "RGB"
            },
            {
              "value": "RGBA"
            },
            {
              "value": "RGBa"
            },
            {
              "value": "RGBX"
            },
            {
              "value": "L"
            },
            {
              "value": "LA"
            },
            {
              "value": "La"
            },
            {
              "value": "P"
            },
            {
              "value": "PA"
            },
            {
              "value": "CMYK"
            },
            {
              "value": "YCbCr"
            },
            {
              "value": "HSV"
            },
            {
              "value": "LAB"
            }
          ]
        }
      },
      "type_:ImageInfoGeoLocation": {
        "name": "ImageInfoGeoLocation",
        "description": "Geo-location of image from EXIF.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "latitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location latitude."
            },
            {
              "key": "longitude",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Location longitude."
            }
          ]
        }
      },
      "type_:ImageInfo": {
        "name": "ImageInfo",
        "description": "Image metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "color_mode",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:ImageInfoColorMode"
                }
              },
              "description": "Image color mode."
            },
            {
              "key": "orientation",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Image orientation from EXIF."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Image format."
            },
            {
              "key": "sequence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              },
              "description": "Set to true if a file contains a sequence of images (GIF for example)."
            },
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Image height in pixels."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Image width in pixels."
            },
            {
              "key": "geo_location",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:ImageInfoGeoLocation"
                    }
                  }
                }
              },
              "description": "Geo-location of image from EXIF."
            },
            {
              "key": "datetime_original",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF."
            },
            {
              "key": "dpi",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "description": "Image DPI for two dimensions."
            }
          ]
        }
      },
      "type_:VideoInfoAudioItem": {
        "name": "VideoInfoAudioItem",
        "description": "Audio stream's metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's bitrate."
            },
            {
              "key": "codec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's codec."
            },
            {
              "key": "sample_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's sample rate."
            },
            {
              "key": "channels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Audio stream's number of channels."
            }
          ]
        }
      },
      "type_:VideoInfoVideoItem": {
        "name": "VideoInfoVideoItem",
        "description": "Video stream's metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Video stream's image height."
            },
            {
              "key": "width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "integer"
                  }
                }
              },
              "description": "Video stream's image width."
            },
            {
              "key": "frame_rate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              },
              "description": "Video stream's frame rate."
            },
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's bitrate."
            },
            {
              "key": "codec",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Video stream's codec."
            }
          ]
        }
      },
      "type_:VideoInfo": {
        "name": "VideoInfo",
        "description": "Video metadata.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "duration",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Video file's duration in milliseconds."
            },
            {
              "key": "format",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "Video file's format."
            },
            {
              "key": "bitrate",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Video file's bitrate."
            },
            {
              "key": "audio",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoInfoAudioItem"
                    }
                  }
                }
              }
            },
            {
              "key": "video",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:VideoInfoVideoItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CopiedFileUrl": {
        "name": "CopiedFileUrl",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "URL with an s3 scheme. Your bucket name is put as a host, and an s3 object path follows."
            }
          ]
        }
      },
      "type_:Group": {
        "name": "Group",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Group's identifier."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                }
              },
              "description": "ISO-8601 date and time when the group was created."
            },
            {
              "key": "files_count",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "description": "Number of the files in the group."
            },
            {
              "key": "cdn_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Group's CDN URL."
            },
            {
              "key": "url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Group's API resource URL."
            }
          ]
        }
      },
      "type_:GroupWithFiles": {
        "name": "GroupWithFiles",
        "shape": {
          "type": "object",
          "extends": [
            "type_:Group"
          ],
          "properties": [
            {
              "key": "files",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "unknown"
                        }
                      }
                    }
                  }
                }
              },
              "description": "The list of files in the group. An array may contain null values if a file has been removed."
            }
          ]
        }
      },
      "type_:ProjectCollaboratorsItem": {
        "name": "ProjectCollaboratorsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "email",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Collaborator email."
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Collaborator name."
            }
          ]
        }
      },
      "type_:Project": {
        "name": "Project",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "collaborators",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "list",
                      "itemShape": {
                        "type": "alias",
                        "value": {
                          "type": "id",
                          "id": "type_:ProjectCollaboratorsItem"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Project login name."
            },
            {
              "key": "pub_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Project public key."
            },
            {
              "key": "autostore_enabled",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WebhookId": {
        "name": "WebhookId",
        "description": "Webhook's ID.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "double"
            }
          }
        }
      },
      "type_:WebhookProject": {
        "name": "WebhookProject",
        "description": "Project ID the webhook belongs to.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "double"
            }
          }
        }
      },
      "type_:WebhookProjectPubkey": {
        "name": "WebhookProjectPubkey",
        "description": "Public project key the webhook belongs to.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:WebhookCreated": {
        "name": "WebhookCreated",
        "description": "date-time when a webhook was created.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "datetime"
            }
          }
        }
      },
      "type_:WebhookUpdated": {
        "name": "WebhookUpdated",
        "description": "date-time when a webhook was updated.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "datetime"
            }
          }
        }
      },
      "type_:WebhookTarget": {
        "name": "WebhookTarget",
        "description": "A URL that is triggered by an event, for example, a file upload. A target URL MUST be unique for each `project` — `event type` combination.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:WebhookEvent": {
        "name": "WebhookEvent",
        "description": "An event you subscribe to.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "file.uploaded"
            },
            {
              "value": "file.infected"
            },
            {
              "value": "file.stored"
            },
            {
              "value": "file.deleted"
            },
            {
              "value": "file.info_updated"
            }
          ]
        }
      },
      "type_:WebhookIsActive": {
        "name": "WebhookIsActive",
        "description": "Marks a subscription as either active or not, defaults to `true`, otherwise `false`.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "boolean"
            }
          }
        }
      },
      "type_:WebhookSigningSecret": {
        "name": "WebhookSigningSecret",
        "description": "Optional [HMAC/SHA-256](https://en.wikipedia.org/wiki/HMAC) secret that, if set, will be used to\ncalculate signatures for the webhook payloads sent to the `target_url`.\n\nCalculated signature will be sent to the `target_url` as a value of the `X-Uc-Signature` HTTP\nheader. The header will have the following format: `X-Uc-Signature: v1=<HMAC-SHA256-HEX-DIGEST>`.\nSee [Secure Webhooks](https://uploadcare.com/docs/webhooks/#signed-webhooks) for details.",
        "shape": {
          "type": "alias",
          "value": {
            "type": "primitive",
            "value": {
              "type": "string"
            }
          }
        }
      },
      "type_:WebhookVersion": {
        "name": "WebhookVersion",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "0.7"
            }
          }
        }
      },
      "type_:WebhookVersionOfRequest": {
        "name": "WebhookVersionOfRequest",
        "shape": {
          "type": "alias",
          "value": {
            "type": "literal",
            "value": {
              "type": "stringLiteral",
              "value": "0.7"
            }
          }
        }
      },
      "type_:WebhookVersionOfListResponse": {
        "name": "WebhookVersionOfListResponse",
        "description": "Webhook payload's version.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": ""
            },
            {
              "value": "0.5"
            },
            {
              "value": "0.6"
            },
            {
              "value": "0.7"
            }
          ]
        }
      },
      "type_:Webhook": {
        "name": "Webhook",
        "description": "Webhook.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookId"
                    }
                  }
                }
              }
            },
            {
              "key": "project",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookProject"
                    }
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookCreated"
                    }
                  }
                }
              }
            },
            {
              "key": "updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookUpdated"
                    }
                  }
                }
              }
            },
            {
              "key": "event",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookEvent"
                    }
                  }
                }
              }
            },
            {
              "key": "target_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookTarget"
                    }
                  }
                }
              }
            },
            {
              "key": "is_active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookIsActive"
                    }
                  }
                }
              }
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookVersion"
                    }
                  }
                }
              }
            },
            {
              "key": "signing_secret",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookSigningSecret"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WebhookOfListResponse": {
        "name": "WebhookOfListResponse",
        "description": "Webhook.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookId"
                    }
                  }
                }
              }
            },
            {
              "key": "project",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookProject"
                    }
                  }
                }
              }
            },
            {
              "key": "created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookCreated"
                    }
                  }
                }
              }
            },
            {
              "key": "updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookUpdated"
                    }
                  }
                }
              }
            },
            {
              "key": "event",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookEvent"
                    }
                  }
                }
              }
            },
            {
              "key": "target_url",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookTarget"
                    }
                  }
                }
              }
            },
            {
              "key": "is_active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookIsActive"
                    }
                  }
                }
              }
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookVersionOfListResponse"
                    }
                  }
                }
              }
            },
            {
              "key": "signing_secret",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookSigningSecret"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WebhookInitiatorType": {
        "name": "WebhookInitiatorType",
        "description": "Initiator type name.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "api"
            },
            {
              "value": "system"
            },
            {
              "value": "addon"
            }
          ]
        }
      },
      "type_:WebhookInitiatorDetailAddonName": {
        "name": "WebhookInitiatorDetailAddonName",
        "description": "Add-On name.",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "aws_rekognition_detect_labels"
            },
            {
              "value": "aws_rekognition_detect_moderation_labels"
            },
            {
              "value": "uc_clamav_virus_scan"
            },
            {
              "value": "remove_bg"
            },
            {
              "value": "zamzar_convert_document"
            },
            {
              "value": "zencoder_convert_video"
            }
          ]
        }
      },
      "type_:WebhookInitiatorDetail": {
        "name": "WebhookInitiatorDetail",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "request_id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Request ID."
            },
            {
              "key": "addon_name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookInitiatorDetailAddonName"
                    }
                  }
                }
              },
              "description": "Add-On name."
            },
            {
              "key": "source_file_uuid",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Source file UUID if the current is derivative."
            }
          ]
        }
      },
      "type_:WebhookInitiator": {
        "name": "WebhookInitiator",
        "description": "Webhook event initiator.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookInitiatorType"
                }
              },
              "description": "Initiator type name."
            },
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookInitiatorDetail"
                }
              }
            }
          ]
        }
      },
      "type_:WebhookPublicInfo": {
        "name": "WebhookPublicInfo",
        "description": "Public Webhook information (does not include secret data like `signing_secret`)",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "id",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookId"
                }
              }
            },
            {
              "key": "project",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookProject"
                    }
                  }
                }
              }
            },
            {
              "key": "project_pub_key",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:WebhookProjectPubkey"
                    }
                  }
                }
              }
            },
            {
              "key": "created_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookCreated"
                }
              }
            },
            {
              "key": "updated_at",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookUpdated"
                }
              }
            },
            {
              "key": "event",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookEvent"
                }
              }
            },
            {
              "key": "target",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookTarget"
                }
              }
            },
            {
              "key": "is_active",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookIsActive"
                }
              }
            },
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "id",
                  "id": "type_:WebhookVersion"
                }
              }
            }
          ]
        }
      },
      "type_:CantUseDocsConversionError": {
        "name": "CantUseDocsConversionError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CantUseVideoConversionError": {
        "name": "CantUseVideoConversionError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:CantUseWebhooksError": {
        "name": "CantUseWebhooksError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:JsonObjectParseError": {
        "name": "JsonObjectParseError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "Expected JSON object."
            }
          ]
        }
      },
      "type_:LocalCopyResponse": {
        "name": "LocalCopyResponse",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "result",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:FileCopy"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:ApplicationData": {
        "name": "ApplicationData",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              },
              "description": "An application version."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was created."
            },
            {
              "key": "datetime_updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was updated."
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "map",
                  "keyShape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  "valueShape": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "description": "Dictionary with a result of an application execution result."
            }
          ]
        }
      },
      "type_:RemoveBgV10Data": {
        "name": "RemoveBgV10Data",
        "description": "Dictionary with a result of an remove.bg information about an image.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "foreground_type",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "foreground classification type (present if type_level was set)"
            }
          ]
        }
      },
      "type_:RemoveBgV10": {
        "name": "RemoveBgV10",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "1.0"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:RemoveBgV10Data"
                    }
                  }
                }
              },
              "description": "Dictionary with a result of an remove.bg information about an image."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was created."
            },
            {
              "key": "datetime_updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was updated."
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox": {
        "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "Height",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "Left",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "Top",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "Width",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem": {
        "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "BoundingBox",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox"
                    }
                  }
                }
              }
            },
            {
              "key": "Confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem": {
        "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "Name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItem": {
        "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "Confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Instances",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem"
                    }
                  }
                }
              }
            },
            {
              "key": "Name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "Parents",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectLabelsV20160627Data": {
        "name": "AwsRekognitionDetectLabelsV20160627Data",
        "description": "Dictionary with a result of an aws rekognition detect labels execution result.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "LabelModelVersion",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "Labels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectLabelsV20160627": {
        "name": "AwsRekognitionDetectLabelsV20160627",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "2016-06-27"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectLabelsV20160627Data"
                    }
                  }
                }
              },
              "description": "Dictionary with a result of an aws rekognition detect labels execution result."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was created."
            },
            {
              "key": "datetime_updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was updated."
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem": {
        "name": "AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "Confidence",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "double"
                  }
                }
              }
            },
            {
              "key": "Name",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ParentName",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectModerationLabelsV20160627Data": {
        "name": "AwsRekognitionDetectModerationLabelsV20160627Data",
        "description": "Dictionary with a result of an aws rekognition detect moderation labels execution result.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "ModerationModelVersion",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "key": "ModerationLabels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "list",
                  "itemShape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:AwsRekognitionDetectModerationLabelsV20160627": {
        "name": "AwsRekognitionDetectModerationLabelsV20160627",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "2016-06-27"
                      }
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectModerationLabelsV20160627Data"
                    }
                  }
                }
              },
              "description": "Dictionary with a result of an aws rekognition detect moderation labels execution result."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was created."
            },
            {
              "key": "datetime_updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was updated."
            }
          ]
        }
      },
      "type_:UcClamavVirusScanVersion": {
        "name": "UcClamavVirusScanVersion",
        "shape": {
          "type": "enum",
          "values": [
            {
              "value": "0.104.2"
            },
            {
              "value": "0.104.3"
            },
            {
              "value": "0.105.0"
            },
            {
              "value": "0.105.1"
            }
          ]
        }
      },
      "type_:UcClamavVirusScanData": {
        "name": "UcClamavVirusScanData",
        "description": "Dictionary with a result of ClamAV execution result.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "infected",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "boolean"
                  }
                }
              }
            },
            {
              "key": "infected_with",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:UcClamavVirusScan": {
        "name": "UcClamavVirusScan",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "version",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UcClamavVirusScanVersion"
                    }
                  }
                }
              }
            },
            {
              "key": "data",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UcClamavVirusScanData"
                    }
                  }
                }
              },
              "description": "Dictionary with a result of ClamAV execution result."
            },
            {
              "key": "datetime_created",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was created."
            },
            {
              "key": "datetime_updated",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "primitive",
                  "value": {
                    "type": "datetime"
                  }
                }
              },
              "description": "Date and time when an application data was updated."
            }
          ]
        }
      },
      "type_:ApplicationDataObject": {
        "name": "ApplicationDataObject",
        "description": "Dictionary of application names and data associated with these applications.",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "aws_rekognition_detect_labels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectLabelsV20160627"
                    }
                  }
                }
              }
            },
            {
              "key": "aws_rekognition_detect_moderation_labels",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:AwsRekognitionDetectModerationLabelsV20160627"
                    }
                  }
                }
              }
            },
            {
              "key": "remove_bg",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:RemoveBgV10"
                    }
                  }
                }
              }
            },
            {
              "key": "uc_clamav_virus_scan",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "id": "type_:UcClamavVirusScan"
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:SimpleAuthHttpForbidden": {
        "name": "SimpleAuthHttpForbidden",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "type_:WebhookTargetUrlError": {
        "name": "WebhookTargetUrlError",
        "shape": {
          "type": "object",
          "extends": [],
          "properties": [
            {
              "key": "detail",
              "valueShape": {
                "type": "alias",
                "value": {
                  "type": "optional",
                  "shape": {
                    "type": "alias",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "description": "`target_url` is missing."
            }
          ]
        }
      }
    },
    "subpackages": {
      "subpackage_file": {
        "id": "subpackage_file",
        "name": "File"
      },
      "subpackage_addOns": {
        "id": "subpackage_addOns",
        "name": "Add-Ons"
      },
      "subpackage_fileMetadata": {
        "id": "subpackage_fileMetadata",
        "name": "File metadata"
      },
      "subpackage_group": {
        "id": "subpackage_group",
        "name": "Group"
      },
      "subpackage_project": {
        "id": "subpackage_project",
        "name": "Project"
      },
      "subpackage_webhook": {
        "id": "subpackage_webhook",
        "name": "Webhook"
      },
      "subpackage_conversion": {
        "id": "subpackage_conversion",
        "name": "Conversion"
      }
    },
    "auths": {
      "default": {
        "type": "header",
        "headerWireValue": "Authorization",
        "nameOverride": "apiKey"
      }
    }
  }
]