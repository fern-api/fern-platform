{
  "baseUrl": {
    "domain": "uploadcare-preview-79798ef5-07dc-4ff0-928d-24b4c93ccd4d.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "title": "Guides",
            "icon": "puzzle",
            "items": [
              {
                "type": "section",
                "title": "Introduction",
                "urlSlug": "introduction",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/index.mdx",
                    "title": "Overview",
                    "urlSlug": "intro"
                  },
                  {
                    "type": "page",
                    "id": "pages/start/quickstart.mdx",
                    "title": "Quick start",
                    "urlSlug": "start/quickstart"
                  },
                  {
                    "type": "page",
                    "id": "pages/security/index.mdx",
                    "title": "Security",
                    "urlSlug": "security"
                  },
                  {
                    "type": "page",
                    "id": "pages/billing.mdx",
                    "title": "Billing",
                    "urlSlug": "billing"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Uploading",
                "urlSlug": "uploading",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/uploads/index.mdx",
                    "title": "Overview",
                    "urlSlug": "uploads"
                  },
                  {
                    "type": "page",
                    "id": "pages/uploading-files/index.mdx",
                    "title": "Uploading files",
                    "urlSlug": "uploading-files"
                  },
                  {
                    "type": "section",
                    "title": "File Uploader",
                    "urlSlug": "file-uploader",
                    "collapsed": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "pages/file-uploader/index.mdx",
                        "title": "Overview",
                        "urlSlug": "file-uploader"
                      }
                    ],
                    "skipUrlSlug": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Optimization",
                "urlSlug": "optimization",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/transformations/image/compression.mdx",
                    "title": "Image optimization",
                    "urlSlug": "image-optimization"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Image transformations",
                "urlSlug": "image-transformations",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/transformations/image/index.mdx",
                    "title": "Overview",
                    "urlSlug": "overview"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Delivery",
                "urlSlug": "delivery",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/delivery/index.mdx",
                    "title": "Overview",
                    "urlSlug": "overview"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "File management",
                "urlSlug": "file-management",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/start/file-management.mdx",
                    "title": "Overview",
                    "urlSlug": "overview"
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "docs",
            "urlSlug": "docs"
          },
          {
            "title": "Integrations",
            "icon": "puzzle",
            "items": [
              {
                "type": "page",
                "id": "pages/integrations/index.mdx",
                "title": "All integrations",
                "urlSlug": "all-integrations"
              },
              {
                "type": "section",
                "title": "API clients",
                "urlSlug": "api-clients",
                "collapsed": false,
                "items": [
                  {
                    "type": "page",
                    "id": "pages/integrations/python.mdx",
                    "title": "Python",
                    "urlSlug": "python"
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "docs/integrations",
            "urlSlug": "docs/integrations"
          },
          {
            "title": "API References",
            "icon": "puzzle",
            "items": [
              {
                "type": "api",
                "title": "Upload API",
                "api": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
                "showErrors": true,
                "urlSlug": "upload-api",
                "skipUrlSlug": false
              },
              {
                "type": "api",
                "title": "REST API v0.7",
                "api": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
                "showErrors": true,
                "urlSlug": "rest-api-v-0-7",
                "skipUrlSlug": false
              },
              {
                "type": "api",
                "title": "URL API",
                "api": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
                "showErrors": true,
                "urlSlug": "url-api",
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "api",
            "urlSlug": "api"
          }
        ]
      },
      "logoHeight": 28,
      "logoHref": "https://uploadcare.com/docs/",
      "colorsV3": {
        "type": "light",
        "accentPrimary": {
          "r": 70,
          "g": 111,
          "b": 246,
          "a": 1
        },
        "logo": "5529d56f-3bd2-44b6-855e-eec308770b85",
        "background": {
          "type": "solid",
          "r": 255,
          "g": 255,
          "b": 255,
          "a": 1
        }
      },
      "navbarLinks": [
        {
          "type": "outlined",
          "text": "Login",
          "url": "https://app.uploadcare.com/accounts/login/"
        },
        {
          "type": "filled",
          "text": "Get started",
          "url": "https://app.uploadcare.com/accounts/signup/"
        }
      ],
      "title": "Uploadcare | Documentation",
      "favicon": "419b3076-7e59-4e7b-831c-096df91b4e07",
      "layout": {
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "SIDEBAR",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "js": {
        "files": []
      }
    },
    "apis": {
      "6e1b77b7-26ce-4bba-9544-a24a9b3519dc": {
        "id": "6e1b77b7-26ce-4bba-9544-a24a9b3519dc",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_fileInformation", "subpackage_fileNames"],
          "types": ["type_:FileColorMode", "type_:FileGeoLocation", "type_:File"],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_:FileColorMode": {
            "description": "Image color mode.",
            "name": "FileColorMode",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "RGB"
                },
                {
                  "value": "RGBA"
                },
                {
                  "value": "RGBa"
                },
                {
                  "value": "RGBX"
                },
                {
                  "value": "L"
                },
                {
                  "value": "LA"
                },
                {
                  "value": "La"
                },
                {
                  "value": "P"
                },
                {
                  "value": "PA"
                },
                {
                  "value": "CMYK"
                },
                {
                  "value": "YCbCr"
                },
                {
                  "value": "HSV"
                },
                {
                  "value": "LAB"
                }
              ]
            }
          },
          "type_:FileGeoLocation": {
            "description": "Geo-location of image from EXIF.",
            "name": "FileGeoLocation",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Location latitude.",
                  "key": "latitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Location longitude.",
                  "key": "longitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:File": {
            "description": "File object.",
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File UUID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Image DPI for two dimensions.",
                  "key": "dpi",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Image width in pixels.",
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Image format.",
                  "key": "format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Image height in pixels.",
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Set to true if a file contains a sequence of images (GIF for example).",
                  "key": "sequence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Image color mode.",
                  "key": "color_mode",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FileColorMode"
                    }
                  }
                },
                {
                  "description": "Image orientation from EXIF.",
                  "key": "orientation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Geo-location of image from EXIF.",
                  "key": "geo_location",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FileGeoLocation"
                    }
                  }
                },
                {
                  "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                  "key": "datetime_original",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "File info response includes a value of a perceptual hash calculated\nusing pixel contents of an image. Perceptual hashing is a common\nfingerprinting technique to quickly compare images and find duplicates\nor similar images. Uploadcare automatically calculates a 64-bit long\nperceptual hash value and returns it as a HEX string. It's easy to find\nimage duplicates by quickly comparing their perceptual hash values.\nTo find similar images, it's important to compare perceptual hash values\nbitwise (<a href=\"https://en.wikipedia.org/wiki/Hamming_distance\">Hamming distance</a>).\nA small number of unmatched bits (e.g., up to 8 bits) will correspond\nto subtle changes in the visual contents, while non-similar images\nwill usually have more than 8 different bits.",
                  "key": "hash",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_fileInformation": {
            "subpackageId": "subpackage_fileInformation",
            "name": "File information",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://ucarecdn.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "file-info-json",
                "migratedFromUrlSlugs": ["file-info-as-json"],
                "method": "GET",
                "id": "fileInfoJson",
                "name": "File info as JSON",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Unique file identifier",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/-/json"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  }
                ],
                "examples": [
                  {
                    "path": "/d7fe74ac-65b8-4ade-875f-ccd92759a70f/-/json",
                    "pathParameters": {
                      "uuid": "d7fe74ac-65b8-4ade-875f-ccd92759a70f"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                      "dpi": [300, 300],
                      "width": 3432,
                      "format": "JPEG",
                      "height": 3432,
                      "sequence": false,
                      "color_mode": "RGB",
                      "orientation": 6,
                      "geo_location": {
                        "latitude": -1.1884555555555556,
                        "longitude": 52.66996666666667
                      },
                      "datetime_original": "2020-06-07T14:38:16Z",
                      "hash": "e98d9466a33a9c8b"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                        "dpi": [300, 300],
                        "width": 3432,
                        "format": "JPEG",
                        "height": 3432,
                        "sequence": false,
                        "color_mode": "RGB",
                        "orientation": 6,
                        "geo_location": {
                          "latitude": -1.1884555555555556,
                          "longitude": 52.66996666666667
                        },
                        "datetime_original": "2020-06-07T14:38:16Z",
                        "hash": "e98d9466a33a9c8b"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/:uuid/-/json",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns file-related information, such as image dimensions or geo\ntagging data in the JSON format.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://ucarecdn.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "file-info-jsonp",
                "migratedFromUrlSlugs": ["file-info-as-application-javascript"],
                "method": "GET",
                "id": "fileInfoJsonp",
                "name": "File info as application/javascript",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Unique file identifier",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/-/jsonp"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  }
                ],
                "examples": [
                  {
                    "path": "/d7fe74ac-65b8-4ade-875f-ccd92759a70f/-/jsonp",
                    "pathParameters": {
                      "uuid": "d7fe74ac-65b8-4ade-875f-ccd92759a70f"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                      "dpi": [300, 300],
                      "width": 3432,
                      "format": "JPEG",
                      "height": 3432,
                      "sequence": false,
                      "color_mode": "RGB",
                      "orientation": 6,
                      "geo_location": {
                        "latitude": -1.1884555555555556,
                        "longitude": 52.66996666666667
                      },
                      "datetime_original": "2020-06-07T14:38:16Z",
                      "hash": "e98d9466a33a9c8b"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                        "dpi": [300, 300],
                        "width": 3432,
                        "format": "JPEG",
                        "height": 3432,
                        "sequence": false,
                        "color_mode": "RGB",
                        "orientation": 6,
                        "geo_location": {
                          "latitude": -1.1884555555555556,
                          "longitude": 52.66996666666667
                        },
                        "datetime_original": "2020-06-07T14:38:16Z",
                        "hash": "e98d9466a33a9c8b"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/:uuid/-/jsonp",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Same as the example above, but it returns data as the\n`application/javascript` type.\nThe callback name should always be `uploadcare_callback`. It should\nreceive the two following arguments: `id` and a response object.\nFor original files, id is equivalent to their UUIDs.\nFor processed files, `id` is equivalent to their URLs, excluding\nthe last operation, `jsonp`.",
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "file-information",
            "description": "There're few ways to get information about uploaded file.\nOn of them is on-the-fly with a request to CDN.\n\nNote: Other APIs also let you read file info:\n[after Upload](/api-refs/upload-api/#tag/Upload/operation/fileUploadInfo)\nand [at REST](/api-refs/rest-api/v0.7.0/#tag/File/operation/fileInfo).\n",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_fileNames": {
            "subpackageId": "subpackage_fileNames",
            "name": "File names",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://ucarecdn.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "file-with-name",
                "migratedFromUrlSlugs": ["file-with-a-custom-name"],
                "method": "GET",
                "id": "fileWithName",
                "name": "File with a custom name",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Unique file identifier",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "An optional filename that users will see instead of the original name.",
                      "key": "filename",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "filename"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "fileDownload"
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/d7fe74ac-65b8-4ade-875f-ccd92759a70f/cat.jpg",
                    "pathParameters": {
                      "uuid": "d7fe74ac-65b8-4ade-875f-ccd92759a70f",
                      "filename": "cat.jpg"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "You can set an optional filename that users will see instead of\nthe original name.",
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "file-names",
            "description": "Your original filenames can be accessed via [REST API](/api-refs/rest-api/).\nMake a request to receive a JSON response with file parameters including\n`original_filename`.\n\nYou can set an optional filename that users will see instead of the original name:\n\n```https://ucarecdn.com/:uuid/:filename```\n\n`:filename` should comply with [file name conventions](https://tools.ietf.org/html/rfc3986#section-3.3)\nand it should be a valid part of a URL. For example, `filename.ext`.\n\nHere are some examples with full CDN URLs:\n\n```\nSafe:\n\n// adding a simple filename\nhttps://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/image.jpg\n\n// using a char allowed in the pchar definition\nhttps://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/image@2x.jpg\n\n// allowed in pchar together with Image Transformations\nhttps://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/preview/-/resize/550x/image@1x.jpg\n\n// using a sub-delim allowed in pchar together with Image Transformations\nhttps://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/preview/-/grayscale/image_black&white@2x.jpg\n\n// using percent-encoded gen-delims that are not allowed in pchar\nhttps://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/preview/-/grayscale/image%5Bdesaturated%5D@2x.jpg\n\nUnsafe:\n\n// using gen-delims that are not allowed in pchar without encoding\nhttps://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/preview/-/grayscale/image[desaturated]@2x.jpg\n```\n",
            "webhooks": [],
            "websockets": []
          }
        },
        "hasMultipleBaseUrls": false
      },
      "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7": {
        "id": "15c16fe3-9b9c-4a04-ae4f-f9749d504bc7",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_upload", "subpackage_groups"],
          "types": [
            "type_:SignatureType",
            "type_:ExpireType",
            "type_:StoreType",
            "type_:ProjectPublicKeyType",
            "type_:FileUploadInfo",
            "type_:FileUploadInfoWaitingStatus",
            "type_:FileUploadInfoProgressStatus",
            "type_:FileUploadInfoSuccessStatus",
            "type_:FileUploadInfoErrorStatus",
            "type_:FileUploadInfoUnknownStatus",
            "type_:FileUploadInfoFromUrl",
            "type_:FromUrlUploadResponseSchema",
            "type_:GroupInfo",
            "type_:MetadataValue",
            "type_:AutoStoreDisabledError",
            "type_:UploadcarePublicKeyRequiredError",
            "type_:PublicKeyRequiredError",
            "type_:UploadcarePublicKeyInvalidError",
            "type_:PublicKeyInvalidError",
            "type_:ProjectPublicKeyRemovedError",
            "type_:AccountBlockedError",
            "type_:AccountUnpaidError",
            "type_:UploadFailedError",
            "type_:AccountLimitsExceededError",
            "type_:SignatureExpirationError",
            "type_:SignatureInvalidError",
            "type_:RequestFiledsNumberLimitExceededError",
            "type_:PostRequestParserFailedError",
            "type_:NullCharactersForbiddenError",
            "type_:FileMetadataKeyDuplicatedError",
            "type_:FileMetadataKeyEmptyError",
            "type_:FileMetadataKeyForbiddenError",
            "type_:FileMetadataKeyLengthTooBigError",
            "type_:FileMetadataValueEmptyError",
            "type_:FileMetadataValueForbiddenError",
            "type_:FileMetadataValueLengthTooBigError",
            "type_:FileMetadataKeysNumberTooBigError",
            "type_:FilesRequiredError",
            "type_:FileSizeLimitExceededError",
            "type_:FileTypeForbiddenError",
            "type_:FileInfectedError",
            "type_:RequestParamRequiredError",
            "type_:MultipartSizeInvalidError",
            "type_:MultipartFileSizeLimitExceededError",
            "type_:MultipartFileSizeTooSmallError",
            "type_:MultipartPartSizeInvalidError",
            "type_:MultipartPartSizeTooSmallError",
            "type_:MultipartPartSizeTooBigError",
            "type_:MultipartFileIdRequiredError",
            "type_:MultipartFileAlreadyUploadedError",
            "type_:MultipartUploadSizeTooLargeError",
            "type_:MultipartUploadSizeTooSmallError",
            "type_:MultipartFileCompletionFailedError",
            "type_:UuidInvalidError",
            "type_:SourceUrlRequiredError",
            "type_:UrlParsingFailedError",
            "type_:UrlSchemeRequiredError",
            "type_:UrlSchemeInvalidError",
            "type_:UrlHostRequiredError",
            "type_:UrlBlacklistedError",
            "type_:HostnameNotFoundError",
            "type_:UrlHostMalformedError",
            "type_:UrlHostPrivateIpForbiddenError",
            "type_:TokenRequiredError",
            "type_:FileIdRequiredError",
            "type_:FileIdInvalidError",
            "type_:FileNotFoundError",
            "type_:GroupFilesInvalidError",
            "type_:GroupFileUrlParsingFailedError",
            "type_:GroupFilesNotFoundError",
            "type_:GroupIdRequiredError",
            "type_:GroupNotFoundError",
            "type_:SignatureRequiredError",
            "type_:SignatureExpirationRequiredError",
            "type_:SignatureExpirationInvalidError",
            "type_:ImageInfoColorMode",
            "type_:ImageInfoGeoLocation",
            "type_:ImageInfo",
            "type_:LegacyVideoInfoAudio",
            "type_:LegacyVideoInfoVideo",
            "type_:LegacyVideoInfo",
            "type_:SchemasImageInfoColorMode",
            "type_:SchemasImageInfoGeoLocation",
            "type_:SchemasImageInfo",
            "type_:VideoInfoAudioItem",
            "type_:VideoInfoVideoItem",
            "type_:VideoInfo",
            "type_:ContentInfoMime",
            "type_:ContentInfo",
            "type_:Metadata"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_upload:BaseUploadResponse": {
            "description": "JSON object where the key is the file name of the uploaded file and\nthe value is the unique ID of the file on our systems.",
            "name": "BaseUploadResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "filename",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_upload:MultipartFileUploadStartResponse": {
            "name": "MultipartFileUploadStartResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File's UUID.",
                  "key": "uuid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "parts",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_upload:FromUrlUploadRequestCheckUrlDuplicates": {
            "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.",
            "name": "FromUrlUploadRequestCheckUrlDuplicates",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0"
                },
                {
                  "value": "1"
                }
              ]
            }
          },
          "type_upload:FromUrlUploadRequestSaveUrlDuplicates": {
            "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.",
            "name": "FromUrlUploadRequestSaveUrlDuplicates",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0"
                },
                {
                  "value": "1"
                }
              ]
            }
          },
          "type_upload:FromUrlUploadResponse": {
            "name": "FromUrlUploadResponse",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FromUrlUploadResponseSchema"
                  },
                  "displayName": "From Url Upload Response Schema"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FileUploadInfoFromUrl"
                  },
                  "displayName": "File Upload Info From Url"
                }
              ]
            }
          },
          "type_upload:FromUrlUploadStatusResponse": {
            "name": "FromUrlUploadStatusResponse",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FileUploadInfoWaitingStatus"
                  },
                  "displayName": "File Upload Info Waiting Status"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FileUploadInfoProgressStatus"
                  },
                  "displayName": "File Upload Info Progress Status"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FileUploadInfoSuccessStatus"
                  },
                  "displayName": "File Upload Info Success Status"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FileUploadInfoErrorStatus"
                  },
                  "displayName": "File Upload Info Error Status"
                },
                {
                  "type": {
                    "type": "id",
                    "value": "type_:FileUploadInfoUnknownStatus"
                  },
                  "displayName": "File Upload Info Unknown Status"
                }
              ]
            }
          },
          "type_:SignatureType": {
            "description": "`signature` must be sent along with your upload request if you would like to use signed uploads.\nThe signature should be generated on your backend.\n**Note**: the process requires knowledge of your Uploadcare Project's Secret key.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.",
            "name": "SignatureType",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:ExpireType": {
            "description": "`expire` must be sent along with your upload request if you would like to use signed uploads.\nThe parameter defines the time during which your signature is valid. It's a UNIX timestamp.\nSee [signed uploads](https://uploadcare.com/docs/security/secure-uploads/) for details.",
            "name": "ExpireType",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          "type_:StoreType": {
            "description": "Determines if an uploaded file should be marked as temporary or permanent.\n\nThe parameter can have the following values:\n\n- `0` - do not mark an uploaded file as stored and remove it after 24 hours\n- `1` - mark the uploaded file as stored\n- `auto` - delegate the choice of the file-storing behavior to a project-wide setting called\n  [auto-store](https://app.uploadcare.com/projects/-/settings/#storage).\n\nThe default value depends on the user registration date.\n\nFor all users registered after February 12, 2024 (UTC 13:30), the default value is `auto`.\nFile-storing behavior depends entirely on what is set in the\n[storage settings](https://app.uploadcare.com/projects/-/settings/#storage) in the Dashboard.\n\nFor users registered before February 12, 2024, the default value is `0`.\nTo ensure that file storage in the project matches the settings in the Dashboard,\nchange the value to `auto`.",
            "name": "StoreType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0"
                },
                {
                  "value": "1"
                },
                {
                  "value": "auto"
                }
              ]
            }
          },
          "type_:ProjectPublicKeyType": {
            "description": "Public key identifying an Uploadcare project your uploads will go to.",
            "name": "ProjectPublicKeyType",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileUploadInfo": {
            "description": "Information about an uploaded file.",
            "name": "FileUploadInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File's unique ID.",
                  "key": "uuid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Same as `uuid`",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File's size in bytes.",
                  "key": "size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Same as `size`.",
                  "key": "total",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Same as `size`.",
                  "key": "done",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Original file of the uploaded file.",
                  "key": "original_filename",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Sanitized `original_filename`.",
                  "key": "filename",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File's MIME-type.",
                  "key": "mime_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "image_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ImageInfo"
                    }
                  }
                },
                {
                  "key": "video_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LegacyVideoInfo"
                    }
                  }
                },
                {
                  "key": "content_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContentInfo"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Metadata"
                    }
                  }
                },
                {
                  "description": "True if the uploaded file is an image of a supported file format.",
                  "key": "is_image",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "True if the file has been marked as stored.",
                  "key": "is_stored",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "True if the file is ready to be fetched from Uploadcare's CDN.",
                  "key": "is_ready",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Name of an AWS S3 bucket where the file is stored. Only available if you associate a Foreign Storage Bucket with your project.",
                  "key": "s3_bucket",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileUploadInfoWaitingStatus": {
            "name": "FileUploadInfoWaitingStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "waiting"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileUploadInfoProgressStatus": {
            "name": "FileUploadInfoProgressStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "progress"
                      }
                    }
                  }
                },
                {
                  "description": "The expected size of the fetched file (in bytes).\n\n**Note:** the value can be missing if the server we are fetching the file from\ndoes not provide the information or if the server is returning the file in, for\nexample, [compressed form](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding).",
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "How many bytes of the file have been fetched so far.",
                  "key": "done",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileUploadInfoSuccessStatus": {
            "name": "FileUploadInfoSuccessStatus",
            "shape": {
              "type": "object",
              "extends": ["type_:FileUploadInfo"],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "success"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileUploadInfoErrorStatus": {
            "name": "FileUploadInfoErrorStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "error"
                      }
                    }
                  }
                },
                {
                  "description": "Human readable description of the issue with the fetch/upload task.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Machine readable error code.\n\nNote: See the [Errors > FromURL upload errors](#tag/Errors) section of this\npage for a full list of all possible error codes.",
                  "key": "error_code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileUploadInfoUnknownStatus": {
            "name": "FileUploadInfoUnknownStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FileUploadInfoFromUrl": {
            "name": "FileUploadInfoFromUrl",
            "shape": {
              "type": "object",
              "extends": ["type_:FileUploadInfo"],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "file_info"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:FromUrlUploadResponseSchema": {
            "description": "`/from_url/` upload response.",
            "name": "FromUrlUploadResponseSchema",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "token"
                      }
                    }
                  }
                },
                {
                  "description": "Token to identify a `/from_url/` request.",
                  "key": "token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupInfo": {
            "description": "File group information object.",
            "name": "GroupInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Group's unique ID.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ISO-8601 date and time when the group was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "ISO-8601 date and time when the group was marked as stored.",
                  "key": "datetime_stored",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Number of the files in the group.",
                  "key": "files_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Group's CDN URL.",
                  "key": "cdn_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Group's API resource URL. See the [REST API](/api-refs/rest-api/) documentation for details.",
                  "key": "url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The list of files in the group. An array may contain null values if a file has been removed.",
                  "key": "files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:MetadataValue": {
            "description": "Arbitrary metadata associated with the file.\nSee [docs](https://uploadcare.com/docs/file-metadata/) and [REST API v0.7](/api-refs/rest-api/v0.7.0/#tag/File-metadata) for more information.",
            "name": "MetadataValue",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:AutoStoreDisabledError": {
            "name": "AutoStoreDisabledError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UploadcarePublicKeyRequiredError": {
            "name": "UploadcarePublicKeyRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:PublicKeyRequiredError": {
            "name": "PublicKeyRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UploadcarePublicKeyInvalidError": {
            "name": "UploadcarePublicKeyInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:PublicKeyInvalidError": {
            "name": "PublicKeyInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:ProjectPublicKeyRemovedError": {
            "name": "ProjectPublicKeyRemovedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:AccountBlockedError": {
            "name": "AccountBlockedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:AccountUnpaidError": {
            "name": "AccountUnpaidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UploadFailedError": {
            "name": "UploadFailedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:AccountLimitsExceededError": {
            "name": "AccountLimitsExceededError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SignatureExpirationError": {
            "name": "SignatureExpirationError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SignatureInvalidError": {
            "name": "SignatureInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:RequestFiledsNumberLimitExceededError": {
            "name": "RequestFiledsNumberLimitExceededError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:PostRequestParserFailedError": {
            "name": "PostRequestParserFailedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:NullCharactersForbiddenError": {
            "name": "NullCharactersForbiddenError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataKeyDuplicatedError": {
            "name": "FileMetadataKeyDuplicatedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataKeyEmptyError": {
            "name": "FileMetadataKeyEmptyError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataKeyForbiddenError": {
            "name": "FileMetadataKeyForbiddenError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataKeyLengthTooBigError": {
            "name": "FileMetadataKeyLengthTooBigError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataValueEmptyError": {
            "name": "FileMetadataValueEmptyError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataValueForbiddenError": {
            "name": "FileMetadataValueForbiddenError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataValueLengthTooBigError": {
            "name": "FileMetadataValueLengthTooBigError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileMetadataKeysNumberTooBigError": {
            "name": "FileMetadataKeysNumberTooBigError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FilesRequiredError": {
            "name": "FilesRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileSizeLimitExceededError": {
            "name": "FileSizeLimitExceededError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileTypeForbiddenError": {
            "name": "FileTypeForbiddenError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileInfectedError": {
            "name": "FileInfectedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:RequestParamRequiredError": {
            "name": "RequestParamRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartSizeInvalidError": {
            "name": "MultipartSizeInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartFileSizeLimitExceededError": {
            "name": "MultipartFileSizeLimitExceededError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartFileSizeTooSmallError": {
            "name": "MultipartFileSizeTooSmallError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartPartSizeInvalidError": {
            "name": "MultipartPartSizeInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartPartSizeTooSmallError": {
            "name": "MultipartPartSizeTooSmallError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartPartSizeTooBigError": {
            "name": "MultipartPartSizeTooBigError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartFileIdRequiredError": {
            "name": "MultipartFileIdRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartFileAlreadyUploadedError": {
            "name": "MultipartFileAlreadyUploadedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartUploadSizeTooLargeError": {
            "name": "MultipartUploadSizeTooLargeError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartUploadSizeTooSmallError": {
            "name": "MultipartUploadSizeTooSmallError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:MultipartFileCompletionFailedError": {
            "name": "MultipartFileCompletionFailedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UuidInvalidError": {
            "name": "UuidInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SourceUrlRequiredError": {
            "name": "SourceUrlRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlParsingFailedError": {
            "name": "UrlParsingFailedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlSchemeRequiredError": {
            "name": "UrlSchemeRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlSchemeInvalidError": {
            "name": "UrlSchemeInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlHostRequiredError": {
            "name": "UrlHostRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlBlacklistedError": {
            "name": "UrlBlacklistedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:HostnameNotFoundError": {
            "name": "HostnameNotFoundError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlHostMalformedError": {
            "name": "UrlHostMalformedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:UrlHostPrivateIpForbiddenError": {
            "name": "UrlHostPrivateIpForbiddenError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:TokenRequiredError": {
            "name": "TokenRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileIdRequiredError": {
            "name": "FileIdRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileIdInvalidError": {
            "name": "FileIdInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:FileNotFoundError": {
            "name": "FileNotFoundError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:GroupFilesInvalidError": {
            "name": "GroupFilesInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:GroupFileUrlParsingFailedError": {
            "name": "GroupFileUrlParsingFailedError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:GroupFilesNotFoundError": {
            "name": "GroupFilesNotFoundError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:GroupIdRequiredError": {
            "name": "GroupIdRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:GroupNotFoundError": {
            "name": "GroupNotFoundError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SignatureRequiredError": {
            "name": "SignatureRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SignatureExpirationRequiredError": {
            "name": "SignatureExpirationRequiredError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:SignatureExpirationInvalidError": {
            "name": "SignatureExpirationInvalidError",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:ImageInfoColorMode": {
            "description": "Image color mode.",
            "name": "ImageInfoColorMode",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "RGB"
                },
                {
                  "value": "RGBA"
                },
                {
                  "value": "RGBa"
                },
                {
                  "value": "RGBX"
                },
                {
                  "value": "L"
                },
                {
                  "value": "LA"
                },
                {
                  "value": "La"
                },
                {
                  "value": "P"
                },
                {
                  "value": "PA"
                },
                {
                  "value": "CMYK"
                },
                {
                  "value": "YCbCr"
                },
                {
                  "value": "HSV"
                },
                {
                  "value": "LAB"
                }
              ]
            }
          },
          "type_:ImageInfoGeoLocation": {
            "description": "Geo-location of image from EXIF.",
            "name": "ImageInfoGeoLocation",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Location latitude.",
                  "key": "latitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Location longitude.",
                  "key": "longitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageInfo": {
            "description": "Image metadata.",
            "name": "ImageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Image color mode.",
                  "key": "color_mode",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ImageInfoColorMode"
                  }
                },
                {
                  "description": "Image orientation from EXIF.",
                  "key": "orientation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Image format.",
                  "key": "format",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Set to true if a file contains a sequence of images (GIF for example).",
                  "key": "sequence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Image height in pixels.",
                  "key": "height",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Image width in pixels.",
                  "key": "width",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Geo-location of image from EXIF.",
                  "key": "geo_location",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ImageInfoGeoLocation"
                    }
                  }
                },
                {
                  "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                  "key": "datetime_original",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Image DPI for two dimensions.",
                  "key": "dpi",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LegacyVideoInfoAudio": {
            "description": "Audio stream's metadata.",
            "name": "LegacyVideoInfoAudio",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Audio stream's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's codec.",
                  "key": "codec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's sample rate.",
                  "key": "sample_rate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's number of channels.",
                  "key": "channels",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LegacyVideoInfoVideo": {
            "description": "Video stream's metadata.",
            "name": "LegacyVideoInfoVideo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Video stream's image height.",
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Video stream's image width.",
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Video stream's frame rate.",
                  "key": "frame_rate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Video stream's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Video stream codec.",
                  "key": "codec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LegacyVideoInfo": {
            "description": "Video metadata.",
            "name": "LegacyVideoInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Video file's duration in milliseconds.",
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Video file's format.",
                  "key": "format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Video file's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's metadata.",
                  "key": "audio",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LegacyVideoInfoAudio"
                    }
                  }
                },
                {
                  "description": "Video stream's metadata.",
                  "key": "video",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:LegacyVideoInfoVideo"
                    }
                  }
                }
              ]
            }
          },
          "type_:SchemasImageInfoColorMode": {
            "description": "Image color mode.",
            "name": "SchemasImageInfoColorMode",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "RGB"
                },
                {
                  "value": "RGBA"
                },
                {
                  "value": "RGBa"
                },
                {
                  "value": "RGBX"
                },
                {
                  "value": "L"
                },
                {
                  "value": "LA"
                },
                {
                  "value": "La"
                },
                {
                  "value": "P"
                },
                {
                  "value": "PA"
                },
                {
                  "value": "CMYK"
                },
                {
                  "value": "YCbCr"
                },
                {
                  "value": "HSV"
                },
                {
                  "value": "LAB"
                }
              ]
            }
          },
          "type_:SchemasImageInfoGeoLocation": {
            "description": "Geo-location of image from EXIF.",
            "name": "SchemasImageInfoGeoLocation",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Location latitude.",
                  "key": "latitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Location longitude.",
                  "key": "longitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:SchemasImageInfo": {
            "description": "Image metadata.",
            "name": "SchemasImageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Image color mode.",
                  "key": "color_mode",
                  "valueType": {
                    "type": "id",
                    "value": "type_:SchemasImageInfoColorMode"
                  }
                },
                {
                  "description": "Image orientation from EXIF.",
                  "key": "orientation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Image format.",
                  "key": "format",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Set to true if a file contains a sequence of images (GIF for example).",
                  "key": "sequence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Image height in pixels.",
                  "key": "height",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Image width in pixels.",
                  "key": "width",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Geo-location of image from EXIF.",
                  "key": "geo_location",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SchemasImageInfoGeoLocation"
                    }
                  }
                },
                {
                  "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                  "key": "datetime_original",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Image DPI for two dimensions.",
                  "key": "dpi",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoInfoAudioItem": {
            "description": "Audio stream's metadata.",
            "name": "VideoInfoAudioItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Audio stream's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's codec.",
                  "key": "codec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's sample rate.",
                  "key": "sample_rate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's number of channels.",
                  "key": "channels",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoInfoVideoItem": {
            "description": "Video stream's metadata.",
            "name": "VideoInfoVideoItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Video stream's image height.",
                  "key": "height",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Video stream's image width.",
                  "key": "width",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Video stream's frame rate.",
                  "key": "frame_rate",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Video stream's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Video stream's codec.",
                  "key": "codec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoInfo": {
            "description": "Video metadata.",
            "name": "VideoInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Video file's duration in milliseconds.",
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Video file's format.",
                  "key": "format",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Video file's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "audio",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoInfoAudioItem"
                    }
                  }
                },
                {
                  "key": "video",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoInfoVideoItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:ContentInfoMime": {
            "description": "MIME type.",
            "name": "ContentInfoMime",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Full MIME type.",
                  "key": "mime",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Type of MIME type.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Subtype of MIME type.",
                  "key": "subtype",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ContentInfo": {
            "description": "Information about file content.",
            "name": "ContentInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "MIME type.",
                  "key": "mime",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContentInfoMime"
                    }
                  }
                },
                {
                  "key": "image",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:SchemasImageInfo"
                    }
                  }
                },
                {
                  "key": "video",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoInfo"
                    }
                  }
                }
              ]
            }
          },
          "type_:Metadata": {
            "description": "Arbitrary metadata associated with a file.",
            "name": "Metadata",
            "shape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "unknown"
                  }
                }
              }
            }
          }
        },
        "subpackages": {
          "subpackage_upload": {
            "subpackageId": "subpackage_upload",
            "name": "Upload",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "base-upload",
                "migratedFromUrlSlugs": ["direct-uploads"],
                "method": "POST",
                "id": "baseUpload",
                "name": "Direct uploads",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/base"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "fileUpload",
                    "value": {
                      "name": "BaseUploadRequest",
                      "properties": [
                        {
                          "type": "bodyProperty",
                          "key": "UPLOADCARE_PUB_KEY",
                          "valueType": {
                            "type": "id",
                            "value": "type_:ProjectPublicKeyType"
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "UPLOADCARE_STORE",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:StoreType"
                            }
                          }
                        },
                        {
                          "type": "file",
                          "value": {
                            "type": "file",
                            "key": "{filename}",
                            "isOptional": false
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "metadata[{key}]",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:MetadataValue"
                            }
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "signature",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:SignatureType"
                            }
                          }
                        },
                        {
                          "type": "bodyProperty",
                          "key": "expire",
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "id",
                              "value": "type_:ExpireType"
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_upload:BaseUploadResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 413
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 413
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/base",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                      "{filename}": ["{filename}"],
                      "metadata[{key}]": "#/components/examples/metadataValue/value",
                      "signature": "04b29480233f4def5c875875b6bdc3b1",
                      "expire": 1454902434
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "filename": "filename"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                        "{filename}": ["{filename}"],
                        "metadata[{key}]": "#/components/examples/metadataValue/value",
                        "signature": "04b29480233f4def5c875875b6bdc3b1",
                        "expire": 1454902434
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "filename": "filename"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { base } from '@uploadcare/upload-client'\n\n// fileData must be `Blob` or `File` or `Buffer`\nconst result = await base(\n  fileData,\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    store: 'auto',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$fileInfo = $uploader->fromPath(__DIR__ . '/squirrel.jpg', null, null, 'auto', [\n    'system' => 'php-uploader',\n    'pet' => 'cat',\n]);\necho \\sprintf(\"URL: %s, ID: %s, Mime type: %s\\n\", $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\nforeach ($fileInfo->getMetadata() as $key => $value) {\n    echo \\sprintf(\"%s: %s\\n\", $key, $value);\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.upload(file_object)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"squirrel\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\n\nlet file = try await uploadcare.uploadFile(data, withName: \"random_file_name.jpg\", store: .auto) { progress in\n  print(\"progress: \\(progress)\")\n}\nprkint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/base",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "{filename}": "<filename1>"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "{filename}": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/base",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "{filename}": "<filename1>"
                    },
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "{filename}": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/base",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "{filename}": "<filename1>"
                    },
                    "responseStatusCode": 413,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "{filename}": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/base",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "{filename}": "<filename1>"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "{filename}": "<filename1>"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Direct file uploads comply with the [RFC 7578](https://www.rfc-editor.org/rfc/rfc7578) standard.\nIn other words, you can perform a direct upload by making an HTTP POST request with the Content-Type\nheader set to `multipart/form-data`.\n\n**Note**: Direct file uploads support files smaller than 100 megabytes only.\nIf you would like to upload larger files, please use [Multipart Uploads](/api-refs/upload-api/#operation/multipartFileUploadStart) instead.\n\nFile upload example with curl:\n\n```\ncurl -F \"UPLOADCARE_PUB_KEY=YOUR_PUBLIC_KEY\" -F \"my_file.jpg=@my_file.jpg\" \"https://upload.uploadcare.com/base/\"\n```",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "multipart-file-upload-start",
                "migratedFromUrlSlugs": ["start-multipart-upload"],
                "method": "POST",
                "id": "multipartFileUploadStart",
                "name": "Start multipart upload",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/multipart/start"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "UPLOADCARE_PUB_KEY",
                        "valueType": {
                          "type": "id",
                          "value": "type_:ProjectPublicKeyType"
                        }
                      },
                      {
                        "key": "UPLOADCARE_STORE",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:StoreType"
                          }
                        }
                      },
                      {
                        "description": "Original file name of the uploaded file",
                        "key": "filename",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Precise file size of the uploaded file (in bytes).\n**Note**: The size should not exceed max file size cap for your project.\n",
                        "key": "size",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      },
                      {
                        "description": "Multipart Uploads expect that you will split the uploaded file into equally sized\nparts (except for the last part) and then will upload them to AWS S3 (possibly in parallel).\nBy default, we assume that you will upload the files in 5 megabyte chunks,\nso we return a list of presigned AWS S3 URLs accordingly.\nIf you intend to upload large files (for example, larger than a gigabyte),\nwe recommend to bump the part size and to pass the expected chunk size\nto us as a value of the `part_size` parameter (in bytes).\n",
                        "key": "part_size",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      {
                        "description": "File's MIME-type.",
                        "key": "content_type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "metadata[{key}]",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:MetadataValue"
                          }
                        }
                      },
                      {
                        "key": "signature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:SignatureType"
                          }
                        }
                      },
                      {
                        "key": "expire",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:ExpireType"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_upload:MultipartFileUploadStartResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/multipart/start",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                      "filename": "filename",
                      "size": 1,
                      "content_type": "content_type",
                      "metadata[{key}]": "#/components/examples/metadataValue/value",
                      "signature": "04b29480233f4def5c875875b6bdc3b1",
                      "expire": 1454902434
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841",
                      "parts": [
                        "<presigned-url-1>",
                        "<presigned-url-2>",
                        "<presigned-url-3>",
                        "<presigned-url-4>",
                        "<presigned-url-5>"
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                        "filename": "filename",
                        "size": 1,
                        "content_type": "content_type",
                        "metadata[{key}]": "#/components/examples/metadataValue/value",
                        "signature": "04b29480233f4def5c875875b6bdc3b1",
                        "expire": 1454902434
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "uuid": "67947755-1584-4e3f-902b-d4e2bf76a841",
                        "parts": [
                          "<presigned-url-1>",
                          "<presigned-url-2>",
                          "<presigned-url-3>",
                          "<presigned-url-4>",
                          "<presigned-url-5>"
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { multipartStart } from '@uploadcare/upload-client'\n\nconst result = await multipartStart(\n  27796904,\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    store: 'auto',\n    fileName: 'myfile.mp4',\n    contentType: 'video/mp4',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/multipart/start",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "filename": "string",
                      "size": 0,
                      "content_type": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "filename": "string",
                        "size": 0,
                        "content_type": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/multipart/start",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "filename": "string",
                      "size": 0,
                      "content_type": "string"
                    },
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "filename": "string",
                        "size": 0,
                        "content_type": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/multipart/start",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "filename": "string",
                      "size": 0,
                      "content_type": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "filename": "string",
                        "size": 0,
                        "content_type": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Multipart uploads should be used if you need to upload files larger than 100 megabytes or if you want to\nexplicitly trigger [AWS S3 Transfer Acceleration](https://aws.amazon.com/s3/transfer-acceleration/).\nWhen you use Multipart Uploads your files go straight to AWS S3 bypassing our upload instances.\n\nTo upload large files, 3 requests are sent in sequence:\n\n1. `/multipart/start/`\n2. `<presigned-url-x>`\n3. `/multipart/complete/`.\n\n**Note**: Multipart uploads support files larger than 10 megabytes only.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "multipart-file-upload-part",
                "migratedFromUrlSlugs": ["upload-individual-file-parts"],
                "method": "PUT",
                "id": "multipartFileUploadPart",
                "name": "Upload individual file parts",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/<presigned-url-x>"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/octet-stream",
                  "type": {
                    "type": "bytes",
                    "isOptional": false,
                    "contentType": "application/octet-stream"
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/<presigned-url-x>",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "The second phase is about uploading the file parts to the presigned upload URLs returned from the\n`/multipart/start/` endpoint.\n\nEach uploaded part should be at least 5 MiB (5242880 bytes) in size except for the last one, which can be smaller.\nYou can upload the file parts in parallel provided that the byte order stays unchanged.\n\n**Note**: You MUST define `Content-Type` header for your data.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "multipart-file-upload-complete",
                "migratedFromUrlSlugs": ["complete-multipart-upload"],
                "method": "POST",
                "id": "multipartFileUploadComplete",
                "name": "Complete multipart upload",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/multipart/complete"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "UPLOADCARE_PUB_KEY",
                        "valueType": {
                          "type": "id",
                          "value": "type_:ProjectPublicKeyType"
                        }
                      },
                      {
                        "description": "File's UUID from the `/multipart/start/` endpoint.",
                        "key": "uuid",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileUploadInfo"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  }
                ],
                "examples": [
                  {
                    "path": "/multipart/complete",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                      "uuid": "uuid"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                      "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                      "size": 2667636,
                      "total": 2667636,
                      "done": 2667636,
                      "original_filename": "IMG-0412_123.JPG",
                      "filename": "IMG0412_123.JPG",
                      "mime_type": "image/jpeg",
                      "image_info": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "sequence": false,
                        "height": 4032,
                        "width": 3024,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T12:59:50Z",
                        "dpi": [72, 72]
                      },
                      "video_info": {
                        "duration": 261827,
                        "format": "mp4",
                        "bitrate": 393,
                        "audio": {
                          "bitrate": 78,
                          "codec": "aac",
                          "sample_rate": 44100,
                          "channels": "2"
                        },
                        "video": {
                          "height": 360,
                          "width": 640,
                          "frame_rate": 30,
                          "bitrate": 315,
                          "codec": "h264"
                        }
                      },
                      "content_info": {
                        "mime": {
                          "mime": "image/jpeg",
                          "type": "image",
                          "subtype": "jpeg"
                        },
                        "image": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 4032,
                          "width": 3024,
                          "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                          },
                          "datetime_original": "2018-08-20T12:59:50Z",
                          "dpi": [72, 72]
                        },
                        "video": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": [
                            {
                              "bitrate": 78,
                              "codec": "aac",
                              "sample_rate": 44100,
                              "channels": 2
                            }
                          ],
                          "video": [
                            {
                              "height": 360,
                              "width": 640,
                              "frame_rate": 30,
                              "bitrate": 315,
                              "codec": "h264"
                            }
                          ]
                        }
                      },
                      "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                      },
                      "is_image": true,
                      "is_stored": true,
                      "is_ready": true,
                      "s3_bucket": "custom-s3-bucket-name"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "caa9d29da887ee88ffe6",
                        "uuid": "uuid"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                        "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                        "size": 2667636,
                        "total": 2667636,
                        "done": 2667636,
                        "original_filename": "IMG-0412_123.JPG",
                        "filename": "IMG0412_123.JPG",
                        "mime_type": "image/jpeg",
                        "image_info": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 4032,
                          "width": 3024,
                          "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                          },
                          "datetime_original": "2018-08-20T12:59:50Z",
                          "dpi": [72, 72]
                        },
                        "video_info": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": {
                            "bitrate": 78,
                            "codec": "aac",
                            "sample_rate": 44100,
                            "channels": "2"
                          },
                          "video": {
                            "height": 360,
                            "width": 640,
                            "frame_rate": 30,
                            "bitrate": 315,
                            "codec": "h264"
                          }
                        },
                        "content_info": {
                          "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                          },
                          "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "sequence": false,
                            "height": 4032,
                            "width": 3024,
                            "geo_location": {
                              "latitude": 55.62013611111111,
                              "longitude": 37.66299166666666
                            },
                            "datetime_original": "2018-08-20T12:59:50Z",
                            "dpi": [72, 72]
                          },
                          "video": {
                            "duration": 261827,
                            "format": "mp4",
                            "bitrate": 393,
                            "audio": [
                              {
                                "bitrate": 78,
                                "codec": "aac",
                                "sample_rate": 44100,
                                "channels": 2
                              }
                            ],
                            "video": [
                              {
                                "height": 360,
                                "width": 640,
                                "frame_rate": 30,
                                "bitrate": 315,
                                "codec": "h264"
                              }
                            ]
                          }
                        },
                        "metadata": {
                          "subsystem": "uploader",
                          "pet": "cat"
                        },
                        "is_image": true,
                        "is_stored": true,
                        "is_ready": true,
                        "s3_bucket": "custom-s3-bucket-name"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { multipartComplete } from '@uploadcare/upload-client'\n\nconst result = await multipartComplete(\n  '67947755-1584-4e3f-902b-d4e2bf76a841',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\n<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$path = '/path-to-large-file.zip';\n$handle = \\fopen($path, 'rb');\n$response = $uploader->fromResource($handle, null, null, 'auto', [\n    'size' => \\filesize($path), // The \"size\" is the metadata key\n]);\necho \\sprintf('File uploaded. ID is \\'%s\\'', $response->getUuid());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nfrom pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nwith open('test1.txt', 'rb') as file_object:\n    ucare_file = uploadcare.multipart_upload(file_object)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nrequire 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource_file = File.open('image.png')\nuploaded_file = Uploadcare::Uploader.upload(source_file, store: auto)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "// Uploadcare lib provides high level API for multipart uploads that does everything for you\n\nimport Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nguard let url = Bundle.main.url(forResource: \"Mona_Lisa_23mb\", withExtension: \"jpg\"),\n      let data = try? Data(contentsOf: url) else { return }\n\nlet metadata = [\"subsystem\": \"uploader\", \"pet\": \"cat\"]\nlet onProgress: (Double)->Void = { (progress) in\n  print(\"progress: \\(progress)\")\n}\n\nlet file = try await uploadcare.uploadAPI.multipartUpload(data, withName: \"Mona_Lisa_big.jpg\", store: .auto, metadata: metadata, onProgress)\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uri = \"content://com.android.providers.media.documents/document/image%3A1000001178\".toUri()\nval file = FileUploader(uploadcare, uri = uri, context = context).upload()\nLog.d(\"TAG\", file.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/multipart/complete",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "uuid": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "uuid": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/multipart/complete",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "uuid": "string"
                    },
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "uuid": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/multipart/complete",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "UPLOADCARE_PUB_KEY": "string",
                      "uuid": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "UPLOADCARE_PUB_KEY": "string",
                        "uuid": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Once all the file parts have been uploaded successfully, complete the\nupload session to assemble all the file parts into a single resulting file.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "from-url-upload",
                "migratedFromUrlSlugs": ["upload-files-from-ur-ls"],
                "method": "POST",
                "id": "fromURLUpload",
                "name": "Upload files from URLs",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/from_url"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "pub_key",
                        "valueType": {
                          "type": "id",
                          "value": "type_:ProjectPublicKeyType"
                        }
                      },
                      {
                        "description": "Source URL of the file to fetch and upload.\n\n**Note**: The URL should point to a resource publicly available via HTTP/HTTPS.\n",
                        "key": "source_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "store",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:StoreType"
                          }
                        }
                      },
                      {
                        "description": "Sets the file name of the resource fetched from the source URL.\nIf not defined, the file name is obtained from either HTTP\nresponse headers or the `source_url`'s path.\n\n**Note:** The filename will be sanitized to only contain the following symbols:\n`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789._`.\n",
                        "key": "filename",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "If set to \"1\", enables the `source_url` duplicates prevention.\nSpecifically, if the `source_url` had already been fetched and uploaded previously,\nthis request will return information about the already uploaded file.\n",
                        "key": "check_URL_duplicates",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_upload:FromUrlUploadRequestCheckUrlDuplicates"
                          }
                        }
                      },
                      {
                        "description": "Determines if the requested `source_url` should be kept in the history of\nfetched/uploaded URLs. If the value is not defined explicitly, it is set\nto the value of the `check_URL_duplicates` parameter.\n",
                        "key": "save_URL_duplicates",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_upload:FromUrlUploadRequestSaveUrlDuplicates"
                          }
                        }
                      },
                      {
                        "key": "metadata[{key}]",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:MetadataValue"
                          }
                        }
                      },
                      {
                        "key": "signature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:SignatureType"
                          }
                        }
                      },
                      {
                        "key": "expire",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:ExpireType"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_upload:FromUrlUploadResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/from_url",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "caa9d29da887ee88ffe6",
                      "source_url": "source_url",
                      "metadata[{key}]": "#/components/examples/metadataValue/value",
                      "signature": "04b29480233f4def5c875875b6bdc3b1",
                      "expire": 1454902434
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "token",
                      "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "caa9d29da887ee88ffe6",
                        "source_url": "source_url",
                        "metadata[{key}]": "#/components/examples/metadataValue/value",
                        "signature": "04b29480233f4def5c875875b6bdc3b1",
                        "expire": 1454902434
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "token",
                        "token": "945ebb27-1fd6-46c6-a859-b9893712d650"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { fromUrl } from '@uploadcare/upload-client'\n\nconst result = await fromUrl(\n  'https://source.unsplash.com/featured',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY',\n    metadata: {\n      subsystem: 'uploader',\n      pet: 'cat'\n    }\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$url = 'https://source.unsplash.com/featured';\n$token = $uploader->fromUrl($url, null, null, 'auto', [\n    'action' => 'upload from URL', // The \"Action\" is the metadata key\n    'checkDuplicates' => true,\n    'storeDuplicates' => false,\n]);\necho \\sprintf('Upload from URL \\'%s\\' has been started. Token is %s', $url, $token);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nucare_file = uploadcare.upload_from_url_sync(\n    \"https://source.unsplash.com/featured\",\n    check_duplicates=True,\n    save_duplicates=False\n)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nsource_url = \"https://source.unsplash.com/featured\"\nuploaded_file = Uploadcare::Uploader.upload(source_url, store: auto)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://source.unsplash.com/featured\")!\nlet task = UploadFromURLTask(sourceUrl: url)\n  .store(.auto)\n  .setMetadata(\"uploader\", forKey: \"subsystem\")\n  .setMetadata(\"cat\", forKey: \"pet\")\n\nlet file = try await uploadcare.uploadAPI.uploadAndWaitForCompletion(task: task)\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uploader = UrlUploader(\n    client = uploadcare,\n    sourceUrl = \"https://source.unsplash.com/featured\"\n)\nval file = uploader.upload()\nLog.d(\"TAG\", file.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/from_url",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "string",
                      "source_url": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "string",
                        "source_url": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/from_url",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "string",
                      "source_url": "string"
                    },
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "string",
                        "source_url": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/from_url",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "string",
                      "source_url": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "string",
                        "source_url": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Uploadcare can fetch a file from a publicly available URL and then automatically upload the\nfetched file to your project.\n\n#### Upload tokens\n\nRequests to the endpoint return a JSON dictionary with a `token` that can be further used\nto [check the status](/api-refs/upload-api/#operation/fromURLUploadStatus) of the upload\nrequest.\n\n**Note:** The token is not a file ID and can't be used to address the file directly.\nThe actual file ID should be retrieved by calling the `/from_url/status/` endpoint.\n\n#### Duplicates prevention\n\nBy default, every call to the `/from_url/` endpoint with the same `source_url` results in\na new upload leading to file duplication.\n\nIf you would like Uploadcare to keep track of the requested URLs and avoid the duplicate\nuploads, pass the `save_URL_duplicates` and `check_URL_duplicates` parameters described below.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "from-url-upload-status",
                "migratedFromUrlSlugs": ["check-the-status-of-a-task-to-fetch-upload-a-file-from-a-url"],
                "method": "GET",
                "id": "fromURLUploadStatus",
                "name": "Check the status of a task to fetch/upload a file from a URL",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/from_url/status"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Token returned by the `/from_url/` endpoint that identifies a request to fetch/upload a file from a URL.",
                    "key": "token",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_upload:FromUrlUploadStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  }
                ],
                "examples": [
                  {
                    "path": "/from_url/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "token": "token"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "waiting"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "waiting"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { fromUrlStatus } from '@uploadcare/upload-client'\n\nconst result = await fromUrlStatus(\n  '945ebb27-1fd6-46c6-a859-b9893712d650',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$status = $uploader->checkStatus('945ebb27-1fd6-46c6-a859-b9893712d650');\necho \\sprintf('Upload status is %s', $status);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file_from_url('945ebb27-1fd6-46c6-a859-b9893712d650')\nprint(file.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = '945ebb27-1fd6-46c6-a859-b9893712d650'\nputs Uploadcare::Uploader.get_upload_from_url_status(token)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.uploadAPI.uploadStatus(forToken: \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getFromUrlStatus(token = \"945ebb27-1fd6-46c6-a859-b9893712d650\")\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/from_url/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "token": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "The endpoint notifies about the progress of the task by changing the value of the `status` field:\n\n- the field is set to `waiting` initially\n- once the system starts processing the request, the field is set to `progress`\n- if the file is fetched and uploaded successfully, the `status` field is set to `success`\n  and the endpoint returns a JSON object holding information about the uploaded file\n- if the system fails to fetch/upload the file, the `status` field is set to `error` and\n  the `error` field is set to the cause of the error.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "file-upload-info",
                "migratedFromUrlSlugs": ["get-information-about-an-uploaded-file"],
                "method": "GET",
                "id": "fileUploadInfo",
                "name": "Get information about an uploaded file",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/info"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "pub_key",
                    "type": {
                      "type": "id",
                      "value": "type_:ProjectPublicKeyType"
                    }
                  },
                  {
                    "description": "File's unique ID.",
                    "key": "file_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:FileUploadInfo"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  }
                ],
                "examples": [
                  {
                    "path": "/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "caa9d29da887ee88ffe6",
                      "file_id": "file_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                      "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                      "size": 2667636,
                      "total": 2667636,
                      "done": 2667636,
                      "original_filename": "IMG-0412_123.JPG",
                      "filename": "IMG0412_123.JPG",
                      "mime_type": "image/jpeg",
                      "image_info": {
                        "color_mode": "RGB",
                        "orientation": 6,
                        "format": "JPEG",
                        "sequence": false,
                        "height": 4032,
                        "width": 3024,
                        "geo_location": {
                          "latitude": 55.62013611111111,
                          "longitude": 37.66299166666666
                        },
                        "datetime_original": "2018-08-20T12:59:50Z",
                        "dpi": [72, 72]
                      },
                      "video_info": {
                        "duration": 261827,
                        "format": "mp4",
                        "bitrate": 393,
                        "audio": {
                          "bitrate": 78,
                          "codec": "aac",
                          "sample_rate": 44100,
                          "channels": "2"
                        },
                        "video": {
                          "height": 360,
                          "width": 640,
                          "frame_rate": 30,
                          "bitrate": 315,
                          "codec": "h264"
                        }
                      },
                      "content_info": {
                        "mime": {
                          "mime": "image/jpeg",
                          "type": "image",
                          "subtype": "jpeg"
                        },
                        "image": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 4032,
                          "width": 3024,
                          "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                          },
                          "datetime_original": "2018-08-20T12:59:50Z",
                          "dpi": [72, 72]
                        },
                        "video": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": [
                            {
                              "bitrate": 78,
                              "codec": "aac",
                              "sample_rate": 44100,
                              "channels": 2
                            }
                          ],
                          "video": [
                            {
                              "height": 360,
                              "width": 640,
                              "frame_rate": 30,
                              "bitrate": 315,
                              "codec": "h264"
                            }
                          ]
                        }
                      },
                      "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                      },
                      "is_image": true,
                      "is_stored": true,
                      "is_ready": true,
                      "s3_bucket": "custom-s3-bucket-name"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                        "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                        "size": 2667636,
                        "total": 2667636,
                        "done": 2667636,
                        "original_filename": "IMG-0412_123.JPG",
                        "filename": "IMG0412_123.JPG",
                        "mime_type": "image/jpeg",
                        "image_info": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 4032,
                          "width": 3024,
                          "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                          },
                          "datetime_original": "2018-08-20T12:59:50Z",
                          "dpi": [72, 72]
                        },
                        "video_info": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": {
                            "bitrate": 78,
                            "codec": "aac",
                            "sample_rate": 44100,
                            "channels": "2"
                          },
                          "video": {
                            "height": 360,
                            "width": 640,
                            "frame_rate": 30,
                            "bitrate": 315,
                            "codec": "h264"
                          }
                        },
                        "content_info": {
                          "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                          },
                          "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "sequence": false,
                            "height": 4032,
                            "width": 3024,
                            "geo_location": {
                              "latitude": 55.62013611111111,
                              "longitude": 37.66299166666666
                            },
                            "datetime_original": "2018-08-20T12:59:50Z",
                            "dpi": [72, 72]
                          },
                          "video": {
                            "duration": 261827,
                            "format": "mp4",
                            "bitrate": 393,
                            "audio": [
                              {
                                "bitrate": 78,
                                "codec": "aac",
                                "sample_rate": 44100,
                                "channels": 2
                              }
                            ],
                            "video": [
                              {
                                "height": 360,
                                "width": 640,
                                "frame_rate": 30,
                                "bitrate": 315,
                                "codec": "h264"
                              }
                            ]
                          }
                        },
                        "metadata": {
                          "subsystem": "uploader",
                          "pet": "cat"
                        },
                        "is_image": true,
                        "is_stored": true,
                        "is_ready": true,
                        "s3_bucket": "custom-s3-bucket-name"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { info } from '@uploadcare/upload-client'\n\nconst result = await info(\n  'be3b4d5e-179d-460e-8a5d-69112ac86cbb',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->fileInfo(string $uuid);\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, File\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile = uploadcare.file('740e1b8c-1ad8-4324-b7ec-112c79d8eac2')\nprint(file.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '740e1b8c-1ad8-4324-b7ec-112c79d8eac2'\ninfo = Uploadcare::File.info(uuid)\nputs info.inspect\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.uploadAPI.fileInfo(withFileId: \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getUploadedFile(fileId = \"740e1b8c-1ad8-4324-b7ec-112c79d8eac2\")\nLog.d(\"TAG\", file.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "string",
                      "file_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "string",
                      "file_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "string",
                      "file_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns a JSON object with information about an uploaded file (file size, MIME type, metadata, etc).",
                "authed": false
              }
            ],
            "types": [
              "type_upload:BaseUploadResponse",
              "type_upload:MultipartFileUploadStartResponse",
              "type_upload:FromUrlUploadRequestCheckUrlDuplicates",
              "type_upload:FromUrlUploadRequestSaveUrlDuplicates",
              "type_upload:FromUrlUploadResponse",
              "type_upload:FromUrlUploadStatusResponse"
            ],
            "subpackages": [],
            "urlSlug": "upload",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_groups": {
            "subpackageId": "subpackage_groups",
            "name": "Groups",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-files-group",
                "migratedFromUrlSlugs": ["create-a-file-group"],
                "method": "POST",
                "id": "createFilesGroup",
                "name": "Create a file group",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/group"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "multipart/form-data",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "pub_key",
                        "valueType": {
                          "type": "id",
                          "value": "type_:ProjectPublicKeyType"
                        }
                      },
                      {
                        "description": "Set of files you want to add to the group.\nEach element can be a file UUID with or without the applied image\nprocessing operations.\n",
                        "key": "files[]",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "signature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:SignatureType"
                          }
                        }
                      },
                      {
                        "key": "expire",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_:ExpireType"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:GroupInfo"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  }
                ],
                "examples": [
                  {
                    "path": "/group",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "caa9d29da887ee88ffe6",
                      "files[]": ["files[]"],
                      "signature": "04b29480233f4def5c875875b6bdc3b1",
                      "expire": 1454902434
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                      "datetime_created": "2018-09-12T10:03:38Z",
                      "datetime_stored": "2015-09-21T12:39:13Z",
                      "files_count": 1,
                      "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                      "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                      "files": [
                        {
                          "default_effects": "resize/x800/",
                          "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                          "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                          "size": 2667636,
                          "total": 2667636,
                          "done": 2667636,
                          "original_filename": "IMG-0412_123.JPG",
                          "filename": "IMG0412_123.JPG",
                          "mime_type": "image/jpeg",
                          "image_info": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "height": 4032,
                            "width": 3024,
                            "sequence": false,
                            "geo_location": {
                              "latitude": 55.62013611111111,
                              "longitude": 37.66299166666666
                            },
                            "datetime_original": "2018-08-20T08:59:50",
                            "dpi": {
                              "0": 72,
                              "1": 72
                            }
                          },
                          "content_info": {
                            "mime": {
                              "mime": "image/jpeg",
                              "type": "image",
                              "subtype": "jpeg"
                            },
                            "image": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "height": 4032,
                              "width": 3024,
                              "sequence": false,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T08:59:50",
                              "dpi": {
                                "0": 72,
                                "1": 72
                              }
                            }
                          },
                          "metadata": {
                            "subsystem": "uploader",
                            "pet": "cat"
                          },
                          "is_image": true,
                          "is_stored": true,
                          "is_ready": true
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "caa9d29da887ee88ffe6",
                        "files[]": ["files[]"],
                        "signature": "04b29480233f4def5c875875b6bdc3b1",
                        "expire": 1454902434
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                        "datetime_created": "2018-09-12T10:03:38Z",
                        "datetime_stored": "2015-09-21T12:39:13Z",
                        "files_count": 1,
                        "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                        "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                        "files": [
                          {
                            "default_effects": "resize/x800/",
                            "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            "size": 2667636,
                            "total": 2667636,
                            "done": 2667636,
                            "original_filename": "IMG-0412_123.JPG",
                            "filename": "IMG0412_123.JPG",
                            "mime_type": "image/jpeg",
                            "image_info": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "height": 4032,
                              "width": 3024,
                              "sequence": false,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T08:59:50",
                              "dpi": {
                                "0": 72,
                                "1": 72
                              }
                            },
                            "content_info": {
                              "mime": {
                                "mime": "image/jpeg",
                                "type": "image",
                                "subtype": "jpeg"
                              },
                              "image": {
                                "color_mode": "RGB",
                                "orientation": 6,
                                "format": "JPEG",
                                "height": 4032,
                                "width": 3024,
                                "sequence": false,
                                "geo_location": {
                                  "latitude": 55.62013611111111,
                                  "longitude": 37.66299166666666
                                },
                                "datetime_original": "2018-08-20T08:59:50",
                                "dpi": {
                                  "0": 72,
                                  "1": 72
                                }
                              }
                            },
                            "metadata": {
                              "subsystem": "uploader",
                              "pet": "cat"
                            },
                            "is_image": true,
                            "is_stored": true,
                            "is_ready": true
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { group } from '@uploadcare/upload-client'\n\nconst result = await group(\n  [\n    'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n    'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n  ],\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$result = $uploader->groupFiles(['d6d34fa9-addd-472c-868d-2e5c105f9fcd', 'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/']);\necho \\sprintf('Response status is %s', $result->getStatusCode());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, File, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_1 = uploadcare.file('d6d34fa9-addd-472c-868d-2e5c105f9fcd')\nfile_2 = uploadcare.file('b1026315-8116-4632-8364-607e64fca723/-/resize/x800/')\nfile_group = uploadcare.create_file_group([file_1, file_2])\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\n\nuuids = [\n  'd6d34fa9-addd-472c-868d-2e5c105f9fcd',\n  'b1026315-8116-4632-8364-607e64fca723/-/resize/x800/'\n]\ngroup = Uploadcare::Group.create(uuids)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet filesIds = [\"d6d34fa9-addd-472c-868d-2e5c105f9fcd\", \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"]\nlet group = try await uploadAPI.createFilesGroup(fileIds: filesIds)\nprint(group)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"d6d34fa9-addd-472c-868d-2e5c105f9fcd\",\n    \"b1026315-8116-4632-8364-607e64fca723/-/resize/x800/\"\n)\nval group = uploadcare.createGroup(fileIds = uuids)\nLog.d(\"TAG\", group.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/group",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "string",
                      "files[]": ["string"]
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "string",
                        "files[]": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/group",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "pub_key": "string",
                      "files[]": ["string"]
                    },
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "pub_key": "string",
                        "files[]": ["string"]
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a file group from a set of already uploaded files.\n\nThe most common use case for creating a file group is when a user uploads\nmultiple files at once and then wants to display them together.\n\n**Note:** A group itself and files within it MUST belong to the same project.\n\n**Note:** Groups are immutable and the only way to add/remove a file to a group\nis to create a new one.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://upload.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "files-group-info",
                "migratedFromUrlSlugs": ["get-information-about-a-file-group"],
                "method": "GET",
                "id": "filesGroupInfo",
                "name": "Get information about a file group",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/group/info"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "pub_key",
                    "type": {
                      "type": "id",
                      "value": "type_:ProjectPublicKeyType"
                    }
                  },
                  {
                    "description": "Group's unique ID. Group IDs look like `UUID~N`, where the `~N` part reflects the number of the files in the group.",
                    "key": "group_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:GroupInfo"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 403
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  }
                ],
                "examples": [
                  {
                    "path": "/group/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "caa9d29da887ee88ffe6",
                      "group_id": "group_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                      "datetime_created": "2018-09-12T10:03:38Z",
                      "datetime_stored": "2015-09-21T12:39:13Z",
                      "files_count": 1,
                      "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                      "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                      "files": [
                        {
                          "default_effects": "resize/x800/",
                          "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                          "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                          "size": 2667636,
                          "total": 2667636,
                          "done": 2667636,
                          "original_filename": "IMG-0412_123.JPG",
                          "filename": "IMG0412_123.JPG",
                          "mime_type": "image/jpeg",
                          "image_info": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "height": 4032,
                            "width": 3024,
                            "sequence": false,
                            "geo_location": {
                              "latitude": 55.62013611111111,
                              "longitude": 37.66299166666666
                            },
                            "datetime_original": "2018-08-20T08:59:50",
                            "dpi": {
                              "0": 72,
                              "1": 72
                            }
                          },
                          "content_info": {
                            "mime": {
                              "mime": "image/jpeg",
                              "type": "image",
                              "subtype": "jpeg"
                            },
                            "image": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "height": 4032,
                              "width": 3024,
                              "sequence": false,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T08:59:50",
                              "dpi": {
                                "0": 72,
                                "1": 72
                              }
                            }
                          },
                          "metadata": {
                            "subsystem": "uploader",
                            "pet": "cat"
                          },
                          "is_image": true,
                          "is_stored": true,
                          "is_ready": true
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "0d712319-b970-4602-850c-bae1ced521a6~1",
                        "datetime_created": "2018-09-12T10:03:38Z",
                        "datetime_stored": "2015-09-21T12:39:13Z",
                        "files_count": 1,
                        "cdn_url": "https://ucarecdn.com/0d712319-b970-4602-850c-bae1ced521a6~1/",
                        "url": "https://api.uploadcare.com/groups/0d712319-b970-4602-850c-bae1ced521a6~1/",
                        "files": [
                          {
                            "default_effects": "resize/x800/",
                            "uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            "file_id": "be3b4d5e-179d-460e-8a5d-69112ac86cbb",
                            "size": 2667636,
                            "total": 2667636,
                            "done": 2667636,
                            "original_filename": "IMG-0412_123.JPG",
                            "filename": "IMG0412_123.JPG",
                            "mime_type": "image/jpeg",
                            "image_info": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "height": 4032,
                              "width": 3024,
                              "sequence": false,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T08:59:50",
                              "dpi": {
                                "0": 72,
                                "1": 72
                              }
                            },
                            "content_info": {
                              "mime": {
                                "mime": "image/jpeg",
                                "type": "image",
                                "subtype": "jpeg"
                              },
                              "image": {
                                "color_mode": "RGB",
                                "orientation": 6,
                                "format": "JPEG",
                                "height": 4032,
                                "width": 3024,
                                "sequence": false,
                                "geo_location": {
                                  "latitude": 55.62013611111111,
                                  "longitude": 37.66299166666666
                                },
                                "datetime_original": "2018-08-20T08:59:50",
                                "dpi": {
                                  "0": 72,
                                  "1": 72
                                }
                              }
                            },
                            "metadata": {
                              "subsystem": "uploader",
                              "pet": "cat"
                            },
                            "is_image": true,
                            "is_stored": true,
                            "is_ready": true
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import { groupInfo } from '@uploadcare/upload-client'\n\nconst result = await groupInfo(\n  '0d712319-b970-4602-850c-bae1ced521a6~1',\n  {\n    publicKey: 'YOUR_PUBLIC_KEY'\n  }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$uploader = new Uploadcare\\Uploader\\Uploader($configuration);\n$groupInfo = $uploader->groupInfo('0d712319-b970-4602-850c-bae1ced521a6~1');\necho $groupInfo->getBody()->getContents();\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, FileGroup\n\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\nfile_group = uploadcare.file_group('0d712319-b970-4602-850c-bae1ced521a6~1')\nprint(file_group.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '0d712319-b970-4602-850c-bae1ced521a6~1'\ninfo = Uploadcare::Group.info(uuid)\nputs info.inspect\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.uploadAPI.filesGroupInfo(groupId: \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nprint(group)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getUploadedGroup(groupId = \"0d712319-b970-4602-850c-bae1ced521a6~1\")\nLog.d(\"TAG\", group.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/group/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "string",
                      "group_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/group/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "string",
                      "group_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 403,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/group/info",
                    "pathParameters": {},
                    "queryParameters": {
                      "pub_key": "string",
                      "group_id": "string"
                    },
                    "headers": {},
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns a JSON object with information about a file group (when the group was created,\nnumber of the files in the group, etc).",
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "groups",
            "webhooks": [],
            "websockets": []
          }
        },
        "hasMultipleBaseUrls": false
      },
      "fb019a78-a773-4315-9c7b-6dcb585d6b30": {
        "id": "fb019a78-a773-4315-9c7b-6dcb585d6b30",
        "rootPackage": {
          "endpoints": [
            {
              "environments": [
                {
                  "id": "Default",
                  "baseUrl": "https://api.uploadcare.com"
                }
              ],
              "defaultEnvironment": "Default",
              "urlSlug": "file-metadata",
              "migratedFromUrlSlugs": ["get-files-metadata"],
              "method": "GET",
              "id": "File metadata",
              "name": "Get file's metadata",
              "path": {
                "pathParameters": [
                  {
                    "description": "File UUID.",
                    "key": "uuid",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/files/"
                  },
                  {
                    "type": "pathParameter",
                    "value": "uuid"
                  },
                  {
                    "type": "literal",
                    "value": "/metadata"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                }
              },
              "errors": [
                {
                  "type": {
                    "type": "unknown"
                  },
                  "statusCode": 400
                },
                {
                  "type": {
                    "type": "unknown"
                  },
                  "statusCode": 401
                }
              ],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  },
                  "statusCode": 400
                },
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "unknown"
                    }
                  },
                  "statusCode": 401
                }
              ],
              "examples": [
                {
                  "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata",
                  "pathParameters": {
                    "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                  },
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 200,
                  "responseBody": {
                    "string": {
                      "key": "value"
                    }
                  },
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "string": {
                        "key": "value"
                      }
                    }
                  },
                  "codeSamples": [
                    {
                      "language": "JavaScript",
                      "code": "import {\n  getMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await getMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                      "name": "JS"
                    },
                    {
                      "language": "PHP",
                      "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf(\"File %s metadata:\\n\", $fileInfo->getUuid());\nforeach ($fileInfo->getMetadata() as $metaKey => $metaItem) {\n    echo \\sprintf(\"%s: %s\\n\", $metaKey, $metaItem);\n}\n",
                      "name": "PHP"
                    },
                    {
                      "language": "Python",
                      "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nvalue = uploadcare.metadata_api.get_all_metadata(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(value)\n",
                      "name": "Python"
                    },
                    {
                      "language": "Ruby",
                      "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::FileMetadata.show(uuid, 'pet')\n",
                      "name": "Ruby"
                    },
                    {
                      "language": "Swift",
                      "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet metadata = try await uploadcare.fileMetadata(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(metadata)\n",
                      "name": "Swift"
                    },
                    {
                      "language": "Kotlin",
                      "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval metadata = uploadcare.getFileMetadata(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", metadata.toString())\n",
                      "name": "Kotlin"
                    }
                  ]
                },
                {
                  "path": "/files/:uuid/metadata",
                  "pathParameters": {
                    "uuid": ":uuid"
                  },
                  "queryParameters": {},
                  "headers": {
                    "Accept": "string",
                    "Uploadcare": "string",
                    "Uploadcare.Simple": "string"
                  },
                  "responseStatusCode": 400,
                  "responseBody": {},
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {}
                  },
                  "codeSamples": []
                },
                {
                  "path": "/files/:uuid/metadata",
                  "pathParameters": {
                    "uuid": ":uuid"
                  },
                  "queryParameters": {},
                  "headers": {
                    "Accept": "string",
                    "Uploadcare": "string",
                    "Uploadcare.Simple": "string"
                  },
                  "responseStatusCode": 401,
                  "responseBody": {},
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {}
                  },
                  "codeSamples": []
                }
              ],
              "description": "Get file's metadata keys and values.",
              "authed": true
            }
          ],
          "subpackages": [
            "subpackage_file",
            "subpackage_addOns",
            "subpackage_fileMetadata",
            "subpackage_group",
            "subpackage_project",
            "subpackage_webhook",
            "subpackage_conversion"
          ],
          "types": [
            "type_:AddonExecutionStatusStatus",
            "type_:AddonExecutionStatus",
            "type_:WebhookFilePayload",
            "type_:WebhookFileInfoUpdatedPayloadPreviousValues",
            "type_:WebhookFileInfoUpdatedPayload",
            "type_:FileCopy",
            "type_:File",
            "type_:Metadata",
            "type_:MetadataItemValue",
            "type_:ContentInfoMime",
            "type_:ContentInfo",
            "type_:ImageInfoColorMode",
            "type_:ImageInfoGeoLocation",
            "type_:ImageInfo",
            "type_:VideoInfoAudioItem",
            "type_:VideoInfoVideoItem",
            "type_:VideoInfo",
            "type_:CopiedFileUrl",
            "type_:Group",
            "type_:GroupWithFiles",
            "type_:ProjectCollaboratorsItem",
            "type_:Project",
            "type_:WebhookId",
            "type_:WebhookProject",
            "type_:WebhookProjectPubkey",
            "type_:WebhookCreated",
            "type_:WebhookUpdated",
            "type_:WebhookTarget",
            "type_:WebhookEvent",
            "type_:WebhookIsActive",
            "type_:WebhookSigningSecret",
            "type_:WebhookVersion",
            "type_:WebhookVersionOfRequest",
            "type_:WebhookVersionOfListResponse",
            "type_:Webhook",
            "type_:WebhookOfListResponse",
            "type_:WebhookInitiatorType",
            "type_:WebhookInitiatorDetailAddonName",
            "type_:WebhookInitiatorDetail",
            "type_:WebhookInitiator",
            "type_:WebhookPublicInfo",
            "type_:CantUseDocsConversionError",
            "type_:CantUseVideoConversionError",
            "type_:CantUseWebhooksError",
            "type_:JsonObjectParseError",
            "type_:LocalCopyResponse",
            "type_:ApplicationData",
            "type_:RemoveBgV10Data",
            "type_:RemoveBgV10",
            "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox",
            "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem",
            "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem",
            "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItem",
            "type_:AwsRekognitionDetectLabelsV20160627Data",
            "type_:AwsRekognitionDetectLabelsV20160627",
            "type_:AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem",
            "type_:AwsRekognitionDetectModerationLabelsV20160627Data",
            "type_:AwsRekognitionDetectModerationLabelsV20160627",
            "type_:UcClamavVirusScanVersion",
            "type_:UcClamavVirusScanData",
            "type_:UcClamavVirusScan",
            "type_:ApplicationDataObject",
            "type_:SimpleAuthHttpForbidden",
            "type_:WebhookTargetUrlError"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_file:FilesListRequestOrdering": {
            "name": "FilesListRequestOrdering",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "datetime_uploaded"
                },
                {
                  "value": "-datetime_uploaded"
                }
              ]
            }
          },
          "type_file:FilesListResponseTotals": {
            "name": "FilesListResponseTotals",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Total number of the files that are marked as removed.",
                  "key": "removed",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Total number of the files that are marked as stored.",
                  "key": "stored",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Total number of the files that are not marked as stored.",
                  "key": "unstored",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_file:FilesListResponse": {
            "name": "FilesListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Next page URL.",
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Previous page URL.",
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Total number of the files of the queried type. The queried type depends on the stored and removed query parameters.",
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "totals",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_file:FilesListResponseTotals"
                    }
                  }
                },
                {
                  "description": "Number of the files per page.",
                  "key": "per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:File"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_file:FilesStoringResponse": {
            "name": "FilesStoringResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Dictionary of passed files UUIDs and problems associated with these UUIDs.",
                  "key": "problems",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "List of file objects that have been stored/deleted.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:File"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_file:FilesDeleteResponse": {
            "name": "FilesDeleteResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Dictionary of passed files UUIDs and problems associated with these UUIDs.",
                  "key": "problems",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "List of file objects that have been stored/deleted.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:File"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_file:CreateLocalCopyRequestStore": {
            "description": "The parameter only applies to the Uploadcare storage and MUST be either true or false.",
            "name": "CreateLocalCopyRequestStore",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "true"
                },
                {
                  "value": "false"
                }
              ]
            }
          },
          "type_file:CreateRemoteCopyRequestPattern": {
            "description": "The parameter is used to specify file names Uploadcare passes to a custom storage. If the parameter is omitted, your custom storages pattern is used. Use any combination of allowed values.\n\nParameter values:\n\n- `${default}` = `${uuid}/${auto_filename}`\n- `${auto_filename}` = `${filename}${effects}${ext}`\n- `${effects}` = processing operations put into a CDN URL\n- `${filename}` = original filename without extension\n- `${uuid}` = file UUID\n- `${ext}` = file extension, including period, e.g. .jpg",
            "name": "CreateRemoteCopyRequestPattern",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "${default}"
                },
                {
                  "value": "${auto_filename}"
                },
                {
                  "value": "${effects}"
                },
                {
                  "value": "${filename}"
                },
                {
                  "value": "${uuid}"
                },
                {
                  "value": "${ext}"
                }
              ]
            }
          },
          "type_addOns:AwsRekognitionExecuteResponse": {
            "name": "AwsRekognitionExecuteResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Request ID.",
                  "key": "request_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:AwsRekognitionExecutionStatusResponseStatus": {
            "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
            "name": "AwsRekognitionExecutionStatusResponseStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "in_progress"
                },
                {
                  "value": "error"
                },
                {
                  "value": "done"
                },
                {
                  "value": "unknown"
                }
              ]
            }
          },
          "type_addOns:AwsRekognitionExecutionStatusResponse": {
            "name": "AwsRekognitionExecutionStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:AwsRekognitionExecutionStatusResponseStatus"
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:AwsRekognitionDetectModerationLabelsExecuteResponse": {
            "name": "AwsRekognitionDetectModerationLabelsExecuteResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Request ID.",
                  "key": "request_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus": {
            "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
            "name": "AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "in_progress"
                },
                {
                  "value": "error"
                },
                {
                  "value": "done"
                },
                {
                  "value": "unknown"
                }
              ]
            }
          },
          "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponse": {
            "name": "AwsRekognitionDetectModerationLabelsExecutionStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus"
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:UcClamavVirusScanExecuteRequestParams": {
            "description": "Optional object with Add-On specific parameters",
            "name": "UcClamavVirusScanExecuteRequestParams",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Purge infected file.",
                  "key": "purge_infected",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:UcClamavVirusScanExecuteResponse": {
            "name": "UcClamavVirusScanExecuteResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Request ID.",
                  "key": "request_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:UcClamavVirusScanExecutionStatusResponseStatus": {
            "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
            "name": "UcClamavVirusScanExecutionStatusResponseStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "in_progress"
                },
                {
                  "value": "error"
                },
                {
                  "value": "done"
                },
                {
                  "value": "unknown"
                }
              ]
            }
          },
          "type_addOns:UcClamavVirusScanExecutionStatusResponse": {
            "name": "UcClamavVirusScanExecutionStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:UcClamavVirusScanExecutionStatusResponseStatus"
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecuteRequestParamsTypeLevel": {
            "description": "\"none\" = No classification (foreground_type won't bet set in the application data)\n\n\"1\" = Use coarse classification classes: [person, product, animal, car, other]\n\n\"2\" = Use more specific classification classes: [person, product, animal, car,\ncar_interior, car_part, transportation, graphics, other]\n\n\"latest\" = Always use the latest classification classes available",
            "name": "RemoveBgExecuteRequestParamsTypeLevel",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "none"
                },
                {
                  "value": "1"
                },
                {
                  "value": "2"
                },
                {
                  "value": "latest"
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecuteRequestParamsType": {
            "description": "Foreground type.",
            "name": "RemoveBgExecuteRequestParamsType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "auto"
                },
                {
                  "value": "person"
                },
                {
                  "value": "product"
                },
                {
                  "value": "car"
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecuteRequestParamsChannels": {
            "description": "Request either the finalized image ('rgba', default) or an alpha mask ('alpha').",
            "name": "RemoveBgExecuteRequestParamsChannels",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "rgba"
                },
                {
                  "value": "alpha"
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecuteRequestParams": {
            "description": "Optional object with Add-On specific parameters",
            "name": "RemoveBgExecuteRequestParams",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether to crop off all empty regions",
                  "key": "crop",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Adds a margin around the cropped subject, e.g 30px or 30%",
                  "key": "crop_margin",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Scales the subject relative to the total image size, e.g 80%",
                  "key": "scale",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether to add an artificial shadow to the result",
                  "key": "add_shadow",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "\"none\" = No classification (foreground_type won't bet set in the application data)\n\n\"1\" = Use coarse classification classes: [person, product, animal, car, other]\n\n\"2\" = Use more specific classification classes: [person, product, animal, car,\ncar_interior, car_part, transportation, graphics, other]\n\n\"latest\" = Always use the latest classification classes available",
                  "key": "type_level",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:RemoveBgExecuteRequestParamsTypeLevel"
                    }
                  }
                },
                {
                  "description": "Foreground type.",
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:RemoveBgExecuteRequestParamsType"
                    }
                  }
                },
                {
                  "description": "Whether to have semi-transparent regions in the result",
                  "key": "semitransparency",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Request either the finalized image ('rgba', default) or an alpha mask ('alpha').",
                  "key": "channels",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:RemoveBgExecuteRequestParamsChannels"
                    }
                  }
                },
                {
                  "description": "Region of interest: Only contents of this rectangular region can be detected\nas foreground. Everything outside is considered background and will be removed.\nThe rectangle is defined as two x/y coordinates in the format \"x1 y1 x2 y2\".\nThe coordinates can be in absolute pixels (suffix 'px') or relative to the\nwidth/height of the image (suffix '%'). By default, the whole image is the\nregion of interest (\"0% 0% 100% 100%\").",
                  "key": "roi",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Positions the subject within the image canvas. Can be \"original\"\n(default unless \"scale\" is given), \"center\" (default when \"scale\" is given) or a value from \"0%\" to \"100%\"\n(both horizontal and vertical) or two values (horizontal, vertical).",
                  "key": "position",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecuteResponse": {
            "name": "RemoveBgExecuteResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Request ID.",
                  "key": "request_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecutionStatusResponseResult": {
            "name": "RemoveBgExecutionStatusResponseResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "UUID of the file with removed background.",
                  "key": "file_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_addOns:RemoveBgExecutionStatusResponse": {
            "name": "RemoveBgExecutionStatusResponse",
            "shape": {
              "type": "object",
              "extends": ["type_:AddonExecutionStatus"],
              "properties": [
                {
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_addOns:RemoveBgExecutionStatusResponseResult"
                    }
                  }
                }
              ]
            }
          },
          "type_group:GroupsListRequestOrdering": {
            "name": "GroupsListRequestOrdering",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "datetime_created"
                },
                {
                  "value": "-datetime_created"
                }
              ]
            }
          },
          "type_group:GroupsListResponse": {
            "name": "GroupsListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Next page URL.",
                  "key": "next",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Previous page URL.",
                  "key": "previous",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Total number of groups in the project.",
                  "key": "total",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "description": "Number of groups per page.",
                  "key": "per_page",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "results",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:Group"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertInfoResponseFormatConversionFormatsItem": {
            "name": "DocumentConvertInfoResponseFormatConversionFormatsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Supported target document format.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertInfoResponseFormat": {
            "description": "Document format details.",
            "name": "DocumentConvertInfoResponseFormat",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A detected document format.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The conversions that are supported for the document.",
                  "key": "conversion_formats",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_conversion:DocumentConvertInfoResponseFormatConversionFormatsItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertInfoResponseConvertedGroups": {
            "description": "Information about already converted groups.",
            "name": "DocumentConvertInfoResponseConvertedGroups",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Converted group UUID.",
                  "key": "{conversion_format}",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertInfoResponse": {
            "name": "DocumentConvertInfoResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Holds an error if your document can't be handled.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Document format details.",
                  "key": "format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertInfoResponseFormat"
                    }
                  }
                },
                {
                  "description": "Information about already converted groups.",
                  "key": "converted_groups",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertInfoResponseConvertedGroups"
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentJobSubmitParametersStore": {
            "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
            "name": "DocumentJobSubmitParametersStore",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0"
                },
                {
                  "value": "false"
                },
                {
                  "value": "1"
                },
                {
                  "value": "true"
                }
              ]
            }
          },
          "type_conversion:DocumentJobSubmitParametersSaveInGroup": {
            "description": "When `save_in_group` is set to `\"1\"`, multi-page documents additionally will be saved as a file group.",
            "name": "DocumentJobSubmitParametersSaveInGroup",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0"
                },
                {
                  "value": "false"
                },
                {
                  "value": "1"
                },
                {
                  "value": "true"
                }
              ]
            }
          },
          "type_conversion:DocumentConvertResponseResultItem": {
            "name": "DocumentConvertResponseResultItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Source file identifier including a target format, if present.",
                  "key": "original_source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A UUID of your converted document.",
                  "key": "uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A conversion job token that can be used to get a job status.",
                  "key": "token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertResponse": {
            "name": "DocumentConvertResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Dictionary of problems related to your processing job, if any. A key is the `path` you requested.",
                  "key": "problems",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Result for each requested path, in case of no errors for that path.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_conversion:DocumentConvertResponseResultItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertStatusResponseStatus": {
            "description": "Conversion job status, can have one of the following values: - `pending` — a source file is being prepared for conversion. - `processing` — conversion is in progress. - `finished` — the conversion is finished. - `failed` — failed to convert the source, see `error` for details. - `canceled` — the conversion was canceled.",
            "name": "DocumentConvertStatusResponseStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "pending"
                },
                {
                  "value": "processing"
                },
                {
                  "value": "finished"
                },
                {
                  "value": "failed"
                },
                {
                  "value": "cancelled"
                }
              ]
            }
          },
          "type_conversion:DocumentConvertStatusResponseResult": {
            "description": "Repeats the contents of your processing output.",
            "name": "DocumentConvertStatusResponseResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A UUID of a converted target file.",
                  "key": "uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:DocumentConvertStatusResponse": {
            "name": "DocumentConvertStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Conversion job status, can have one of the following values: - `pending` — a source file is being prepared for conversion. - `processing` — conversion is in progress. - `finished` — the conversion is finished. - `failed` — failed to convert the source, see `error` for details. - `canceled` — the conversion was canceled.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertStatusResponseStatus"
                    }
                  }
                },
                {
                  "description": "Holds a conversion error if your file can't be handled.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Repeats the contents of your processing output.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertStatusResponseResult"
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:VideoJobSubmitParametersStore": {
            "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
            "name": "VideoJobSubmitParametersStore",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0"
                },
                {
                  "value": "false"
                },
                {
                  "value": "1"
                },
                {
                  "value": "true"
                }
              ]
            }
          },
          "type_conversion:VideoConvertResponseResultItem": {
            "name": "VideoConvertResponseResultItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Input file identifier including operations, if present.",
                  "key": "original_source",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A UUID of your processed video file.",
                  "key": "uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A processing job token that can be used to get a job status.",
                  "key": "token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "UUID of a file group with thumbnails for an output video, based on the `thumbs` operation parameters.",
                  "key": "thumbnails_group_uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:VideoConvertResponse": {
            "name": "VideoConvertResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Dictionary of problems related to your processing job, if any. Key is the `path` you requested.",
                  "key": "problems",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Result for each requested path, in case of no errors for that path.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_conversion:VideoConvertResponseResultItem"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:VideoConvertStatusResponseStatus": {
            "description": "Processing job status, can have one of the following values: - `pending` — video file is being prepared for conversion. - `processing` — video file processing is in progress. - `finished` — the processing is finished. - `failed` — we failed to process the video, see `error` for details. - `canceled` — video processing was canceled.",
            "name": "VideoConvertStatusResponseStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "pending"
                },
                {
                  "value": "processing"
                },
                {
                  "value": "finished"
                },
                {
                  "value": "failed"
                },
                {
                  "value": "cancelled"
                }
              ]
            }
          },
          "type_conversion:VideoConvertStatusResponseResult": {
            "description": "Repeats the contents of your processing output.",
            "name": "VideoConvertStatusResponseResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A UUID of your processed video file.",
                  "key": "uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A UUID of a file group with thumbnails for an output video, based on the `thumbs` operation parameters.",
                  "key": "thumbnails_group_uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_conversion:VideoConvertStatusResponse": {
            "name": "VideoConvertStatusResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Processing job status, can have one of the following values: - `pending` — video file is being prepared for conversion. - `processing` — video file processing is in progress. - `finished` — the processing is finished. - `failed` — we failed to process the video, see `error` for details. - `canceled` — video processing was canceled.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_conversion:VideoConvertStatusResponseStatus"
                    }
                  }
                },
                {
                  "description": "Holds a processing error if we failed to handle your video.",
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Repeats the contents of your processing output.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_conversion:VideoConvertStatusResponseResult"
                    }
                  }
                }
              ]
            }
          },
          "type_:AddonExecutionStatusStatus": {
            "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
            "name": "AddonExecutionStatusStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "in_progress"
                },
                {
                  "value": "error"
                },
                {
                  "value": "done"
                },
                {
                  "value": "unknown"
                }
              ]
            }
          },
          "type_:AddonExecutionStatus": {
            "name": "AddonExecutionStatus",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Defines the status of an Add-On execution.\nIn most cases, once the status changes to `done`, [Application Data](#operation/fileInfo) of the file that had been specified as a `appdata`, will contain the result of the execution.",
                  "key": "status",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AddonExecutionStatusStatus"
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookFilePayload": {
            "name": "WebhookFilePayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "initiator",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookInitiator"
                  }
                },
                {
                  "key": "hook",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookPublicInfo"
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:File"
                  }
                },
                {
                  "description": "File CDN URL.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookFileInfoUpdatedPayloadPreviousValues": {
            "description": "Object containing the values of the updated file data attributes and their values prior to the event.",
            "name": "WebhookFileInfoUpdatedPayloadPreviousValues",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "appdata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ApplicationDataObject"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Metadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookFileInfoUpdatedPayload": {
            "name": "WebhookFileInfoUpdatedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "initiator",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookInitiator"
                  }
                },
                {
                  "key": "hook",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookPublicInfo"
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_:File"
                  }
                },
                {
                  "description": "File CDN URL.",
                  "key": "file",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Object containing the values of the updated file data attributes and their values prior to the event.",
                  "key": "previous_values",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookFileInfoUpdatedPayloadPreviousValues"
                  }
                }
              ]
            }
          },
          "type_:FileCopy": {
            "name": "FileCopy",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Date and time when a file was removed, if any.",
                  "key": "datetime_removed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Date and time of the last store request, if any.",
                  "key": "datetime_stored",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Date and time when a file was uploaded.",
                  "key": "datetime_uploaded",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Is file is image.",
                  "key": "is_image",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Is file is ready to be used after upload.",
                  "key": "is_ready",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "File MIME-type.",
                  "key": "mime_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Publicly available file CDN URL. Available if a file is not deleted.",
                  "key": "original_file_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Original file name taken from uploaded file.",
                  "key": "original_filename",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File size in bytes.",
                  "key": "size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "API resource URL for a particular file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File UUID.",
                  "key": "uuid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "variations",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "content_info",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Metadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:File": {
            "name": "File",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Date and time when a file was removed, if any.",
                  "key": "datetime_removed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Date and time of the last store request, if any.",
                  "key": "datetime_stored",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Date and time when a file was uploaded.",
                  "key": "datetime_uploaded",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Is file is image.",
                  "key": "is_image",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Is file is ready to be used after upload.",
                  "key": "is_ready",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "File MIME-type.",
                  "key": "mime_type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Publicly available file CDN URL. Available if a file is not deleted.",
                  "key": "original_file_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Original file name taken from uploaded file.",
                  "key": "original_filename",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File size in bytes.",
                  "key": "size",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "API resource URL for a particular file.",
                  "key": "url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File UUID.",
                  "key": "uuid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "appdata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ApplicationDataObject"
                    }
                  }
                },
                {
                  "description": "Dictionary of other files that were created using this file as a source. It's used for video processing and document conversion jobs. E.g., `<conversion_path>: <uuid>`.",
                  "key": "variations",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "content_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContentInfo"
                    }
                  }
                },
                {
                  "key": "metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Metadata"
                    }
                  }
                }
              ]
            }
          },
          "type_:Metadata": {
            "description": "Arbitrary metadata associated with a file.",
            "name": "Metadata",
            "shape": {
              "type": "alias",
              "value": {
                "type": "optional",
                "itemType": {
                  "type": "map",
                  "keyType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  },
                  "valueType": {
                    "type": "unknown"
                  }
                }
              }
            }
          },
          "type_:MetadataItemValue": {
            "description": "Value of metadata key.",
            "name": "MetadataItemValue",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:ContentInfoMime": {
            "description": "MIME type.",
            "name": "ContentInfoMime",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Full MIME type.",
                  "key": "mime",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Type of MIME type.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Subtype of MIME type.",
                  "key": "subtype",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ContentInfo": {
            "description": "Information about file content.",
            "name": "ContentInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "MIME type.",
                  "key": "mime",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContentInfoMime"
                    }
                  }
                },
                {
                  "key": "image",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ImageInfo"
                    }
                  }
                },
                {
                  "key": "video",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoInfo"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageInfoColorMode": {
            "description": "Image color mode.",
            "name": "ImageInfoColorMode",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "RGB"
                },
                {
                  "value": "RGBA"
                },
                {
                  "value": "RGBa"
                },
                {
                  "value": "RGBX"
                },
                {
                  "value": "L"
                },
                {
                  "value": "LA"
                },
                {
                  "value": "La"
                },
                {
                  "value": "P"
                },
                {
                  "value": "PA"
                },
                {
                  "value": "CMYK"
                },
                {
                  "value": "YCbCr"
                },
                {
                  "value": "HSV"
                },
                {
                  "value": "LAB"
                }
              ]
            }
          },
          "type_:ImageInfoGeoLocation": {
            "description": "Geo-location of image from EXIF.",
            "name": "ImageInfoGeoLocation",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Location latitude.",
                  "key": "latitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Location longitude.",
                  "key": "longitude",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageInfo": {
            "description": "Image metadata.",
            "name": "ImageInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Image color mode.",
                  "key": "color_mode",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ImageInfoColorMode"
                  }
                },
                {
                  "description": "Image orientation from EXIF.",
                  "key": "orientation",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Image format.",
                  "key": "format",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Set to true if a file contains a sequence of images (GIF for example).",
                  "key": "sequence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Image height in pixels.",
                  "key": "height",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Image width in pixels.",
                  "key": "width",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Geo-location of image from EXIF.",
                  "key": "geo_location",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ImageInfoGeoLocation"
                    }
                  }
                },
                {
                  "description": "Image date and time from EXIF. Please be aware that this data is not always formatted and displayed exactly as it appears in the EXIF.",
                  "key": "datetime_original",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Image DPI for two dimensions.",
                  "key": "dpi",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoInfoAudioItem": {
            "description": "Audio stream's metadata.",
            "name": "VideoInfoAudioItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Audio stream's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's codec.",
                  "key": "codec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's sample rate.",
                  "key": "sample_rate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Audio stream's number of channels.",
                  "key": "channels",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoInfoVideoItem": {
            "description": "Video stream's metadata.",
            "name": "VideoInfoVideoItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Video stream's image height.",
                  "key": "height",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Video stream's image width.",
                  "key": "width",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Video stream's frame rate.",
                  "key": "frame_rate",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Video stream's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Video stream's codec.",
                  "key": "codec",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VideoInfo": {
            "description": "Video metadata.",
            "name": "VideoInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Video file's duration in milliseconds.",
                  "key": "duration",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Video file's format.",
                  "key": "format",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Video file's bitrate.",
                  "key": "bitrate",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "audio",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoInfoAudioItem"
                    }
                  }
                },
                {
                  "key": "video",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:VideoInfoVideoItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:CopiedFileUrl": {
            "name": "CopiedFileUrl",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL with an s3 scheme. Your bucket name is put as a host, and an s3 object path follows.",
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Group": {
            "name": "Group",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Group's identifier.",
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ISO-8601 date and time when the group was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "Number of the files in the group.",
                  "key": "files_count",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Group's CDN URL.",
                  "key": "cdn_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Group's API resource URL.",
                  "key": "url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:GroupWithFiles": {
            "name": "GroupWithFiles",
            "shape": {
              "type": "object",
              "extends": ["type_:Group"],
              "properties": [
                {
                  "description": "The list of files in the group. An array may contain null values if a file has been removed.",
                  "key": "files",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ProjectCollaboratorsItem": {
            "name": "ProjectCollaboratorsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Collaborator email.",
                  "key": "email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Collaborator name.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:Project": {
            "name": "Project",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "collaborators",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ProjectCollaboratorsItem"
                      }
                    }
                  }
                },
                {
                  "description": "Project login name.",
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Project public key.",
                  "key": "pub_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "autostore_enabled",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookId": {
            "description": "Webhook's ID.",
            "name": "WebhookId",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          "type_:WebhookProject": {
            "description": "Project ID the webhook belongs to.",
            "name": "WebhookProject",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "double"
                }
              }
            }
          },
          "type_:WebhookProjectPubkey": {
            "description": "Public project key the webhook belongs to.",
            "name": "WebhookProjectPubkey",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:WebhookCreated": {
            "description": "date-time when a webhook was created.",
            "name": "WebhookCreated",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          "type_:WebhookUpdated": {
            "description": "date-time when a webhook was updated.",
            "name": "WebhookUpdated",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "datetime"
                }
              }
            }
          },
          "type_:WebhookTarget": {
            "description": "A URL that is triggered by an event, for example, a file upload. A target URL MUST be unique for each `project` — `event type` combination.",
            "name": "WebhookTarget",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:WebhookEvent": {
            "description": "An event you subscribe to.",
            "name": "WebhookEvent",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "file.uploaded"
                },
                {
                  "value": "file.infected"
                },
                {
                  "value": "file.stored"
                },
                {
                  "value": "file.deleted"
                },
                {
                  "value": "file.info_updated"
                }
              ]
            }
          },
          "type_:WebhookIsActive": {
            "description": "Marks a subscription as either active or not, defaults to `true`, otherwise `false`.",
            "name": "WebhookIsActive",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "boolean"
                }
              }
            }
          },
          "type_:WebhookSigningSecret": {
            "description": "Optional [HMAC/SHA-256](https://en.wikipedia.org/wiki/HMAC) secret that, if set, will be used to\ncalculate signatures for the webhook payloads sent to the `target_url`.\n\nCalculated signature will be sent to the `target_url` as a value of the `X-Uc-Signature` HTTP\nheader. The header will have the following format: `X-Uc-Signature: v1=<HMAC-SHA256-HEX-DIGEST>`.\nSee [Secure Webhooks](https://uploadcare.com/docs/webhooks/#signed-webhooks) for details.",
            "name": "WebhookSigningSecret",
            "shape": {
              "type": "alias",
              "value": {
                "type": "primitive",
                "value": {
                  "type": "string"
                }
              }
            }
          },
          "type_:WebhookVersion": {
            "name": "WebhookVersion",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "0.7"
                }
              }
            }
          },
          "type_:WebhookVersionOfRequest": {
            "name": "WebhookVersionOfRequest",
            "shape": {
              "type": "alias",
              "value": {
                "type": "literal",
                "value": {
                  "type": "stringLiteral",
                  "value": "0.7"
                }
              }
            }
          },
          "type_:WebhookVersionOfListResponse": {
            "description": "Webhook payload's version.",
            "name": "WebhookVersionOfListResponse",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": ""
                },
                {
                  "value": "0.5"
                },
                {
                  "value": "0.6"
                },
                {
                  "value": "0.7"
                }
              ]
            }
          },
          "type_:Webhook": {
            "description": "Webhook.",
            "name": "Webhook",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookId"
                    }
                  }
                },
                {
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookProject"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookCreated"
                    }
                  }
                },
                {
                  "key": "updated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookUpdated"
                    }
                  }
                },
                {
                  "key": "event",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookEvent"
                    }
                  }
                },
                {
                  "key": "target_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookTarget"
                    }
                  }
                },
                {
                  "key": "is_active",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookIsActive"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookVersion"
                    }
                  }
                },
                {
                  "key": "signing_secret",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookSigningSecret"
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookOfListResponse": {
            "description": "Webhook.",
            "name": "WebhookOfListResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookId"
                    }
                  }
                },
                {
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookProject"
                    }
                  }
                },
                {
                  "key": "created",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookCreated"
                    }
                  }
                },
                {
                  "key": "updated",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookUpdated"
                    }
                  }
                },
                {
                  "key": "event",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookEvent"
                    }
                  }
                },
                {
                  "key": "target_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookTarget"
                    }
                  }
                },
                {
                  "key": "is_active",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookIsActive"
                    }
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookVersionOfListResponse"
                    }
                  }
                },
                {
                  "key": "signing_secret",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookSigningSecret"
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookInitiatorType": {
            "description": "Initiator type name.",
            "name": "WebhookInitiatorType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "api"
                },
                {
                  "value": "system"
                },
                {
                  "value": "addon"
                }
              ]
            }
          },
          "type_:WebhookInitiatorDetailAddonName": {
            "description": "Add-On name.",
            "name": "WebhookInitiatorDetailAddonName",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "aws_rekognition_detect_labels"
                },
                {
                  "value": "aws_rekognition_detect_moderation_labels"
                },
                {
                  "value": "uc_clamav_virus_scan"
                },
                {
                  "value": "remove_bg"
                },
                {
                  "value": "zamzar_convert_document"
                },
                {
                  "value": "zencoder_convert_video"
                }
              ]
            }
          },
          "type_:WebhookInitiatorDetail": {
            "name": "WebhookInitiatorDetail",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Request ID.",
                  "key": "request_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Add-On name.",
                  "key": "addon_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookInitiatorDetailAddonName"
                    }
                  }
                },
                {
                  "description": "Source file UUID if the current is derivative.",
                  "key": "source_file_uuid",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookInitiator": {
            "description": "Webhook event initiator.",
            "name": "WebhookInitiator",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Initiator type name.",
                  "key": "type",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookInitiatorType"
                  }
                },
                {
                  "key": "detail",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookInitiatorDetail"
                  }
                }
              ]
            }
          },
          "type_:WebhookPublicInfo": {
            "description": "Public Webhook information (does not include secret data like `signing_secret`)",
            "name": "WebhookPublicInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookId"
                  }
                },
                {
                  "key": "project",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookProject"
                    }
                  }
                },
                {
                  "key": "project_pub_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:WebhookProjectPubkey"
                    }
                  }
                },
                {
                  "key": "created_at",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookCreated"
                  }
                },
                {
                  "key": "updated_at",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookUpdated"
                  }
                },
                {
                  "key": "event",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookEvent"
                  }
                },
                {
                  "key": "target",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookTarget"
                  }
                },
                {
                  "key": "is_active",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookIsActive"
                  }
                },
                {
                  "key": "version",
                  "valueType": {
                    "type": "id",
                    "value": "type_:WebhookVersion"
                  }
                }
              ]
            }
          },
          "type_:CantUseDocsConversionError": {
            "name": "CantUseDocsConversionError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CantUseVideoConversionError": {
            "name": "CantUseVideoConversionError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:CantUseWebhooksError": {
            "name": "CantUseWebhooksError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:JsonObjectParseError": {
            "name": "JsonObjectParseError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Expected JSON object.",
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LocalCopyResponse": {
            "name": "LocalCopyResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:FileCopy"
                    }
                  }
                }
              ]
            }
          },
          "type_:ApplicationData": {
            "name": "ApplicationData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "An application version.",
                  "key": "version",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was updated.",
                  "key": "datetime_updated",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Dictionary with a result of an application execution result.",
                  "key": "data",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "unknown"
                    }
                  }
                }
              ]
            }
          },
          "type_:RemoveBgV10Data": {
            "description": "Dictionary with a result of an remove.bg information about an image.",
            "name": "RemoveBgV10Data",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "foreground classification type (present if type_level was set)",
                  "key": "foreground_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:RemoveBgV10": {
            "name": "RemoveBgV10",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "1.0"
                      }
                    }
                  }
                },
                {
                  "description": "Dictionary with a result of an remove.bg information about an image.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:RemoveBgV10Data"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was updated.",
                  "key": "datetime_updated",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox": {
            "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "Height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "Left",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "Top",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                },
                {
                  "key": "Width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem": {
            "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "BoundingBox",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItemBoundingBox"
                    }
                  }
                },
                {
                  "key": "Confidence",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem": {
            "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "Name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItem": {
            "name": "AwsRekognitionDetectLabelsV20160627DataLabelsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "Confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Instances",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemInstancesItem"
                    }
                  }
                },
                {
                  "key": "Name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "Parents",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItemParentsItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectLabelsV20160627Data": {
            "description": "Dictionary with a result of an aws rekognition detect labels execution result.",
            "name": "AwsRekognitionDetectLabelsV20160627Data",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "LabelModelVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "Labels",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectLabelsV20160627DataLabelsItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectLabelsV20160627": {
            "name": "AwsRekognitionDetectLabelsV20160627",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "2016-06-27"
                      }
                    }
                  }
                },
                {
                  "description": "Dictionary with a result of an aws rekognition detect labels execution result.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectLabelsV20160627Data"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was updated.",
                  "key": "datetime_updated",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem": {
            "name": "AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "Confidence",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "key": "Name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ParentName",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectModerationLabelsV20160627Data": {
            "description": "Dictionary with a result of an aws rekognition detect moderation labels execution result.",
            "name": "AwsRekognitionDetectModerationLabelsV20160627Data",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "ModerationModelVersion",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "ModerationLabels",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectModerationLabelsV20160627DataModerationLabelsItem"
                    }
                  }
                }
              ]
            }
          },
          "type_:AwsRekognitionDetectModerationLabelsV20160627": {
            "name": "AwsRekognitionDetectModerationLabelsV20160627",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "literal",
                      "value": {
                        "type": "stringLiteral",
                        "value": "2016-06-27"
                      }
                    }
                  }
                },
                {
                  "description": "Dictionary with a result of an aws rekognition detect moderation labels execution result.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectModerationLabelsV20160627Data"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was updated.",
                  "key": "datetime_updated",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:UcClamavVirusScanVersion": {
            "name": "UcClamavVirusScanVersion",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "0.104.2"
                },
                {
                  "value": "0.104.3"
                },
                {
                  "value": "0.105.0"
                },
                {
                  "value": "0.105.1"
                }
              ]
            }
          },
          "type_:UcClamavVirusScanData": {
            "description": "Dictionary with a result of ClamAV execution result.",
            "name": "UcClamavVirusScanData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "infected",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "key": "infected_with",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:UcClamavVirusScan": {
            "name": "UcClamavVirusScan",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:UcClamavVirusScanVersion"
                    }
                  }
                },
                {
                  "description": "Dictionary with a result of ClamAV execution result.",
                  "key": "data",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:UcClamavVirusScanData"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was created.",
                  "key": "datetime_created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "Date and time when an application data was updated.",
                  "key": "datetime_updated",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_:ApplicationDataObject": {
            "description": "Dictionary of application names and data associated with these applications.",
            "name": "ApplicationDataObject",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "aws_rekognition_detect_labels",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectLabelsV20160627"
                    }
                  }
                },
                {
                  "key": "aws_rekognition_detect_moderation_labels",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:AwsRekognitionDetectModerationLabelsV20160627"
                    }
                  }
                },
                {
                  "key": "remove_bg",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:RemoveBgV10"
                    }
                  }
                },
                {
                  "key": "uc_clamav_virus_scan",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:UcClamavVirusScan"
                    }
                  }
                }
              ]
            }
          },
          "type_:SimpleAuthHttpForbidden": {
            "name": "SimpleAuthHttpForbidden",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:WebhookTargetUrlError": {
            "name": "WebhookTargetUrlError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "`target_url` is missing.",
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_file": {
            "subpackageId": "subpackage_file",
            "name": "File",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "files-list",
                "migratedFromUrlSlugs": ["list-of-files"],
                "method": "GET",
                "id": "filesList",
                "name": "List of files",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "`true` to only include removed files in the response, `false` to include existing files. Defaults to `false`.",
                    "key": "removed",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "`true` to only include files that were stored, `false` to include temporary ones. The default is unset: both stored and not stored files are returned.",
                    "key": "stored",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "A preferred amount of files in a list for a single response. Defaults to 100, while the maximum is 1000.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the way files are sorted in a returned list. `datetime_uploaded` for ascending order, `-datetime_uploaded` for descending order.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_file:FilesListRequestOrdering"
                      }
                    }
                  },
                  {
                    "description": "A starting point for filtering the files. If provided, the value MUST adhere to the ISO 8601 Extended Date/Time Format (`YYYY-MM-DDTHH:MM:SSZ`).",
                    "key": "from",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Include additional fields to the file object, such as: appdata.",
                    "key": "include",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_file:FilesListResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files",
                    "pathParameters": {},
                    "queryParameters": {
                      "removed": true,
                      "stored": true,
                      "limit": 100,
                      "from": "2015-09-10T10:00:00Z"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "next": "https://api.uploadcare.com/files/?from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&limit=3&offset=0",
                      "previous": "https://api.uploadcare.com/files/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                      "total": 26,
                      "totals": {
                        "removed": 0,
                        "stored": 25,
                        "unstored": 1
                      },
                      "per_page": 100,
                      "results": [
                        {
                          "datetime_removed": "2024-01-15T09:30:00Z",
                          "datetime_stored": "2018-11-26T12:49:10Z",
                          "datetime_uploaded": "2018-11-26T12:49:09Z",
                          "is_image": true,
                          "is_ready": true,
                          "mime_type": "image/jpeg",
                          "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                          "original_filename": "pineapple.jpg",
                          "size": 642,
                          "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                          "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                          "appdata": {
                            "aws_rekognition_detect_labels": {
                              "version": "2016-06-27",
                              "datetime_created": "2021-09-21T11:25:31Z",
                              "datetime_updated": "2021-09-21T11:27:33Z",
                              "data": {
                                "LabelModelVersion": "2.0",
                                "Labels": [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Instances": [{}],
                                    "Name": "Home Decor",
                                    "Parents": [{}]
                                  },
                                  {
                                    "Confidence": 70.75951385498047,
                                    "Instances": [{}],
                                    "Name": "Linen",
                                    "Parents": [
                                      {
                                        "Name": "Home Decor"
                                      }
                                    ]
                                  },
                                  {
                                    "Confidence": 64.7123794555664,
                                    "Instances": [{}],
                                    "Name": "Sunlight",
                                    "Parents": [{}]
                                  },
                                  {
                                    "Confidence": 56.264793395996094,
                                    "Instances": [{}],
                                    "Name": "Flare",
                                    "Parents": [
                                      {
                                        "Name": "Light"
                                      }
                                    ]
                                  },
                                  {
                                    "Confidence": 50.47153854370117,
                                    "Instances": [{}],
                                    "Name": "Tree",
                                    "Parents": [
                                      {
                                        "Name": "Plant"
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "aws_rekognition_detect_moderation_labels": {
                              "version": "2016-06-27",
                              "datetime_created": "2023-02-21T11:25:31Z",
                              "datetime_updated": "2023-02-21T11:27:33Z",
                              "data": {
                                "ModerationModelVersion": "6.0",
                                "ModerationLabels": [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Name": "Weapons",
                                    "ParentName": "Violence"
                                  }
                                ]
                              }
                            },
                            "remove_bg": {
                              "version": "1.0",
                              "datetime_created": "2021-07-25T12:24:33Z",
                              "datetime_updated": "2021-07-25T12:24:33Z",
                              "data": {
                                "foreground_type": "person"
                              }
                            },
                            "uc_clamav_virus_scan": {
                              "version": "0.104.2",
                              "datetime_created": "2021-09-21T11:24:33Z",
                              "datetime_updated": "2021-09-21T11:24:33Z",
                              "data": {
                                "infected": true,
                                "infected_with": "Win.Test.EICAR_HDB-1"
                              }
                            }
                          },
                          "content_info": {
                            "mime": {
                              "mime": "image/jpeg",
                              "type": "image",
                              "subtype": "jpeg"
                            },
                            "image": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "sequence": false,
                              "height": 500,
                              "width": 500,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T12:59:50Z",
                              "dpi": [72, 72]
                            },
                            "video": {
                              "duration": 261827,
                              "format": "mp4",
                              "bitrate": 393,
                              "audio": [
                                {
                                  "bitrate": 78,
                                  "codec": "aac",
                                  "sample_rate": 44100,
                                  "channels": 2
                                }
                              ],
                              "video": [
                                {
                                  "height": 360,
                                  "width": 640,
                                  "frame_rate": 30,
                                  "bitrate": 315,
                                  "codec": "h264"
                                }
                              ]
                            }
                          },
                          "metadata": {
                            "subsystem": "uploader",
                            "pet": "cat"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "next": "https://api.uploadcare.com/files/?from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&limit=3&offset=0",
                        "previous": "https://api.uploadcare.com/files/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                        "total": 26,
                        "totals": {
                          "removed": 0,
                          "stored": 25,
                          "unstored": 1
                        },
                        "per_page": 100,
                        "results": [
                          {
                            "datetime_removed": "2024-01-15T09:30:00Z",
                            "datetime_stored": "2018-11-26T12:49:10Z",
                            "datetime_uploaded": "2018-11-26T12:49:09Z",
                            "is_image": true,
                            "is_ready": true,
                            "mime_type": "image/jpeg",
                            "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                            "original_filename": "pineapple.jpg",
                            "size": 642,
                            "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                            "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                            "appdata": {
                              "aws_rekognition_detect_labels": {
                                "version": "2016-06-27",
                                "datetime_created": "2021-09-21T11:25:31Z",
                                "datetime_updated": "2021-09-21T11:27:33Z",
                                "data": {
                                  "LabelModelVersion": "2.0",
                                  "Labels": [
                                    {
                                      "Confidence": 93.41645812988281,
                                      "Instances": [{}],
                                      "Name": "Home Decor",
                                      "Parents": [{}]
                                    },
                                    {
                                      "Confidence": 70.75951385498047,
                                      "Instances": [{}],
                                      "Name": "Linen",
                                      "Parents": [
                                        {
                                          "Name": "Home Decor"
                                        }
                                      ]
                                    },
                                    {
                                      "Confidence": 64.7123794555664,
                                      "Instances": [{}],
                                      "Name": "Sunlight",
                                      "Parents": [{}]
                                    },
                                    {
                                      "Confidence": 56.264793395996094,
                                      "Instances": [{}],
                                      "Name": "Flare",
                                      "Parents": [
                                        {
                                          "Name": "Light"
                                        }
                                      ]
                                    },
                                    {
                                      "Confidence": 50.47153854370117,
                                      "Instances": [{}],
                                      "Name": "Tree",
                                      "Parents": [
                                        {
                                          "Name": "Plant"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "aws_rekognition_detect_moderation_labels": {
                                "version": "2016-06-27",
                                "datetime_created": "2023-02-21T11:25:31Z",
                                "datetime_updated": "2023-02-21T11:27:33Z",
                                "data": {
                                  "ModerationModelVersion": "6.0",
                                  "ModerationLabels": [
                                    {
                                      "Confidence": 93.41645812988281,
                                      "Name": "Weapons",
                                      "ParentName": "Violence"
                                    }
                                  ]
                                }
                              },
                              "remove_bg": {
                                "version": "1.0",
                                "datetime_created": "2021-07-25T12:24:33Z",
                                "datetime_updated": "2021-07-25T12:24:33Z",
                                "data": {
                                  "foreground_type": "person"
                                }
                              },
                              "uc_clamav_virus_scan": {
                                "version": "0.104.2",
                                "datetime_created": "2021-09-21T11:24:33Z",
                                "datetime_updated": "2021-09-21T11:24:33Z",
                                "data": {
                                  "infected": true,
                                  "infected_with": "Win.Test.EICAR_HDB-1"
                                }
                              }
                            },
                            "content_info": {
                              "mime": {
                                "mime": "image/jpeg",
                                "type": "image",
                                "subtype": "jpeg"
                              },
                              "image": {
                                "color_mode": "RGB",
                                "orientation": 6,
                                "format": "JPEG",
                                "sequence": false,
                                "height": 500,
                                "width": 500,
                                "geo_location": {
                                  "latitude": 55.62013611111111,
                                  "longitude": 37.66299166666666
                                },
                                "datetime_original": "2018-08-20T12:59:50Z",
                                "dpi": [72, 72]
                              },
                              "video": {
                                "duration": 261827,
                                "format": "mp4",
                                "bitrate": 393,
                                "audio": [
                                  {
                                    "bitrate": 78,
                                    "codec": "aac",
                                    "sample_rate": 44100,
                                    "channels": 2
                                  }
                                ],
                                "video": [
                                  {
                                    "height": 360,
                                    "width": 640,
                                    "frame_rate": 30,
                                    "bitrate": 315,
                                    "codec": "h264"
                                  }
                                ]
                              }
                            },
                            "metadata": {
                              "subsystem": "uploader",
                              "pet": "cat"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  listOfFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfFiles(\n  {},\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$list = $api->listFiles();\nforeach ($list->getResults() as $result) {\n    echo \\sprintf('URL: %s', $result->getUrl());\n}\nwhile (($next = $api->nextPage($list)) !== null) {\n    foreach ($next->getResults() as $result) {\n        echo \\sprintf('URL: %s', $result->getUrl());\n    }\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = uploadcare.list_files(stored=True, limit=10)\nfor file in files:\n    print(file.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nlist = Uploadcare::FileList.file_list(stored: true, removed: false, limit: 100)\nlist.each { |file| puts file.inspect }\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet query = PaginationQuery()\n  .stored(true)\n  .ordering(.dateTimeUploadedDESC)\n  .limit(10)\nvar list = uploadcare.listOfFiles()\n\ntry await list.get(withQuery: query)\nprint(list)\n\n// Next page\nif list.next != nil {\n  try await list.nextPage()\n  print(list)\n}\n\n// Previous page\nif list.previous != nil {\n  try await filesList.previousPage()\n  print(list)\n}\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval filesQueryBuilder = uploadcare.getFiles()\nval files = filesQueryBuilder\n    .stored(true)\n    .ordering(Order.UPLOAD_TIME_DESC)\n    .asList()\nLog.d(\"TAG\", files.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files",
                    "pathParameters": {},
                    "queryParameters": {
                      "removed": true,
                      "stored": true
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files",
                    "pathParameters": {},
                    "queryParameters": {
                      "removed": true,
                      "stored": true
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files",
                    "pathParameters": {},
                    "queryParameters": {
                      "removed": true,
                      "stored": true
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Getting a paginated list of files. If you need multiple results pages, use `previous`/`next` from the response to navigate back/forth.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "store-file",
                "method": "PUT",
                "id": "storeFile",
                "name": "Store file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/storage"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/storage",
                    "pathParameters": {
                      "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "datetime_removed": "2024-01-15T09:30:00Z",
                      "datetime_stored": "2018-11-26T12:49:10Z",
                      "datetime_uploaded": "2018-11-26T12:49:09Z",
                      "is_image": true,
                      "is_ready": true,
                      "mime_type": "image/jpeg",
                      "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                      "original_filename": "pineapple.jpg",
                      "size": 642,
                      "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                      "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                      "appdata": {
                        "aws_rekognition_detect_labels": {
                          "version": "2016-06-27",
                          "datetime_created": "2021-09-21T11:25:31Z",
                          "datetime_updated": "2021-09-21T11:27:33Z",
                          "data": {
                            "LabelModelVersion": "2.0",
                            "Labels": [
                              {
                                "Confidence": 93.41645812988281,
                                "Instances": [{}],
                                "Name": "Home Decor",
                                "Parents": [{}]
                              },
                              {
                                "Confidence": 70.75951385498047,
                                "Instances": [{}],
                                "Name": "Linen",
                                "Parents": [
                                  {
                                    "Name": "Home Decor"
                                  }
                                ]
                              },
                              {
                                "Confidence": 64.7123794555664,
                                "Instances": [{}],
                                "Name": "Sunlight",
                                "Parents": [{}]
                              },
                              {
                                "Confidence": 56.264793395996094,
                                "Instances": [{}],
                                "Name": "Flare",
                                "Parents": [
                                  {
                                    "Name": "Light"
                                  }
                                ]
                              },
                              {
                                "Confidence": 50.47153854370117,
                                "Instances": [{}],
                                "Name": "Tree",
                                "Parents": [
                                  {
                                    "Name": "Plant"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "aws_rekognition_detect_moderation_labels": {
                          "version": "2016-06-27",
                          "datetime_created": "2023-02-21T11:25:31Z",
                          "datetime_updated": "2023-02-21T11:27:33Z",
                          "data": {
                            "ModerationModelVersion": "6.0",
                            "ModerationLabels": [
                              {
                                "Confidence": 93.41645812988281,
                                "Name": "Weapons",
                                "ParentName": "Violence"
                              }
                            ]
                          }
                        },
                        "remove_bg": {
                          "version": "1.0",
                          "datetime_created": "2021-07-25T12:24:33Z",
                          "datetime_updated": "2021-07-25T12:24:33Z",
                          "data": {
                            "foreground_type": "person"
                          }
                        },
                        "uc_clamav_virus_scan": {
                          "version": "0.104.2",
                          "datetime_created": "2021-09-21T11:24:33Z",
                          "datetime_updated": "2021-09-21T11:24:33Z",
                          "data": {
                            "infected": true,
                            "infected_with": "Win.Test.EICAR_HDB-1"
                          }
                        }
                      },
                      "variations": {
                        "variations": {
                          "key": "value"
                        }
                      },
                      "content_info": {
                        "mime": {
                          "mime": "image/jpeg",
                          "type": "image",
                          "subtype": "jpeg"
                        },
                        "image": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 500,
                          "width": 500,
                          "geo_location": {
                            "latitude": 55.62013611111111,
                            "longitude": 37.66299166666666
                          },
                          "datetime_original": "2018-08-20T12:59:50Z",
                          "dpi": [72, 72]
                        },
                        "video": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": [
                            {
                              "bitrate": 78,
                              "codec": "aac",
                              "sample_rate": 44100,
                              "channels": 2
                            }
                          ],
                          "video": [
                            {
                              "height": 360,
                              "width": 640,
                              "frame_rate": 30,
                              "bitrate": 315,
                              "codec": "h264"
                            }
                          ]
                        }
                      },
                      "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "datetime_removed": "2024-01-15T09:30:00Z",
                        "datetime_stored": "2018-11-26T12:49:10Z",
                        "datetime_uploaded": "2018-11-26T12:49:09Z",
                        "is_image": true,
                        "is_ready": true,
                        "mime_type": "image/jpeg",
                        "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                        "original_filename": "pineapple.jpg",
                        "size": 642,
                        "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                        "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                        "appdata": {
                          "aws_rekognition_detect_labels": {
                            "version": "2016-06-27",
                            "datetime_created": "2021-09-21T11:25:31Z",
                            "datetime_updated": "2021-09-21T11:27:33Z",
                            "data": {
                              "LabelModelVersion": "2.0",
                              "Labels": [
                                {
                                  "Confidence": 93.41645812988281,
                                  "Instances": [{}],
                                  "Name": "Home Decor",
                                  "Parents": [{}]
                                },
                                {
                                  "Confidence": 70.75951385498047,
                                  "Instances": [{}],
                                  "Name": "Linen",
                                  "Parents": [
                                    {
                                      "Name": "Home Decor"
                                    }
                                  ]
                                },
                                {
                                  "Confidence": 64.7123794555664,
                                  "Instances": [{}],
                                  "Name": "Sunlight",
                                  "Parents": [{}]
                                },
                                {
                                  "Confidence": 56.264793395996094,
                                  "Instances": [{}],
                                  "Name": "Flare",
                                  "Parents": [
                                    {
                                      "Name": "Light"
                                    }
                                  ]
                                },
                                {
                                  "Confidence": 50.47153854370117,
                                  "Instances": [{}],
                                  "Name": "Tree",
                                  "Parents": [
                                    {
                                      "Name": "Plant"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "aws_rekognition_detect_moderation_labels": {
                            "version": "2016-06-27",
                            "datetime_created": "2023-02-21T11:25:31Z",
                            "datetime_updated": "2023-02-21T11:27:33Z",
                            "data": {
                              "ModerationModelVersion": "6.0",
                              "ModerationLabels": [
                                {
                                  "Confidence": 93.41645812988281,
                                  "Name": "Weapons",
                                  "ParentName": "Violence"
                                }
                              ]
                            }
                          },
                          "remove_bg": {
                            "version": "1.0",
                            "datetime_created": "2021-07-25T12:24:33Z",
                            "datetime_updated": "2021-07-25T12:24:33Z",
                            "data": {
                              "foreground_type": "person"
                            }
                          },
                          "uc_clamav_virus_scan": {
                            "version": "0.104.2",
                            "datetime_created": "2021-09-21T11:24:33Z",
                            "datetime_updated": "2021-09-21T11:24:33Z",
                            "data": {
                              "infected": true,
                              "infected_with": "Win.Test.EICAR_HDB-1"
                            }
                          }
                        },
                        "variations": {
                          "variations": {
                            "key": "value"
                          }
                        },
                        "content_info": {
                          "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                          },
                          "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "sequence": false,
                            "height": 500,
                            "width": 500,
                            "geo_location": {
                              "latitude": 55.62013611111111,
                              "longitude": 37.66299166666666
                            },
                            "datetime_original": "2018-08-20T12:59:50Z",
                            "dpi": [72, 72]
                          },
                          "video": {
                            "duration": 261827,
                            "format": "mp4",
                            "bitrate": 393,
                            "audio": [
                              {
                                "bitrate": 78,
                                "codec": "aac",
                                "sample_rate": 44100,
                                "channels": 2
                              }
                            ],
                            "video": [
                              {
                                "height": 360,
                                "width": 640,
                                "frame_rate": 30,
                                "bitrate": 315,
                                "codec": "h264"
                              }
                            ]
                          }
                        },
                        "metadata": {
                          "subsystem": "uploader",
                          "pet": "cat"
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  storeFile,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await storeFile(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->storeFile('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('File %s is stored at %s', $result->getUuid(), $result->getDatetimeStored()->format(\\DateTimeInterface::ATOM));\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nfile.store()\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nUploadcare::File.store(uuid)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.storeFile(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.saveFile(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Store a single file by UUID. When file is stored, it is available permanently. If not stored — it will only be available for 24 hours. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-file-storage",
                "migratedFromUrlSlugs": ["delete-file"],
                "method": "DELETE",
                "id": "deleteFileStorage",
                "name": "Delete file",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/storage"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/storage",
                    "pathParameters": {
                      "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "datetime_removed": "2024-01-15T09:30:00Z",
                      "datetime_stored": "2024-01-15T09:30:00Z",
                      "datetime_uploaded": "2024-01-15T09:30:00Z",
                      "is_image": true,
                      "is_ready": true,
                      "mime_type": "image/jpeg",
                      "original_file_url": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                      "original_filename": "EU_4.jpg",
                      "size": 145212,
                      "url": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                      "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                      "appdata": {
                        "aws_rekognition_detect_labels": {
                          "version": "2016-06-27",
                          "datetime_created": "2024-01-15T09:30:00Z",
                          "datetime_updated": "2024-01-15T09:30:00Z",
                          "data": {
                            "LabelModelVersion": "LabelModelVersion",
                            "Labels": [
                              {
                                "Confidence": 1.1,
                                "Instances": [{}],
                                "Name": "Name",
                                "Parents": [{}]
                              }
                            ]
                          }
                        },
                        "aws_rekognition_detect_moderation_labels": {
                          "version": "2016-06-27",
                          "datetime_created": "2024-01-15T09:30:00Z",
                          "datetime_updated": "2024-01-15T09:30:00Z",
                          "data": {
                            "ModerationModelVersion": "ModerationModelVersion",
                            "ModerationLabels": [
                              {
                                "Confidence": 1.1,
                                "Name": "Name",
                                "ParentName": "ParentName"
                              }
                            ]
                          }
                        },
                        "uc_clamav_virus_scan": {
                          "version": "0.104.2",
                          "datetime_created": "2024-01-15T09:30:00Z",
                          "datetime_updated": "2024-01-15T09:30:00Z",
                          "data": {
                            "infected": true
                          }
                        }
                      },
                      "variations": {
                        "variations": {
                          "key": "value"
                        }
                      },
                      "content_info": {
                        "mime": {
                          "mime": "image/jpeg",
                          "type": "image",
                          "subtype": "jpeg"
                        },
                        "image": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 2352,
                          "width": 2935,
                          "geo_location": {
                            "latitude": -1.1884555555555556,
                            "longitude": 52.66996666666667
                          },
                          "datetime_original": "2018-09-13T20:23:40Z",
                          "dpi": [72]
                        },
                        "video": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": [
                            {
                              "bitrate": 78,
                              "codec": "aac",
                              "sample_rate": 44100,
                              "channels": 2
                            }
                          ],
                          "video": [
                            {
                              "height": 360,
                              "width": 640,
                              "frame_rate": 30,
                              "bitrate": 315,
                              "codec": "h264"
                            }
                          ]
                        }
                      },
                      "metadata": {
                        "metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "datetime_removed": "2024-01-15T09:30:00Z",
                        "datetime_stored": "2024-01-15T09:30:00Z",
                        "datetime_uploaded": "2024-01-15T09:30:00Z",
                        "is_image": true,
                        "is_ready": true,
                        "mime_type": "image/jpeg",
                        "original_file_url": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                        "original_filename": "EU_4.jpg",
                        "size": 145212,
                        "url": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                        "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                        "appdata": {
                          "aws_rekognition_detect_labels": {
                            "version": "2016-06-27",
                            "datetime_created": "2024-01-15T09:30:00Z",
                            "datetime_updated": "2024-01-15T09:30:00Z",
                            "data": {
                              "LabelModelVersion": "LabelModelVersion",
                              "Labels": [
                                {
                                  "Confidence": 1.1,
                                  "Instances": [{}],
                                  "Name": "Name",
                                  "Parents": [{}]
                                }
                              ]
                            }
                          },
                          "aws_rekognition_detect_moderation_labels": {
                            "version": "2016-06-27",
                            "datetime_created": "2024-01-15T09:30:00Z",
                            "datetime_updated": "2024-01-15T09:30:00Z",
                            "data": {
                              "ModerationModelVersion": "ModerationModelVersion",
                              "ModerationLabels": [
                                {
                                  "Confidence": 1.1,
                                  "Name": "Name",
                                  "ParentName": "ParentName"
                                }
                              ]
                            }
                          },
                          "uc_clamav_virus_scan": {
                            "version": "0.104.2",
                            "datetime_created": "2024-01-15T09:30:00Z",
                            "datetime_updated": "2024-01-15T09:30:00Z",
                            "data": {
                              "infected": true
                            }
                          }
                        },
                        "variations": {
                          "variations": {
                            "key": "value"
                          }
                        },
                        "content_info": {
                          "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                          },
                          "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "sequence": false,
                            "height": 2352,
                            "width": 2935,
                            "geo_location": {
                              "latitude": -1.1884555555555556,
                              "longitude": 52.66996666666667
                            },
                            "datetime_original": "2018-09-13T20:23:40Z",
                            "dpi": [72]
                          },
                          "video": {
                            "duration": 261827,
                            "format": "mp4",
                            "bitrate": 393,
                            "audio": [
                              {
                                "bitrate": 78,
                                "codec": "aac",
                                "sample_rate": 44100,
                                "channels": 2
                              }
                            ],
                            "video": [
                              {
                                "height": 360,
                                "width": 640,
                                "frame_rate": 30,
                                "bitrate": 315,
                                "codec": "h264"
                              }
                            ]
                          }
                        },
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  deleteFile,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteFile(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$fileInfo = (new Uploadcare\\Api($configuration))->file()->deleteFile('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('File \\'%s\\' deleted at \\'%s\\'', $fileInfo->getUuid(), $fileInfo->getDatetimeRemoved()->format(\\DateTimeInterface::ATOM));\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nfile.delete()\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::File.delete('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.deleteFile(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteFile(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/storage",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Removes individual files. Returns file info.\n\nNote: this operation removes the file from storage but doesn't invalidate CDN cache.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "info",
                "migratedFromUrlSlugs": ["file-info"],
                "method": "GET",
                "id": "info",
                "name": "File info",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Include additional fields to the file object, such as: appdata.",
                    "key": "include",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:File"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                    "pathParameters": {
                      "uuid": "03ccf9ab-f266-43fb-973d-a6529c55c2ae"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "datetime_removed": "2024-01-15T09:30:00Z",
                      "datetime_stored": "2024-01-15T09:30:00Z",
                      "datetime_uploaded": "2024-01-15T09:30:00Z",
                      "is_image": true,
                      "is_ready": true,
                      "mime_type": "image/jpeg",
                      "original_file_url": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                      "original_filename": "EU_4.jpg",
                      "size": 145212,
                      "url": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                      "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                      "appdata": {
                        "aws_rekognition_detect_labels": {
                          "version": "2016-06-27",
                          "datetime_created": "2024-01-15T09:30:00Z",
                          "datetime_updated": "2024-01-15T09:30:00Z",
                          "data": {
                            "LabelModelVersion": "LabelModelVersion",
                            "Labels": [
                              {
                                "Confidence": 1.1,
                                "Instances": [{}],
                                "Name": "Name",
                                "Parents": [{}]
                              }
                            ]
                          }
                        },
                        "aws_rekognition_detect_moderation_labels": {
                          "version": "2016-06-27",
                          "datetime_created": "2024-01-15T09:30:00Z",
                          "datetime_updated": "2024-01-15T09:30:00Z",
                          "data": {
                            "ModerationModelVersion": "ModerationModelVersion",
                            "ModerationLabels": [
                              {
                                "Confidence": 1.1,
                                "Name": "Name",
                                "ParentName": "ParentName"
                              }
                            ]
                          }
                        },
                        "uc_clamav_virus_scan": {
                          "version": "0.104.2",
                          "datetime_created": "2024-01-15T09:30:00Z",
                          "datetime_updated": "2024-01-15T09:30:00Z",
                          "data": {
                            "infected": true
                          }
                        }
                      },
                      "variations": {
                        "variations": {
                          "key": "value"
                        }
                      },
                      "content_info": {
                        "mime": {
                          "mime": "image/jpeg",
                          "type": "image",
                          "subtype": "jpeg"
                        },
                        "image": {
                          "color_mode": "RGB",
                          "orientation": 6,
                          "format": "JPEG",
                          "sequence": false,
                          "height": 2352,
                          "width": 2935,
                          "geo_location": {
                            "latitude": -1.1884555555555556,
                            "longitude": 52.66996666666667
                          },
                          "datetime_original": "2018-09-13T20:23:40Z",
                          "dpi": [72]
                        },
                        "video": {
                          "duration": 261827,
                          "format": "mp4",
                          "bitrate": 393,
                          "audio": [
                            {
                              "bitrate": 78,
                              "codec": "aac",
                              "sample_rate": 44100,
                              "channels": 2
                            }
                          ],
                          "video": [
                            {
                              "height": 360,
                              "width": 640,
                              "frame_rate": 30,
                              "bitrate": 315,
                              "codec": "h264"
                            }
                          ]
                        }
                      },
                      "metadata": {
                        "metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "datetime_removed": "2024-01-15T09:30:00Z",
                        "datetime_stored": "2024-01-15T09:30:00Z",
                        "datetime_uploaded": "2024-01-15T09:30:00Z",
                        "is_image": true,
                        "is_ready": true,
                        "mime_type": "image/jpeg",
                        "original_file_url": "https://ucarecdn.com/e575ed4e8-f4e8-4c14-a58b-1527b6d9ee46/EU_4.jpg",
                        "original_filename": "EU_4.jpg",
                        "size": 145212,
                        "url": "https://api.uploadcare.com/files/e10ce759-42c3-4185-bae5-e22a9143d68f/",
                        "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                        "appdata": {
                          "aws_rekognition_detect_labels": {
                            "version": "2016-06-27",
                            "datetime_created": "2024-01-15T09:30:00Z",
                            "datetime_updated": "2024-01-15T09:30:00Z",
                            "data": {
                              "LabelModelVersion": "LabelModelVersion",
                              "Labels": [
                                {
                                  "Confidence": 1.1,
                                  "Instances": [{}],
                                  "Name": "Name",
                                  "Parents": [{}]
                                }
                              ]
                            }
                          },
                          "aws_rekognition_detect_moderation_labels": {
                            "version": "2016-06-27",
                            "datetime_created": "2024-01-15T09:30:00Z",
                            "datetime_updated": "2024-01-15T09:30:00Z",
                            "data": {
                              "ModerationModelVersion": "ModerationModelVersion",
                              "ModerationLabels": [
                                {
                                  "Confidence": 1.1,
                                  "Name": "Name",
                                  "ParentName": "ParentName"
                                }
                              ]
                            }
                          },
                          "uc_clamav_virus_scan": {
                            "version": "0.104.2",
                            "datetime_created": "2024-01-15T09:30:00Z",
                            "datetime_updated": "2024-01-15T09:30:00Z",
                            "data": {
                              "infected": true
                            }
                          }
                        },
                        "variations": {
                          "variations": {
                            "key": "value"
                          }
                        },
                        "content_info": {
                          "mime": {
                            "mime": "image/jpeg",
                            "type": "image",
                            "subtype": "jpeg"
                          },
                          "image": {
                            "color_mode": "RGB",
                            "orientation": 6,
                            "format": "JPEG",
                            "sequence": false,
                            "height": 2352,
                            "width": 2935,
                            "geo_location": {
                              "latitude": -1.1884555555555556,
                              "longitude": 52.66996666666667
                            },
                            "datetime_original": "2018-09-13T20:23:40Z",
                            "dpi": [72]
                          },
                          "video": {
                            "duration": 261827,
                            "format": "mp4",
                            "bitrate": 393,
                            "audio": [
                              {
                                "bitrate": 78,
                                "codec": "aac",
                                "sample_rate": 44100,
                                "channels": 2
                              }
                            ],
                            "video": [
                              {
                                "height": 360,
                                "width": 640,
                                "frame_rate": 30,
                                "bitrate": 315,
                                "codec": "h264"
                              }
                            ]
                          }
                        },
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  fileInfo,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await fileInfo(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('URL: %s, ID: %s, Mime type: %s', $fileInfo->getUrl(), $fileInfo->getUuid(), $fileInfo->getMimeType());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(file.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nputs Uploadcare::File.info(uuid).inspect\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet fileInfoQuery = FileInfoQuery().include(.appdata)\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", withQuery: fileInfoQuery)\nprint(file)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval file = uploadcare.getFile(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", file.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {
                      "include": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {
                      "include": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {
                      "include": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {
                      "include": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get file information by its UUID (immutable).",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "files-storing",
                "migratedFromUrlSlugs": ["batch-file-storing"],
                "method": "PUT",
                "id": "filesStoring",
                "name": "Batch file storing",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/storage"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_file:FilesStoringResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": ["string"],
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "ok",
                      "problems": {
                        "problems": {
                          "key": "value"
                        }
                      },
                      "result": [
                        {
                          "datetime_removed": "2024-01-15T09:30:00Z",
                          "datetime_stored": "2018-11-26T12:49:10Z",
                          "datetime_uploaded": "2018-11-26T12:49:09Z",
                          "is_image": true,
                          "is_ready": true,
                          "mime_type": "image/jpeg",
                          "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                          "original_filename": "pineapple.jpg",
                          "size": 642,
                          "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                          "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                          "appdata": {
                            "aws_rekognition_detect_labels": {
                              "version": "2016-06-27",
                              "datetime_created": "2021-09-21T11:25:31Z",
                              "datetime_updated": "2021-09-21T11:27:33Z",
                              "data": {
                                "LabelModelVersion": "2.0",
                                "Labels": [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Instances": [{}],
                                    "Name": "Home Decor",
                                    "Parents": [{}]
                                  },
                                  {
                                    "Confidence": 70.75951385498047,
                                    "Instances": [{}],
                                    "Name": "Linen",
                                    "Parents": [
                                      {
                                        "Name": "Home Decor"
                                      }
                                    ]
                                  },
                                  {
                                    "Confidence": 64.7123794555664,
                                    "Instances": [{}],
                                    "Name": "Sunlight",
                                    "Parents": [{}]
                                  },
                                  {
                                    "Confidence": 56.264793395996094,
                                    "Instances": [{}],
                                    "Name": "Flare",
                                    "Parents": [
                                      {
                                        "Name": "Light"
                                      }
                                    ]
                                  },
                                  {
                                    "Confidence": 50.47153854370117,
                                    "Instances": [{}],
                                    "Name": "Tree",
                                    "Parents": [
                                      {
                                        "Name": "Plant"
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "aws_rekognition_detect_moderation_labels": {
                              "version": "2016-06-27",
                              "datetime_created": "2023-02-21T11:25:31Z",
                              "datetime_updated": "2023-02-21T11:27:33Z",
                              "data": {
                                "ModerationModelVersion": "6.0",
                                "ModerationLabels": [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Name": "Weapons",
                                    "ParentName": "Violence"
                                  }
                                ]
                              }
                            },
                            "remove_bg": {
                              "version": "1.0",
                              "datetime_created": "2021-07-25T12:24:33Z",
                              "datetime_updated": "2021-07-25T12:24:33Z",
                              "data": {
                                "foreground_type": "person"
                              }
                            },
                            "uc_clamav_virus_scan": {
                              "version": "0.104.2",
                              "datetime_created": "2021-09-21T11:24:33Z",
                              "datetime_updated": "2021-09-21T11:24:33Z",
                              "data": {
                                "infected": true,
                                "infected_with": "Win.Test.EICAR_HDB-1"
                              }
                            }
                          },
                          "content_info": {
                            "mime": {
                              "mime": "image/jpeg",
                              "type": "image",
                              "subtype": "jpeg"
                            },
                            "image": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "sequence": false,
                              "height": 500,
                              "width": 500,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T12:59:50Z",
                              "dpi": [72, 72]
                            },
                            "video": {
                              "duration": 261827,
                              "format": "mp4",
                              "bitrate": 393,
                              "audio": [
                                {
                                  "bitrate": 78,
                                  "codec": "aac",
                                  "sample_rate": 44100,
                                  "channels": 2
                                }
                              ],
                              "video": [
                                {
                                  "height": 360,
                                  "width": 640,
                                  "frame_rate": 30,
                                  "bitrate": 315,
                                  "codec": "h264"
                                }
                              ]
                            }
                          },
                          "metadata": {
                            "subsystem": "uploader",
                            "pet": "cat"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "ok",
                        "problems": {
                          "problems": {
                            "key": "value"
                          }
                        },
                        "result": [
                          {
                            "datetime_removed": "2024-01-15T09:30:00Z",
                            "datetime_stored": "2018-11-26T12:49:10Z",
                            "datetime_uploaded": "2018-11-26T12:49:09Z",
                            "is_image": true,
                            "is_ready": true,
                            "mime_type": "image/jpeg",
                            "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                            "original_filename": "pineapple.jpg",
                            "size": 642,
                            "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                            "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                            "appdata": {
                              "aws_rekognition_detect_labels": {
                                "version": "2016-06-27",
                                "datetime_created": "2021-09-21T11:25:31Z",
                                "datetime_updated": "2021-09-21T11:27:33Z",
                                "data": {
                                  "LabelModelVersion": "2.0",
                                  "Labels": [
                                    {
                                      "Confidence": 93.41645812988281,
                                      "Instances": [{}],
                                      "Name": "Home Decor",
                                      "Parents": [{}]
                                    },
                                    {
                                      "Confidence": 70.75951385498047,
                                      "Instances": [{}],
                                      "Name": "Linen",
                                      "Parents": [
                                        {
                                          "Name": "Home Decor"
                                        }
                                      ]
                                    },
                                    {
                                      "Confidence": 64.7123794555664,
                                      "Instances": [{}],
                                      "Name": "Sunlight",
                                      "Parents": [{}]
                                    },
                                    {
                                      "Confidence": 56.264793395996094,
                                      "Instances": [{}],
                                      "Name": "Flare",
                                      "Parents": [
                                        {
                                          "Name": "Light"
                                        }
                                      ]
                                    },
                                    {
                                      "Confidence": 50.47153854370117,
                                      "Instances": [{}],
                                      "Name": "Tree",
                                      "Parents": [
                                        {
                                          "Name": "Plant"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "aws_rekognition_detect_moderation_labels": {
                                "version": "2016-06-27",
                                "datetime_created": "2023-02-21T11:25:31Z",
                                "datetime_updated": "2023-02-21T11:27:33Z",
                                "data": {
                                  "ModerationModelVersion": "6.0",
                                  "ModerationLabels": [
                                    {
                                      "Confidence": 93.41645812988281,
                                      "Name": "Weapons",
                                      "ParentName": "Violence"
                                    }
                                  ]
                                }
                              },
                              "remove_bg": {
                                "version": "1.0",
                                "datetime_created": "2021-07-25T12:24:33Z",
                                "datetime_updated": "2021-07-25T12:24:33Z",
                                "data": {
                                  "foreground_type": "person"
                                }
                              },
                              "uc_clamav_virus_scan": {
                                "version": "0.104.2",
                                "datetime_created": "2021-09-21T11:24:33Z",
                                "datetime_updated": "2021-09-21T11:24:33Z",
                                "data": {
                                  "infected": true,
                                  "infected_with": "Win.Test.EICAR_HDB-1"
                                }
                              }
                            },
                            "content_info": {
                              "mime": {
                                "mime": "image/jpeg",
                                "type": "image",
                                "subtype": "jpeg"
                              },
                              "image": {
                                "color_mode": "RGB",
                                "orientation": 6,
                                "format": "JPEG",
                                "sequence": false,
                                "height": 500,
                                "width": 500,
                                "geo_location": {
                                  "latitude": 55.62013611111111,
                                  "longitude": 37.66299166666666
                                },
                                "datetime_original": "2018-08-20T12:59:50Z",
                                "dpi": [72, 72]
                              },
                              "video": {
                                "duration": 261827,
                                "format": "mp4",
                                "bitrate": 393,
                                "audio": [
                                  {
                                    "bitrate": 78,
                                    "codec": "aac",
                                    "sample_rate": 44100,
                                    "channels": 2
                                  }
                                ],
                                "video": [
                                  {
                                    "height": 360,
                                    "width": 640,
                                    "frame_rate": 30,
                                    "bitrate": 315,
                                    "codec": "h264"
                                  }
                                ]
                              }
                            },
                            "metadata": {
                              "subsystem": "uploader",
                              "pet": "cat"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  storeFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await storeFiles(\n  {\n      uuids: [\n          'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n          '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n        ]\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\nuse Uploadcare\\Interfaces\\File\\FileInfoInterface;\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->batchStoreFile(['b7a301d1-1bd0-473d-8d32-708dd55addc0', '1bac376c-aa7e-4356-861b-dd2657b5bfd2']);\nforeach ($result->getResult() as $result) {\n    if (!$result instanceof FileInfoInterface) {\n        continue;\n    }\n    \\sprintf('Result %s is stored at %s', $result->getUuid(), $result->getDatetimeStored()->format(\\DateTimeInterface::ATOM));\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = [\n    'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n    '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\n]\nuploadcare.store_files(files)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuids = [\n  'b7a301d1-1bd0-473d-8d32-708dd55addc0',\n  '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\n]\nUploadcare::FileList.batch_store(uuids)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet uuids = [\n  \"b7a301d1-1bd0-473d-8d32-708dd55addc0\",\n  \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\n]\nlet response = try await uploadcare.storeFiles(withUUIDs: uuids)\nprint(response)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\n    \"b7a301d1-1bd0-473d-8d32-708dd55addc0\",\n    \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\n)\nuploadcare.saveFiles(uuids)\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": ["string"],
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": ["string"],
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": ["string"],
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to store multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "files-delete",
                "migratedFromUrlSlugs": ["batch-file-delete"],
                "method": "DELETE",
                "id": "filesDelete",
                "name": "Batch file delete",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/storage"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_file:FilesDeleteResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": ["string"],
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "ok",
                      "problems": {
                        "problems": {
                          "key": "value"
                        }
                      },
                      "result": [
                        {
                          "datetime_removed": "2024-01-15T09:30:00Z",
                          "datetime_stored": "2018-11-26T12:49:10Z",
                          "datetime_uploaded": "2018-11-26T12:49:09Z",
                          "is_image": true,
                          "is_ready": true,
                          "mime_type": "image/jpeg",
                          "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                          "original_filename": "pineapple.jpg",
                          "size": 642,
                          "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                          "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                          "appdata": {
                            "aws_rekognition_detect_labels": {
                              "version": "2016-06-27",
                              "datetime_created": "2021-09-21T11:25:31Z",
                              "datetime_updated": "2021-09-21T11:27:33Z",
                              "data": {
                                "LabelModelVersion": "2.0",
                                "Labels": [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Instances": [{}],
                                    "Name": "Home Decor",
                                    "Parents": [{}]
                                  },
                                  {
                                    "Confidence": 70.75951385498047,
                                    "Instances": [{}],
                                    "Name": "Linen",
                                    "Parents": [
                                      {
                                        "Name": "Home Decor"
                                      }
                                    ]
                                  },
                                  {
                                    "Confidence": 64.7123794555664,
                                    "Instances": [{}],
                                    "Name": "Sunlight",
                                    "Parents": [{}]
                                  },
                                  {
                                    "Confidence": 56.264793395996094,
                                    "Instances": [{}],
                                    "Name": "Flare",
                                    "Parents": [
                                      {
                                        "Name": "Light"
                                      }
                                    ]
                                  },
                                  {
                                    "Confidence": 50.47153854370117,
                                    "Instances": [{}],
                                    "Name": "Tree",
                                    "Parents": [
                                      {
                                        "Name": "Plant"
                                      }
                                    ]
                                  }
                                ]
                              }
                            },
                            "aws_rekognition_detect_moderation_labels": {
                              "version": "2016-06-27",
                              "datetime_created": "2023-02-21T11:25:31Z",
                              "datetime_updated": "2023-02-21T11:27:33Z",
                              "data": {
                                "ModerationModelVersion": "6.0",
                                "ModerationLabels": [
                                  {
                                    "Confidence": 93.41645812988281,
                                    "Name": "Weapons",
                                    "ParentName": "Violence"
                                  }
                                ]
                              }
                            },
                            "remove_bg": {
                              "version": "1.0",
                              "datetime_created": "2021-07-25T12:24:33Z",
                              "datetime_updated": "2021-07-25T12:24:33Z",
                              "data": {
                                "foreground_type": "person"
                              }
                            },
                            "uc_clamav_virus_scan": {
                              "version": "0.104.2",
                              "datetime_created": "2021-09-21T11:24:33Z",
                              "datetime_updated": "2021-09-21T11:24:33Z",
                              "data": {
                                "infected": true,
                                "infected_with": "Win.Test.EICAR_HDB-1"
                              }
                            }
                          },
                          "content_info": {
                            "mime": {
                              "mime": "image/jpeg",
                              "type": "image",
                              "subtype": "jpeg"
                            },
                            "image": {
                              "color_mode": "RGB",
                              "orientation": 6,
                              "format": "JPEG",
                              "sequence": false,
                              "height": 500,
                              "width": 500,
                              "geo_location": {
                                "latitude": 55.62013611111111,
                                "longitude": 37.66299166666666
                              },
                              "datetime_original": "2018-08-20T12:59:50Z",
                              "dpi": [72, 72]
                            },
                            "video": {
                              "duration": 261827,
                              "format": "mp4",
                              "bitrate": 393,
                              "audio": [
                                {
                                  "bitrate": 78,
                                  "codec": "aac",
                                  "sample_rate": 44100,
                                  "channels": 2
                                }
                              ],
                              "video": [
                                {
                                  "height": 360,
                                  "width": 640,
                                  "frame_rate": 30,
                                  "bitrate": 315,
                                  "codec": "h264"
                                }
                              ]
                            }
                          },
                          "metadata": {
                            "subsystem": "uploader",
                            "pet": "cat"
                          }
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "ok",
                        "problems": {
                          "problems": {
                            "key": "value"
                          }
                        },
                        "result": [
                          {
                            "datetime_removed": "2024-01-15T09:30:00Z",
                            "datetime_stored": "2018-11-26T12:49:10Z",
                            "datetime_uploaded": "2018-11-26T12:49:09Z",
                            "is_image": true,
                            "is_ready": true,
                            "mime_type": "image/jpeg",
                            "original_file_url": "https://ucarecdn.com/22240276-2f06-41f8-9411-755c8ce926ed/pineapple.jpg",
                            "original_filename": "pineapple.jpg",
                            "size": 642,
                            "url": "https://api.uploadcare.com/files/22240276-2f06-41f8-9411-755c8ce926ed/",
                            "uuid": "22240276-2f06-41f8-9411-755c8ce926ed",
                            "appdata": {
                              "aws_rekognition_detect_labels": {
                                "version": "2016-06-27",
                                "datetime_created": "2021-09-21T11:25:31Z",
                                "datetime_updated": "2021-09-21T11:27:33Z",
                                "data": {
                                  "LabelModelVersion": "2.0",
                                  "Labels": [
                                    {
                                      "Confidence": 93.41645812988281,
                                      "Instances": [{}],
                                      "Name": "Home Decor",
                                      "Parents": [{}]
                                    },
                                    {
                                      "Confidence": 70.75951385498047,
                                      "Instances": [{}],
                                      "Name": "Linen",
                                      "Parents": [
                                        {
                                          "Name": "Home Decor"
                                        }
                                      ]
                                    },
                                    {
                                      "Confidence": 64.7123794555664,
                                      "Instances": [{}],
                                      "Name": "Sunlight",
                                      "Parents": [{}]
                                    },
                                    {
                                      "Confidence": 56.264793395996094,
                                      "Instances": [{}],
                                      "Name": "Flare",
                                      "Parents": [
                                        {
                                          "Name": "Light"
                                        }
                                      ]
                                    },
                                    {
                                      "Confidence": 50.47153854370117,
                                      "Instances": [{}],
                                      "Name": "Tree",
                                      "Parents": [
                                        {
                                          "Name": "Plant"
                                        }
                                      ]
                                    }
                                  ]
                                }
                              },
                              "aws_rekognition_detect_moderation_labels": {
                                "version": "2016-06-27",
                                "datetime_created": "2023-02-21T11:25:31Z",
                                "datetime_updated": "2023-02-21T11:27:33Z",
                                "data": {
                                  "ModerationModelVersion": "6.0",
                                  "ModerationLabels": [
                                    {
                                      "Confidence": 93.41645812988281,
                                      "Name": "Weapons",
                                      "ParentName": "Violence"
                                    }
                                  ]
                                }
                              },
                              "remove_bg": {
                                "version": "1.0",
                                "datetime_created": "2021-07-25T12:24:33Z",
                                "datetime_updated": "2021-07-25T12:24:33Z",
                                "data": {
                                  "foreground_type": "person"
                                }
                              },
                              "uc_clamav_virus_scan": {
                                "version": "0.104.2",
                                "datetime_created": "2021-09-21T11:24:33Z",
                                "datetime_updated": "2021-09-21T11:24:33Z",
                                "data": {
                                  "infected": true,
                                  "infected_with": "Win.Test.EICAR_HDB-1"
                                }
                              }
                            },
                            "content_info": {
                              "mime": {
                                "mime": "image/jpeg",
                                "type": "image",
                                "subtype": "jpeg"
                              },
                              "image": {
                                "color_mode": "RGB",
                                "orientation": 6,
                                "format": "JPEG",
                                "sequence": false,
                                "height": 500,
                                "width": 500,
                                "geo_location": {
                                  "latitude": 55.62013611111111,
                                  "longitude": 37.66299166666666
                                },
                                "datetime_original": "2018-08-20T12:59:50Z",
                                "dpi": [72, 72]
                              },
                              "video": {
                                "duration": 261827,
                                "format": "mp4",
                                "bitrate": 393,
                                "audio": [
                                  {
                                    "bitrate": 78,
                                    "codec": "aac",
                                    "sample_rate": 44100,
                                    "channels": 2
                                  }
                                ],
                                "video": [
                                  {
                                    "height": 360,
                                    "width": 640,
                                    "frame_rate": 30,
                                    "bitrate": 315,
                                    "codec": "h264"
                                  }
                                ]
                              }
                            },
                            "metadata": {
                              "subsystem": "uploader",
                              "pet": "cat"
                            }
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  deleteFiles,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteFiles(\n  {\n      uuids: [\n          '21975c81-7f57-4c7a-aef9-acfe28779f78',\n          'cbaf2d73-5169-4b2b-a543-496cf2813dff',\n        ]\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->fileInfo('21975c81-7f57-4c7a-aef9-acfe28779f78');\n$api->deleteFile($fileInfo);\necho \\sprintf('File \\'%s\\' deleted at \\'%s\\'', $fileInfo->getUuid(), $fileInfo->getDatetimeRemoved()->format(\\DateTimeInterface::ATOM));\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfiles = [\n    '21975c81-7f57-4c7a-aef9-acfe28779f78',\n    'cbaf2d73-5169-4b2b-a543-496cf2813dff'\n    ]\nuploadcare.delete_files(files)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuids = [\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\"]\nputs Uploadcare::FileList.batch_delete(uuids)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet uuids = [\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\"]\ntry await uploadcare.deleteFiles(withUUIDs: uuids)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval uuids = listOf(\"21975c81-7f57-4c7a-aef9-acfe28779f78\", \"cbaf2d73-5169-4b2b-a543-496cf2813dff\")\nuploadcare.deleteFiles(fileIds = uuids)\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": ["string"],
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": ["string"],
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/storage",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": ["string"],
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Used to delete multiple files in one go. Up to 100 files are supported per request. A JSON object holding your File list SHOULD be put into a request body.\n\nNote: this operation removes files from storage but doesn't invalidate CDN cache.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-local-copy",
                "migratedFromUrlSlugs": ["copy-file-to-local-storage"],
                "method": "POST",
                "id": "createLocalCopy",
                "name": "Copy file to local storage",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/local_copy"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A CDN URL or just UUID of a file subjected to copy.",
                        "key": "source",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The parameter only applies to the Uploadcare storage and MUST be either true or false.",
                        "key": "store",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_file:CreateLocalCopyRequestStore"
                          }
                        }
                      },
                      {
                        "description": "Arbitrary additional metadata.",
                        "key": "metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:LocalCopyResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/local_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                      "store": "true",
                      "metadata": {
                        "subsystem": "uploader",
                        "pet": "cat"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "file",
                      "result": {
                        "datetime_removed": "2024-01-15T09:30:00Z",
                        "datetime_stored": "2024-01-15T09:30:00Z",
                        "datetime_uploaded": "2024-01-15T09:30:00Z",
                        "is_image": true,
                        "is_ready": true,
                        "mime_type": "image/jpeg",
                        "original_file_url": "original_file_url",
                        "original_filename": "EU_4.jpg",
                        "size": 0,
                        "url": "url",
                        "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                        "variations": "variations",
                        "content_info": "content_info",
                        "metadata": {
                          "metadata": {
                            "key": "value"
                          }
                        }
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                        "store": "true",
                        "metadata": {
                          "subsystem": "uploader",
                          "pet": "cat"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "file",
                        "result": {
                          "datetime_removed": "2024-01-15T09:30:00Z",
                          "datetime_stored": "2024-01-15T09:30:00Z",
                          "datetime_uploaded": "2024-01-15T09:30:00Z",
                          "is_image": true,
                          "is_ready": true,
                          "mime_type": "image/jpeg",
                          "original_file_url": "original_file_url",
                          "original_filename": "EU_4.jpg",
                          "size": 0,
                          "url": "url",
                          "uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46",
                          "variations": "variations",
                          "content_info": "content_info",
                          "metadata": {
                            "metadata": {
                              "key": "value"
                            }
                          }
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  copyFileToLocalStorage,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await copyFileToLocalStorage(\n  {\n    source: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    store: true,\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$fileInfo = $api->copyToLocalStorage('03ccf9ab-f266-43fb-973d-a6529c55c2ae', true);\necho \\sprintf('File \\'%s\\' copied to local storage', $fileInfo->getUuid());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\ncopied_file = file.create_local_copy(store=True)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\ncopied_file = Uploadcare::File.local_copy(source, store: true)\nputs copied_file.uuid\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.copyFileToLocalStorage(source: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval copyFile = uploadcare.copyFileLocalStorage(source = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", copyFile.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/local_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "source": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/local_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "source": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/local_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "source": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "POST requests are used to copy original files or their modified versions to a default storage.\n\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\n\nCopying of large files is not supported at the moment. If the file CDN URL includes transformation operators, its size MUST NOT exceed 100 MB. If not, the size MUST NOT exceed 5 GB.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-remote-copy",
                "migratedFromUrlSlugs": ["copy-file-to-remote-storage"],
                "method": "POST",
                "id": "createRemoteCopy",
                "name": "Copy file to remote storage",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/remote_copy"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "A CDN URL or just UUID of a file subjected to copy.",
                        "key": "source",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Identifies a custom storage name related to your project. It implies that you are copying a file to a specified custom storage. Keep in mind that you can have multiple storages associated with a single S3 bucket.",
                        "key": "target",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "MUST be either `true` or `false`. The `true` value makes copied files available via public links, `false` does the opposite.",
                        "key": "make_public",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "The parameter is used to specify file names Uploadcare passes to a custom storage. If the parameter is omitted, your custom storages pattern is used. Use any combination of allowed values.\n\nParameter values:\n- `${default}` = `${uuid}/${auto_filename}`\n- `${auto_filename}` = `${filename}${effects}${ext}`\n- `${effects}` = processing operations put into a CDN URL\n- `${filename}` = original filename without extension\n- `${uuid}` = file UUID\n- `${ext}` = file extension, including period, e.g. .jpg\n",
                        "key": "pattern",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_file:CreateRemoteCopyRequestPattern"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:CopiedFileUrl"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/files/remote_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                      "target": "mytarget",
                      "make_public": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "type": "url",
                      "result": "s3://mybucket/03ccf9ab-f266-43fb-973d-a6529c55c2ae/image.png"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "03ccf9ab-f266-43fb-973d-a6529c55c2ae",
                        "target": "mytarget",
                        "make_public": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "url",
                        "result": "s3://mybucket/03ccf9ab-f266-43fb-973d-a6529c55c2ae/image.png"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  copyFileToRemoteStorage,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await copyFileToRemoteStorage(\n  {\n    source: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    target: 'custom_storage_connected_to_the_project',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->file();\n$result = $api->copyToRemoteStorage('03ccf9ab-f266-43fb-973d-a6529c55c2ae', true);\necho \\sprintf('File \\'%s\\' copied to local storage', $result);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nr_copied_file = file.create_remote_copy(\n    target='custom_storage_connected_to_the_project',\n    make_public=True,\n    pattern='${uuid}/${filename}${ext}',\n)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nsource = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\ntarget = 'custom_storage_connected_to_the_project'\ncopied_file = Uploadcare::File.remote_copy(source, target, make_public: true)\nputs copied_file.uuid\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.copyFileToRemoteStorage(source: \"03ccf9ab-f266-43fb-973d-a6529c55c2ae\", target: \"mytarget\", pattern: .uuid)\nprint(response)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval copyFile = uploadcare.copyFileRemoteStorage(\n    source = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    target = \"custom_storage_connected_to_the_project\"\n)\nLog.d(\"TAG\", copyFile.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/remote_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "source": "string",
                      "target": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "string",
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/remote_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "source": "string",
                      "target": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "string",
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/remote_copy",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "source": "string",
                      "target": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "source": "string",
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "POST requests are used to copy original files or their modified versions to a custom storage.\n\nSource files MAY either be stored or just uploaded and MUST NOT be deleted.\n\nCopying of large files is not supported at the moment. File size MUST NOT exceed 5 GB.",
                "authed": true
              }
            ],
            "types": [
              "type_file:FilesListRequestOrdering",
              "type_file:FilesListResponseTotals",
              "type_file:FilesListResponse",
              "type_file:FilesStoringResponse",
              "type_file:FilesDeleteResponse",
              "type_file:CreateLocalCopyRequestStore",
              "type_file:CreateRemoteCopyRequestPattern"
            ],
            "subpackages": [],
            "urlSlug": "file",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_addOns": {
            "subpackageId": "subpackage_addOns",
            "name": "Add-Ons",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "aws-rekognition-execute",
                "migratedFromUrlSlugs": ["execute-aws-rekognition"],
                "method": "POST",
                "id": "awsRekognitionExecute",
                "name": "Execute AWS Rekognition",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/aws_rekognition_detect_labels/execute"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Unique ID of the file to process",
                        "key": "target",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:AwsRekognitionExecuteResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "target": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAwsRecognition('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Recognition requested. Key is \\'%s\\'', $resultKey);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\naws_recognition_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.AWS_LABEL_RECOGNITION,\n)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nUploadcare::Addons.ws_rekognition_detect_labels(uuid)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.executeAWSRekognition(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performAWSRekognition(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 409,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Execute [AWS Rekognition](https://docs.aws.amazon.com/rekognition/latest/dg/labels-detect-labels-image.html) Add-On for a given target to detect labels in an image. **Note:** Detected labels are stored in the file's appdata.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "aws-rekognition-execution-status",
                "migratedFromUrlSlugs": ["check-aws-rekognition-execution-status"],
                "method": "GET",
                "id": "awsRekognitionExecutionStatus",
                "name": "Check AWS Rekognition execution status",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/aws_rekognition_detect_labels/execute/status"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Request ID returned by the Add-On execution request described above.",
                    "key": "request_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:AwsRekognitionExecutionStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "request_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "in_progress"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "in_progress"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAwsRecognition('request-id');\necho \\sprintf('Recognition status: %s', $status);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.AWS_LABEL_RECOGNITION)\nprint(addon_task_status)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nrequest_id = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\"\nresult = Uploadcare::Addons.ws_rekognition_detect_labels_status(request_id)\nputs result.status\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkAWSRekognitionStatus(requestID: \"requestID\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_labels/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/awsRekognitionExecute) operation.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "aws-rekognition-detect-moderation-labels-execute",
                "migratedFromUrlSlugs": ["execute-aws-rekognition-moderation"],
                "method": "POST",
                "id": "awsRekognitionDetectModerationLabelsExecute",
                "name": "Execute AWS Rekognition Moderation",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/aws_rekognition_detect_moderation_labels/execute"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Unique ID of the file to process",
                        "key": "target",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:AwsRekognitionDetectModerationLabelsExecuteResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "target": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAwsRecognitionModeration('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Recognition requested. Key is \\'%s\\'', $resultKey);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\naws_recognition_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.AWS_MODERATION_LABELS,\n)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.executeAWSRekognitionModeration(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performAWSRekognitionModeration(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionModerationAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 409,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Execute [AWS Rekognition Moderation](https://docs.aws.amazon.com/rekognition/latest/dg/moderation.html) Add-On for a given target to detect moderation labels in an image. **Note:** Detected moderation labels are stored in the file's appdata.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "aws-rekognition-detect-moderation-labels-execution-status",
                "migratedFromUrlSlugs": ["check-aws-rekognition-moderation-execution-status"],
                "method": "GET",
                "id": "awsRekognitionDetectModerationLabelsExecutionStatus",
                "name": "Check AWS Rekognition Moderation execution status",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/aws_rekognition_detect_moderation_labels/execute/status"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Request ID returned by the Add-On execution request described above.",
                    "key": "request_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "request_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "in_progress"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "in_progress"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAwsRecognitionModeration('request-id');\necho \\sprintf('Recognition status: %s', $status);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.AWS_MODERATION_LABEL)\nprint(addon_task_status)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkAWSRekognitionModerationStatus(requestID: \"requestID\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = AWSRekognitionModerationAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/aws_rekognition_detect_moderation_labels/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/awsRekognitionDetectModerationLabelsExecute) operation.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "uc-clamav-virus-scan-execute",
                "migratedFromUrlSlugs": ["execute-clam-av"],
                "method": "POST",
                "id": "ucClamavVirusScanExecute",
                "name": "Execute ClamAV",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/uc_clamav_virus_scan/execute"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Unique ID of the file to process",
                        "key": "target",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Optional object with Add-On specific parameters",
                        "key": "params",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_addOns:UcClamavVirusScanExecuteRequestParams"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:UcClamavVirusScanExecuteResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "target": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                      "params": {
                        "purge_infected": true
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                        "params": {
                          "purge_infected": true
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  executeAddon,\n  AddonName,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await executeAddon(\n  {\n    addonName: AddonName.UC_CLAMAV_VIRUS_SCAN,\n    target: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestAntivirusScan('21975c81-7f57-4c7a-aef9-acfe28779f78');\necho \\sprintf('Antivirus scan requested. Key is \\'%s\\'', $resultKey);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nclamav_params = AddonClamAVExecutionParams(purge_infected=True)\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nclamav_result = uploadcare.addons_api.execute(\n    target_file.uuid,\n    AddonLabels.CLAM_AV,\n    clamav_params\n)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nUploadcare::Addons.uc_clamav_virus_scan(uuid, purge_infected: true)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet parameters = ClamAVAddonExecutionParams(purgeInfected: true)\nlet response = try await uploadcare.executeClamav(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performClamav(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = ClamAVAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 409,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Execute [ClamAV](https://www.clamav.net/) virus checking Add-On for a given target.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "uc-clamav-virus-scan-execution-status",
                "migratedFromUrlSlugs": ["check-clam-av-execution-status"],
                "method": "GET",
                "id": "ucClamavVirusScanExecutionStatus",
                "name": "Check ClamAV execution status",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/uc_clamav_virus_scan/execute/status"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Request ID returned by the Add-On execution request described above.",
                    "key": "request_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:UcClamavVirusScanExecutionStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "request_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "in_progress"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "in_progress"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  addonExecutionStatus,\n  AddonName,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await addonExecutionStatus(\n  {\n    addonName: AddonName.UC_CLAMAV_VIRUS_SCAN,\n    requestId: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkAntivirusScan('request-id');\necho \\sprintf('Antivirus scan status: %s', $status);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.CLAM_AV)\nprint(addon_task_status)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nrequest_id = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nresult = Uploadcare::Addons.uc_clamav_virus_scan_status(request_id)\nputs result.status\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkClamAVStatus(requestID: \"requestID\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = ClamAVAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/uc_clamav_virus_scan/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/ucClamavVirusScanExecute) operation.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "remove-bg-execute",
                "migratedFromUrlSlugs": ["execute-remove-bg"],
                "method": "POST",
                "id": "removeBgExecute",
                "name": "Execute Remove.bg",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/remove_bg/execute"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Unique ID of the file to process",
                        "key": "target",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Optional object with Add-On specific parameters",
                        "key": "params",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_addOns:RemoveBgExecuteRequestParams"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:RemoveBgExecuteResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 409
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/remove_bg/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "target": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                      "params": {
                        "crop": true,
                        "scale": "30%",
                        "type_level": "2",
                        "roi": "0% 0% 90% 90%"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                        "params": {
                          "crop": true,
                          "scale": "30%",
                          "type_level": "2",
                          "roi": "0% 0% 90% 90%"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "request_id": "8db3c8b4-2dea-4146-bcdb-63387e2b33c1"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$resultKey = $api->requestRemoveBackground('21975c81-7f57-4c7a-aef9-acfe28779f78');\necho \\sprintf('Remove background requested. Key is \\'%s\\'', $resultKey);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nremove_bg_params = AddonRemoveBGExecutionParams(\n    crop=True,\n    crop_margin=\"20px\",\n    scale=\"15%\",\n    position ='',\n    roi = ''\n)\n\ntarget_file = uploadcare.file(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nremove_bg_result = uploadcare.addons_api.execute(\n    target_file,\n    AddonLabels.REMOVE_BG,\n    remove_bg_params\n)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nUploadcare::Addons.remove_bg(uuid, crop: true)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet parameters = RemoveBGAddonExecutionParams(crop: true, typeLevel: .two)\nlet response = try await uploadcare.executeRemoveBG(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", parameters: parameters)\nprint(response) // contains requestID\n\n// Execute and wait for completion:\nlet status = try await uploadcare.performRemoveBG(fileUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = RemoveBgAddOn(uploadcare)\nval response = addOn.execute(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nLog.d(\"TAG\", response.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/remove_bg/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/remove_bg/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/remove_bg/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 409,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/remove_bg/execute",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {
                      "target": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "target": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Execute [remove.bg](https://remove.bg/) background image removal Add-On for a given target.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "remove-bg-execution-status",
                "migratedFromUrlSlugs": ["check-remove-bg-execution-status"],
                "method": "GET",
                "id": "removeBgExecutionStatus",
                "name": "Check Remove.bg execution status",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/addons/remove_bg/execute/status"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Request ID returned by the Add-On execution request described above.",
                    "key": "request_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_addOns:RemoveBgExecutionStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/addons/remove_bg/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "request_id"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "done",
                      "result": {
                        "file_id": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "done",
                        "result": {
                          "file_id": "21975c81-7f57-4c7a-aef9-acfe28779f78"
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->addons();\n$status = $api->checkRemoveBackground('request-id');\necho \\sprintf('Remove background status: %s', $status);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\naddon_task_status = uploadcare.addons_api.status(request_id, AddonLabels.REMOVE_BG)\nprint(addon_task_status)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nrequest_id = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\"\nresult = Uploadcare::Addons.remove_bg_status(request_id)\nputs result.status\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet status = try await uploadcare.checkRemoveBGStatus(requestID: \"requestID\")\nprint(status)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval addOn = RemoveBgAddOn(uploadcare)\nval status = addOn.check(requestId = \"d1fb31c6-ed34-4e21-bdc3-4f1485f58e21\")\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/addons/remove_bg/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/addons/remove_bg/execute/status",
                    "pathParameters": {},
                    "queryParameters": {
                      "request_id": "string"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check the status of an Add-On execution request that had been started\nusing the [Execute Add-On](#operation/removeBgExecute) operation.",
                "authed": true
              }
            ],
            "types": [
              "type_addOns:AwsRekognitionExecuteResponse",
              "type_addOns:AwsRekognitionExecutionStatusResponseStatus",
              "type_addOns:AwsRekognitionExecutionStatusResponse",
              "type_addOns:AwsRekognitionDetectModerationLabelsExecuteResponse",
              "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponseStatus",
              "type_addOns:AwsRekognitionDetectModerationLabelsExecutionStatusResponse",
              "type_addOns:UcClamavVirusScanExecuteRequestParams",
              "type_addOns:UcClamavVirusScanExecuteResponse",
              "type_addOns:UcClamavVirusScanExecutionStatusResponseStatus",
              "type_addOns:UcClamavVirusScanExecutionStatusResponse",
              "type_addOns:RemoveBgExecuteRequestParamsTypeLevel",
              "type_addOns:RemoveBgExecuteRequestParamsType",
              "type_addOns:RemoveBgExecuteRequestParamsChannels",
              "type_addOns:RemoveBgExecuteRequestParams",
              "type_addOns:RemoveBgExecuteResponse",
              "type_addOns:RemoveBgExecutionStatusResponseResult",
              "type_addOns:RemoveBgExecutionStatusResponse"
            ],
            "subpackages": [],
            "urlSlug": "add-ons",
            "description": "An `Add-On` is an application implemented by Uploadcare that accepts uploaded files as an\ninput and can produce other files and/or [appdata](#operation/fileInfo) as an output.\n",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_fileMetadata": {
            "subpackageId": "subpackage_fileMetadata",
            "name": "File metadata",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "key",
                "migratedFromUrlSlugs": ["get-metadata-keys-value"],
                "method": "GET",
                "id": "key",
                "name": "Get metadata key's value",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Key of file metadata.\nList of allowed characters for the key:\n\n- Latin letters in lower or upper case (a-z,A-Z)\n- digits (0-9)\n- underscore `_`\n- a hyphen `-`\n- dot `.`\n- colon `:`",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/metadata/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:MetadataItemValue"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem",
                    "pathParameters": {
                      "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                      "key": "subsystem"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": "uploader",
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": "uploader"
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  getMetadataValue,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await getMetadataValue(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'pet'\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->metadata();\n$metadata = $api->getMetadata('1bac376c-aa7e-4356-861b-dd2657b5bfd2');\necho \\sprintf('Value for key \\'pet\\' %s', $metadata['pet'] ?? 'does not exists');\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nvalue = uploadcare.metadata_api.get_key(\"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", \"pet\")\nprint(value)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nputs Uploadcare::FileMetadata.index(uuid).inspect\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet value = try await uploadcare.fileMetadataValue(forKey: \"pet\", withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nprint(value)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval value = uploadcare.getFileMetadataKeyValue(\n    fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    key = \"pet\"\n)\nLog.d(\"TAG\", value)\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/:uuid/metadata/:key",
                    "pathParameters": {
                      "uuid": ":uuid",
                      "key": ":key"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/metadata/:key",
                    "pathParameters": {
                      "uuid": ":uuid",
                      "key": ":key"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the value of a single metadata key.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-file-metadata-key",
                "migratedFromUrlSlugs": ["update-metadata-keys-value"],
                "method": "PUT",
                "id": "updateFileMetadataKey",
                "name": "Update metadata key's value",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Key of file metadata.\nList of allowed characters for the key:\n\n- Latin letters in lower or upper case (a-z,A-Z)\n- digits (0-9)\n- underscore `_`\n- a hyphen `-`\n- dot `.`\n- colon `:`",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/metadata/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:MetadataItemValue"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem",
                    "pathParameters": {
                      "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                      "key": "subsystem"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": "string",
                    "responseStatusCode": 200,
                    "responseBody": "uploader",
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": "uploader"
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  updateMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await updateMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'pet',\n    value: 'dog',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->metadata();\n$result = $api->setKey('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet', 'dog');\necho \\sprintf('Metadata key \\'pet\\' is set to %s', $result['pet']);\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_uuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nkey, value = \"pet\", \"dog\"\nuploadcare.metadata_api.update_or_create_key(file_uuid, key, value)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nkey = 'pet'\nvalue = 'dog'\nUploadcare::FileMetadata.update(uuid, key, value)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet response = try await uploadcare.updateFileMetadata(\n  withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", \n  key: \"pet\", \n  value: dog\n)\n print(response)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval value = uploadcare.updateFileMetadataKeyValue(\n    fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n    key = \"pet\",\n    value = \"dog\"\n)\nLog.d(\"TAG\", value)\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/:uuid/metadata/:key",
                    "pathParameters": {
                      "uuid": ":uuid",
                      "key": ":key"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": "string",
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/metadata/:key",
                    "pathParameters": {
                      "uuid": ":uuid",
                      "key": ":key"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": "string",
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": "string"
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the value of a single metadata key. If the key does not exist, it will be created.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-file-metadata-key",
                "migratedFromUrlSlugs": ["delete-metadata-key"],
                "method": "DELETE",
                "id": "deleteFileMetadataKey",
                "name": "Delete metadata key",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "Key of file metadata.\nList of allowed characters for the key:\n\n- Latin letters in lower or upper case (a-z,A-Z)\n- digits (0-9)\n- underscore `_`\n- a hyphen `-`\n- dot `.`\n- colon `:`",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/files/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": "/metadata/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/files/21975c81-7f57-4c7a-aef9-acfe28779f78/metadata/subsystem",
                    "pathParameters": {
                      "uuid": "21975c81-7f57-4c7a-aef9-acfe28779f78",
                      "key": "subsystem"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  deleteMetadata,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteMetadata(\n  {\n    uuid: '1bac376c-aa7e-4356-861b-dd2657b5bfd2',\n    key: 'delete_key',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$metadataApi = (new Uploadcare\\Api($configuration))->metadata();\ntry {\n    $metadataApi->removeKey('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet');\n} catch (\\Throwable $e) {\n    echo \\sprintf('Error while key removing: %s', $e->getMessage());\n}\necho 'Key was successfully removed';\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_uuid = '1bac376c-aa7e-4356-861b-dd2657b5bfd2'\nuploadcare.metadata_api.delete_key(file_uuid, mkey='pet')\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::FileMetadata.delete('1bac376c-aa7e-4356-861b-dd2657b5bfd2', 'pet')\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\ntry await uploadcare.deleteFileMetadata(forKey: \"pet\",  withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteFileMetadataKey(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", key = \"pet\")\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/files/:uuid/metadata/:key",
                    "pathParameters": {
                      "uuid": ":uuid",
                      "key": ":key"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/files/:uuid/metadata/:key",
                    "pathParameters": {
                      "uuid": ":uuid",
                      "key": ":key"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a file's metadata key.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "file-metadata",
            "description": "File metadata is additional, arbitrary data, associated with uploaded file. As an example, you could store unique file identifier from your system.\n\nMetadata is key-value data. You can specify up to 50 keys, with key names up to 64 characters long and values up to 512 characters long.\nRead more in the [docs](https://uploadcare.com/docs/file-metadata/).\n\n**Notice:** Do not store any sensitive information (bank account numbers, card details, etc.) as metadata.\n\n**Notice:** File metadata is provided by the end-users uploading the files and can contain symbols unsafe in, for example, HTML context. Please escape the metadata before use according to the rules of the target runtime context (HTML browser, SQL query parameter, etc).\n",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_group": {
            "subpackageId": "subpackage_group",
            "name": "Group",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "groups-list",
                "migratedFromUrlSlugs": ["list-of-groups"],
                "method": "GET",
                "id": "groupsList",
                "name": "List of groups",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/groups"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "A preferred amount of groups in a list for a single response.\nDefaults to 100, while the maximum is 1000.",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "A starting point for filtering the list of groups.\nIf passed, MUST be a date and time value in ISO-8601 format.",
                    "key": "from",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  },
                  {
                    "description": "Specifies the way groups should be sorted in the returned list.\n`datetime_created` for the ascending order (default),\n`-datetime_created` for the descending one.",
                    "key": "ordering",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_group:GroupsListRequestOrdering"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_group:GroupsListResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "limit": 150,
                      "from": "2015-01-02T10:00:00Z"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "next": "https://api.uploadcare.com/groups/?limit=3&from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&offset=0",
                      "previous": "https://api.uploadcare.com/groups/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                      "total": 26,
                      "per_page": 100,
                      "results": [
                        {
                          "id": "dd43982b-5447-44b2-86f6-1c3b52afa0ff~1",
                          "datetime_created": "2018-11-27T14:14:37Z",
                          "files_count": 1,
                          "cdn_url": "https://ucarecdn.com/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                          "url": "https://api.uploadcare.com/groups/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "next": "https://api.uploadcare.com/groups/?limit=3&from=2018-11-27T01%3A00%3A24.296613%2B00%3A00&offset=0",
                        "previous": "https://api.uploadcare.com/groups/?limit=3&to=2018-11-27T01%3A00%3A36.436838%2B00%3A00&offset=0",
                        "total": 26,
                        "per_page": 100,
                        "results": [
                          {
                            "id": "dd43982b-5447-44b2-86f6-1c3b52afa0ff~1",
                            "datetime_created": "2018-11-27T14:14:37Z",
                            "files_count": 1,
                            "cdn_url": "https://ucarecdn.com/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/",
                            "url": "https://api.uploadcare.com/groups/dd43982b-5447-44b2-86f6-1c3b52afa0ff~1/"
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  listOfGroups,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfGroups({}, { authSchema: uploadcareSimpleAuthSchema })\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\n$list = $api->listGroups();\nforeach ($list->getResults() as $group) {\n    \\sprintf('Group URL: %s, ID: %s', $group->getUrl(), $group->getUuid());\n}\nwhile (($next = $api->nextPage($list)) !== null) {\n    foreach ($next->getResults() as $group) {\n        \\sprintf('Group URL: %s, ID: %s', $group->getUrl(), $group->getUuid());\n    }\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ngroups_list = uploadcare.list_file_groups()\nprint('Number of groups is', groups_list.count())\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ngroups = Uploadcare::GroupList.list(limit: 10)\ngroups.each { |group| puts group.inspect }\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet query = GroupsListQuery()\n  .limit(10)\n  .ordering(.datetimeCreatedDESC)\n  \nlet groupsList = uploadcare.listOfGroups()\n\nlet list = try await groupsList.get(withQuery: query)\nprint(list)\n\n// Next page\nlet next = try await groupsList.nextPage()\nprint(list)\n\n// Previous page\nlet previous = try await groupsList.previousPage()\nprint(list)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval groupsQueryBuilder = uploadcare.getGroups()\nval groups = groupsQueryBuilder\n    .ordering(Order.UPLOAD_TIME_DESC)\n    .asList()\nLog.d(\"TAG\", groups.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "limit": 1,
                      "from": "2023-01-01T00:00:00Z"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "limit": 1,
                      "from": "2023-01-01T00:00:00Z"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups",
                    "pathParameters": {},
                    "queryParameters": {
                      "limit": 1,
                      "from": "2023-01-01T00:00:00Z"
                    },
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a paginated list of groups.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "info",
                "migratedFromUrlSlugs": ["group-info"],
                "method": "GET",
                "id": "info",
                "name": "Group info",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Group UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/groups/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:GroupWithFiles"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/groups/badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12",
                    "pathParameters": {
                      "uuid": "badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "id",
                      "datetime_created": "2024-01-15T09:30:00Z",
                      "files_count": 1,
                      "cdn_url": "cdn_url",
                      "url": "url",
                      "files": [
                        {
                          "key": "value"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "id",
                        "datetime_created": "2024-01-15T09:30:00Z",
                        "files_count": 1,
                        "cdn_url": "cdn_url",
                        "url": "url",
                        "files": [
                          {
                            "key": "value"
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  groupInfo,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await groupInfo(\n  {\n    uuid: 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\n$groupInfo = $api->groupInfo('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1');\necho \\sprintf(\"Group: %s files:\\n\", $groupInfo->getUrl());\nforeach ($groupInfo->getFiles() as $file) {\n    \\sprintf('File: %s (%s)', $file->getUrl(), $file->getUuid());\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ngroup = uploadcare.file_group(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nprint(group.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nuuid = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\"\nputs Uploadcare::Group.info(uuid).inspect\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet group = try await uploadcare.groupInfo(withUUID: \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nprint(group)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval group = uploadcare.getGroup(groupId = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nLog.d(\"TAG\", group.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a file group by its ID.\n\nGroups are identified in a way similar to individual files. A group ID consists of a UUID\nfollowed by a “~” (tilde) character and a group size: integer number of the files in the group.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-group",
                "method": "DELETE",
                "id": "deleteGroup",
                "name": "Delete group",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Group UUID.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/groups/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/groups/badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12",
                    "pathParameters": {
                      "uuid": "badfc9f7-f88f-4921-9cc0-22e2c08aa2da~12"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  deleteGroup,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteGroup(\n  {\n    uuid: 'c5bec8c7-d4b6-4921-9e55-6edb027546bc~1',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->group();\ntry {\n    $api->removeGroup('c5bec8c7-d4b6-4921-9e55-6edb027546bc~1');\n} catch (\\Throwable $e) {\n    echo \\sprintf('Error while group deletion: %s', $e->getMessage());\n}\necho 'Group successfully deleted';\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile_group = uploadcare.file_group(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\nfile_group.delete()\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::Group.delete(\"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\ntry await uploadcare.deleteGroup(withUUID: \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nuploadcare.deleteGroup(groupId = \"c5bec8c7-d4b6-4921-9e55-6edb027546bc~1\")\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/groups/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a file group by its ID.\n\n**Note**: The operation only removes the group object itself. **All the files that were part of the group are left as is.**",
                "authed": true
              }
            ],
            "types": ["type_group:GroupsListRequestOrdering", "type_group:GroupsListResponse"],
            "subpackages": [],
            "urlSlug": "group",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_project": {
            "subpackageId": "subpackage_project",
            "name": "Project",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "info",
                "migratedFromUrlSlugs": ["project-info"],
                "method": "GET",
                "id": "info",
                "name": "Project info",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/project"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Project"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/project",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "collaborators": [
                        {
                          "email": "email",
                          "name": "name"
                        }
                      ],
                      "name": "demo",
                      "pub_key": "YOUR_PUBLIC_KEY",
                      "autostore_enabled": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "collaborators": [
                          {
                            "email": "email",
                            "name": "name"
                          }
                        ],
                        "name": "demo",
                        "pub_key": "YOUR_PUBLIC_KEY",
                        "autostore_enabled": true
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->project();\n$projectInfo = $api->getProjectInfo();\necho \\sprintf(\"Project %s info:\\n\", $projectInfo->getName());\necho \\sprintf(\"Public key: %s\\n\", $projectInfo->getPubKey());\necho \\sprintf(\"Auto-store enabled: %s\\n\", $projectInfo->isAutostoreEnabled() ? 'yes' : 'no');\nforeach ($projectInfo->getCollaborators() as $email => $name) {\n    echo \\sprintf(\"%s: %s\\n\", $name, $email);\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, ProjectInfo\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nproject_info = uploadcare.get_project_info()\nprint(project_info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nproject_info = Uploadcare::Project.show\nputs project_info.inspect\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet project = try await uploadcare.getProjectInfo()\nprint(project)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval project = uploadcare.getProject()\nLog.d(\"TAG\", project.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/project",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/project",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/project",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Getting info about account project.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "project",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_webhook": {
            "subpackageId": "subpackage_webhook",
            "name": "Webhook",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "webhooks-list",
                "migratedFromUrlSlugs": ["list-of-webhooks"],
                "method": "GET",
                "id": "webhooksList",
                "name": "List of webhooks",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/webhooks"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:WebhookOfListResponse"
                      }
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "id": 1,
                        "project": 13,
                        "created": "2016-04-27T11:49:54Z",
                        "updated": "2016-04-27T12:04:57Z",
                        "event": "file.infected",
                        "target_url": "http://example.com/hooks/receiver",
                        "is_active": true,
                        "version": "0.7",
                        "signing_secret": "7kMVZivndx0ErgvhRKAr"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "id": 1,
                          "project": 13,
                          "created": "2016-04-27T11:49:54Z",
                          "updated": "2016-04-27T12:04:57Z",
                          "event": "file.infected",
                          "target_url": "http://example.com/hooks/receiver",
                          "is_active": true,
                          "version": "0.7",
                          "signing_secret": "7kMVZivndx0ErgvhRKAr"
                        }
                      ]
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  listOfWebhooks,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await listOfWebhooks({}, { authSchema: uploadcareSimpleAuthSchema })\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\nforeach ($api->listWebhooks() as $webhook) {\n    \\sprintf(\"Webhook with url %s is %s\\n\", $webhook->getTargetUrl(), $webhook->isActive() ? 'active' : 'not active');\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhooks: list[Webhook] = list(uploadcare.list_webhooks(limit=10))\nfor w in webhooks:\n    print(w.id)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nwebhooks = Uploadcare::Webhook.list\nwebhooks.each { |webhook| puts webhook.inspect }\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet webhooks = try await uploadcare.getListOfWebhooks()\nfor webhook in webhooks {\n  print(webhook)\n}\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval webhooks = uploadcare.getWebhooks()\nLog.d(\"TAG\", webhooks.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List of project webhooks.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-webhook"],
                "method": "POST",
                "id": "create",
                "name": "Create webhook",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/webhooks"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:WebhookOfListResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": 1,
                      "project": 13,
                      "created": "2016-04-27T11:49:54Z",
                      "updated": "2016-04-27T12:04:57Z",
                      "event": "file.infected",
                      "target_url": "http://example.com/hooks/receiver",
                      "is_active": true,
                      "version": "0.7",
                      "signing_secret": "7kMVZivndx0ErgvhRKAr"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": 1,
                        "project": 13,
                        "created": "2016-04-27T11:49:54Z",
                        "updated": "2016-04-27T12:04:57Z",
                        "event": "file.infected",
                        "target_url": "http://example.com/hooks/receiver",
                        "is_active": true,
                        "version": "0.7",
                        "signing_secret": "7kMVZivndx0ErgvhRKAr"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  createWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await createWebhook(\n  {\n    targetUrl: 'https://yourwebhook.com',\n    event: 'file.uploaded',\n    isActive: true,\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$result = $api->createWebhook('https://yourwebhook.com', true, 'sign-secret', 'file.uploaded');\necho \\sprintf('Webhook %s created', $result->getId());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook = uploadcare.webhooks_api.create(\n    {\n        \"event\": \"file.uploaded\",\n        \"target_url\": \"https://yourwebhook.com\",\n        \"is_active\": True,\n    }\n)\nprint(webhook)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\noptions = {\n  target_url: \"https://yourwebhook.com\",\n  event: \"file.uploaded\",\n  is_active: true\n}\nUploadcare::Webhook.create(**options)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\nlet webhook = try await uploadcare.createWebhook(targetUrl: url,  event: .fileUploaded, isActive: true, signingSecret: \"sign-secret\")\nprint(webhook)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nval webhook = uploadcare.createWebhook(\n    targetUrl = url,\n    event = EventType.UPLOADED,\n    isActive = true,\n    signingSecret = \"sign-secret\"\n)\nLog.d(\"TAG\", webhook.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create and subscribe to a webhook. You can use webhooks to receive notifications about your uploads. For instance, once a file gets uploaded to your project, we can notify you by sending a message to a target URL.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-webhook",
                "method": "PUT",
                "id": "updateWebhook",
                "name": "Update webhook",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Webhook ID.",
                      "key": "id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/webhooks/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Webhook"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/webhooks/143",
                    "pathParameters": {
                      "id": 143
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": 1,
                      "project": 13,
                      "created": "2016-04-27T11:49:54Z",
                      "updated": "2016-04-27T12:04:57Z",
                      "event": "file.infected",
                      "target_url": "http://example.com/hooks/receiver",
                      "is_active": true,
                      "version": "0.7",
                      "signing_secret": "7kMVZivndx0ErgvhRKAr"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": 1,
                        "project": 13,
                        "created": "2016-04-27T11:49:54Z",
                        "updated": "2016-04-27T12:04:57Z",
                        "event": "file.infected",
                        "target_url": "http://example.com/hooks/receiver",
                        "is_active": true,
                        "version": "0.7",
                        "signing_secret": "7kMVZivndx0ErgvhRKAr"
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  updateWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await updateWebhook(\n  {\n    id: 1473151,\n    targetUrl: 'https://yourwebhook.com',\n    event: 'file.uploaded',\n    isActive: true,\n    signingSecret: 'webhook-secret',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$webhook = $api->updateWebhook(1473151, [\n    'target_url' => 'https://yourwebhook.com',\n    'event' => 'file.uploaded',\n    'is_active' => true,\n    'signing_secret' => 'webhook-secret',\n]);\n\\sprintf(\"Webhook with url %s is %s\\n\", $webhook->getTargetUrl(), $webhook->isActive() ? 'active' : 'not active');\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook_id = 1473151\nwebhook = uploadcare.webhooks_api.update(webhook_id, {\"is_active\": False})\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nwebhook_id = 1473151\noptions = {\n  target_url: 'https://yourwebhook.com',\n  event: 'file.uploaded',\n  is_active:  true,\n  signing_secret: 'webhook-secret'\n}\nUploadcare::Webhook.update(webhook_id, options)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\nlet webhook = try await uploadcare.updateWebhook(id: 1473151, targetUrl: url, event: .fileInfoUpdated, isActive: true, signingSecret: \"webhook-secret\")\nprint(webhook)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nval webhook = uploadcare.updateWebhook(\n    webhookId = 1473151,\n    targetUrl = url,\n    event = EventType.UPLOADED,\n    isActive = true,\n    signingSecret = \"\",\n)\nLog.d(\"TAG\", webhook.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/webhooks/1",
                    "pathParameters": {
                      "id": 1
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks/1",
                    "pathParameters": {
                      "id": 1
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks/1",
                    "pathParameters": {
                      "id": 1
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update webhook attributes.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "unsubscribe",
                "migratedFromUrlSlugs": ["delete-webhook"],
                "method": "DELETE",
                "id": "unsubscribe",
                "name": "Delete webhook",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/webhooks/unsubscribe"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  }
                ],
                "examples": [
                  {
                    "path": "/webhooks/unsubscribe",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  deleteWebhook,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await deleteWebhook(\n  {\n    targetUrl: 'https://yourwebhook.com',\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->webhook();\n$result = $api->deleteWebhook('https://yourwebhook.com');\necho $result ? 'Webhook has been deleted' : 'Webhook is not deleted, something went wrong';\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare, Webhook\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nwebhook_id = 1473151\nuploadcare.delete_webhook(webhook_id)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nputs Uploadcare::Webhook.delete('https://yourwebhook.com')\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet url = URL(string: \"https://yourwebhook.com\")!\ntry await uploadcare.deleteWebhook(forTargetUrl: url)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval url = URI(\"https://yourwebhook.com\")\nuploadcare.deleteWebhook(url)\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/webhooks/unsubscribe",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks/unsubscribe",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/webhooks/unsubscribe",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Unsubscribe and delete a webhook.",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "webhook",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_conversion": {
            "subpackageId": "subpackage_conversion",
            "name": "Conversion",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "document-convert-info",
                "migratedFromUrlSlugs": ["document-info"],
                "method": "GET",
                "id": "documentConvertInfo",
                "name": "Document info",
                "path": {
                  "pathParameters": [
                    {
                      "description": "File uuid.",
                      "key": "uuid",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/convert/document/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "uuid"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertInfoResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 503
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 503
                  }
                ],
                "examples": [
                  {
                    "path": "/convert/document/86c91c35-58e1-41f7-9b23-2d7652cfcd17",
                    "pathParameters": {
                      "uuid": "86c91c35-58e1-41f7-9b23-2d7652cfcd17"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "error": "error",
                      "format": {
                        "name": "txt",
                        "conversion_formats": [
                          {
                            "name": "epub"
                          },
                          {
                            "name": "pdf"
                          }
                        ]
                      },
                      "converted_groups": {
                        "{conversion_format}": "{conversion_format}"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "error",
                        "format": {
                          "name": "txt",
                          "conversion_formats": [
                            {
                              "name": "epub"
                            },
                            {
                              "name": "pdf"
                            }
                          ]
                        },
                        "converted_groups": {
                          "{conversion_format}": "{conversion_format}"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/:uuid",
                    "pathParameters": {
                      "uuid": ":uuid"
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 503,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "The endpoint allows you to determine the document format and possible conversion formats.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "document-convert",
                "migratedFromUrlSlugs": ["convert-document"],
                "method": "POST",
                "id": "documentConvert",
                "name": "Convert document",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/convert/document"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An array of UUIDs of your source documents to convert together with the specified target format (see [documentation](https://uploadcare.com/docs/transformations/document-conversion/)).",
                        "key": "paths",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.\n",
                        "key": "store",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_conversion:DocumentJobSubmitParametersStore"
                          }
                        }
                      },
                      {
                        "description": "When `save_in_group` is set to `\"1\"`, multi-page documents additionally will be saved as a file group.\n",
                        "key": "save_in_group",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_conversion:DocumentJobSubmitParametersSaveInGroup"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/convert/document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "paths": [
                        "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                        "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                        "8ddbbb48-0927-4df7-afac-c6031668b01b/document/"
                      ],
                      "store": "0",
                      "save_in_group": "1"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "problems": {
                        "8ddbbb48-0927-4df7-afac-c6031668b01b": "Bad path \"8ddbbb48-0927-4df7-afac-c6031668b01b\". Use UUID or CDN URL"
                      },
                      "result": [
                        {
                          "original_source": "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                          "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                          "token": 445630631
                        },
                        {
                          "original_source": "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                          "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                          "token": 445630637
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "paths": [
                          "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                          "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                          "8ddbbb48-0927-4df7-afac-c6031668b01b/document/"
                        ],
                        "store": "0",
                        "save_in_group": "1"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "problems": {
                          "8ddbbb48-0927-4df7-afac-c6031668b01b": "Bad path \"8ddbbb48-0927-4df7-afac-c6031668b01b\". Use UUID or CDN URL"
                        },
                        "result": [
                          {
                            "original_source": "https://cdn.uploadcare.com/5ffa2545-ea40-4e71-a9e4-3a8e49b7b737/document/-/format/jpg/-/page/1/",
                            "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                            "token": 445630631
                          },
                          {
                            "original_source": "88a51210-bd69-4411-bc72-a9952d9512cd/document/-/format/pdf/",
                            "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                            "token": 445630637
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\nuse Uploadcare\\Interfaces\\Conversion\\ConvertedItemInterface;\nuse Uploadcare\\Interfaces\\Response\\ResponseProblemInterface;\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$request = new Uploadcare\\Conversion\\DocumentConversionRequest('pdf');\n$result = $api->convertDocument('1bac376c-aa7e-4356-861b-dd2657b5bfd2', $request);\nif ($result instanceof ConvertedItemInterface) {\n    echo \\sprintf('Conversion requested. Key is \\'%s\\'', $result->getToken());\n}\nif ($result instanceof ResponseProblemInterface) {\n    echo \\sprintf('Error in request: %s', $result->getReason());\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\nfile = uploadcare.file('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\ntransformation = DocumentTransformation().format(DocumentFormat.pdf)\nconverted_file = file.convert(transformation)\nprint(converted_file.info)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ndocument_params = { uuid: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\", format: :pdf }\noptions = { store: true }\nUploadcare::DocumentConverter.convert(document_params, options)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nlet settings = DocumentConversionJobSettings(forFile: file)\n  .format(.pdf)\n  \nlet response = try await uploadcare.convertDocumentsWithSettings([settings])\nprint(response)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval conversionJob = DocumentConversionJob(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n    .apply { setFormat(DocumentFormat.PDF) }\nval converter = DocumentConverter(uploadcare, listOf(conversionJob))\nval files = converter.convert()\nLog.d(\"TAG\", files.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/convert/document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {},
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {},
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Uploadcare allows you to convert files to different target formats. Check out the [conversion capabilities](https://uploadcare.com/docs/transformations/document-conversion/#document-file-formats) for each supported format.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "document-convert-status",
                "migratedFromUrlSlugs": ["document-conversion-job-status"],
                "method": "GET",
                "id": "documentConvertStatus",
                "name": "Document conversion job status",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Job token.",
                      "key": "token",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/convert/document/status/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "token"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_conversion:DocumentConvertStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 503
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 503
                  }
                ],
                "examples": [
                  {
                    "path": "/convert/document/status/1",
                    "pathParameters": {
                      "token": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "processing",
                      "error": "error",
                      "result": {
                        "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "processing",
                        "error": "error",
                        "result": {
                          "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae"
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  conversionJobStatus,\n  ConversionType,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await conversionJobStatus(\n  {\n    type: ConversionType.DOCUMENT,\n    token: 32921143\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$status = $api->documentJobStatus(32921143);\necho \\sprintf('Conversion status: %s', $status->getError() ?? $status->getStatus());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntoken = 32921143\ndocument_convert_status = uploadcare.document_convert_api.status(token)\nprint(document_convert_status.status)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = 32921143\nputs Uploadcare::DocumentConverter.status(token)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet job = try await uploadcare.documentConversionJobStatus(token: 32921143)\nprint(job.statusString)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getDocumentConversionStatus(token = 32921143)\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/convert/document/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/document/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 503,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Once you get a conversion job result, you can acquire a conversion job status via token. Just put it in your request URL as `:token`.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "video-convert",
                "migratedFromUrlSlugs": ["convert-video"],
                "method": "POST",
                "id": "videoConvert",
                "name": "Convert video",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/convert/video"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "An array of UUIDs of your video files to process together with a set of assigned operations (see [documentation](https://uploadcare.com/docs/transformations/video-encoding/)).",
                        "key": "paths",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "list",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "When `store` is set to `\"0\"`, the converted files will only be available for 24 hours. `\"1\"` makes converted files available permanently. If the parameter is omitted, it checks the `Auto file storing` setting of your Uploadcare project identified by the `public_key` provided in the `auth-param`.\n",
                        "key": "store",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_conversion:VideoJobSubmitParametersStore"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_conversion:VideoConvertResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  }
                ],
                "examples": [
                  {
                    "path": "/convert/video",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "paths": [
                        "d52d7136-a2e5-4338-9f45-affbf83b857d/video/",
                        "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                        "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2"
                      ],
                      "store": "1"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "problems": {
                        "13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d": "Bad path \"13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d\". Use UUID or CDN URL"
                      },
                      "result": [
                        {
                          "original_source": "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                          "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                          "token": 445630631,
                          "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1"
                        },
                        {
                          "original_source": "500196bc-9da5-4aaf-8f3e-70a4ce86edae/video/",
                          "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                          "token": 445630637,
                          "thumbnails_group_uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb~1"
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "paths": [
                          "d52d7136-a2e5-4338-9f45-affbf83b857d/video/",
                          "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                          "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2"
                        ],
                        "store": "1"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "problems": {
                          "13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d": "Bad path \"13cd56e2-f6d7-4c66-ab1b-ffd13cd6646d\". Use UUID or CDN URL"
                        },
                        "result": [
                          {
                            "original_source": "d52d7136-a2e5-4338-9f45-affbf83b857d/video/-/format/ogg/-/quality/best/",
                            "uuid": "d52d7136-a2e5-4338-9f45-affbf83b857d",
                            "token": 445630631,
                            "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1"
                          },
                          {
                            "original_source": "500196bc-9da5-4aaf-8f3e-70a4ce86edae/video/",
                            "uuid": "28843a09-dd3d-4b8a-ad4f-8aa5f8f60ff2",
                            "token": 445630637,
                            "thumbnails_group_uuid": "be3b4d5e-179d-460e-8a5d-69112ac86cbb~1"
                          }
                        ]
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "PHP",
                        "code": "<?php\nuse Uploadcare\\Interfaces\\Conversion\\ConvertedItemInterface;\nuse Uploadcare\\Interfaces\\Response\\ResponseProblemInterface;\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$request = (new Uploadcare\\Conversion\\VideoEncodingRequest())\n    ->setHorizontalSize(1024)\n    ->setVerticalSize(768)\n    ->setResizeMode('preserve_ratio')\n    ->setTargetFormat('mp4');\n$result = $api->convertVideo('1bac376c-aa7e-4356-861b-dd2657b5bfd2', $request);\nif ($result instanceof ConvertedItemInterface) {\n    echo \\sprintf('Conversion requested. Key is \\'%s\\'', $result->getToken());\n}\nif ($result instanceof ResponseProblemInterface) {\n    echo \\sprintf('Error in request: %s', $result->getReason());\n}\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntransformation = (\n    VideoTransformation()\n    .format(VideoFormat.mp4)\n    .size(width=640, height=480, resize_mode=ResizeMode.add_padding)\n    .quality(Quality.lighter)\n    .cut(start_time=\"0:1.535\", length=\"0:10.0\")\n    .thumbs(10)\n)\n\npath = transformation.path('1bac376c-aa7e-4356-861b-dd2657b5bfd2')\nresponse = uploadcare.video_convert_api.convert([path])\nvideo_convert_info = response.result[0]\nconverted_file = uploadcare.file(video_convert_info.uuid)\nvideo_convert_status = uploadcare.video_convert_api.status(video_convert_info.token)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\nvideo_params = {\n  uuid: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\",\n  format: :mp4,\n  quality: :lighter\n}\noptions = { store: true }\nUploadcare::VideoConverter.convert(video_params, options)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet file = try await uploadcare.fileInfo(withUUID: \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\nlet settings = VideoConversionJobSettings(forFile: videoFile)\n  .format(.mp4)\n  .size(VideoSize(width: 640, height: 480))\n  .resizeMode(.addPadding)\n  .quality(.lighter)\n  .cut( VideoCut(startTime: \"0:0:5.000\", length: \"15\") )\n  .thumbs(10)\n\nlet response = try await uploadcare.convertVideosWithSettings([settings])\nprint(response)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval conversionJob = VideoConversionJob(fileId = \"1bac376c-aa7e-4356-861b-dd2657b5bfd2\")\n    .apply {\n        setFormat(VideoFormat.MP4)\n        resize(width = 640, height = 480, resizeMode = VideoResizeMode.LETTERBOX)\n        quality(VideoQuality.LIGHTER)\n        cut(startTime = \"0:0:5.000\", length = \"15\")\n        thumbnails(10)\n    }\nval converter = VideoConverter(uploadcare, listOf(conversionJob))\nval files = converter.convert()\nLog.d(\"TAG\", files.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/convert/video",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {},
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/video",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "requestBody": {},
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Uploadcare video processing adjusts video quality, format (mp4, webm, ogg), and size, cuts it, and generates thumbnails. Processed video is instantly available over CDN.",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.uploadcare.com"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "video-convert-status",
                "migratedFromUrlSlugs": ["video-conversion-job-status"],
                "method": "GET",
                "id": "videoConvertStatus",
                "name": "Video conversion job status",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Job token.",
                      "key": "token",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/convert/video/status/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "token"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_conversion:VideoConvertStatusResponse"
                    }
                  }
                },
                "errors": [
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 429
                  },
                  {
                    "type": {
                      "type": "unknown"
                    },
                    "statusCode": 503
                  }
                ],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 400
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 401
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 404
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 429
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "unknown"
                      }
                    },
                    "statusCode": 503
                  }
                ],
                "examples": [
                  {
                    "path": "/convert/video/status/1",
                    "pathParameters": {
                      "token": 1
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "status": "processing",
                      "error": "error",
                      "result": {
                        "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae",
                        "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "status": "processing",
                        "error": "error",
                        "result": {
                          "uuid": "500196bc-9da5-4aaf-8f3e-70a4ce86edae",
                          "thumbnails_group_uuid": "575ed4e8-f4e8-4c14-a58b-1527b6d9ee46~1"
                        }
                      }
                    },
                    "codeSamples": [
                      {
                        "language": "JavaScript",
                        "code": "import {\n  conversionJobStatus,\n  ConversionType,\n  UploadcareSimpleAuthSchema,\n} from '@uploadcare/rest-client';\n\nconst uploadcareSimpleAuthSchema = new UploadcareSimpleAuthSchema({\n  publicKey: 'YOUR_PUBLIC_KEY',\n  secretKey: 'YOUR_SECRET_KEY',\n});\n\nconst result = await conversionJobStatus(\n  {\n    type: ConversionType.VIDEO,\n    token: 1201016744\n  },\n  { authSchema: uploadcareSimpleAuthSchema }\n)\n",
                        "name": "JS"
                      },
                      {
                        "language": "PHP",
                        "code": "<?php\n$configuration = Uploadcare\\Configuration::create((string) $_ENV['UPLOADCARE_PUBLIC_KEY'], (string) $_ENV['UPLOADCARE_SECRET_KEY']);\n\n$api = (new Uploadcare\\Api($configuration))->conversion();\n$status = $api->videoJobStatus(1201016744);\necho \\sprintf('Conversion status: %s', $status->getError() ?? $status->getStatus());\n",
                        "name": "PHP"
                      },
                      {
                        "language": "Python",
                        "code": "from pyuploadcare import Uploadcare\nuploadcare = Uploadcare(public_key='YOUR_PUBLIC_KEY', secret_key='YOUR_SECRET_KEY')\n\ntoken = 1201016744\nvideo_convert_status = uploadcare.video_convert_api.status(token)\nprint(video_convert_status.status)\n",
                        "name": "Python"
                      },
                      {
                        "language": "Ruby",
                        "code": "require 'uploadcare'\nUploadcare.config.public_key = \"YOUR_PUBLIC_KEY\"\nUploadcare.config.secret_key = \"YOUR_SECRET_KEY\"\n\ntoken = 1201016744\nputs Uploadcare::VideoConverter.status(token)\n",
                        "name": "Ruby"
                      },
                      {
                        "language": "Swift",
                        "code": "import Uploadcare\n\nlet uploadcare = Uploadcare(withPublicKey: \"YOUR_PUBLIC_KEY\", secretKey: \"YOUR_SECRET_KEY\")\n\nlet job = try await uploadcare.videoConversionJobStatus(token: 1201016744)\nprint(job.statusString)\n",
                        "name": "Swift"
                      },
                      {
                        "language": "Kotlin",
                        "code": "import com.uploadcare.android.library.api.UploadcareClient\n\nval uploadcare = UploadcareClient(publicKey = \"YOUR_PUBLIC_KEY\", secretKey = \"YOUR_SECRET_KEY\")\n\nval status = uploadcare.getVideoConversionStatus(token = 1201016744)\nLog.d(\"TAG\", status.toString())\n",
                        "name": "Kotlin"
                      }
                    ]
                  },
                  {
                    "path": "/convert/video/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 400,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/video/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 401,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/video/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 404,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/video/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 429,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/convert/video/status/0",
                    "pathParameters": {
                      "token": 0
                    },
                    "queryParameters": {},
                    "headers": {
                      "Accept": "string",
                      "Uploadcare": "string",
                      "Uploadcare.Simple": "string"
                    },
                    "responseStatusCode": 503,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Once you get a processing job result, you can acquire a processing job status via token. Just put it in your request URL as `:token`.",
                "authed": true
              }
            ],
            "types": [
              "type_conversion:DocumentConvertInfoResponseFormatConversionFormatsItem",
              "type_conversion:DocumentConvertInfoResponseFormat",
              "type_conversion:DocumentConvertInfoResponseConvertedGroups",
              "type_conversion:DocumentConvertInfoResponse",
              "type_conversion:DocumentJobSubmitParametersStore",
              "type_conversion:DocumentJobSubmitParametersSaveInGroup",
              "type_conversion:DocumentConvertResponseResultItem",
              "type_conversion:DocumentConvertResponse",
              "type_conversion:DocumentConvertStatusResponseStatus",
              "type_conversion:DocumentConvertStatusResponseResult",
              "type_conversion:DocumentConvertStatusResponse",
              "type_conversion:VideoJobSubmitParametersStore",
              "type_conversion:VideoConvertResponseResultItem",
              "type_conversion:VideoConvertResponse",
              "type_conversion:VideoConvertStatusResponseStatus",
              "type_conversion:VideoConvertStatusResponseResult",
              "type_conversion:VideoConvertStatusResponse"
            ],
            "subpackages": [],
            "urlSlug": "conversion",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "header",
          "headerWireValue": "Authorization",
          "nameOverride": "apiKey"
        },
        "hasMultipleBaseUrls": false
      }
    },
    "files": {
      "5529d56f-3bd2-44b6-855e-eec308770b85": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/uploadcare-preview-79798ef5-07dc-4ff0-928d-24b4c93ccd4d.docs.buildwithfern.com/2024-03-23T15%3A33%3A18.120Z/assets/logo.svg",
      "419b3076-7e59-4e7b-831c-096df91b4e07": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/uploadcare-preview-79798ef5-07dc-4ff0-928d-24b4c93ccd4d.docs.buildwithfern.com/2024-03-23T15%3A33%3A18.120Z/assets/favicon.png"
    },
    "filesV2": {
      "5529d56f-3bd2-44b6-855e-eec308770b85": {
        "type": "image",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/uploadcare-preview-79798ef5-07dc-4ff0-928d-24b4c93ccd4d.docs.buildwithfern.com/2024-03-23T15%3A33%3A18.120Z/assets/logo.svg",
        "width": 314,
        "height": 59
      },
      "419b3076-7e59-4e7b-831c-096df91b4e07": {
        "type": "image",
        "url": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/uploadcare-preview-79798ef5-07dc-4ff0-928d-24b4c93ccd4d.docs.buildwithfern.com/2024-03-23T15%3A33%3A18.120Z/assets/favicon.png",
        "width": 32,
        "height": 32
      }
    },
    "pages": {
      "pages/index.mdx": {
        "markdown": "---\ntitle: 'Intro'\ndescription: 'Uploadcare makes simple, powerful, developer-friendly building blocks to handle file uploading, storage, processing, and delivery. You get a complete file handling infrastructure.'\nwithBreadcrumbs: false\nwithToc: false\nwithFeedback: false\nwithSupportLinks: false\n---\n\n<Tabs>\n  <Tab title='Tab 1'>\n    Some explanation\n    <EndpointRequestSnippet endpoint=\"PUT /files/{uuid}/storage\" />\n  </Tab>\n  <Tab title='Tab 2'>\n    <EndpointResponseSnippet endpoint=\"PUT /files/{uuid}/storage\" />\n  </Tab>\n</Tabs>\n\n<iframe src=\"https://codesandbox.io/embed/q3m3lm?view=Editor+%2B+Preview\"\n    style={{\n      width: \"100%\",\n      height: \"500px\",\n      border: 0,\n      borderRadius: \"4px\",\n      overflow: \"hidden\",\n      }}\n    title=\"Cloud Image Editor: Editable images\"\n    allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n    sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n{/* style=\"width:100%; height: 500px; border:0; border-radius: 4px; overflow:hidden;\" */}\n\nUploadcare makes simple, powerful, developer-friendly building blocks to handle file uploading, storage, processing, and delivery. You get a complete file handling infrastructure.\n"
      },
      "pages/start/quickstart.mdx": {
        "markdown": "---\n  title: 'Uploadcare quick start'\n  description: 'Uploadcare provides companies with simple, powerful, developer-friendly building blocks to handle file uploading, processing, and delivery. A complete out-of-the-box solution, built for engineers by engineers.'\n---\n\nimport {\n  Tabs as DocsTabs,\n  Panel as DocsTabPanel,\n  Tab as DocsTab,\n  TabsContainer as DocsTabsContainer,\n  PanelsContainer as DocsPanelsContainer,\n  CdnExample , Messages, WidgetV4V3Warning } from '@uploadcare/docs-components'\n\nimport InstallNDP from '@content/uploads/_templates/install-npm.mdx'\nimport InstallCDN from '@content/uploads/_templates/install-cdn.mdx'\n\n# Quick start\n\nWhen building a website or an app, you'll need to handle uploading, storing,\nprocessing, and delivering various files, either from you, or from your users.\nWe have various uploading methods, a few storage options, an API to manage\nfiles, and a CDN with on-the-fly processing capabilities. Everything is\ncompliant with numerous international regulations.\n\nIn this quickstart we'll show you our [File Uploader][file-uploader] and\n[image processing operations][transformations-image-list]. We will also cover the rest of our\nfeatures at the end of this article.\n\n## Step 1. Uploading\n\n<Messages>\n  <WidgetV4V3Warning link='/uploads/file-uploader/' />\n</Messages>\n\n### Installation and configuration\n\nYou can either install File Uploader from CDN, or via NPM.\n\n<DocsTabs defaultTab='CDN'>\n <DocsTabsContainer>\n   <DocsTab to='CDN'>CDN</DocsTab>\n   <DocsTab to='NPM'>NPM</DocsTab>\n </DocsTabsContainer>\n <DocsPanelsContainer>\n   <DocsTabPanel tab='CDN'>\n     <InstallCDN />\n   </DocsTabPanel>\n   <DocsTabPanel tab='NPM'>\n     <InstallNDP />\n   </DocsTabPanel>\n </DocsPanelsContainer>\n</DocsTabs>\n\nFile Uploader can be presented in [a few ways][file-uploader-solutions], e.g.\nregularly, inline or minimalistic.\n\nRegular File Uploader:\n\n```html\n<lr-config\n  ctx-name=\"my-uploader\"\n  pubkey=\"YOUR_PUBLIC_KEY\"\n></lr-config>\n<lr-file-uploader-regular\n  css-src=\"https://cdn.jsdelivr.net/npm/@uploadcare/blocks@{{__BLOCKS_VERSION__}}/web/lr-file-uploader-regular.min.css\"\n  ctx-name=\"my-uploader\"\n></lr-file-uploader-regular>\n```\n\nWhere `lr-config` is a configuration block, and `lr-file-uploader-regular` is a File Uploader block.\n`ctx-name` attribute is used to wire up the configuration block with the File Uploader block.\n`css-src` attribute is used to specify basic CSS styles.\nTo dive further, check out [configuration][file-uploader-configuration] guide.\n\nHere you can find examples how to integrate it into your stack of choice:\n\n* [React][file-uploader-react-git]\n* [Angular][file-uploader-angular-git]\n* [Vue][file-uploader-vue-git]\n\n## Step 2. Storage & CDN\n\nOnce a file is uploaded, it goes to your Uploadcare storage and instantly\nbecomes available on CDN.\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/\",\n    \"https://ucarecdn.com/:uuid/\"\n  ]}\n/>\n\n(By default, Upload API doesn't store the files forever. There is a 24-hour\nwindow when you should decide whether to store uploaded files or not. But all\nof our official libraries, including File Uploader, inherit the\n[auto-store setting][project-settings-storage] from your project, where it's\nset to ON by default. You can read more about [storage behavior][storage-store]).\n\nYou can get the UUID of the uploaded files immediately on upload. For example:\n\n```js\nwindow.addEventListener('LR_UPLOAD_FINISH', (e) => {\n  console.log(e.detail);\n});\n```\n\nPlease refer to the [Events][file-uploader-events] page to view the complete list of available events.\n\nWe recommend saving UUIDs instead of CDN URLs because this will let you\nprocess these files easier later on.\n\n## Step 3. Processing\n\nYou can add image processing operations by including directives in the CDN URL:\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/preview/640x640/image.jpg\",\n    \"https://ucarecdn.com/:uuid/-/:operation/:params/:filename\"\n  ]}\n/>\n\nImagine you're building a service with a lot of street photos:\n\n* You'll need to optimize the size and quality of the images for page load time.\n* You'll have to blur the faces on the photos to comply with privacy laws.\n* You'll want to add your watermark to every picture.\n\nConstruct the value of the image `src` attribute template, adding the operations\nyou pick, and use this template for every street photo in your project:\n\n```\nhttps://ucarecdn.com/0e679e26-781b-4a66-b760-b2125f8c862c/\n           -/resize/1200x/\n           -/blur_region/faces/\n           -/overlay/2f44b1c2-f71a-4f84-bbe2-6d96c7e35a2d/100p,100p/\n```\n\n<img src=\"https://ucarecdn.com/0e679e26-781b-4a66-b760-b2125f8c862c/-/resize/1200x/-/blur_region/faces/-/overlay/2f44b1c2-f71a-4f84-bbe2-6d96c7e35a2d/100p,100p\"\n     alt=\"Street photo with blured faces, resized, with auto format\"\n     title=\"Processed street photo\" />\n\nSee the full list of [image processing operations][image-operations-list].\n\n## More features\n\n* Lear more about [uploading files][uploading-files] options.\n* Integrate Uploadcare into your mobile app with [native SDKs][integrations].\n* Implement [secure workflows][security] for uploading and delivering files.\n* [Fetch and deliver remote files][delivery-proxy] without explicitly uploading files.\n* Add [arbitrary metadata][file-metadata], [remove image background][remove-bg],\n [recognize objects][intelligence-object-recognition], [process videos][transformations-video],\n [convert documents][transformations-docs], and [detect viruses][malware-protection].\n* Explore [project settings][settings-projects].\n* [Migrate][migro-guide] your files to Uploadcare.\n"
      },
      "pages/security/index.mdx": {
        "markdown": "---\n  title: 'Security and compliance'\n  description:\n    'Learn how Uploadcare can handle critical user data, including critical information in-line with the GDPR/CCPA and HIPAA compliances needed to operate in the EU and US legislation respectively.'\n---\n\n# Security\n\nAt Uploadcare we honor the safety of personal and business-sensitive information\nand implement compliancy with GDPR, HIPAA and other standards and regulations.\nUploadcare provides you with advanced privacy features to upload, access and\nmanage your content in a secure way.\n\n## Signed uploads\n\nControl who and when can upload files. It prevents from uploading files using a\nPublic API key only. You'll have to generate a security token on the backend\nto&nbsp;upload a file. [Signed uploads][secure-uploads] work for a particular\nUploadcare project.\n\n## Signed URLs\n\nControl who and when can request files. Enabling this feature limits access to\nyour project files. A user will require a token from your backend to access\nthe&nbsp;content. \n[Signed URLs][secure-delivery] work in conjunction with custom domains.\n\n## DDoS protection\n\nCustomers are automatically protected against Distributed Denial of Service (DDoS).\n\n## Malware protection\n\nEnable [malware checking][malware-protection] for all uploaded files. \n\n## Search engine indexing\n\nRestrict [search engines][search-engine-indexing] to analyze and index content \nin your project for global search: image and text. \nSetup search engine indexing behavior for each of your projects.\n\n## Signed webhooks\n\nControl who and when can call your webhook endpoint (URL). Without\nverification, anyone can spoof a request sent to the webhook URL. The solution\nis to sign each [webhook payload][secure-webhooks] with a secret.\n\n## HIPAA guide\n\nHIPAA is US legislation providing data privacy and security provisions for\nsafeguarding electronic protected health information (ePHI). On our Enterprise\nplan, Uploadcare can be configured to support [HIPAA compliant][guide-hipaa] \nworkflow.\n\n## Compliance\n\nUploadcare is committed to complying with industry-standard privacy and security\nmeasures and all applicable laws and regulations to keep customer and end-user\ndata safe and secure: SOC 2, HIPAA, GDPR. Learn more about it in our \n[Trust Center][uc-trust].\n"
      },
      "pages/billing.mdx": {
        "markdown": "---\n  title: 'Uploadcare billing'\n  description:\n    'How Uploadcare account charges for Operations, Traffic & Storage usage.'\n---\n\n# Billing\n\nThis page serves as a guide on Uploadcare billing process, explaining what\ncharges may apply to your [Operations](#operations), [Traffic](#traffic),\nand [Storage](#storage) usage.\n\n## Operations\n\nThink of operations as a credit balance that is spent depending on the complexity\nof actions with your files using Uploadcare APIs: file uploading, image optimization\nand transformations, video processing, document conversion, outcoming webhooks\nand various API requests.\n\nAny incoming API request or outgoing request ([webhooks][webhooks]) is considered\nas 1 operation. However some advanced requests like background removal or\nAVIF image optimization require more operations to be performed.\n\n### Uploading\n\n#### Uploading volume\n\nEvery successful file upload results in an extra operation count for each 100 MB.\nNote that the file size is rounded up to the closest number divisible by 100\nfor calculation.\n\n#### Malware protection\n\nAll uploaded files are screened for viruses.\nPlease note that a single additional operation is deducted for every 100 MB\nscanned for viruses.\n\n#### Examples\n\nThe cost of uploading a 20 MB file:\n\n  * 1 operation for the API request.\n  * 1 operation due to rounding up the file size to 100 MB.\n  * 1 operation for the virus scan of 100 MB.\n\nFor a 250 MB file:\n\n  * 2 operations for the API request.\n  * 3 operations attributed to rounding the file size up to 300 MB.\n  * 3 operations for the virus scan of 300 MB.\n\nUploading a file larger than 100 MB requires 2 API requests.\nLearn more about [Multipart uploading][uploading-files-multipart].\n\n### Image processing\nWhen requesting an image from the CDN, you can do a lot of things all at once.\nYou can resize, apply effects, and make it load faster, all in one go.\nNo matter how complicated your task is, or how many changes are included\nin the URL, Uploadcare only counts it as one operation for each unique URL\nper billing cycle. Please note that, in addition to operations,\nCDN traffic related to your tasks is also taken into account.\n\nThere are certain tasks that require more computational power that will\nresult in additional operations being consumed:\n\n| Feature                                                                     | Operations per request |\n| --------------------------------------------------------------------------- | ---------------------- |\n| [Image compression to AVIF format][transformations-image-format]            | 2                      |\n| [Animated images optimization][transformations-gif-to-video]                | 2                      |\n| [Image transformations with facial detection][face-detection-operations]    | 2                      |\n| [Background removal][remove-bg]                                             | 750                    |\n\n#### Examples\n\nAdjust the size, optimize, and convert the image format to WebP:\n\n  * 1 operation for a unique URL.\n\nAdjust the size, optimize, and convert the image format to AVIF:\n\n  * 1 operation for a unique URL.\n  * 1 additional operation for AVIF conversion.\n\nRemove the background, add an overlay, and resize:\n\n  * 1 operation for a unique URL.\n  * 749 additional operations for background removal.\n\n\n### Delivery\nWhen your users request a file, Uploadcare only counts the traffic if the\nfile is either the original or a cached version. However, if a file isn't\ncached and needs processing—especially if that processing involves complex\ntransformations specified in the URL—it will use up additional operations\nbased on the complexity of the tasks.\n\nWhen a file is requested, original or processed, it gets cached on CDN.\nThe lifespan of a file in the cache can vary depending on factors like\nhow frequently it's accessed. Popular files that are requested often tend\nto stay longer. On the other hand, infrequently accessed files might be removed.\n\n### File management\nEach API request counts as one operation.\nBut some actions can count as extra operations, depending on how complex they are:\n\n| Feature                                                  | Operations     |\n| -------------------------------------------------------- | -------------- |\n| [Detecting unsafe content in an image][unsafe-content]   | 40 per image   |\n| [Processing a video][transformations-video]              | 100 per minute |\n| [Converting a document][transformations-docs]            | 100 per 50 MB  |\n| [Auto-tagging an image][intelligence-object-recognition] | 40 per image   |\n\nThese operations affect your storage volume because each operation means\na new file is uploaded. But, they don't affect your traffic usage.\n\n### Billing\n\nUploadcare calculates your operations and rounds up to the nearest thousand.\nSo, if you've executed 1700 operations, we'll account for it as 2000.\n\n## Traffic\n\nTotal amount of content that's been delivered from your account.\nTo track how much traffic you're using, just check out the\n[Analytics][project-analytics] section in your Dashboard.\n\n## Storage\n\nTotal size of all the files you have stored in your account.\nOnly the uploaded and stored files count towards this.\nActions like [CDN operations][delivery-operations] and\n[image processing operations][transformations-image-list] don't consume your\nstorage space because the results are only cached on the CDN.\nHowever, operations like video processing or document conversion do affect\nyour storage volume, as each operation results in a new file upload.\n\nTo monitor your storage usage, simply check the [Analytics][project-analytics]\nsection on your Dashboard.\n\n## Plans and limits\n\n|               | Demo              | Pro     | Business | Business Plus |\n| ------------- | ----------------- | ------- | -------- | ------------- |\n| Operations    | 10,000            | 100,000 | 250,000  | 500,000       |\n| Traffic       | 5 GB              | 75 GB   | 200 GB   | 400 GB        |\n| Storage       | 1 GB              | 50 GB   | 125 GB   | 250 GB        |\n| Max file size | 10 MB             | 1 GB    | 10 GB    | 100 GB        |\n| Team members  | Personal use only | 3       | 4        | 5             |\n\n### Additional resources\n\nBeginning with the Pro plan, we offer a pay-as-you-go model for additional\nusage, allowing you more flexibility and control over your usage.\nAny additional usage will be automatically charged at the rates specified below:\n\n|                  | Demo        | Pro   | Business | Business Plus |\n| ---------------- | ----------- | ----- | -------- | ------------- |\n| 1,000 operations | Not allowed | $0.50 | $0.45    | $0.40         |\n| 1 GB traffic     | Not allowed | $0.50 | $0.45    | $0.40         |\n| 1 GB storage     | Not allowed | $0.50 | $0.45    | $0.45         |\n\nIf you're interested in custom pricing and annual commitment,\n[contact our sales team][mail-sales].\n"
      },
      "pages/uploads/index.mdx": {
        "markdown": "---\n  title: 'File uploading with Uploadcare'\n  description:\n    'Uploadcare provides Upload API and powerful file uploaders for your website or app with no hassle.'\n---\n\nimport {\n  LeadParagraph,\n  Tabs as DocsTabs,\n  Panel as DocsTabPanel,\n  Tab as DocsTab,\n  TabsContainer as DocsTabsContainer,\n  PanelsContainer as DocsPanelsContainer } from '@uploadcare/docs-components'\nimport UploadApiJs from '@content/uploads/_templates/upload-api-js.mdx'\nimport UploadApiPhp from '@content/uploads/_templates/upload-api-php.mdx'\nimport UploadApiPython from '@content/uploads/_templates/upload-api-python.mdx'\nimport UploadApiRuby from '@content/uploads/_templates/upload-api-ruby.mdx'\nimport UploadApiSwift from '@content/uploads/_templates/upload-api-swift.mdx'\nimport UploadApiCurl from '@content/uploads/_templates/upload-api-curl.mdx'\n\n# File uploading\n\n<LeadParagraph>You can upload any file type, from almost any source, using a variety of upload options</LeadParagraph>\n\n- Built-in storage and CDN\n- Uploading acceleration network\n- Multipart uploading up to 5 TB per file\n- File analysis and moderation\n- Authenticated uploading process\n- Unlimited scalability on demand\n- API clients for popular platforms\n\nUpload files from almost any source using API or beautiful UI file uploaders.\nReceive and store: user-generated content, programmatically uploaded media,\nlarge files to be later optimized, etc.\n\nOnce uploaded, files become instantly accessible on our CDN via their unique\nand unguessable URLs. [Deliver][delivery] them with the set of image\noptimization and transformation operations, or [manage][file-management] via\nREST API.\n\n## File Uploader\n\nIntegrate our customizable uploading widget that provides a ton of features\nand works in all modern browsers:\n\n<Image uuid=\"52bc2490-d7df-40fd-b18c-3adc000c192d\" />\n\nOur web and mobile uploading widgets:\n* [File Uploader][file-uploader] — our flagship uploader\n* [jQuery widget][jquery-widget]\n* [iOS uploading widget][swift-integration]\n* [Android uploading widget][android-integration]\n\n## Upload API\n\nBuild custom uploading flow using Upload API directly or with an API client.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cUrl</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <UploadApiJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <UploadApiPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <UploadApiPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <UploadApiRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <UploadApiSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <UploadApiCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\nCheck out our guide to the various methods of [uploading files][uploading-files]\nand available integrations.\n\n## Proxy\n\nIt is the best and simplest way to retrieve files from existing remote locations\nand deliver them using our CDN.\n\n```\nhttps://endpoint.ucr.io/ + https://yoursite.com/assets/image.jpg =\nhttps://endpoint.ucr.io/https://yoursite.com/assets/image.jpg\n```\n\nLearn more about [Proxy][delivery-proxy].\n\n## Table of Contents\n\n| Article                                       | Description                                                                                                                                             |\n| --------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [Uploading files][uploading-files]            | Upload media files with various options. Whether you need to accept user-generated content or serve media on your website or app, we've got you covered |\n| [File Uploader][file-uploader]                | Open source, responsive and mobile-ready web solution that allows users to select and upload multiple files from various sources                        |\n| [Storage options][storage-store]              | Uploadcare storage requires no configuration and works out of the box. Learn about file storing behavior                                                |\n| [Signed uploads][secure-uploads]              | Get to control who can and when can upload files to one of your Uploadcare projects                                                                     |\n| [File analysis on upload][file-analysis]      | We extract a ton of helpful information about file that you can use to your benifit                                                                     |\n| [Validation and moderation][moderation]       | You can validate the types of files you want to accept, and apply various checks after                                                                  |\n| [Upload API][upload-api]                      | Low-level access to provide several ways of uploading files to Uploadcare servers in a secure and reliable way                                          |\n| [API integrations][integrations]              | You don't have to code most of the low-level API integrations. We have high-level libraries for all popular platforms                                   |\n"
      },
      "pages/uploading-files/index.mdx": {
        "markdown": "---\n  title: 'Uploading files'\n  description:\n    'Whether you need to accept user generated content, serve media on your website or app, or collect and prepare files to train your ML model — we’ve got you covered.'\n---\n\nimport {\n  Tabs as DocsTabs,\n  Panel as DocsTabPanel,\n  Tab as DocsTab,\n  TabsContainer as DocsTabsContainer,\n  PanelsContainer as DocsPanelsContainer } from '@uploadcare/docs-components'\nimport PostBaseJs from '@content/uploading-files/_templates/js-post-base.mdx'\nimport PostBasePhp from '@content/uploading-files/_templates/php-post-base.mdx'\nimport PostBasePython from '@content/uploading-files/_templates/python-post-base.mdx'\nimport PostBaseRuby from '@content/uploading-files/_templates/ruby-post-base.mdx'\nimport PostBaseSwift from '@content/uploading-files/_templates/swift-post-base.mdx'\nimport PostBaseCurl from '@content/uploading-files/_templates/curl-post-base.mdx'\nimport PostFromUrlJs from '@content/uploading-files/_templates/js-post-from_url.mdx'\nimport PostFromUrlPhp from '@content/uploading-files/_templates/php-post-from_url.mdx'\nimport PostFromUrlPython from '@content/uploading-files/_templates/python-post-from_url.mdx'\nimport PostFromUrlRuby from '@content/uploading-files/_templates/ruby-post-from_url.mdx'\nimport PostFromUrlSwift from '@content/uploading-files/_templates/swift-post-from_url.mdx'\nimport PostFromUrlCurl from '@content/uploading-files/_templates/curl-post-from_url.mdx'\nimport GetFromUrlStatusJs from '@content/uploading-files/_templates/js-get-from_url-status.mdx'\nimport GetFromUrlStatusPhp from '@content/uploading-files/_templates/php-get-from_url-status.mdx'\nimport GetFromUrlStatusPython from '@content/uploading-files/_templates/python-get-from_url-status.mdx'\nimport GetFromUrlStatusRuby from '@content/uploading-files/_templates/ruby-get-from_url-status.mdx'\nimport GetFromUrlStatusSwift from '@content/uploading-files/_templates/swift-get-from_url-status.mdx'\nimport GetFromUrlStatusCurl from '@content/uploading-files/_templates/curl-get-from_url-status.mdx'\nimport PostFromUrlDuplicateJs from '@content/uploading-files/_templates/js-post-from_url-duplicate.mdx'\nimport PostFromUrlDuplicatePhp from '@content/uploading-files/_templates/php-post-from_url-duplicate.mdx'\nimport PostFromUrlDuplicatePython from '@content/uploading-files/_templates/python-post-from_url-duplicate.mdx'\nimport PostFromUrlDuplicateRuby from '@content/uploading-files/_templates/ruby-post-from_url-duplicate.mdx'\nimport PostFromUrlDuplicateSwift from '@content/uploading-files/_templates/swift-post-from_url-duplicate.mdx'\nimport PostFromUrlDuplicateCurl from '@content/uploading-files/_templates/curl-post-from_url-duplicate.mdx'\nimport PostMultipartAllJs from '@content/uploading-files/_templates/js-post-multipart-all.mdx'\nimport PostMultipartAllPhp from '@content/uploading-files/_templates/php-post-multipart-all.mdx'\nimport PostMultipartAllPython from '@content/uploading-files/_templates/python-post-multipart-all.mdx'\nimport PostMultipartAllRuby from '@content/uploading-files/_templates/ruby-post-multipart-all.mdx'\nimport PostMultipartAllSwift from '@content/uploading-files/_templates/swift-post-multipart-all.mdx'\nimport PostMultipartAllCurl from '@content/uploading-files/_templates/curl-post-multipart-all.mdx'\nimport PostBaseMetadataJs from '@content/uploading-files/_templates/js-post-base-metadata.mdx'\nimport PostBaseMetadataPhp from '@content/uploading-files/_templates/php-post-base-metadata.mdx'\nimport PostBaseMetadataPython from '@content/uploading-files/_templates/python-post-base-metadata.mdx'\nimport PostBaseMetadataRuby from '@content/uploading-files/_templates/ruby-post-base-metadata.mdx'\nimport PostBaseMetadataSwift from '@content/uploading-files/_templates/swift-post-base-metadata.mdx'\nimport PostBaseMetadataCurl from '@content/uploading-files/_templates/curl-post-base-metadata.mdx'\nimport GetInfoJs from '@content/uploading-files/_templates/js-get-info.mdx'\nimport GetInfoPhp from '@content/uploading-files/_templates/php-get-info.mdx'\nimport GetInfoPython from '@content/uploading-files/_templates/python-get-info.mdx'\nimport GetInfoRuby from '@content/uploading-files/_templates/ruby-get-info.mdx'\nimport GetInfoSwift from '@content/uploading-files/_templates/swift-get-info.mdx'\nimport GetInfoCurl from '@content/uploading-files/_templates/curl-get-info.mdx'\n\n# Uploading files\n\nWhether you need to accept user generated content, serve media on your website\nor app, or collect and prepare files to train your ML model, we've got you\ncovered.\n\nUpload any file type from almost any source using various upload\noptions. Uploadcare provides a robust, secure, and comprehensive\n[Upload API](#upload-api) that you and your users can access from your backend\nor directly from the browser. We also offer state-of-the-art web\n[File Uploader](#file-uploader) and mobile widgets.\n\nEvery uploaded file is immediately available on [Uploadcare CDN][delivery]\nthrough unique and unguessable URLs. The files are stored in the integrated\nstorage. Once uploaded, you can [manage your files][managing-files] using the\nREST API and [deliver them][delivery], applying on-the-fly operations.\n\n## Uploading basics\n### Projects\n\nAll files are uploaded into the projects. Projects are separate environments\nwith unique sets of [API keys][api-keys], dedicated storage, and settings.\n\nFor example, projects can be used to separate development, staging and\nproduction environments. Learn more about [projects][settings-projects].\n\nNote: Image uploads are available on the [Demo plan][billing-plans].\nTo upload other file types, you must add a credit card to your account\naccording to \"Know your customer\" (KYC) principles,\nbut as long as you stay on the free plan, you won't be charged.\n\n### Upload API request and response\n\nWhen you upload a file,\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <PostBaseJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <PostBasePhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <PostBasePython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <PostBaseRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <PostBaseSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <PostBaseCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\nyou immediately receive the file's UUID in a 200 response,\n\n```\n{\n  \"sample-image.jpeg\": \"17be4678-dab7-4bc7-8753-28914a22960a\"\n}\n```\n\nand the file immediately becomes available on our CDN.\n\n```\nhttps://ucarecdn.com/17be4678-dab7-4bc7-8753-28914a22960a/\n```\n\nSave this UUID into your database and retrieve it to:\n\n* Serve optimized and transformed images.\n* Encode videos based on their size and codec.\n* Organize them with arbitrary metadata.\n* Detect the type of content.\n\n### File storing behavior\n\nWhen uploading files, you can specify whether you want to keep\nthem permanently or not.\n\nNotice the `UPLOADCARE_STORE` parameter in the example above.\nIt can be set as follows:\n\n* `0` — the file will be deleted after 24 hours.\n* `1` — the file will be stored permanently until explicitly deleted.\n* `auto` — defers the choice of storage behavior to the project's\n  [auto-store setting][project-settings-storage] (which is ON by default).\n\nIf you don't specify `UPLOADCARE_STORE` parameter, the default value is `auto`.\nNote: Before, the value was `0` by default. Learn more about [storing behavior][storage-store].\n\n### Information about uploaded files\n\nWe can extract file data that you can use: from basic file\ninformation, e.g. EXIF, to insights into its content. We can automatically\n[analyze][file-analysis] files for things like malware or NSFW content.\nIt also allows you to use [MIME type moderation][moderation].\n\nCheck out [files section][files] in Dashboard to see it in action.\n\n## File Uploader\n\n[File Uploader][file-uploader] is a new and highly customizable widget that\nallows users to upload files from various sources, utilizing the power of\nUploadcare APIs.\n\n<Image uuid=\"52bc2490-d7df-40fd-b18c-3adc000c192d\" />\n\nIf you're looking for a [ready-made uploading solution][file-uploader], look no further.\n\n#### Uploading from the browser\n\nIf you need to build your own uploading solution and don't want to use\n[File Uploader][file-uploader], one of the options is to use our JS SDK.\n[Upload Client][ext-uploadcare-upload-client] works with both Node.js and browsers.\n\n#### Uploading widgets for iOS and Android\n\nBoth [Swift][swift-integration] and [Kotlin][android-integration] integrations\nhave not only uploaded API methods but include uploading widgets for iOS and Android.\nThey allow to:\n\n* Upload files from a local disk, camera, and cloud sources.\n* Upload multiple files at once.\n* Track, pause and continue multipart uploading.\n* Upload in the background.\n\n## API integrations\n\n* [JavaScript][js-integration]\n* [PHP][php-integration]\n* [Python & Django][python-integration]\n* [Ruby][ruby-integration] and [Rails][rails-integration]\n* [Swift][swift-integration] (iOS, iPadOS, macOS, tvOS, Linux)\n* [Kotlin][android-integration] (Android)\n* [Java][java-integration]\n* [Golang][golang-integration]\n* [Rust][rust-integration]\n\n## Upload API features\n\nThe main features of our Upload API are:\n\n<nav>\n <ul>\n  <li><a href=\"#direct-uploads\">Upload local file</a></li>\n  <li><a href=\"#from-url\">Upload from URLs</a></li>\n  <li><a href=\"#multipart\">Upload large file</a></li>\n  <li><a href=\"#metadata\">Add arbitrary metadata</a></li>\n  <li><a href=\"#signed-uploads\">Signed uploads</a></li>\n  <li><a href=\"#webhooks\">Webhooks on upload</a></li>\n  <li><a href=\"#file-info\">Get file info</a></li>\n </ul>\n</nav>\n\nYou can also check out the complete OpenAPI specification of [Upload API][upload-api].\n\n### Upload local file\n\nThe simplest way to upload a local file is to perform a HTTP POST request.\nAs in the example above, you only need to specify the project's public key.\nDirect file uploads support files smaller than 100 MiB only. (If you want\nto upload larger files, please use [multipart uploads](#multipart) instead).\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <PostBaseJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <PostBasePhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <PostBasePython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <PostBaseRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <PostBaseSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <PostBaseCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\n_Check out detailed API reference for [direct uploads][api-reference-upload-direct]._\n\n### Upload from URL\n\nUploadcare can fetch a file from a publicly available URL and upload it to your\nproject.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <PostFromUrlJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <PostFromUrlPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <PostFromUrlPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <PostFromUrlRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <PostFromUrlSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <PostFromUrlCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\n_Check out detailed [uploads from URL][api-reference-from-url-upload] API reference._\n\nRequests to the endpoint return a JSON dictionary with a token that can be\nfurther used to check the status of an upload request. The token is not a\nfile ID and can't be used to address the file directly. The actual file ID\nshould be retrieved by calling the `/from_url/status/` endpoint.\nIntegration implementation may vary, please refer to the respective documentation.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <GetFromUrlStatusJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <GetFromUrlStatusPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <GetFromUrlStatusPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <GetFromUrlStatusRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <GetFromUrlStatusSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <GetFromUrlStatusCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\n_Check out detailed API reference for [uploads from URL][api-reference-from-url-upload-status]._\n\n#### Duplicates prevention\n\nBy default, every request to the `/from_url/` endpoint with the same\n`source_url` results in a new upload leading to file duplication.\n\nIf you would like Uploadcare to keep track of the requested URLs and avoid\nduplicate uploads, pass the `save_URL_duplicates` and `check_URL_duplicates`\nparameters described in [uploads from URL][api-reference-from-url-upload] API reference.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <PostFromUrlDuplicateJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <PostFromUrlDuplicatePhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <PostFromUrlDuplicatePython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <PostFromUrlDuplicateRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <PostFromUrlDuplicateSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <PostFromUrlDuplicateCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\nIf the `source_url` had already been fetched and uploaded previously, this\nrequest would return information about the already uploaded file.\n\n#### Alternative remote uploading method\n\nYou can also upload remote files with CDN [Proxy](#proxy).\n\n### Upload large file\n\nMultipart uploads should be used if you need to upload files larger\nthan 100 MiB or if you want to explicitly trigger\n[AWS S3 Transfer Acceleration][ext-s3-transfer-acceleration].\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <PostMultipartAllJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <PostMultipartAllPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <PostMultipartAllPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <PostMultipartAllRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <PostMultipartAllSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <PostMultipartAllCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\n_Check out detailed API reference for [multipart uploads][api-reference-upload-requests-multipart]._\n\nNote: Each uploaded part should be at least 5242880 bytes in size except\nfor the last one, which can be smaller. You can upload the file parts\nin parallel, provided that the byte order stays unchanged.\n\n### Add arbitrary metadata\n\nYou can add additional, arbitrary key-value data associated with uploaded files.\nFor example, you could store user IDs, order IDs, or tags.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <PostBaseMetadataJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <PostBaseMetadataPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <PostBaseMetadataPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <PostBaseMetadataRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <PostBaseMetadataSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <PostBaseMetadataCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\nLearn more about [file metadata][file-metadata].\n\n### Signed uploads\n\nSigned upload requests include an authentication signature that is generated\nbased on your project's secret key and expiration time parameters. This\nsignature must be generated on your backend, as you must never expose your\nsecret key in client-side code.\nLearn more about [signed uploads][secure-uploads].\n\n### Webhooks on upload\n\nUploadcare can notify your application when a new file has been uploaded\nasynchronously. For example, you may need to decide on your file\nbased on the abovementioned analysis. When an upload happens, we'll make a POST\nrequest with a JSON payload to the endpoint you provided. Learn more about\n[webhooks][webhooks].\n\n### Get file info\n\nThere're various methods to get file information: via\n[Upload API][api-upload-file-info],\n[REST API][api-reference-fileinfo], or [URL API][url-api-file-info-json].\nUpload API gives you limited but essential access, while REST API gives full details.\nIntegration implementation may vary, please refer to the respective documentation.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cURL</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <GetInfoJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <GetInfoPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <GetInfoPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <GetInfoRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <GetInfoSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <GetInfoCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\n_Check out detailed API reference for [file info][api-upload-file-info]._\n\n## Retrieve remote files on the fly\n\nProxy automatically retrieves files from existing remote locations and delivers\nthem using [Uploadcare CDN][delivery]. It's easy to integrate, requiring only one\nURL modification:\n\n```\nhttps://endpoint.ucr.io/ + https://yoursite.com/assets/image.jpg =\nhttps://endpoint.ucr.io/https://yoursite.com/assets/image.jpg\n```\n\nLearn more about [Proxy][delivery-proxy].\n\n## Migrate files from anywhere\n\nIf you migrated to Uploadcare from a DIY solution or another platform,\nyou need to migrate your files. First, copy the files from their current\nlocation to your Uploadcare storage so they can be processed and\ndelivered using the Uploadcare CDN.\n\nLearn more about [Migro][migro-guide].\n"
      },
      "pages/file-uploader/index.mdx": {
        "markdown": "---\n  title: 'Uploadcare File Uploader | Overview'\n  description:\n    'Upload and store files with one secure, reliable and compatible solution.\n    Use our ready-made uploader interface and infrastructure.'\n---\n\nimport { Messages, WidgetV4V3Warning } from '@uploadcare/docs-components'\n\n# Uploadcare File Uploader\n\n<Messages>\n  <WidgetV4V3Warning link='/uploads/file-uploader/' />\n</Messages>\n\n[File Uploader][file-uploader-product-page] is a new and highly customizable\nwidget that allows users to upload files from various sources. It utilizes the\npower of Uploadcare APIs and can run within any web tech stack.\n\n## Solutions\n\nWe supply a set of ready-made solutions for the most frequent file uploading\ncases: `regular`, `inline`, and `minimal`. Each with its own set of features\nand customization options. You can also use them as is or as a custom build reference.\n\n### Regular File Uploader\n\n<img src=\"https://ucarecdn.com/52bc2490-d7df-40fd-b18c-3adc000c192d/\"\n          srcSet=\"https://ucarecdn.com/52bc2490-d7df-40fd-b18c-3adc000c192d/ 2x\"\n          alt=\"File Uploader Regular Mode\" />\n\nThe Regular File Uploader is a dialog-based solution that enables easy integration of an uploading button into your application.\nThe button opens a dialog where users can select files to upload from various sources, including local files, external URLs, or social platforms.\nBoth the button and the dialog can be customized to match your application's look and feel.\n\n### Inline File Uploader\n\n<img src=\"https://ucarecdn.com/589c72fa-35f9-490b-8e1a-e06db1a16182/\"\n          srcSet=\"https://ucarecdn.com/589c72fa-35f9-490b-8e1a-e06db1a16182/ 2x\"\n          alt=\"File Uploader Regular Mode\" />\n\nThe Inline mode is quite similar to the Regular uploader and is useful when you want to upload files without opening a dialog window.\nThis mode is particularly handy if you prefer using your own button and dialog components.\nThe Inline mode can also be useful when you want to embed the file uploader directly within a form or a specific section of your application's user interface.\nThis allows users to seamlessly upload files in context, without being redirected to a separate dialog window, thus enhancing the overall user experience.\n\n### Minimal File Uploader\n\n<img src=\"https://ucarecdn.com/b7ce4649-7b1a-48e8-a6ca-dde5d695776a/\"\n          srcSet=\"https://ucarecdn.com/b7ce4649-7b1a-48e8-a6ca-dde5d695776a/ 2x\"\n          alt=\"File Uploader Minimal Mode\" />\n\nThe Minimal uploader is the last, but certainly not the least, type of uploader.\nIt offers a streamlined approach, enabling file uploads without any additional UI elements.\nThe minimalistic uploader functions as a simple drag-and-drop area.\nHowever, some features, such as social sources and cloud editor, are unavailable with this uploader type.\n\n### Embed image editor\n\nBoth Regular and Inline modes include a built-in cloud image editor that provides a few dozen popular image edit operations.\n\n<img src=\"https://ucarecdn.com/577bccb3-b63c-4e7c-9add-6dcacf193702/-/quality/lightest/-/resize/1460x/\"\n          alt=\"File Uploader Editor\" />\n\n## Features\n\nThe main feature of the new File Uploader is the ease of customization and\nlocalization with basic HTML and CSS.\n\nAdd a file uploading capability to your website:\n* Receive files from anybody.\n* Upload files of any type and up to 5 TB in size.\n* Upload multiple files in one go.\n* Track upload jobs with an individual progress bar for each file.\n* Get files from various sources, including local storage, camera, social media, and cloud storage services.\n* Speed up the uploading with the uploading network (it works like CDN).\n* Show image previews.\n* Resize, crop, rotate, add effects, enhance images, add overlays right after upload.\n* Validate files by their format or size.\n* Prevent remote code execution through widgets and code execution in uploaded files like SVG, html and xml.\n\nAll your uploads go to the storage covered by SLA with a 99.9% uptime. On top of that, Uploadcare infrastructure is compliant with SOC 2, HIPAA, and more.\n\n## Frameworks support\n\nYou can run the File Uploader within any tech stack. Here are a few examples:\n* [React](https://github.com/uploadcare/blocks-examples/tree/main/examples/react-uploader)\n* [Vue](https://github.com/uploadcare/blocks-examples/tree/main/examples/vue-uploader)\n* [Angular](https://github.com/uploadcare/blocks-examples/tree/main/examples/angular-uploader)\n* [Svetle](https://github.com/uploadcare/blocks-examples/tree/main/examples/svelte-uploader)\n\n## Supported browsers\n\nFile Uploader is supported and tested in all major modern desktop and mobile browsers:\n\n* Chrome\n* Firefox\n* Safari\n* Edge\n* Opera\n\nIf you need IE support, please use our [jQuery widget][jquery-widget].\n\n## Typescript support\n\nWe use [JSDoc type annotations][ext-jsdoc-supported-types]\nfor TypeScript static analysis support during development.\n\nAdditionally, we provide type definitions ([*.d.ts files][ext-jsdoc-supported-types])\nfor the TypeScript projects in our packages.\n\nCheck the [JSDoc Reference][ext-jsdoc-supported-types]\npage in TypeScript official documentation.\n\nBasic types are automatically loaded when you import the package.\n\nTo enable JSX support, add the following to your `tsconfig.json` file:\n\n```json\n{\n  \"compilerOptions\": {\n    \"types\": [\"@uploadcare/blocks/types/jsx\"]\n  },\n}\n```\n\n## Technology behind\n\nWe built the File Uploader as close to the native web platform as possible and\ndo not force you to use any specific development environment tools.\n\nUploader is built with web components, service workers, wasm, and a set of\nother modern technologies. Modern ESM-level code sharing. Minimum of external\ndependencies.\n\nThe build stage is unnecessary for development. Use the code directly in any\nmodern browser or Node.js. We encourage you to build your custom solutions with\nall building blocks that we have.\n\n## Fast start\n\nWe recommend beginning with the File Uploader [configurator][configurator].\nIt includes all necessary settings and generates ready-to-use code snippets and\nstep-by-step instructions tailored to your project's environment. If you don't\nhave an account yet, now is the perfect time to [get one][account-signup].\n\nOr start with File Uploader [installation][file-uploader-installation].\n\n## Accessibility\n\nWe are actively working to make the File Uploader accessible to everyone.\nHowever, please note that it is not currently fully accessible.\nWe have plans to incorporate support for accessibility features in the near future.\nIf accessibility is critical for your needs, we recommend checking out our\nprevious [jQuery widget][jquery-widget].\n\n## Other uploading widgets\n\nThis is our latest file uploading solution. If you're looking for a previous\none, please refer to the [jQuery widget][jquery-widget]. In contrast\nto the previous one, new uploader is 57% lighter, has a modern and highly\ncustomizable view, and works with any JavaScript framework, while previous\njQuery widget requires additional work.\n\nIf you're a mobile developer, check our Swift and Kotlin integrations:\n\n* [iOS uploading widget][swift-integration]\n* [Android uploading widget][android-integration]\n"
      },
      "pages/transformations/image/compression.mdx": {
        "markdown": "---\n  title: 'Image optimization'\n  description:\n    'Uploadcare allows process images on the fly with a set of CDN operations\n    on the fly to alter images the way you need.'\n---\n\nimport { Video, CdnExample } from \"@uploadcare/docs-components\"\n\n# Image optimization\n\nImage optimization is essential for improving the performance of your website\nor application. Resizing your images and compressing them without sacrificing\nquality are the critical factors to consider:\n\n* [Scaling operations](#scaling), such as various methods of resize and crop,\n  have the biggest effect.\n* Delivering the most efficient [format](#operation-format)\n  that the client's browser supports.\n* Further optimization of the image [quality](#operation-quality) of the\n  resulting image, especially for [high pixel ratios](#high-pixel-ratios).\n\n<Image uuid=\"25a775fe-2a5c-4e97-ab4e-0130cd3bda8d\" />\n\nIt's important to use all three types of operations to achieve the best\nresults.\n\nCheck out our [responsive images][guide-image-responsive] guide for more details.\n\n## How it works\n\nEvery URL transformation generates a modified image version on the fly, while\nthe original file stays intact. The transformed image version will be cached\non [CDN nodes][delivery] to optimize delivery.\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/preview/\",\n    \"https://ucarecdn.com/:uuid/-/preview/\"\n  ]}\n/>\n\nAlso, you can [fetch and deliver images][delivery-proxy] to apply operations\nwithout explicitly uploading them:\n\n```\nhttps://yoursite.ucr.io/-/resize/500x/https://yoursite.com/assets/image.jpg\n```\n\nWhen applying any image operation, a new file is created (cached on our CDN,\nand not counted towards your storage limits). If not set, this file is encoded\nwith the default [quality](#operation-quality) and [format](#operation-format).\n\nImage processing operation may be applied only to the appropriate file.\nOn uploading, the file is analyzed by Uploadcare: file type, metadata, and so on;\nthe file is assigned an attribute `is_image`. If this attribute is `true`, then\nan operation can be applied to the file. See the [Limitations](#limits) section.\n\nWithout any image processing operation in the URL, CDN [instructs][delivery-cdn-inline]\nbrowsers to show images (`Content-Disposition: inline`) and download other file\ntypes (`Content-Disposition: attachment`). Browsers may not show all image formats,\nsuch as `TIFF` and `HEIC`. If you need to display an image, add any image\nprocessing operation, [`-/preview/`][transformations-image-preview] for instance.\n\n### Limitations\n\nImage processing operations have limits that you should consider:\n* Input image formats\n* Mandatory usage of core operations\n* File size\n* Output image dimensions\n* SVG files\n* Image resolution\n* Rotation\n* Animated images\n\nLearn more about [image processing limitations][delivery-operations-limits].\n\n## Scaling operations\n\nRather than delivering large, full-sized images and relying on the browser to\nresize them, you can do it programmatically:\n* [Preview][transformations-image-preview]\n* [Scale crop][transformations-image-scale-crop]\n* [Resize][transformations-image-resize]\n* [Crop][transformations-image-crop]\n\nThe advanced scaling operations allows you to resize images more precisely:\n* [Smart crop][transformations-image-smart-crop]\n* [Crop by ratio][transformations-image-crop-ratio]\n* [Crop by objects][transformations-image-crop-objects]\n* [Smart resize][transformations-smart-resize]\n* [Zoom][transformations-image-zoom-objects]\n\n## Format\n\n`-/format/:format/`\n\nIf any other image processing operation is applied (such as [scaling operations](#scaling)),\nthe default format is `auto` (see [how `auto` works](#operation-format-auto)).\n\nAlternatively, you can use the `-/format/` operation to convert an image\nto one of the following formats:\n\n* `jpeg` is a lossy image format (good compression for photos). JPEG doesn’t\n  support an alpha channel; hence you can use the\n  [`setfill`][transformations-image-setfill] operation that sets a background\n  color. All browsers support JPEG.\n* `png` is a lossless format (good compression only for graphics) with\n  alpha channel support. All browsers support PNG.\n* `webp` is a modern format with more efficient compression than JPEG and with\n  alpha channel support. It works well for all images, yet [not all][ext-caniuse-webp]\n  browsers and OSs support it.\n* `auto` the **default** behavior; is an automatic image format selection based on \n  alpha channel presenceand a client's device and browser.\n* `preserve` returns the image in the original format if it is PNG or JPEG,\n  otherwise coerces to PNG or JPEG. This option is useful\n  when you need to save the image, rather than display it to the end-user.\n\n### How `auto` works and prioritize image formats\n\nFirst, the algorithm checks the `Accept` header with MIME types to figure out\nwhat image format a client browser supports.\n\n* AVIF is used as output when all the following conditions are met:\n  * `image/avif` MIME type is supported by the client.\n  *  Output image resolution is under the threshold (currently 2 MPx).\n* WebP is used when `image/webp` MIME type is supported by the client.\n* PNG is used when the source image contains an alpha channel with non-opaque pixels\n  or when the image has limited color diversity, resembling artwork.\n* JPEG is used otherwise.\n\nYou can disable the selection of modern formats, specifically AVIF and WebP,\nfor your project in the Dashboard. Alternatively, you may consider adding the\n[`-/format/preserve/`](#operation-format) operation to a specific URL.\n\nNote: `auto` works when you use primary Uploadcare [storage][storage] (not S3\nBucket) and the default [Uploadcare CDN][delivery] domain `ucarecdn.com`.\n\n<table className=\"cdn-operation-sample\">\n  <tr>\n    <td>\n      <a href=\"https://ucarecdn.com/6ad747ff-dda6-4508-8864-5fc83f7fe645/-/setfill/ece3d2/-/format/png/\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/6ad747ff-dda6-4508-8864-5fc83f7fe645/-/setfill/ece3d2/-/format/png/\" alt=\"PNG image with transparency\"/></a><br/>\n      400x301 <code>png</code> 116Kb<br/>\n      Transparent\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/6ad747ff-dda6-4508-8864-5fc83f7fe645/-/setfill/ece3d2/-/format/jpeg/\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/6ad747ff-dda6-4508-8864-5fc83f7fe645/-/setfill/ece3d2/-/format/jpeg/\" alt=\"JPEG image, opaque\"/></a><br/>\n      400x301 <code>jpeg</code> 16Kb<br/>\n      Opaque\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/6ad747ff-dda6-4508-8864-5fc83f7fe645/-/setfill/ece3d2/-/format/webp/\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/6ad747ff-dda6-4508-8864-5fc83f7fe645/-/setfill/ece3d2/-/format/webp/\" alt=\"WEBP image with transparency, 10 times smaller file size than PNG\"/></a><br/>\n      400x301 <code>webp</code> 15Kb<br/>\n      Transparent, size is equal<br/>\n      to the opaque one.\n    </td>\n  </tr>\n</table>\n\nBrowsers that support WebP will load this image version, while others will\ndisplay JPEG or PNG instead.\n\n## Quality\n\n`-/quality/:value/`\n\nSets output quality for [lossy formats][ext-lossy-formats] (JPEG, WebP, and AVIF).\nSince actual settings vary from codec to codec and, more importantly, from format\nto format, we provide five simple tiers that are consistent across\ndifferent formats and other settings and suit most cases of image distribution.\n\nA higher quality level will typically result in a larger output file.\nHowever, setting the quality level higher than the original level of the\nuploaded image won’t increase your file size.\n\n* `normal` — the **default** behavior when no `quality` operation is applied.\n  The reasonable quality for 1x pixel density.\n* `better` — can be used to render relatively small and detailed previews. ≈125%\n  file size compared to `normal`.\n* `best` — can be used to deliver images close to their pristine quality\n  (e.g., for artwork). ≈170% file size.\n* `lighter` — useful when applied to relatively large images to save traffic\n  without significant quality loss. ≈80% file size.\n* `lightest` — highest compression ratio for high pixel ratio. ≈50% file size.\n\n## Adaptive quality\n\nAdaptive quality could be enabled per project in the Dashboard. In this case,\nwe analyze the output image using content-aware algorithms to determine\nmaximum compression that won't cause noticeable visual artefacts and\nadjust the compression level accordingly.\n\n## Optimizing for high pixel ratios\n\nA great approach for high pixel densities is to increase images resolution\nand reduce quality at the same time. Compared to just increasing quality,\nimages will look clearer on all screens with nearly the same file size.\nTo adjust quality, you can use `lighter` and `lightest` presets.\n\n<table className=\"cdn-operation-sample cdn-operation-sample-3cols\">\n  <tr>\n    <td>\n      <a href=\"https://ucarecdn.com/c5b7dd84-c0e2-48ff-babc-d23939f2c6b4/-/preview/220x220/-/quality/best/\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/c5b7dd84-c0e2-48ff-babc-d23939f2c6b4/-/preview/220x220/-/quality/best/\" alt=\"Best quality, max file size\"/></a><br/>\n      1x <code>best</code> 16Kb<br/>\n      Blurry on retina.\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/c5b7dd84-c0e2-48ff-babc-d23939f2c6b4/-/preview/330x330/-/quality/lighter/\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/c5b7dd84-c0e2-48ff-babc-d23939f2c6b4/-/preview/330x330/-/quality/lighter/\" alt=\"Smaller file size for all screens\"/></a><br/>\n      1.5x <code>lighter</code> 14Kb<br/>\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/c5b7dd84-c0e2-48ff-babc-d23939f2c6b4/-/preview/440x440/-/quality/lightest/\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/c5b7dd84-c0e2-48ff-babc-d23939f2c6b4/-/preview/440x440/-/quality/lightest/\" alt=\"Even smaller file size, useful for retina\"/></a><br/>\n      2x <code>lightest</code> 12Kb<br/>\n      Perfect for all screens.\n    </td>\n  </tr>\n</table>\n\n## Progressive JPEG\n\n`-/progressive/yes/`<br/>\n`-/progressive/no/`\n\nReturns a progressive image. In progressive images, data are compressed in\nmultiple passes of progressively higher detail. This is ideal for large images\nthat will be displayed while downloading over a slow connection allowing a\nreasonable preview after receiving only a portion of the data.\nThe operation does not affect non-JPEG images; does not force image formats\nto `JPEG`.\n\n<table className=\"cdn-operation-sample\">\n  <tr>\n    <td>\n      <a href=\"https://ucarecdn.com/ec8850a1-7d02-4af0-ad92-dbac0d169408/-/preview/-/quality/best/\" target=\"_blank\">\n        <Video>\n          <source src=\"https://ucarecdn.com/e1c1c3bc-117f-4b09-9043-f97dec2af74f/gif2video/-/format/webm/baseline.gif\" type=\"video/webm\"/>\n          <source src=\"https://ucarecdn.com/e1c1c3bc-117f-4b09-9043-f97dec2af74f/gif2video/-/format/mp4/baseline.gif\" type=\"video/mp4\"/>\n        </Video></a><br/>\n      Baseline loading.\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/ec8850a1-7d02-4af0-ad92-dbac0d169408/-/preview/-/quality/best/-/progressive/yes/\" target=\"_blank\">\n        <Video>\n          <source src=\"https://ucarecdn.com/d101ac3a-f8ed-434e-a11e-150a99f075b5/gif2video/-/format/webm/progressive.gif\" type=\"video/webm\"/>\n          <source src=\"https://ucarecdn.com/d101ac3a-f8ed-434e-a11e-150a99f075b5/gif2video/-/format/mp4/progressive.gif\" type=\"video/mp4\"/>\n        </Video></a><br/>\n      Progressive loading.\n    </td>\n  </tr>\n</table>\n\n## Strip meta information\n\n`-/strip_meta/all/`<br/>\n`-/strip_meta/none/`<br/>\n`-/strip_meta/sensitive/`\n\nThe original image often comes with additional information built into the image\nfile. In most cases, this information doesn't affect image rendering and thus\ncan be safely stripped from the processed images to reduce image weight.\nCurrently, you can only keep EXIF meta information. Other storage, such as XMP\nor IPTC, will always be stripped when creating a new processed image version.\n\n* `all` — the default behavior when no `strip_meta` operation is applied.\n  No meta information will be added to the processed file.\n* `none` — uses the EXIF from the original file.\n  The orientation tag will be set to 1 (normal orientation).\n* `sensitive` — uses the EXIF from the original file but skips geolocation.\n  The orientation tag will be set to 1 (normal orientation).\n\nIf you need to restrict user access to EXIF information, please\n[protect your images from editing][mutability].\n\n## Animated images optimization\n\nVideo files are much smaller than GIFs, without noticeable quality loss. Their\ndelivery to end users is much faster. Gif to video operation converts animated\nimage files, such as GIF, WebP, and HEIC, to video and transforms them on the\nfly. Learn more about [animated images optimization][transformations-gif-to-video].\n"
      },
      "pages/transformations/image/index.mdx": {
        "markdown": "---\n  title: 'Uploadcare image transformations overview'\n  description:\n    'Uploadcare allows process images on the fly with a set of CDN operations\n    on the fly to alter images the way you need.'\n---\n\nimport { CdnExample } from \"@uploadcare/docs-components\"\n\n# Image transformations and art-direction\n\nWith Uploadcare, you can easily build custom image processing workflows and\nautomate most image transformation tasks. For example, you can set up a chain of\nactions for user-generated images that'll unify their look.\n\n<div style={{\n  position: 'relative',\n  paddingBottom: '56.25%'\n}}>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/h43Ct6cCvuQ\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen style={{position: 'absolute'}} /></div>\n<div style={{position: 'relative', paddingBottom: '2vw'}}/>\n\nUse and stack transformations right in the image URL:\n\n<table className=\"cdn-operation-sample\">\n  <tbody>\n  <tr>\n    <td>\n      <a href=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/preview/image.jpg\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/scale_crop/220x220/center/image.jpg\"\n          srcSet=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/scale_crop/440x440/center/-/quality/lightest/image.jpg 2x\"\n          alt=\"Original image\" />\n      </a><br/>\n      <span>Original image</span>\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/preview/-/sharp/15/image.jpg\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/scale_crop/220x220/center/-/sharp/15/image.jpg\"\n          srcSet=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/scale_crop/440x440/center/-/quality/lightest/-/sharp/15/image.jpg 2x\"\n          alt=\"Sharpened image\" />\n      </a><br/>\n      <span>Sharpen </span><code>-/sharp/15/</code>\n    </td>\n    <td>\n      <a href=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/preview/-/enhance/100/image.jpg\" target=\"_blank\">\n        <img src=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/scale_crop/220x220/center/-/enhance/100/image.jpg\"\n          srcSet=\"https://ucarecdn.com/5e39e315-c06c-4d81-9b4a-35fca661621c/-/scale_crop/440x440/center/-/quality/lightest/-/enhance/100/image.jpg 2x\"\n          alt=\"Enhanced image\" />\n      </a><br/>\n      <span>Enhance </span><code>-/enhance/100/</code>\n    </td>\n  </tr>\n  </tbody>\n</table>\n\n## How it works\n\nEvery URL transformation generates a modified image version on the fly, while\nthe original file stays intact. The transformed image version will be cached\non [CDN nodes][delivery] to optimize delivery.\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/resize/200x/\",\n    \"https://ucarecdn.com/:uuid/-/resize/200x/\"\n  ]}\n/>\n\nAlso, you can [fetch and deliver images][delivery-proxy] to apply operations\nwithout explicitly uploading them:\n\n```\nhttps://yoursite.ucr.io/-/preview/-/resize/500x/https://yoursite.com/assets/image.jpg\n```\n\nImage processing operation may only apply to [appropriate file][delivery-operations-formats].\nOn uploading, the file is analyzed by Uploadcare: file type, metadata, and so on;\nthe file is assigned an attribute `is_image`. If this attribute is `true`, then\nan operation can be applied to the file. See the [Limitations](#limits) section.\n\nWhen applying any image operation, a new file is created (cached on our CDN,\nand not counted towards your storage limits). If not set, this file is encoded\nwith the default [quality][transformations-image-quality] and original\n[format][transformations-image-format]. However, you can adjust them to meet your\nrequirements better.\n\n## Full list of image transformations operations\n\nMost of the image processing operations work on-the-fly:\n\n<nav>\n <ul>\n  <li>\n    <a href=\"/docs/transformations/image/resize-crop/#size\">Resize, crop, rotation</a>\n    <ul>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-preview\">Preview</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-resize\">Resize</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-smart-resize\">Smart resize</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-crop\">Crop</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-crop-aspect-ratio\">Crop by ratio</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-crop-tags\">Crop by objects</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-scale-crop\">Scale crop</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-smart-crop\">Smart crop</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-border-radius\">Border radius and circle crop</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-setfill\">Set fill color</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-zoom-objects\">Zoom objects</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-autorotate\">Automatic rotation, EXIF-based</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-rotate\">Manual rotation</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-flip\">Flip</a></li>\n      <li> <a href=\"/docs/transformations/image/resize-crop/#operation-mirror\">Mirror</a></li>\n    </ul>\n  </li>\n  <li>\n    <a href=\"/docs/transformations/image/overlay/\">Overlays and watermarks</a>\n    <ul>\n      <li><a href=\"/docs/transformations/image/overlay/#overlay-image\">Image overlay</a></li>\n      <li><a href=\"/docs/transformations/image/overlay/#overlay-self\">Self overlay</a></li>\n      <li><a href=\"/docs/transformations/image/overlay/#overlay-text\">Text overlay</a></li>\n    </ul>\n  </li>\n  <li>\n    <a href=\"/docs/effects-enhancements/\">Effects and enhancements</a>\n    <ul>\n      <li><a href=\"/docs/effects-enhancements/#image-colors-operations\">Basic color adjustment</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-enhance\">Enhance</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-grayscale\">Grayscale</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-invert\">Inverting</a></li>\n      <li>\n        <a href=\"/docs/effects-enhancements/#image-color-profile-management\">Color profile management</a>\n          <ul>\n            <li><a href=\"/docs/effects-enhancements/#operation-srgb\">Conversion to sRGB</a></li>\n            <li><a href=\"/docs/effects-enhancements/#operation-max-icc-size\">ICC profile size threshold</a></li>\n          </ul>\n      </li>\n      <li><a href=\"/docs/effects-enhancements/#image-photo-filters\">Photo filters</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-blur\">Blur</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-blur-region\">Blur region</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-blur-region-faces\">Blur faces</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-blur-mask\">Unsharp masking</a></li>\n      <li><a href=\"/docs/effects-enhancements/#operation-sharp\">Sharpen</a></li>\n      <li><a href=\"/docs/effects-enhancements/#color-recognition\">Color recognition</a></li>\n    </ul>\n  </li>\n  <li><a href=\"/docs/intelligence/face-detection/\">Face-detection based transformations</a></li>\n  <li><a href=\"/docs/transformations/gif-to-video/\">Animated images optimization</a></li>\n  <li><a href=\"/docs/transformations/image/svg/\">SVG transformations and rasterization</a></li>\n </ul>\n</nav>\n\nNote: Some image operations can't be perfomed on the fly and work asynchronously via [REST API][rest-api]:\n\n<nav>\n <ul>\n  <li><a href=\"/docs/remove-bg/\">Background removal</a></li>\n  <li><a href=\"/docs/intelligence/object-recognition/\">Object recognition</a></li>\n  <li><a href=\"/docs/transformations/video-encoding/#operation-thumbs\">Video thumbnail generation</a></li>\n  <li><a href=\"/docs/transformations/document-conversion/#process\">Document thumbnail generation</a></li>\n </ul>\n</nav>\n\nImage optimization operations can be found in a separate section:\n\n<nav>\n <ul>\n  <li>\n    <a href=\"/docs/transformations/image/compression/\">Compression</a>\n    <ul>\n      <li><a href=\"/docs/transformations/image/compression/#operation-format\">Format</a></li>\n      <li><a href=\"/docs/transformations/image/compression/#operation-quality\">Quality</a></li>\n      <li><a href=\"/docs/transformations/image/compression/#smart-compression\">Smart compression</a></li>\n      <li><a href=\"/docs/transformations/image/compression/#operation-progressive\">Progressive JPEG</a></li>\n      <li><a href=\"/docs/transformations/image/compression/#meta-information-control\">Meta information control</a></li>\n    </ul>\n   </li>\n </ul>\n</nav>\n\n## Limitations\n\nImage processing operations have limits that you should consider:\n* Input image formats\n* Mandatory usage of core operations\n* File size\n* Output image dimensions\n* SVG files\n* Image resolution\n* Rotation\n* Animated images\n\nLearn more about [image processing limitations][delivery-operations-limits].\n"
      },
      "pages/delivery/index.mdx": {
        "markdown": "---\n  title: 'File delivery with Uploadcare'\n  description:\n    'Uploadcare CDN is a fast and reliable content delivery network that optimizes your images and videos for any device and platform.'\n---\n\nimport { CdnExample, LeadParagraph } from \"@uploadcare/docs-components\";\n\n# File delivery with Uploadcare\n\n<LeadParagraph>Every uploaded file is immediately available on the Uploadcare CDN\n— the best place to host your files for media delivery</LeadParagraph>\n\n- Global CDN network\n- Fastest on-the-fly image operations\n- Huge set of image transformations\n- Deliver files from any remote storage\n- DDoS protection and access control\n- Unlimited scalability on demand\n\nCDN is a geographically distributed system of servers that delivers content to\nclient devices from the servers nearby, which saves time on long-distance data\nexchange.\n\nWhile traditional CDNs are typically limited to basic copying and caching\nfunctions, Uploadcare CDN stands out by offering dynamic image modifications.\nThis unique feature not only ensures faster page load times and better uptime,\nbut also allows on-the-fly image optimization and transformation of images to\nsuit the device they are being consumed on.\n\n## How it works\n\nAccess files in Uploadcare CDN at `ucarecdn.com` over HTTP/HTTPS liks this:\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/\",\n    \"https://ucarecdn.com/:uuid/\"\n  ]}\n/>\n\nYou can add CDN operations by including directives in the CDN URL:\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/85b5644f-e692-4855-9db0-8c5a83096e25/-/resize/640x640/image.jpg\",\n    \"https://ucarecdn.com/:uuid/-/:operation/:params/:filename\"\n  ]}\n/>\n\n* `:uuid` stands for the unique file identifier, UUID, assigned on upload.\n* `/-/` is a mandatory parsing delimiter to divide operations and other path\n  components.\n* `:operation/:params/` is a CDN operation directive with parameters.\n* `:filename` is an optional filename you can add after a trailing slash `/`.\n\nYou can stack two and more operations like this:\n\n`/:operation/:params/-/:operation/:params/`\n\nSame applies when using [Proxy][delivery-proxy]:\n\n```\nhttps://yoursite.ucr.io/-/preview/-/resize/500x/https://yoursite.com/assets/image.jpg\n```\n\n## SEO optimization\n\nOne way to improve your site's SEO is to name your files relevantly,\nsuch as integrating keywords into your image URLs.\n\nValid URLs typically have words separated by a hyphen,\nfor example _seo-optimize-images_.\n\nYou can specify an additional filename after the UUID\ninstead of the automatically generated one:\n\n<CdnExample\n  examples={[\n    \"https://ucarecdn.com/e8423b1c-3c9a-4646-84c7-c033d8748fd7/pineapple-on-the-field.jpeg\",\n    \"https://ucarecdn.com/:UUID/:name.jpeg\"\n  ]}\n/>\n\nThe filename can be added to both the original (after the UUID) and at the end\nof the URL with operations applied, as in the [example above](#how-it-works).\n\n## Table of Contents\n\n| Article                                                             | Description                                                                                                                                                                                                                |\n| ------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [On-the-fly operations][delivery-operations]                        | Uploadcare CDN features on-the-fly image optimization, large set of image transformations, and non-image file operations, such as getting file information or changing file delivery behavior                              |\n| [Image optimizations][transformations-image-compression]             | Scale your images and compress them without sacrificing quality to improve the performance of your website or application                                                                                                  |\n| [Image transformations][transformations-image]                      | Build custom image processing workflows and automate most image transformation tasks: scaling, rotation, overlays, effects and enhancements, face-detection, SVG transformation and many more                              |\n| [CDN settings][delivery-settings]                                   | Set up custom CDN CNAME, cache duration, search engine indexing behavior, or even bring your own CDN                                                                                                                       |\n| [Fetch and deliver remote files][delivery-proxy]                    | When you need to get all the benefits of image optimization for files that you already store somewhere else, use Proxy. It automatically retrieves files from existing remote locations and delivers them using the CDN    |\n| [Signed URLs][secure-delivery]                                      | Control who and for how long can access files in your project via signed URLs. Protect end-users sensitive data, authorize clients, limit access by time                                                                   |\n| [URL API][url-api]                                                  | List of all CDN operations, its limitations, and settings                                                                                                                                                                  |\n"
      },
      "pages/start/file-management.mdx": {
        "markdown": "---\n  title: 'File management with Uploadcare'\n  description:\n    'Implement custom workflows for your uploaded files with Uploadcare REST API.'\n---\n\nimport { LeadParagraph ,\n  Tabs as DocsTabs,\n  Panel as DocsTabPanel,\n  Tab as DocsTab,\n  TabsContainer as DocsTabsContainer,\n  PanelsContainer as DocsPanelsContainer } from \"@uploadcare/docs-components\"\nimport RestApiCurl from '@content/start/_templates/rest-api-curl.mdx'\nimport RestApiJs from '@content/start/_templates/rest-api-js.mdx'\nimport RestApiPython from '@content/start/_templates/rest-api-python.mdx'\nimport RestApiPhp from '@content/start/_templates/rest-api-php.mdx'\nimport RestApiRuby from '@content/start/_templates/rest-api-ruby.mdx'\nimport RestApiSwift from '@content/start/_templates/rest-api-swift.mdx'\n\n# File management\n\n<LeadParagraph>Implement custom workflows for your uploaded files.</LeadParagraph>\n\n- Manage files with REST API\n- Webhooks for various events\n- Arbitrary file metadata management\n- S3 bucket integration\n- Video processing\n- Document conversion\n- Unsafe content detection\n- Object recognition\n- Malware protection\n- API clients for popular platforms\n\nOnce uploaded, you can manage files using REST API and project storage settings.\n\n## How it works\n\nManage your files using REST API directly or with an API client.\n\n<DocsTabs defaultTab='js'>\n  <DocsTabsContainer>\n    <DocsTab to='js'>JavaScript</DocsTab>\n    <DocsTab to='php'>PHP</DocsTab>\n    <DocsTab to='python'>Python</DocsTab>\n    <DocsTab to='ruby'>Ruby</DocsTab>\n    <DocsTab to='swift'>Swift</DocsTab>\n    <DocsTab to='curl'>cUrl</DocsTab>\n  </DocsTabsContainer>\n  <DocsPanelsContainer>\n    <DocsTabPanel tab='js'>\n      <RestApiJs />\n    </DocsTabPanel>\n    <DocsTabPanel tab='php'>\n      <RestApiPhp />\n    </DocsTabPanel>\n    <DocsTabPanel tab='python'>\n      <RestApiPython />\n    </DocsTabPanel>\n    <DocsTabPanel tab='ruby'>\n      <RestApiRuby />\n    </DocsTabPanel>\n    <DocsTabPanel tab='swift'>\n      <RestApiSwift />\n    </DocsTabPanel>\n    <DocsTabPanel tab='curl'>\n      <RestApiCurl />\n    </DocsTabPanel>\n  </DocsPanelsContainer>\n</DocsTabs>\n\n## Table of Contents\n\n| Article                                               | Description                                                                                                                                                  |\n| ----------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [Managing files][managing-files]                      | Uploadcare provides various methods for managing already uploaded files with its REST API                                                                    |\n| [Webhooks][webhooks]                                  | Setup webhooks to notify your application about certain events that occur in your project asynchronously                                                     |\n| [File metadata][file-metadata]                        | File metadata is additional, arbitrary key-value data associated with uploaded files. For example, you could store a unique file identifier from your system |\n| [S3 bucket integration][storage-custom]               | Connect an Amazon S3 bucket to one or more of your Uploadcare projects to implement custom file workflows, integrated deeply into your system                |\n| [Storage backups][storage-backup]                     | Automatically copy all of you stored files to a custom S3 bucket. Connect the storage once, and the system will do backups on a timely basis                 |\n| [Video processing][transformations-video]             | Encode video files to MP4, WEBM, or OGG, and transform them to adjust the viewing experience, create thumbnails, and save bandwidth                          |\n| [Document conversion][transformations-docs]           | Convert documents and create their thumbnails to improve user experience                                                                                     |\n| [Unsafe content detection][unsafe-content]            | Detect and identify inappropriate, unwanted, NSFW, or offensive user-generated content                                                                       |\n| [Object recognition][intelligence-object-recognition] | Categorize and tag people, objects, and other content classes in your images                                                                                 |\n| [Malware protection][malware-protection]              | Automatically detect infected or malicious files to protect your users                                                                                       |\n| [REST API][rest-api]                                  | Low-level access to Uploadcare features, e.g. CRUD files and their metadata, receive webhooks, and run add-ons                                               |\n| [API integrations][integrations]                      | You don't have to code most of the low-level API integrations. We have high-level libraries for all popular platforms                                        |\n"
      },
      "pages/integrations/index.mdx": {
        "markdown": "---\n  layoutPreset: integrationsMenu\n  withBreadcrumbs: false\n  title: 'Uploadcare integrations'\n  description:\n    'Uploadcare features widgets, API clients, plugins, no-code integrations,\n    and low-code guides for different languages, frameworks and platforms.'\n---\n\nimport {LibsStyles} from '@uploadcare/docs-components'\n\n# Integrations\n\n<LibsStyles />\n\n## File Uploader\n\nThe new and highly customizable widget that allows users to upload and edit\nfiles from various sources, utilizing the power of Uploadcare APIs.\n\nWe built it as close to the native web platform as possible (web components,\nservice workers, wasm, etc). It doesn't force you to use any specific\ndevelopment environment tools.\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"/docs/file-uploader/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Documentation</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"https://github.com/uploadcare/blocks-examples/tree/main/examples/react-uploader\"\n    >\n      <span className=\"uploadcare_static-libs-title\">React example</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"https://github.com/uploadcare/blocks-examples/tree/main/examples/vue-uploader\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Vue example</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"https://github.com/uploadcare/blocks-examples/tree/main/examples/angular-uploader\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Angular example</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"https://github.com/uploadcare/blocks-examples/tree/main/examples/next-uploader\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Next.js example</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"https://github.com/uploadcare/blocks-examples/tree/main/examples/svelte-uploader\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Svelte example</span>\n    </a>\n  </li>\n</ul>\n\n### Previous stable version\n\nWe continue to support our previous uploading widget. It's built using jQuery,\nvery stable, and supports every customer request we received over the years.\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"/docs/uploads/file-uploader/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Documentation</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./react/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">React wrapper</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./angular/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Angular wrapper</span>\n    </a>\n  </li>\n</ul>\n\n## API clients\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./javascript/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">JS</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./php/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">PHP</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./python/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Python</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./ruby/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Ruby</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      target=\"_blank\"\n      className=\"uploadcare_static-libs-link\"\n      href=\"./rails/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Rails</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./java/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Java</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./golang/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Golang</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./rust/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Rust</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./swift/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">iOS (Swift)</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./android/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Android (Kotlin)</span>\n    </a>\n  </li>\n</ul>\n\n## CDN SDKs\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"./next-js/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Next.js</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"https://image.nuxtjs.org/providers/uploadcare\"\n    >\n      <span className=\"uploadcare_static-libs-title\">NuxtImage</span>\n      <span className=\"uploadcare_static-libs-author\">by Nuxt</span>\n    </a>\n  </li>\n</ul>\n\n## Plugins and no-code integrations\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      target=\"_blank\"\n      href=\"https://snowray.co\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">WooCommerce</span>\n      <span className=\"uploadcare_static-libs-author\">by snowray.co</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -contentful\">\n    <a\n      href=\"./contentful/\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Contentful</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -ckeditor\">\n    <a\n      target=\"_blank\"\n      href=\"http://ckeditor.com/cke4/addon/uploadcare\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">CKEditor</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -tinymce\">\n    <a\n      href=\"./tinymce/\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">TinyMCE</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -redactor\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/uploadcare/uploadcare-redactor\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Redactor</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -zapier\">\n    <a\n      href=\"./zapier/\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Zapier</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -make\">\n    <a\n      target=\"_blank\"\n      href=\"https://www.make.com/en/integrations/uploadcare?utm_source=uploadcare&utm_medium=partner&utm_campaign=uploadcare-partner-program\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Make</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -integrately\">\n    <a\n      target=\"_blank\"\n      href=\"./integrately/\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Integrately</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      target=\"_blank\"\n      href=\"https://www.wix.com/app-market/uploadly-file-upload\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Wix Uploadly</span>\n      <span className=\"uploadcare_static-libs-author\">by Inspon</span>\n    </a>\n  </li>\n</ul>\n\n## Low-code guides\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item -shopify\">\n    <a href=\"./shopify/\" className=\"uploadcare_static-libs-link\">\n      <span className=\"uploadcare_static-libs-title\">Shopify</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -webflow\">\n    <a href=\"./webflow/\" className=\"uploadcare_static-libs-link\">\n      <span className=\"uploadcare_static-libs-title\">Webflow</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -marketo\">\n    <a href=\"https://uploadcare.com/blog/upload-files-from-a-marketo-form-with-uploadcare/\" className=\"uploadcare_static-libs-link\">\n      <span className=\"uploadcare_static-libs-title\">Marketo</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n</ul>\n\n## Third-party integrations\n\nLovely libs made by those who believe in Uploadcare.\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/vormkracht10/php-uploadcare-transformations\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">PHP Transformation URLs generation</span>\n      <span className=\"uploadcare_static-libs-author\">by Vormkracht10</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/vormkracht10/flysystem-uploadcare\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Flysystem driver for Laravel</span>\n      <span className=\"uploadcare_static-libs-author\">by Vormkracht10</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/joshua-s/uploadcare-vue\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Vue.js</span>\n      <span className=\"uploadcare_static-libs-author\">by Josh Smith</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/marshallswain/uploadcare-vue\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Vue.js</span>\n      <span className=\"uploadcare_static-libs-author\">by Tipe.io</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/okolobaxa/uploadcare-csharp\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">C#</span>\n      <span className=\"uploadcare_static-libs-author\">by Anton Kheystver</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/chvanikoff/uploadcare\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Erlang</span>\n      <span className=\"uploadcare_static-libs-author\">by Roman Chvanikoff</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/CryptoHamsters/uploadcare_ex\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Elixir</span>\n      <span className=\"uploadcare_static-libs-author\">by CryptoHamsters</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/KonstantinKai/uploadcare_client\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Flutter</span>\n      <span className=\"uploadcare_static-libs-author\">by Konstantin Kai</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -github\">\n    <a\n      target=\"_blank\"\n      href=\"https://github.com/fernandojsg/aframe-uploadcare-component\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">A-Frame</span>\n      <span className=\"uploadcare_static-libs-author\">by Fernando Serrano</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      target=\"_blank\"\n      href=\"http://get-simple.info/extend/plugin/uploadcare-file-upload-and-edit-on-the-fly/1280/\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">GetSimple CMS</span>\n      <span className=\"uploadcare_static-libs-author\">by zekoolweb</span>\n    </a>\n  </li>\n</ul>\n\n## Misc\n\n<ul className=\"uploadcare_static-libs-list\">\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      className=\"uploadcare_static-libs-link\"\n      href=\"../delivery/adaptive-delivery/\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Adaptive delivery SDK</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item\">\n    <a\n      href=\"https://github.com/whitescape/uploadcare-loader\"\n      target=\"_blank\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">Webpack</span>\n      <span className=\"uploadcare_static-libs-author\">by Roman Dubinin</span>\n    </a>\n  </li>\n    <li className=\"uploadcare_static-libs-item -wordpress\">\n    <a href=\"./wordpress/\" className=\"uploadcare_static-libs-link\">\n      <span className=\"uploadcare_static-libs-title\">WordPress</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -jotform\">\n    <a\n      href=\"./jotform/\"\n      className=\"uploadcare_static-libs-link\"\n    >\n      <span className=\"uploadcare_static-libs-title\">JotForm</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n  <li className=\"uploadcare_static-libs-item -netlifycms\">\n    <a href=\"./netlify-cms/\" className=\"uploadcare_static-libs-link\">\n      <span className=\"uploadcare_static-libs-title\">Netlify CMS</span>\n      <span className=\"uploadcare_static-libs-author\">&nbsp;</span>\n    </a>\n  </li>\n</ul>\n\nGot an integration request? [Hit us up!][mail-help]\n"
      },
      "pages/integrations/python.mdx": {
        "markdown": "---\n  layoutPreset: integrations\n  title: Python API Client for File Upload and Management\n  description:\n    Uploadcare Python & Django integrations handle uploads and further operations with files by wrapping Upload and REST APIs.\n---\n\n# Python API Client\n\nUploadcare Python & Django integrations handle uploads and further operations\nwith files by wrapping Upload and REST APIs.\n\n[GitHub &rarr;][pyuploadcare-github-readme]\n\n## Features\n\nUploading ([Upload API][upload-api]):\n* Upload files from a local storage and URLs (up to 5 TB)\n* Multipart uploading for large files\n* Uploading network to speed up uploading jobs (like CDN)\n\nFile management ([REST API][rest-api]):\n* Get file info\n* Perform various file operations (store/delete/copy/group)\n* Detect unsafe and malicious content\n* Encode and transform videos\n* Convert documents and other files\n* Recognize objects in the image\n* Add arbitrary file metadata\n* Manage webhooks\n\nImage processing ([URL API][url-api]):\n* Compression\n* Geometry\n* Colors\n* Definition\n* Image and text overlays\n* Rotations\n* Recognition\n* File info\n* Proxy (fetch)\n\nSecurity features:\n* Secure authentication\n* Secure uploads (signed uploads)\n* Secure delivery (signed URLs)\n* Secure webhooks (signing secret)\n\n## Installation\n\nIn order to install `pyuploadcare`, run these command in CLI:\n\n```bash\npip install pyuploadcare\n```\n\nTo use in Django project install with extra dependencies:\n\n```bash\npip install pyuploadcare[django]\n```\n\n## Usage example\n\nHere is an example how to include Uploadcare `ImageField` into an existing\nDjango project.\n\n```python\nfrom django import forms\nfrom django.db import models\n\nfrom pyuploadcare.dj.models import ImageField\nfrom pyuploadcare.dj.forms import FileWidget, ImageField as ImageFormField\n\nclass Candidate(models.Model):\n    photo = ImageField(blank=True, manual_crop='4:3')\n\n# optional. provide advanced widget options:\n# https://uploadcare.com/docs/file-uploader/configuration/\n# https://uploadcare.com/docs/file-uploader/options/\nclass CandidateForm(forms.Form):\n    photo = ImageField(widget=FileWidget(attrs={\n        'source-list': 'local,url,camera',\n        'camera-mirror': True,\n    }))\n```\n\n## Example Django project\n\nCheck out [example Django project](https://github.com/uploadcare/pyuploadcare-example).\nIt features:\n\n* Project section\n* Files section\n* File Groups section\n* Files uploading\n* Documents conversion\n* Video conversion\n* Webhooks\n* Posts section\n\n## Requirements\n\n* Python 3.8, 3.9, 3.10, 3.11, 3.12\n\nTo use pyuploadcare with Python 3.6 or 3.7 please install `pyuploadcare < 5.0`.\n\nTo use pyuploadcare with Python 2.7 please install `pyuploadcare < 3.0`.\n\nDjango compatibility:\n\n| Py/Dj | 2.2 | 3.0 | 3.1 | 3.2 | 4.0 |\t4.1 | 4.2 | 5.0 |\n|-------|-----|-----|-----|-----|-----|-----|-----|-----|\n| 3.8   |  X  |  X  |  X  |  X  |  X  |  X  |  X  |     |\n| 3.9   |  X  |  X  |  X  |  X  |  X  |  X  |  X  |     |\n| 3.10  |     |     |     |  X  |  X  |  X  |  X  |  X  |\n| 3.11  |     |     |     |     |     |  X  |  X  |  X  |\n| 3.12  |     |     |     |     |     |     |  X  |  X  |\n"
      }
    },
    "search": {
      "type": "legacyMultiAlgoliaIndex"
    },
    "id": "docs_definition_777f1ac0-5f6e-4629-9e4b-2b41bfa3c7c2"
  },
  "lightModeEnabled": true
}
