{
  "baseUrl": {
    "domain": "stack-auth.docs.buildwithfern.com"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Documentation",
            "icon": "fa-solid fa-home",
            "items": [
              {
                "type": "page",
                "id": "docs/pages/overview.mdx",
                "title": "Overview",
                "icon": "fa-regular fa-globe",
                "urlSlug": "overview",
                "fullSlug": ["overview"],
                "hidden": false
              },
              {
                "type": "page",
                "id": "docs/pages/faq.mdx",
                "title": "FAQ",
                "icon": "fa-regular fa-circle-question",
                "urlSlug": "faq",
                "fullSlug": ["faq"],
                "hidden": false
              },
              {
                "type": "section",
                "title": "Getting Started",
                "urlSlug": "getting-started",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/getting-started/setup.mdx",
                    "title": "Installation & Setup",
                    "icon": "fa-regular fa-download",
                    "urlSlug": "installation-setup",
                    "fullSlug": ["getting-started", "setup"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/getting-started/components.mdx",
                    "title": "Components",
                    "icon": "fa-regular fa-puzzle",
                    "urlSlug": "components",
                    "fullSlug": ["getting-started", "components"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/getting-started/users.mdx",
                    "title": "Users",
                    "icon": "fa-regular fa-address-book",
                    "urlSlug": "users",
                    "fullSlug": ["getting-started", "users"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/getting-started/production.mdx",
                    "title": "Going to Production",
                    "icon": "fa-regular fa-rocket",
                    "urlSlug": "going-to-production",
                    "fullSlug": ["getting-started", "production"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Concepts",
                "urlSlug": "concepts",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/stack-app.mdx",
                    "title": "The StackApp Object",
                    "icon": "fa-regular fa-folder-gear",
                    "urlSlug": "the-stack-app-object",
                    "fullSlug": ["concepts", "stack-app"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/custom-user-data.mdx",
                    "title": "Custom User Data",
                    "icon": "fa-regular fa-user-pen",
                    "urlSlug": "custom-user-data",
                    "fullSlug": ["concepts", "custom-user-data"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/user-onboarding.mdx",
                    "title": "User Onboarding",
                    "icon": "fa-regular fa-user-check",
                    "urlSlug": "user-onboarding",
                    "fullSlug": ["concepts", "user-onboarding"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/oauth.mdx",
                    "title": "Connected OAuth Accounts",
                    "icon": "fa-regular fa-link",
                    "urlSlug": "connected-o-auth-accounts",
                    "fullSlug": ["concepts", "oauth"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/orgs-and-teams.mdx",
                    "title": "Teams",
                    "icon": "fa-regular fa-users",
                    "urlSlug": "teams",
                    "fullSlug": ["concepts", "orgs-and-teams"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/team-selection.mdx",
                    "title": "Selecting a Team",
                    "icon": "fa-regular fa-exchange",
                    "urlSlug": "selecting-a-team",
                    "fullSlug": ["concepts", "team-selection"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/permissions.mdx",
                    "title": "Permissions & RBAC",
                    "icon": "fa-regular fa-user-lock",
                    "urlSlug": "permissions-rbac",
                    "fullSlug": ["concepts", "permissions"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/webhooks.mdx",
                    "title": "Webhooks",
                    "icon": "fa-regular fa-webhook",
                    "urlSlug": "webhooks",
                    "fullSlug": ["concepts", "webhooks"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/concepts/backend-integration.mdx",
                    "title": "Backend Integration",
                    "icon": "fa-regular fa-network-wired",
                    "urlSlug": "backend-integration",
                    "fullSlug": ["concepts", "backend-integration"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Customization",
                "urlSlug": "customization",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/customization/dark-mode.mdx",
                    "title": "Dark/Light Mode",
                    "icon": "fa-regular fa-circle-half-stroke",
                    "urlSlug": "dark-light-mode",
                    "fullSlug": ["customization", "dark-mode"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/customization/custom-styles.mdx",
                    "title": "Colors and Styles",
                    "icon": "fa-regular fa-paint-brush",
                    "urlSlug": "colors-and-styles",
                    "fullSlug": ["customization", "custom-styles"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/customization/internationalization.mdx",
                    "title": "Internationalization",
                    "icon": "fa-regular fa-language",
                    "urlSlug": "internationalization",
                    "fullSlug": ["customization", "internationalization"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/customization/custom-pages.mdx",
                    "title": "Custom Layouts and Pages",
                    "icon": "fa-regular fa-table-layout",
                    "urlSlug": "custom-layouts-and-pages",
                    "fullSlug": ["customization", "custom-pages"],
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Custom Page Examples",
                    "icon": "fa-regular fa-files",
                    "urlSlug": "custom-page-examples",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/pages/customization/page-examples/sign-in.mdx",
                        "title": "Sign In",
                        "urlSlug": "sign-in",
                        "fullSlug": ["customization", "page-examples", "signin"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/pages/customization/page-examples/sign-up.mdx",
                        "title": "Sign Up",
                        "urlSlug": "sign-up",
                        "fullSlug": ["customization", "page-examples", "signup"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Others",
                "urlSlug": "others",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/others/supabase.mdx",
                    "title": "Supabase Integration",
                    "icon": "fa-regular fa-bolt",
                    "urlSlug": "supabase-integration",
                    "fullSlug": ["others", "supabase"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/others/self-host.mdx",
                    "title": "Self-Hosting",
                    "icon": "fa-regular fa-house-laptop",
                    "urlSlug": "self-hosting",
                    "fullSlug": ["others", "self-host"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "docs",
            "urlSlug": "docs",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "Components",
            "icon": "fa-solid fa-puzzle",
            "items": [
              {
                "type": "section",
                "title": "Components",
                "urlSlug": "components",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/components/user-button.mdx",
                    "title": "<UserButton />",
                    "urlSlug": "user-button",
                    "fullSlug": ["components", "user-button"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/selected-team-switcher.mdx",
                    "title": "<SelectedTeamSwitcher />",
                    "urlSlug": "selected-team-switcher",
                    "fullSlug": ["components", "selected-team-switcher"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/account-settings.mdx",
                    "title": "<AccountSettings />",
                    "urlSlug": "account-settings",
                    "fullSlug": ["components", "account-settings"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/sign-in.mdx",
                    "title": "<SignIn />",
                    "urlSlug": "sign-in",
                    "fullSlug": ["components", "sign-in"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/sign-up.mdx",
                    "title": "<SignUp />",
                    "urlSlug": "sign-up",
                    "fullSlug": ["components", "sign-up"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/credential-sign-in.mdx",
                    "title": "<CredentialSignIn />",
                    "urlSlug": "credential-sign-in",
                    "fullSlug": ["components", "credential-sign-in"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/credential-sign-up.mdx",
                    "title": "<CredentialSignUp />",
                    "urlSlug": "credential-sign-up",
                    "fullSlug": ["components", "credential-sign-up"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/oauth-button.mdx",
                    "title": "<OAuthButton />",
                    "urlSlug": "o-auth-button",
                    "fullSlug": ["components", "oauth-button"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/oauth-button-group.mdx",
                    "title": "<OAuthButtonGroup />",
                    "urlSlug": "o-auth-button-group",
                    "fullSlug": ["components", "oauth-button-group"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Utilities",
                "urlSlug": "utilities",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/components/stack-handler.mdx",
                    "title": "<StackHandler />",
                    "urlSlug": "stack-handler",
                    "fullSlug": ["components", "stack-handler"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/stack-provider.mdx",
                    "title": "<StackProvider />",
                    "urlSlug": "stack-provider",
                    "fullSlug": ["components", "stack-provider"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/components/stack-theme.mdx",
                    "title": "<StackTheme />",
                    "urlSlug": "stack-theme",
                    "fullSlug": ["components", "stack-theme"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "components",
            "urlSlug": "components",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "SDK Reference",
            "icon": "fa-solid fa-hammer",
            "items": [
              {
                "type": "section",
                "title": "Classes",
                "urlSlug": "classes",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/user.mdx",
                    "title": "User",
                    "urlSlug": "user",
                    "fullSlug": ["sdk", "user"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/stack-app.mdx",
                    "title": "StackApp",
                    "urlSlug": "stack-app",
                    "fullSlug": ["sdk", "stack-app"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/team.mdx",
                    "title": "Team",
                    "urlSlug": "team",
                    "fullSlug": ["sdk", "team"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/team-user.mdx",
                    "title": "TeamUser",
                    "urlSlug": "team-user",
                    "fullSlug": ["sdk", "team-user"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/team-profile.mdx",
                    "title": "TeamProfile",
                    "urlSlug": "team-profile",
                    "fullSlug": ["sdk", "team-profile"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/team-permission.mdx",
                    "title": "TeamPermission",
                    "urlSlug": "team-permission",
                    "fullSlug": ["sdk", "team-permission"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/project.mdx",
                    "title": "Project",
                    "urlSlug": "project",
                    "fullSlug": ["sdk", "project"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/contact-channel.mdx",
                    "title": "ContactChannel",
                    "urlSlug": "contact-channel",
                    "fullSlug": ["sdk", "contact-channel"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Hooks",
                "urlSlug": "hooks",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/use-user.mdx",
                    "title": "useUser()",
                    "urlSlug": "use-user",
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/pages/sdk/use-stack-app.mdx",
                    "title": "useStackApp()",
                    "urlSlug": "use-stack-app",
                    "fullSlug": ["sdk", "use-stack-app"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "sdk",
            "urlSlug": "sdk",
            "skipUrlSlug": false
          },
          {
            "type": "group",
            "title": "REST API & Webhooks",
            "icon": "fa-solid fa-code",
            "items": [
              {
                "type": "page",
                "id": "docs/pages/rest-api/auth.mdx",
                "title": "API Overview",
                "icon": "fa-regular fa-globe",
                "urlSlug": "api-overview",
                "fullSlug": ["rest-api", "auth"],
                "hidden": false
              },
              {
                "type": "api",
                "title": "Client API",
                "api": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
                "urlSlugOverride": "client",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "client"
              },
              {
                "type": "api",
                "title": "Server API",
                "api": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
                "urlSlugOverride": "server",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "server"
              },
              {
                "type": "api",
                "title": "Webhooks",
                "api": "8c451807-ffb6-4876-9831-21d410bcb716",
                "urlSlugOverride": "webhooks",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "webhooks"
              }
            ],
            "urlSlugOverride": "rest-api",
            "urlSlug": "rest-api",
            "skipUrlSlug": false
          }
        ]
      },
      "logoHeight": 28,
      "logoHref": "https://stack-auth.com",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 0,
            "g": 0,
            "b": 0,
            "a": 1
          },
          "logo": "2cd200f7-13e7-4501-ac6a-4f368a959c70",
          "background": {
            "type": "solid",
            "r": 255,
            "g": 255,
            "b": 255,
            "a": 1
          },
          "cardBackground": {
            "r": 252,
            "g": 252,
            "b": 252,
            "a": 1
          },
          "sidebarBackground": {
            "r": 252,
            "g": 252,
            "b": 252,
            "a": 1
          }
        },
        "dark": {
          "accentPrimary": {
            "r": 255,
            "g": 255,
            "b": 255,
            "a": 1
          },
          "logo": "74d94848-f6a5-4e56-8ad5-1f4fe0094607",
          "background": {
            "type": "solid",
            "r": 0,
            "g": 0,
            "b": 0,
            "a": 1
          },
          "cardBackground": {
            "r": 9,
            "g": 9,
            "b": 9,
            "a": 1
          },
          "sidebarBackground": {
            "r": 9,
            "g": 9,
            "b": 9,
            "a": 1
          }
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Discord",
          "url": "https://discord.stack-auth.com"
        },
        {
          "type": "secondary",
          "text": "GitHub",
          "url": "https://github.com/stack-auth/stack"
        },
        {
          "type": "primary",
          "text": "Dashboard",
          "url": "https://app.stack-auth.com"
        }
      ],
      "title": "Stack Auth Documentation",
      "favicon": "c52d1fd6-b896-4918-9b36-312503951872",
      "layout": {
        "pageWidth": {
          "type": "full"
        },
        "contentWidth": {
          "type": "rem",
          "value": 45
        },
        "sidebarWidth": {
          "type": "px",
          "value": 300
        },
        "headerHeight": {
          "type": "px",
          "value": 60
        },
        "searchbarPlacement": "SIDEBAR",
        "tabsPlacement": "SIDEBAR",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "css": {
        "inline": [
          ".indented {\n  margin-left: 1.5rem;\n  padding-left: 1.5rem;\n  border-left: 1px solid var(--border);\n}"
        ]
      },
      "js": {
        "files": [
          {
            "fileId": "74b8f532-d981-40af-87a2-e97b54dfa380"
          }
        ]
      }
    },
    "apis": {
      "4f0a40b7-799b-4d5d-b569-9a0888910a39": {
        "id": "4f0a40b7-799b-4d5d-b569-9a0888910a39",
        "rootPackage": {
          "endpoints": [
            {
              "environments": [
                {
                  "id": "Default",
                  "baseUrl": "https://api.stack-auth.com/api/v1"
                }
              ],
              "defaultEnvironment": "Default",
              "urlSlug": "api-v-1",
              "method": "GET",
              "id": "apiV1",
              "originalEndpointId": "endpoint_.apiV1",
              "name": "/api/v1",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": ""
                  }
                ]
              },
              "queryParameters": [],
              "headers": [
                {
                  "description": "The unique identifier of the project",
                  "key": "X-Stack-Project-Id",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Access-Type",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Access-Token",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Refresh-Token",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Publishable-Client-Key",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Secret-Server-Key",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Super-Secret-Admin-Key",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "errors": [],
              "errorsV2": [],
              "examples": [
                {
                  "path": "",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {
                    "X-Stack-Project-Id": "string",
                    "X-Stack-Access-Type": "string",
                    "X-Stack-Access-Token": "string",
                    "X-Stack-Refresh-Token": "string",
                    "X-Stack-Publishable-Client-Key": "string",
                    "X-Stack-Secret-Server-Key": "string",
                    "X-Stack-Super-Secret-Admin-Key": "string"
                  },
                  "responseStatusCode": 200,
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "codeSamples": []
                }
              ],
              "description": "Returns a human-readable message with some useful information about the API.",
              "authed": false
            }
          ],
          "subpackages": [
            "subpackage_contactChannels",
            "subpackage_oauth",
            "subpackage_otp",
            "subpackage_password",
            "subpackage_permissions",
            "subpackage_projects",
            "subpackage_sessions",
            "subpackage_teams",
            "subpackage_users"
          ],
          "types": [],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_contactChannels:GetContactChannelsResponseItemsItem": {
            "name": "GetContactChannelsResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:GetContactChannelsResponsePagination": {
            "name": "GetContactChannelsResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:GetContactChannelsResponse": {
            "name": "GetContactChannelsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsResponse": {
            "name": "PostContactChannelsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsVerifyResponse": {
            "name": "PostContactChannelsVerifyResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsVerifyCheckCodeResponse": {
            "name": "PostContactChannelsVerifyCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:GetContactChannelsUserIdContactChannelIdResponse": {
            "name": "GetContactChannelsUserIdContactChannelIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:DeleteContactChannelsUserIdContactChannelIdResponse": {
            "name": "DeleteContactChannelsUserIdContactChannelIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PatchContactChannelsUserIdContactChannelIdResponse": {
            "name": "PatchContactChannelsUserIdContactChannelIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse": {
            "name": "PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthOtpSignInResponse": {
            "name": "PostAuthOtpSignInResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Long-lived refresh token that can be used to obtain a new access token",
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Short-lived access token that can be used to authenticate the user",
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the user is a new user",
                  "key": "is_new_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthOtpSendSignInCodeResponse": {
            "name": "PostAuthOtpSendSignInCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "nonce",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthMfaSignInResponse": {
            "name": "PostAuthMfaSignInResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Long-lived refresh token that can be used to obtain a new access token",
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Short-lived access token that can be used to authenticate the user",
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the user is a new user",
                  "key": "is_new_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthOtpSignInCheckCodeResponse": {
            "name": "PostAuthOtpSignInCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordUpdateResponse": {
            "name": "PostAuthPasswordUpdateResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSignUpResponse": {
            "name": "PostAuthPasswordSignUpResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSignInResponse": {
            "name": "PostAuthPasswordSignInResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSetResponse": {
            "name": "PostAuthPasswordSetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSendResetCodeResponse": {
            "name": "PostAuthPasswordSendResetCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordResetResponse": {
            "name": "PostAuthPasswordResetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordResetCheckCodeResponse": {
            "name": "PostAuthPasswordResetCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:GetTeamPermissionsResponseItemsItem": {
            "name": "GetTeamPermissionsResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:GetTeamPermissionsResponsePagination": {
            "name": "GetTeamPermissionsResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:GetTeamPermissionsResponse": {
            "name": "GetTeamPermissionsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_permissions:GetTeamPermissionsResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_permissions:GetTeamPermissionsResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_projects:GetProjectsCurrentResponseConfig": {
            "name": "GetProjectsCurrentResponseConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether users can sign up new accounts, or whether they are only allowed to sign in to existing accounts. Regardless of this option, the server API can always create new users with the `POST /users` endpoint.",
                  "key": "sign_up_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether email password authentication is enabled for this project",
                  "key": "credential_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether magic link authentication is enabled for this project",
                  "key": "magic_link_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether passkey authentication is enabled for this project",
                  "key": "passkey_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether client users can create teams",
                  "key": "client_team_creation_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether client users can delete their own account from the client",
                  "key": "client_user_deletion_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_projects:GetProjectsCurrentResponse": {
            "name": "GetProjectsCurrentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the project",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable project display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_projects:GetProjectsCurrentResponseConfig"
                  }
                }
              ]
            }
          },
          "type_sessions:DeleteAuthSessionsCurrentResponse": {
            "name": "DeleteAuthSessionsCurrentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_sessions:PostAuthSessionsCurrentRefreshResponse": {
            "name": "PostAuthSessionsCurrentRefreshResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsResponseItemsItem": {
            "name": "GetTeamsResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsResponsePagination": {
            "name": "GetTeamsResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsResponse": {
            "name": "GetTeamsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamsResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamsResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamsResponse": {
            "name": "PostTeamsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponseItemsItem": {
            "name": "GetTeamMemberProfilesResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponsePagination": {
            "name": "GetTeamMemberProfilesResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponse": {
            "name": "GetTeamMemberProfilesResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsTeamIdResponse": {
            "name": "GetTeamsTeamIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:DeleteTeamsTeamIdResponse": {
            "name": "DeleteTeamsTeamIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PatchTeamsTeamIdResponse": {
            "name": "PatchTeamsTeamIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsSendCodeResponse": {
            "name": "PostTeamInvitationsSendCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsAcceptResponse": {
            "name": "PostTeamInvitationsAcceptResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_teams:DeleteTeamMembershipsTeamIdUserIdResponse": {
            "name": "DeleteTeamMembershipsTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesTeamIdUserIdResponse": {
            "name": "GetTeamMemberProfilesTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponse": {
            "name": "PatchTeamMemberProfilesTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsAcceptDetailsResponse": {
            "name": "PostTeamInvitationsAcceptDetailsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "team_display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsAcceptCheckCodeResponse": {
            "name": "PostTeamInvitationsAcceptCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersMeResponseSelectedTeam": {
            "name": "GetUsersMeResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersMeResponse": {
            "name": "GetUsersMeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:GetUsersMeResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:DeleteUsersMeResponse": {
            "name": "DeleteUsersMeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_users:PatchUsersMeResponseSelectedTeam": {
            "name": "PatchUsersMeResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:PatchUsersMeResponse": {
            "name": "PatchUsersMeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:PatchUsersMeResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_contactChannels": {
            "subpackageId": "subpackage_contactChannels",
            "name": "contactChannels",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-contact-channels",
                "method": "GET",
                "id": "listContactChannels",
                "originalEndpointId": "endpoint_contactChannels.listContactChannels",
                "name": "List contact channels",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels",
                    "pathParameters": {},
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "value": "johndoe@example.com",
                          "type": "email",
                          "used_for_auth": true,
                          "is_verified": true,
                          "is_primary": true
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                            "value": "johndoe@example.com",
                            "type": "email",
                            "used_for_auth": true,
                            "is_verified": true,
                            "is_primary": true
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-a-contact-channel",
                "method": "POST",
                "id": "createAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.createAContactChannel",
                "name": "Create a contact channel",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                        "key": "user_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The value of the contact channel. For email, this should be a valid email address.",
                        "key": "value",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The type of the contact channel. Currently only \"email\" is supported.",
                        "key": "type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                        "key": "used_for_auth",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                        "key": "is_primary",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels",
                    "pathParameters": {},
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "requestBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_primary": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_verified": true,
                      "is_primary": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_primary": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_verified": true,
                        "is_primary": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "verify-an-email",
                "method": "POST",
                "id": "verifyAnEmail",
                "originalEndpointId": "endpoint_contactChannels.verifyAnEmail",
                "name": "Verify an email",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/verify"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsVerifyResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/verify",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Verify an email address of a user",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-email-verification-code",
                "method": "POST",
                "id": "checkEmailVerificationCode",
                "originalEndpointId": "endpoint_contactChannels.checkEmailVerificationCode",
                "name": "Check email verification code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/verify/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsVerifyCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/verify/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if an email verification code is valid without using it",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-a-contact-channel",
                "method": "GET",
                "id": "getAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.getAContactChannel",
                "name": "Get a contact channel",
                "path": {
                  "pathParameters": [
                    {
                      "description": "the user that the contact channel belongs to",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "the target contact channel",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsUserIdContactChannelIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_verified": true,
                      "is_primary": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_verified": true,
                        "is_primary": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-a-contact-channel",
                "method": "DELETE",
                "id": "deleteAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.deleteAContactChannel",
                "name": "Delete a contact channel",
                "path": {
                  "pathParameters": [
                    {
                      "description": "the user that the contact channel belongs to",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "the target contact channel",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:DeleteContactChannelsUserIdContactChannelIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-a-contact-channel",
                "method": "PATCH",
                "id": "updateAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.updateAContactChannel",
                "name": "Update a contact channel",
                "path": {
                  "pathParameters": [
                    {
                      "description": "the user that the contact channel belongs to",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "the target contact channel",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The value of the contact channel. For email, this should be a valid email address.",
                        "key": "value",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The type of the contact channel. Currently only \"email\" is supported.",
                        "key": "type",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                        "key": "used_for_auth",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                        "key": "is_primary",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PatchContactChannelsUserIdContactChannelIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "requestBody": {
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_primary": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_verified": true,
                      "is_primary": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_primary": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_verified": true,
                        "is_primary": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-contact-channel-verification-code",
                "method": "POST",
                "id": "sendContactChannelVerificationCode",
                "originalEndpointId": "endpoint_contactChannels.sendContactChannelVerificationCode",
                "name": "Send contact channel verification code",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The user to send the verification code to.",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The contact channel to send the verification code to.",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": "/send-verification-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The base callback URL to construct a verification link for the verification e-mail. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/contact-channels/verify` endpoint.",
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2/send-verification-code",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "callback_url": "https://example.com/handler/email-verification"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "callback_url": "https://example.com/handler/email-verification"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send a code to the user's contact channel for verifying the contact channel.",
                "authed": false
              }
            ],
            "types": [
              "type_contactChannels:GetContactChannelsResponseItemsItem",
              "type_contactChannels:GetContactChannelsResponsePagination",
              "type_contactChannels:GetContactChannelsResponse",
              "type_contactChannels:PostContactChannelsResponse",
              "type_contactChannels:PostContactChannelsVerifyResponse",
              "type_contactChannels:PostContactChannelsVerifyCheckCodeResponse",
              "type_contactChannels:GetContactChannelsUserIdContactChannelIdResponse",
              "type_contactChannels:DeleteContactChannelsUserIdContactChannelIdResponse",
              "type_contactChannels:PatchContactChannelsUserIdContactChannelIdResponse",
              "type_contactChannels:PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "contact-channels",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_oauth": {
            "subpackageId": "subpackage_oauth",
            "name": "oauth",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "o-auth-token-endpoints",
                "method": "POST",
                "id": "oAuthTokenEndpoints",
                "originalEndpointId": "endpoint_oauth.oAuthTokenEndpoints",
                "name": "OAuth token endpoints",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/oauth/token"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "grant_type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "unknown"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/oauth/token",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "grant_type": "grant_type"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "grant_type": "grant_type"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint is used to exchange an authorization code or refresh token for an access token.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "o-auth-authorize-endpoint",
                "method": "GET",
                "id": "oAuthAuthorizeEndpoint",
                "originalEndpointId": "endpoint_oauth.oAuthAuthorizeEndpoint",
                "name": "OAuth authorize endpoint",
                "path": {
                  "pathParameters": [
                    {
                      "key": "provider_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/oauth/authorize/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "provider_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "token",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "provider_scope",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "error_redirect_uri",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "after_callback_redirect_url",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "client_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "client_secret",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "redirect_uri",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "scope",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "state",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "grant_type",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "code_challenge",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "code_challenge_method",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "response_type",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/oauth/authorize/provider_id",
                    "pathParameters": {
                      "provider_id": "provider_id"
                    },
                    "queryParameters": {
                      "client_id": "client_id",
                      "client_secret": "client_secret",
                      "redirect_uri": "redirect_uri",
                      "scope": "scope",
                      "state": "state",
                      "grant_type": "grant_type",
                      "code_challenge": "code_challenge",
                      "code_challenge_method": "code_challenge_method",
                      "response_type": "response_type"
                    },
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint is used to initiate the OAuth authorization flow. there are two purposes for this endpoint: 1. Authenticate a user with an OAuth provider. 2. Link an existing user with an OAuth provider.",
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "oauth",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_otp": {
            "subpackageId": "subpackage_otp",
            "name": "otp",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-in-with-a-code",
                "method": "POST",
                "id": "signInWithACode",
                "originalEndpointId": "endpoint_otp.signInWithACode",
                "name": "Sign in with a code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/otp/sign-in"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthOtpSignInResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/otp/sign-in",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "refresh_token": "i8ns3aq2...14y",
                      "access_token": "eyJhmMiJB2TO...diI4QT",
                      "is_new_user": true,
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "refresh_token": "i8ns3aq2...14y",
                        "access_token": "eyJhmMiJB2TO...diI4QT",
                        "is_new_user": true,
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sign in with a code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-sign-in-code",
                "method": "POST",
                "id": "sendSignInCode",
                "originalEndpointId": "endpoint_otp.sendSignInCode",
                "name": "Send sign-in code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/otp/send-sign-in-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The email to sign in with.",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The base callback URL to construct the magic link from. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/auth/otp/sign-in` endpoint.",
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthOtpSendSignInCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/otp/send-sign-in-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "johndoe@example.com",
                      "callback_url": "https://example.com/handler/magic-link-callback"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "nonce": "nonce"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "johndoe@example.com",
                        "callback_url": "https://example.com/handler/magic-link-callback"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "nonce": "nonce"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send a code to the user's email address for sign-in.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "mfa-sign-in",
                "method": "POST",
                "id": "mfaSignIn",
                "originalEndpointId": "endpoint_otp.mfaSignIn",
                "name": "MFA sign in",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/mfa/sign-in"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "totp",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthMfaSignInResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/mfa/sign-in",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "type": "type",
                      "totp": "totp",
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "refresh_token": "i8ns3aq2...14y",
                      "access_token": "eyJhmMiJB2TO...diI4QT",
                      "is_new_user": true,
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "type",
                        "totp": "totp",
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "refresh_token": "i8ns3aq2...14y",
                        "access_token": "eyJhmMiJB2TO...diI4QT",
                        "is_new_user": true,
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Complete multi-factor authorization to sign in, with a TOTP and an MFA attempt code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-sign-in-code",
                "method": "POST",
                "id": "checkSignInCode",
                "originalEndpointId": "endpoint_otp.checkSignInCode",
                "name": "Check sign in code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/otp/sign-in/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthOtpSignInCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/otp/sign-in/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if a sign in code is valid without using it",
                "authed": false
              }
            ],
            "types": [
              "type_otp:PostAuthOtpSignInResponse",
              "type_otp:PostAuthOtpSendSignInCodeResponse",
              "type_otp:PostAuthMfaSignInResponse",
              "type_otp:PostAuthOtpSignInCheckCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "otp",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_password": {
            "subpackageId": "subpackage_password",
            "name": "password",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-password",
                "method": "POST",
                "id": "updatePassword",
                "originalEndpointId": "endpoint_password.updatePassword",
                "name": "Update password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/update"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "key": "x-stack-refresh-token",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "old_password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "new_password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordUpdateResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/update",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "old_password": "old_password",
                      "new_password": "new_password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "old_password": "old_password",
                        "new_password": "new_password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the password of the current user, requires the old password",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-up-with-email-and-password",
                "method": "POST",
                "id": "signUpWithEmailAndPassword",
                "originalEndpointId": "endpoint_password.signUpWithEmailAndPassword",
                "name": "Sign up with email and password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/sign-up"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The email to sign in with.",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The base callback URL to construct a verification link for the verification e-mail. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/contact-channels/verify` endpoint.",
                        "key": "verification_callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSignUpResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/sign-up",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "johndoe@example.com",
                      "password": "password",
                      "verification_callback_url": "https://example.com/handler/email-verification"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "access_token": "access_token",
                      "refresh_token": "refresh_token",
                      "user_id": "user_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "johndoe@example.com",
                        "password": "password",
                        "verification_callback_url": "https://example.com/handler/email-verification"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "access_token": "access_token",
                        "refresh_token": "refresh_token",
                        "user_id": "user_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new account with email and password",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-in-with-email-and-password",
                "method": "POST",
                "id": "signInWithEmailAndPassword",
                "originalEndpointId": "endpoint_password.signInWithEmailAndPassword",
                "name": "Sign in with email and password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/sign-in"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSignInResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/sign-in",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "email",
                      "password": "password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "access_token": "access_token",
                      "refresh_token": "refresh_token",
                      "user_id": "user_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "email",
                        "password": "password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "access_token": "access_token",
                        "refresh_token": "refresh_token",
                        "user_id": "user_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sign in to an account with email and password",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "set-password",
                "method": "POST",
                "id": "setPassword",
                "originalEndpointId": "endpoint_password.setPassword",
                "name": "Set password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/set"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/set",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "password": "password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "password": "password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Set a new password for the current user",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-reset-password-code",
                "method": "POST",
                "id": "sendResetPasswordCode",
                "originalEndpointId": "endpoint_password.sendResetPasswordCode",
                "name": "Send reset password code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/send-reset-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSendResetCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/send-reset-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "email",
                      "callback_url": "callback_url"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": "success"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "email",
                        "callback_url": "callback_url"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": "success"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send a code to the user's email address for resetting the password.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "reset-password-with-a-code",
                "method": "POST",
                "id": "resetPasswordWithACode",
                "originalEndpointId": "endpoint_password.resetPasswordWithACode",
                "name": "Reset password with a code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/reset"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordResetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/reset",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "password": "password",
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "password": "password",
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Reset password with a code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-reset-password-code",
                "method": "POST",
                "id": "checkResetPasswordCode",
                "originalEndpointId": "endpoint_password.checkResetPasswordCode",
                "name": "Check reset password code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/reset/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordResetCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/reset/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if a reset password code is valid without using it",
                "authed": false
              }
            ],
            "types": [
              "type_password:PostAuthPasswordUpdateResponse",
              "type_password:PostAuthPasswordSignUpResponse",
              "type_password:PostAuthPasswordSignInResponse",
              "type_password:PostAuthPasswordSetResponse",
              "type_password:PostAuthPasswordSendResetCodeResponse",
              "type_password:PostAuthPasswordResetResponse",
              "type_password:PostAuthPasswordResetCheckCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "password",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_permissions": {
            "subpackageId": "subpackage_permissions",
            "name": "permissions",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-team-permissions",
                "method": "GET",
                "id": "listTeamPermissions",
                "originalEndpointId": "endpoint_permissions.listTeamPermissions",
                "name": "List team permissions",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-permissions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter with the team ID. If set, only the permissions of the members in a specific team will be returned.",
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned",
                    "key": "permission_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed.",
                    "key": "recursive",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissions:GetTeamPermissionsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-permissions",
                    "pathParameters": {},
                    "queryParameters": {
                      "team_id": "cce084a3-28b7-418e-913e-c8ee6d802ea4",
                      "user_id": "me",
                      "permission_id": "16399452-c4f3-4554-8e44-c2d67bb60360",
                      "recursive": "true"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "id": "read_secret_info",
                          "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e"
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "id": "read_secret_info",
                            "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e"
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List team permissions of the current user. `user_id=me` must be set for client requests. Note that this might contain the permissions with the same permission ID across different teams. `(team_id, user_id, permission_id)` together uniquely identify a permission.",
                "authed": false
              }
            ],
            "types": [
              "type_permissions:GetTeamPermissionsResponseItemsItem",
              "type_permissions:GetTeamPermissionsResponsePagination",
              "type_permissions:GetTeamPermissionsResponse"
            ],
            "subpackages": [],
            "urlSlug": "permissions",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_projects": {
            "subpackageId": "subpackage_projects",
            "name": "projects",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-the-current-project",
                "method": "GET",
                "id": "getTheCurrentProject",
                "originalEndpointId": "endpoint_projects.getTheCurrentProject",
                "name": "Get the current project",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/projects/current"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_projects:GetProjectsCurrentResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/projects/current",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
                      "display_name": "MyMusic",
                      "config": {
                        "sign_up_enabled": true,
                        "credential_enabled": true,
                        "magic_link_enabled": true,
                        "passkey_enabled": true,
                        "client_team_creation_enabled": true,
                        "client_user_deletion_enabled": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
                        "display_name": "MyMusic",
                        "config": {
                          "sign_up_enabled": true,
                          "credential_enabled": true,
                          "magic_link_enabled": true,
                          "passkey_enabled": true,
                          "client_team_creation_enabled": true,
                          "client_user_deletion_enabled": true
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the current project information including display name, oauth providers and authentication methods. Useful for display the available login options to the user.",
                "authed": false
              }
            ],
            "types": ["type_projects:GetProjectsCurrentResponseConfig", "type_projects:GetProjectsCurrentResponse"],
            "subpackages": [],
            "urlSlug": "projects",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_sessions": {
            "subpackageId": "subpackage_sessions",
            "name": "sessions",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-out-of-the-current-session",
                "method": "DELETE",
                "id": "signOutOfTheCurrentSession",
                "originalEndpointId": "endpoint_sessions.signOutOfTheCurrentSession",
                "name": "Sign out of the current session",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/sessions/current"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "key": "x-stack-refresh-token",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_sessions:DeleteAuthSessionsCurrentResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/sessions/current",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-stack-refresh-token": "x-stack-refresh-token"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sign out of the current session and invalidate the refresh token",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "refresh-access-token",
                "method": "POST",
                "id": "refreshAccessToken",
                "originalEndpointId": "endpoint_sessions.refreshAccessToken",
                "name": "Refresh access token",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/sessions/current/refresh"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "key": "x-stack-refresh-token",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_sessions:PostAuthSessionsCurrentRefreshResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/sessions/current/refresh",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-stack-refresh-token": "x-stack-refresh-token"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "access_token": "access_token"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "access_token": "access_token"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a new access token using a refresh token",
                "authed": false
              }
            ],
            "types": [
              "type_sessions:DeleteAuthSessionsCurrentResponse",
              "type_sessions:PostAuthSessionsCurrentRefreshResponse"
            ],
            "subpackages": [],
            "urlSlug": "sessions",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_teams": {
            "subpackageId": "subpackage_teams",
            "name": "teams",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-teams",
                "method": "GET",
                "id": "listTeams",
                "originalEndpointId": "endpoint_teams.listTeams",
                "name": "List teams",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter for the teams that the user is a member of. Can be either `me` or an ID. Must be `me` in the client API",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams",
                    "pathParameters": {},
                    "queryParameters": {
                      "user_id": "me"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "display_name": "My Team",
                            "profile_image_url": "https://example.com/image.jpg",
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            }
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all the teams that the current user is a member of. `user_id=me` must be passed in the query parameters.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-a-team",
                "method": "POST",
                "id": "createATeam",
                "originalEndpointId": "endpoint_teams.createATeam",
                "name": "Create a team",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable team display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The ID of the creator of the team. If not specified, the user will not be added to the team. Can be either \"me\" or the ID of the user. Only used on the client side.",
                        "key": "creator_user_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "My Team",
                      "creator_user_id": "me",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "My Team",
                        "creator_user_id": "me",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new team and optionally add the current user as a member.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-team-members-profiles",
                "method": "GET",
                "id": "listTeamMembersProfiles",
                "originalEndpointId": "endpoint_teams.listTeamMembersProfiles",
                "name": "List team members profiles",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-member-profiles"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-member-profiles",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "display_name": "John Doe",
                          "profile_image_url": "https://example.com/image.jpg"
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "display_name": "John Doe",
                            "profile_image_url": "https://example.com/image.jpg"
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List team members profiles. You always need to specify a `team_id` that your are a member of on the client. You can always filter for your own profile by setting `me` as the `user_id` in the path parameters. If you want list all the profiles in a team, you need to have the `$read_members` permission in that team.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-a-team",
                "method": "GET",
                "id": "getATeam",
                "originalEndpointId": "endpoint_teams.getATeam",
                "name": "Get a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamsTeamIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams/team_id",
                    "pathParameters": {
                      "team_id": "team_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a team that the current user is a member of.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-a-team",
                "method": "DELETE",
                "id": "deleteATeam",
                "originalEndpointId": "endpoint_teams.deleteATeam",
                "name": "Delete a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:DeleteTeamsTeamIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams/team_id",
                    "pathParameters": {
                      "team_id": "team_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a team. Only allowed if the current user is a member of the team and has the `$delete_team` permission.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-a-team",
                "method": "PATCH",
                "id": "updateATeam",
                "originalEndpointId": "endpoint_teams.updateATeam",
                "name": "Update a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable team display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PatchTeamsTeamIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams/team_id",
                    "pathParameters": {
                      "team_id": "team_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the team information. Only allowed if the current user is a member of the team and has the `$update_team` permission.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-an-email-to-invite-a-user-to-a-team",
                "method": "POST",
                "id": "sendAnEmailToInviteAUserToATeam",
                "originalEndpointId": "endpoint_teams.sendAnEmailToInviteAUserToATeam",
                "name": "Send an email to invite a user to a team",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/send-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The unique identifier of the team",
                        "key": "team_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The email of the user to invite.",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The base callback URL to construct an invite link with. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/team-invitations/accept` endpoint.",
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsSendCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/send-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "email": "johndoe@example.com",
                      "callback_url": "https://example.com/handler/team-invitation"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "email": "johndoe@example.com",
                        "callback_url": "https://example.com/handler/team-invitation"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "The user receiving this email can join the team by clicking on the link in the email. If the user does not have an account yet, they will be prompted to create one.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "invite-a-user-to-a-team",
                "method": "POST",
                "id": "inviteAUserToATeam",
                "originalEndpointId": "endpoint_teams.inviteAUserToATeam",
                "name": "Invite a user to a team",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/accept"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsAcceptResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/accept",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send an email to a user to invite them to a team",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "remove-a-user-from-a-team",
                "method": "DELETE",
                "id": "removeAUserFromATeam",
                "originalEndpointId": "endpoint_teams.removeAUserFromATeam",
                "name": "Remove a user from a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-memberships/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:DeleteTeamMembershipsTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-memberships/team_id/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "All the users are allowed to remove themselves from a team (`user_id=me`). Only the users who have the `$remove_members` permission are allowed to remove other users from a team. `team_id` is must an ID of a team that the user is a member of.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-a-team-member-profile",
                "method": "GET",
                "id": "getATeamMemberProfile",
                "originalEndpointId": "endpoint_teams.getATeamMemberProfile",
                "name": "Get a team member profile",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-member-profiles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-member-profiles/team_id/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a team member profile. you can always get your own profile by setting `me` as the `user_id` in the path parameters on the client. If you want to get someone else's profile in a team, you need to have the `$read_members` permission in that team.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-your-team-member-profile",
                "method": "PATCH",
                "id": "updateYourTeamMemberProfile",
                "originalEndpointId": "endpoint_teams.updateYourTeamMemberProfile",
                "name": "Update your team member profile",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-member-profiles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-member-profiles/team_id/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update your own team member profile. `user_id` must be `me` in the path parameters on the client.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-team-invitation-details",
                "method": "POST",
                "id": "getTeamInvitationDetails",
                "originalEndpointId": "endpoint_teams.getTeamInvitationDetails",
                "name": "Get team invitation details",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/accept/details"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsAcceptDetailsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/accept/details",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "team_id": "team_id",
                      "team_display_name": "team_display_name"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "team_id",
                        "team_display_name": "team_display_name"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get additional information about a team invitation code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-if-a-team-invitation-code-is-valid",
                "method": "POST",
                "id": "checkIfATeamInvitationCodeIsValid",
                "originalEndpointId": "endpoint_teams.checkIfATeamInvitationCodeIsValid",
                "name": "Check if a team invitation code is valid",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/accept/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsAcceptCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/accept/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if a team invitation code is valid without using it",
                "authed": false
              }
            ],
            "types": [
              "type_teams:GetTeamsResponseItemsItem",
              "type_teams:GetTeamsResponsePagination",
              "type_teams:GetTeamsResponse",
              "type_teams:PostTeamsResponse",
              "type_teams:GetTeamMemberProfilesResponseItemsItem",
              "type_teams:GetTeamMemberProfilesResponsePagination",
              "type_teams:GetTeamMemberProfilesResponse",
              "type_teams:GetTeamsTeamIdResponse",
              "type_teams:DeleteTeamsTeamIdResponse",
              "type_teams:PatchTeamsTeamIdResponse",
              "type_teams:PostTeamInvitationsSendCodeResponse",
              "type_teams:PostTeamInvitationsAcceptResponse",
              "type_teams:DeleteTeamMembershipsTeamIdUserIdResponse",
              "type_teams:GetTeamMemberProfilesTeamIdUserIdResponse",
              "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponse",
              "type_teams:PostTeamInvitationsAcceptDetailsResponse",
              "type_teams:PostTeamInvitationsAcceptCheckCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "teams",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_users": {
            "subpackageId": "subpackage_users",
            "name": "users",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-current-user",
                "method": "GET",
                "id": "getCurrentUser",
                "originalEndpointId": "endpoint_users.getCurrentUser",
                "name": "Get current user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/me"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:GetUsersMeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/me",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "selected_team": {
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "display_name": "John Doe",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "selected_team_id": "team-id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "selected_team": {
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "display_name": "John Doe",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "selected_team_id": "team-id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Gets the currently authenticated user.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-current-user",
                "method": "DELETE",
                "id": "deleteCurrentUser",
                "originalEndpointId": "endpoint_users.deleteCurrentUser",
                "name": "Delete current user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/me"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:DeleteUsersMeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/me",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes the currently authenticated user. Use this with caution.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-current-user",
                "method": "PATCH",
                "id": "updateCurrentUser",
                "originalEndpointId": "endpoint_users.updateCurrentUser",
                "name": "Update current user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/me"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable user display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "ID of the team currently selected by the user",
                        "key": "selected_team_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA.",
                        "key": "totp_secret_base64",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:PatchUsersMeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/me",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "selected_team_id": "team-id",
                      "totp_secret_base64": "dG90cC1zZWNyZXQ="
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "selected_team": {
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "display_name": "John Doe",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "selected_team_id": "team-id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "selected_team_id": "team-id",
                        "totp_secret_base64": "dG90cC1zZWNyZXQ="
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "selected_team": {
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "display_name": "John Doe",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "selected_team_id": "team-id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the currently authenticated user. Only the values provided will be updated.",
                "authed": false
              }
            ],
            "types": [
              "type_users:GetUsersMeResponseSelectedTeam",
              "type_users:GetUsersMeResponse",
              "type_users:DeleteUsersMeResponse",
              "type_users:PatchUsersMeResponseSelectedTeam",
              "type_users:PatchUsersMeResponse"
            ],
            "subpackages": [],
            "urlSlug": "users",
            "webhooks": [],
            "websockets": []
          }
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "8c451807-ffb6-4876-9831-21d410bcb716": {
        "id": "8c451807-ffb6-4876-9831-21d410bcb716",
        "rootPackage": {
          "endpoints": [],
          "subpackages": ["subpackage_users", "subpackage_teams"],
          "types": [],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_users:UserCreatedPayloadDataSelectedTeam": {
            "name": "UserCreatedPayloadDataSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserCreatedPayloadData": {
            "name": "UserCreatedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:UserCreatedPayloadDataSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserCreatedPayload": {
            "name": "UserCreatedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "user.created",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_users:UserCreatedPayloadData"
                  }
                }
              ]
            }
          },
          "type_users:UserUpdatedPayloadDataSelectedTeam": {
            "name": "UserUpdatedPayloadDataSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserUpdatedPayloadData": {
            "name": "UserUpdatedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:UserUpdatedPayloadDataSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserUpdatedPayload": {
            "name": "UserUpdatedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "user.updated",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_users:UserUpdatedPayloadData"
                  }
                }
              ]
            }
          },
          "type_users:UserDeletedPayloadDataTeamsItem": {
            "name": "UserDeletedPayloadDataTeamsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserDeletedPayloadData": {
            "name": "UserDeletedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "teams",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:UserDeletedPayloadDataTeamsItem"
                    }
                  }
                }
              ]
            }
          },
          "type_users:UserDeletedPayload": {
            "name": "UserDeletedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "user.deleted",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_users:UserDeletedPayloadData"
                  }
                }
              ]
            }
          },
          "type_teams:TeamCreatedPayloadData": {
            "name": "TeamCreatedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:TeamCreatedPayload": {
            "name": "TeamCreatedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "team.created",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:TeamCreatedPayloadData"
                  }
                }
              ]
            }
          },
          "type_teams:TeamUpdatedPayloadData": {
            "name": "TeamUpdatedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:TeamUpdatedPayload": {
            "name": "TeamUpdatedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "team.updated",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:TeamUpdatedPayloadData"
                  }
                }
              ]
            }
          },
          "type_teams:TeamDeletedPayloadData": {
            "name": "TeamDeletedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:TeamDeletedPayload": {
            "name": "TeamDeletedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "team.deleted",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:TeamDeletedPayloadData"
                  }
                }
              ]
            }
          },
          "type_teams:TeamMembershipCreatedPayloadData": {
            "name": "TeamMembershipCreatedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:TeamMembershipCreatedPayload": {
            "name": "TeamMembershipCreatedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "team_membership.created",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:TeamMembershipCreatedPayloadData"
                  }
                }
              ]
            }
          },
          "type_teams:TeamMembershipDeletedPayloadData": {
            "name": "TeamMembershipDeletedPayloadData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:TeamMembershipDeletedPayload": {
            "name": "TeamMembershipDeletedPayload",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "team_membership.deleted",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:TeamMembershipDeletedPayloadData"
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_users": {
            "subpackageId": "subpackage_users",
            "name": "users",
            "endpoints": [],
            "types": [
              "type_users:UserCreatedPayloadDataSelectedTeam",
              "type_users:UserCreatedPayloadData",
              "type_users:UserCreatedPayload",
              "type_users:UserUpdatedPayloadDataSelectedTeam",
              "type_users:UserUpdatedPayloadData",
              "type_users:UserUpdatedPayload",
              "type_users:UserDeletedPayloadDataTeamsItem",
              "type_users:UserDeletedPayloadData",
              "type_users:UserDeletedPayload"
            ],
            "subpackages": [],
            "urlSlug": "users",
            "webhooks": [
              {
                "urlSlug": "user-created",
                "description": "This event is triggered when a user is created.",
                "method": "POST",
                "id": "user.created",
                "name": "user.created",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:UserCreatedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "id": "string",
                        "primary_email": "string",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "string",
                        "selected_team": {
                          "created_at_millis": 1,
                          "server_metadata": {
                            "string": {}
                          },
                          "id": "string",
                          "display_name": "string",
                          "profile_image_url": "string",
                          "client_metadata": {
                            "string": {}
                          },
                          "client_read_only_metadata": {
                            "string": {}
                          }
                        },
                        "selected_team_id": "string",
                        "profile_image_url": "string",
                        "signed_up_at_millis": 1,
                        "client_metadata": {
                          "string": {}
                        },
                        "client_read_only_metadata": {
                          "string": {}
                        },
                        "server_metadata": {
                          "string": {}
                        },
                        "last_active_at_millis": 1
                      }
                    }
                  }
                ]
              },
              {
                "urlSlug": "user-updated",
                "description": "This event is triggered when a user is updated.",
                "method": "POST",
                "id": "user.updated",
                "name": "user.updated",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:UserUpdatedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "id": "string",
                        "primary_email": "string",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "string",
                        "selected_team": {
                          "created_at_millis": 1,
                          "server_metadata": {
                            "string": {}
                          },
                          "id": "string",
                          "display_name": "string",
                          "profile_image_url": "string",
                          "client_metadata": {
                            "string": {}
                          },
                          "client_read_only_metadata": {
                            "string": {}
                          }
                        },
                        "selected_team_id": "string",
                        "profile_image_url": "string",
                        "signed_up_at_millis": 1,
                        "client_metadata": {
                          "string": {}
                        },
                        "client_read_only_metadata": {
                          "string": {}
                        },
                        "server_metadata": {
                          "string": {}
                        },
                        "last_active_at_millis": 1
                      }
                    }
                  }
                ]
              },
              {
                "urlSlug": "user-deleted",
                "description": "This event is triggered when a user is deleted.",
                "method": "POST",
                "id": "user.deleted",
                "name": "user.deleted",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:UserDeletedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "id": "string",
                        "teams": [
                          {
                            "id": "string"
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            ],
            "websockets": []
          },
          "subpackage_teams": {
            "subpackageId": "subpackage_teams",
            "name": "teams",
            "endpoints": [],
            "types": [
              "type_teams:TeamCreatedPayloadData",
              "type_teams:TeamCreatedPayload",
              "type_teams:TeamUpdatedPayloadData",
              "type_teams:TeamUpdatedPayload",
              "type_teams:TeamDeletedPayloadData",
              "type_teams:TeamDeletedPayload",
              "type_teams:TeamMembershipCreatedPayloadData",
              "type_teams:TeamMembershipCreatedPayload",
              "type_teams:TeamMembershipDeletedPayloadData",
              "type_teams:TeamMembershipDeletedPayload"
            ],
            "subpackages": [],
            "urlSlug": "teams",
            "webhooks": [
              {
                "urlSlug": "team-created",
                "description": "This event is triggered when a team is created.",
                "method": "POST",
                "id": "team.created",
                "name": "team.created",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:TeamCreatedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "created_at_millis": 1,
                        "server_metadata": {
                          "string": {}
                        },
                        "id": "string",
                        "display_name": "string",
                        "profile_image_url": "string",
                        "client_metadata": {
                          "string": {}
                        },
                        "client_read_only_metadata": {
                          "string": {}
                        }
                      }
                    }
                  }
                ]
              },
              {
                "urlSlug": "team-updated",
                "description": "This event is triggered when a team is updated.",
                "method": "POST",
                "id": "team.updated",
                "name": "team.updated",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:TeamUpdatedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "created_at_millis": 1,
                        "server_metadata": {
                          "string": {}
                        },
                        "id": "string",
                        "display_name": "string",
                        "profile_image_url": "string",
                        "client_metadata": {
                          "string": {}
                        },
                        "client_read_only_metadata": {
                          "string": {}
                        }
                      }
                    }
                  }
                ]
              },
              {
                "urlSlug": "team-deleted",
                "description": "This event is triggered when a team is deleted.",
                "method": "POST",
                "id": "team.deleted",
                "name": "team.deleted",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:TeamDeletedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "id": "string"
                      }
                    }
                  }
                ]
              },
              {
                "urlSlug": "team-membership-created",
                "description": "This event is triggered when a user is added to a team.",
                "method": "POST",
                "id": "team_membership.created",
                "name": "team_membership.created",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:TeamMembershipCreatedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "team_id": "string",
                        "user_id": "string"
                      }
                    }
                  }
                ]
              },
              {
                "urlSlug": "team-membership-deleted",
                "description": "This event is triggered when a user is removed from a team.",
                "method": "POST",
                "id": "team_membership.deleted",
                "name": "team_membership.deleted",
                "path": [],
                "headers": [],
                "payload": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:TeamMembershipDeletedPayload"
                    }
                  }
                },
                "examples": [
                  {
                    "payload": {
                      "type": "string",
                      "data": {
                        "team_id": "string",
                        "user_id": "string"
                      }
                    }
                  }
                ]
              }
            ],
            "websockets": []
          }
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "e3e3def3-a1a3-4749-a69a-fa4dbe581533": {
        "id": "e3e3def3-a1a3-4749-a69a-fa4dbe581533",
        "rootPackage": {
          "endpoints": [
            {
              "environments": [
                {
                  "id": "Default",
                  "baseUrl": "https://api.stack-auth.com/api/v1"
                }
              ],
              "defaultEnvironment": "Default",
              "urlSlug": "api-v-1",
              "method": "GET",
              "id": "apiV1",
              "originalEndpointId": "endpoint_.apiV1",
              "name": "/api/v1",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": ""
                  }
                ]
              },
              "queryParameters": [],
              "headers": [
                {
                  "description": "The unique identifier of the project",
                  "key": "X-Stack-Project-Id",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Access-Type",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Access-Token",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Refresh-Token",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Publishable-Client-Key",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Secret-Server-Key",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "X-Stack-Super-Secret-Admin-Key",
                  "type": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ],
              "errors": [],
              "errorsV2": [],
              "examples": [
                {
                  "path": "",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {
                    "X-Stack-Project-Id": "string",
                    "X-Stack-Access-Type": "string",
                    "X-Stack-Access-Token": "string",
                    "X-Stack-Refresh-Token": "string",
                    "X-Stack-Publishable-Client-Key": "string",
                    "X-Stack-Secret-Server-Key": "string",
                    "X-Stack-Super-Secret-Admin-Key": "string"
                  },
                  "responseStatusCode": 200,
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "codeSamples": []
                }
              ],
              "description": "Returns a human-readable message with some useful information about the API.",
              "authed": false
            }
          ],
          "subpackages": [
            "subpackage_contactChannels",
            "subpackage_oauth",
            "subpackage_otp",
            "subpackage_password",
            "subpackage_permissions",
            "subpackage_projects",
            "subpackage_sessions",
            "subpackage_teams",
            "subpackage_users"
          ],
          "types": [],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_contactChannels:GetContactChannelsResponseItemsItem": {
            "name": "GetContactChannelsResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:GetContactChannelsResponsePagination": {
            "name": "GetContactChannelsResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:GetContactChannelsResponse": {
            "name": "GetContactChannelsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsResponse": {
            "name": "PostContactChannelsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsVerifyResponse": {
            "name": "PostContactChannelsVerifyResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsVerifyCheckCodeResponse": {
            "name": "PostContactChannelsVerifyCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:GetContactChannelsUserIdContactChannelIdResponse": {
            "name": "GetContactChannelsUserIdContactChannelIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:DeleteContactChannelsUserIdContactChannelIdResponse": {
            "name": "DeleteContactChannelsUserIdContactChannelIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PatchContactChannelsUserIdContactChannelIdResponse": {
            "name": "PatchContactChannelsUserIdContactChannelIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the contact channel",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The value of the contact channel. For email, this should be a valid email address.",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of the contact channel. Currently only \"email\" is supported.",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                  "key": "used_for_auth",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                  "key": "is_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                  "key": "is_primary",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_contactChannels:PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse": {
            "name": "PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthOtpSignInResponse": {
            "name": "PostAuthOtpSignInResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Long-lived refresh token that can be used to obtain a new access token",
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Short-lived access token that can be used to authenticate the user",
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the user is a new user",
                  "key": "is_new_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthOtpSendSignInCodeResponse": {
            "name": "PostAuthOtpSendSignInCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "nonce",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthMfaSignInResponse": {
            "name": "PostAuthMfaSignInResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Long-lived refresh token that can be used to obtain a new access token",
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Short-lived access token that can be used to authenticate the user",
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Whether the user is a new user",
                  "key": "is_new_user",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_otp:PostAuthOtpSignInCheckCodeResponse": {
            "name": "PostAuthOtpSignInCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordUpdateResponse": {
            "name": "PostAuthPasswordUpdateResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSignUpResponse": {
            "name": "PostAuthPasswordSignUpResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSignInResponse": {
            "name": "PostAuthPasswordSignInResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSetResponse": {
            "name": "PostAuthPasswordSetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordSendResetCodeResponse": {
            "name": "PostAuthPasswordSendResetCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordResetResponse": {
            "name": "PostAuthPasswordResetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_password:PostAuthPasswordResetCheckCodeResponse": {
            "name": "PostAuthPasswordResetCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:GetTeamPermissionsResponseItemsItem": {
            "name": "GetTeamPermissionsResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:GetTeamPermissionsResponsePagination": {
            "name": "GetTeamPermissionsResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:GetTeamPermissionsResponse": {
            "name": "GetTeamPermissionsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_permissions:GetTeamPermissionsResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_permissions:GetTeamPermissionsResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:PostTeamPermissionsTeamIdUserIdPermissionIdResponse": {
            "name": "PostTeamPermissionsTeamIdUserIdPermissionIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_permissions:DeleteTeamPermissionsTeamIdUserIdPermissionIdResponse": {
            "name": "DeleteTeamPermissionsTeamIdUserIdPermissionIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_projects:GetProjectsCurrentResponseConfig": {
            "name": "GetProjectsCurrentResponseConfig",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether users can sign up new accounts, or whether they are only allowed to sign in to existing accounts. Regardless of this option, the server API can always create new users with the `POST /users` endpoint.",
                  "key": "sign_up_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether email password authentication is enabled for this project",
                  "key": "credential_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether magic link authentication is enabled for this project",
                  "key": "magic_link_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether passkey authentication is enabled for this project",
                  "key": "passkey_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether client users can create teams",
                  "key": "client_team_creation_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether client users can delete their own account from the client",
                  "key": "client_user_deletion_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_projects:GetProjectsCurrentResponse": {
            "name": "GetProjectsCurrentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the project",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable project display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "config",
                  "valueType": {
                    "type": "id",
                    "value": "type_projects:GetProjectsCurrentResponseConfig"
                  }
                }
              ]
            }
          },
          "type_sessions:PostAuthSessionsResponse": {
            "name": "PostAuthSessionsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "refresh_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_sessions:DeleteAuthSessionsCurrentResponse": {
            "name": "DeleteAuthSessionsCurrentResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_sessions:PostAuthSessionsCurrentRefreshResponse": {
            "name": "PostAuthSessionsCurrentRefreshResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "access_token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsResponseItemsItem": {
            "name": "GetTeamsResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsResponsePagination": {
            "name": "GetTeamsResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsResponse": {
            "name": "GetTeamsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamsResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamsResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamsResponse": {
            "name": "PostTeamsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponseItemsItemUserSelectedTeam": {
            "name": "GetTeamMemberProfilesResponseItemsItemUserSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponseItemsItemUser": {
            "name": "GetTeamMemberProfilesResponseItemsItemUser",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponseItemsItemUserSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponseItemsItem": {
            "name": "GetTeamMemberProfilesResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "user",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:GetTeamMemberProfilesResponseItemsItemUser"
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponsePagination": {
            "name": "GetTeamMemberProfilesResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesResponse": {
            "name": "GetTeamMemberProfilesResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamsTeamIdResponse": {
            "name": "GetTeamsTeamIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:DeleteTeamsTeamIdResponse": {
            "name": "DeleteTeamsTeamIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PatchTeamsTeamIdResponse": {
            "name": "PatchTeamsTeamIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsSendCodeResponse": {
            "name": "PostTeamInvitationsSendCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsAcceptResponse": {
            "name": "PostTeamInvitationsAcceptResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_teams:PostTeamMembershipsTeamIdUserIdResponse": {
            "name": "PostTeamMembershipsTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:DeleteTeamMembershipsTeamIdUserIdResponse": {
            "name": "DeleteTeamMembershipsTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam": {
            "name": "GetTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesTeamIdUserIdResponseUser": {
            "name": "GetTeamMemberProfilesTeamIdUserIdResponseUser",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:GetTeamMemberProfilesTeamIdUserIdResponse": {
            "name": "GetTeamMemberProfilesTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "user",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:GetTeamMemberProfilesTeamIdUserIdResponseUser"
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam": {
            "name": "PatchTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponseUser": {
            "name": "PatchTeamMemberProfilesTeamIdUserIdResponseUser",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponse": {
            "name": "PatchTeamMemberProfilesTeamIdUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "user",
                  "valueType": {
                    "type": "id",
                    "value": "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponseUser"
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The unique identifier of the user",
                  "key": "user_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsAcceptDetailsResponse": {
            "name": "PostTeamInvitationsAcceptDetailsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "team_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "team_display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_teams:PostTeamInvitationsAcceptCheckCodeResponse": {
            "name": "PostTeamInvitationsAcceptCheckCodeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "is_code_valid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersResponseItemsItemSelectedTeam": {
            "name": "GetUsersResponseItemsItemSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersResponseItemsItem": {
            "name": "GetUsersResponseItemsItem",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:GetUsersResponseItemsItemSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersResponsePagination": {
            "name": "GetUsersResponsePagination",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The cursor to fetch the next page of results. null if there is no next page.",
                  "key": "next_cursor",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersResponse": {
            "name": "GetUsersResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "items",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:GetUsersResponseItemsItem"
                    }
                  }
                },
                {
                  "key": "pagination",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:GetUsersResponsePagination"
                    }
                  }
                }
              ]
            }
          },
          "type_users:PostUsersResponseSelectedTeam": {
            "name": "PostUsersResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:PostUsersResponse": {
            "name": "PostUsersResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:PostUsersResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersMeResponseSelectedTeam": {
            "name": "GetUsersMeResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersMeResponse": {
            "name": "GetUsersMeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:GetUsersMeResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:DeleteUsersMeResponse": {
            "name": "DeleteUsersMeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_users:PatchUsersMeResponseSelectedTeam": {
            "name": "PatchUsersMeResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:PatchUsersMeResponse": {
            "name": "PatchUsersMeResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:PatchUsersMeResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersUserIdResponseSelectedTeam": {
            "name": "GetUsersUserIdResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:GetUsersUserIdResponse": {
            "name": "GetUsersUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:GetUsersUserIdResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_users:DeleteUsersUserIdResponse": {
            "name": "DeleteUsersUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Always equal to true.",
                  "key": "success",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_users:PatchUsersUserIdResponseSelectedTeam": {
            "name": "PatchUsersUserIdResponseSelectedTeam",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time the team was created (the number of milliseconds since epoch, January 1, 1970, UTC)",
                  "key": "created_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The unique identifier of the team",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Human-readable team display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_users:PatchUsersUserIdResponse": {
            "name": "PatchUsersUserIdResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The unique identifier of the user",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Primary email",
                  "key": "primary_email",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Whether the primary email has been verified to belong to this user",
                  "key": "primary_email_verified",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                  "key": "primary_email_auth_enabled",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Human-readable user display name. This is not a unique identifier.",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "selected_team",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_users:PatchUsersUserIdResponseSelectedTeam"
                    }
                  }
                },
                {
                  "description": "ID of the team currently selected by the user",
                  "key": "selected_team_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                  "key": "profile_image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user signed up identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "signed_up_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                  "key": "client_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                  "key": "client_read_only_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                  "key": "server_metadata",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "The time the user was last active identify=>`(the number of milliseconds since epoch, January 1, 1970, UTC)`",
                  "key": "last_active_at_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_contactChannels": {
            "subpackageId": "subpackage_contactChannels",
            "name": "contactChannels",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-contact-channels",
                "method": "GET",
                "id": "listContactChannels",
                "originalEndpointId": "endpoint_contactChannels.listContactChannels",
                "name": "List contact channels",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels",
                    "pathParameters": {},
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                          "value": "johndoe@example.com",
                          "type": "email",
                          "used_for_auth": true,
                          "is_verified": true,
                          "is_primary": true
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                            "value": "johndoe@example.com",
                            "type": "email",
                            "used_for_auth": true,
                            "is_verified": true,
                            "is_primary": true
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-a-contact-channel",
                "method": "POST",
                "id": "createAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.createAContactChannel",
                "name": "Create a contact channel",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                        "key": "is_verified",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                        "key": "user_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The value of the contact channel. For email, this should be a valid email address.",
                        "key": "value",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The type of the contact channel. Currently only \"email\" is supported.",
                        "key": "type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                        "key": "used_for_auth",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                        "key": "is_primary",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels",
                    "pathParameters": {},
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "requestBody": {
                      "is_verified": true,
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_primary": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_verified": true,
                      "is_primary": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "is_verified": true,
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_primary": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_verified": true,
                        "is_primary": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "verify-an-email",
                "method": "POST",
                "id": "verifyAnEmail",
                "originalEndpointId": "endpoint_contactChannels.verifyAnEmail",
                "name": "Verify an email",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/verify"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsVerifyResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/verify",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Verify an email address of a user",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-email-verification-code",
                "method": "POST",
                "id": "checkEmailVerificationCode",
                "originalEndpointId": "endpoint_contactChannels.checkEmailVerificationCode",
                "name": "Check email verification code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/verify/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsVerifyCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/verify/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if an email verification code is valid without using it",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-a-contact-channel",
                "method": "GET",
                "id": "getAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.getAContactChannel",
                "name": "Get a contact channel",
                "path": {
                  "pathParameters": [
                    {
                      "description": "the user that the contact channel belongs to",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "the target contact channel",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:GetContactChannelsUserIdContactChannelIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_verified": true,
                      "is_primary": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_verified": true,
                        "is_primary": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-a-contact-channel",
                "method": "DELETE",
                "id": "deleteAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.deleteAContactChannel",
                "name": "Delete a contact channel",
                "path": {
                  "pathParameters": [
                    {
                      "description": "the user that the contact channel belongs to",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "the target contact channel",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:DeleteContactChannelsUserIdContactChannelIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-a-contact-channel",
                "method": "PATCH",
                "id": "updateAContactChannel",
                "originalEndpointId": "endpoint_contactChannels.updateAContactChannel",
                "name": "Update a contact channel",
                "path": {
                  "pathParameters": [
                    {
                      "description": "the user that the contact channel belongs to",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "the target contact channel",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "contact_channel_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Whether the contact channel has been verified. If this is set to `true`, the contact channel has been verified to belong to the user.",
                        "key": "is_verified",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "The value of the contact channel. For email, this should be a valid email address.",
                        "key": "value",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "The type of the contact channel. Currently only \"email\" is supported.",
                        "key": "type",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is used for authentication. If this is set to `true`, the user will be able to sign in with the contact channel with password or OTP.",
                        "key": "used_for_auth",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the contact channel is the primary contact channel. If this is set to `true`, it will be used for authentication and notifications by default.",
                        "key": "is_primary",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PatchContactChannelsUserIdContactChannelIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "headers": {},
                    "requestBody": {
                      "is_verified": true,
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_primary": true
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                      "value": "johndoe@example.com",
                      "type": "email",
                      "used_for_auth": true,
                      "is_verified": true,
                      "is_primary": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "is_verified": true,
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_primary": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "id": "b3d396b8-c574-4c80-97b3-50031675ceb2",
                        "value": "johndoe@example.com",
                        "type": "email",
                        "used_for_auth": true,
                        "is_verified": true,
                        "is_primary": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-contact-channel-verification-code",
                "method": "POST",
                "id": "sendContactChannelVerificationCode",
                "originalEndpointId": "endpoint_contactChannels.sendContactChannelVerificationCode",
                "name": "Send contact channel verification code",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The user to send the verification code to.",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The contact channel to send the verification code to.",
                      "key": "contact_channel_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/contact-channels/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "contact_channel_id"
                    },
                    {
                      "type": "literal",
                      "value": "/send-verification-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The base callback URL to construct a verification link for the verification e-mail. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/contact-channels/verify` endpoint.",
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_contactChannels:PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/contact-channels/me/b3d396b8-c574-4c80-97b3-50031675ceb2/send-verification-code",
                    "pathParameters": {
                      "user_id": "me",
                      "contact_channel_id": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "callback_url": "https://example.com/handler/email-verification"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "callback_url": "https://example.com/handler/email-verification"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send a code to the user's contact channel for verifying the contact channel.",
                "authed": false
              }
            ],
            "types": [
              "type_contactChannels:GetContactChannelsResponseItemsItem",
              "type_contactChannels:GetContactChannelsResponsePagination",
              "type_contactChannels:GetContactChannelsResponse",
              "type_contactChannels:PostContactChannelsResponse",
              "type_contactChannels:PostContactChannelsVerifyResponse",
              "type_contactChannels:PostContactChannelsVerifyCheckCodeResponse",
              "type_contactChannels:GetContactChannelsUserIdContactChannelIdResponse",
              "type_contactChannels:DeleteContactChannelsUserIdContactChannelIdResponse",
              "type_contactChannels:PatchContactChannelsUserIdContactChannelIdResponse",
              "type_contactChannels:PostContactChannelsUserIdContactChannelIdSendVerificationCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "contact-channels",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_oauth": {
            "subpackageId": "subpackage_oauth",
            "name": "oauth",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "o-auth-token-endpoints",
                "method": "POST",
                "id": "oAuthTokenEndpoints",
                "originalEndpointId": "endpoint_oauth.oAuthTokenEndpoints",
                "name": "OAuth token endpoints",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/oauth/token"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "grant_type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "unknown"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/oauth/token",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "grant_type": "grant_type"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "grant_type": "grant_type"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint is used to exchange an authorization code or refresh token for an access token.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "o-auth-authorize-endpoint",
                "method": "GET",
                "id": "oAuthAuthorizeEndpoint",
                "originalEndpointId": "endpoint_oauth.oAuthAuthorizeEndpoint",
                "name": "OAuth authorize endpoint",
                "path": {
                  "pathParameters": [
                    {
                      "key": "provider_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/oauth/authorize/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "provider_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "token",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "provider_scope",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "error_redirect_uri",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "after_callback_redirect_url",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "client_id",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "client_secret",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "redirect_uri",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "scope",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "state",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "grant_type",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "code_challenge",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "code_challenge_method",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "key": "response_type",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "headers": [],
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/oauth/authorize/provider_id",
                    "pathParameters": {
                      "provider_id": "provider_id"
                    },
                    "queryParameters": {
                      "client_id": "client_id",
                      "client_secret": "client_secret",
                      "redirect_uri": "redirect_uri",
                      "scope": "scope",
                      "state": "state",
                      "grant_type": "grant_type",
                      "code_challenge": "code_challenge",
                      "code_challenge_method": "code_challenge_method",
                      "response_type": "response_type"
                    },
                    "headers": {},
                    "responseStatusCode": 204,
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "codeSamples": []
                  }
                ],
                "description": "This endpoint is used to initiate the OAuth authorization flow. there are two purposes for this endpoint: 1. Authenticate a user with an OAuth provider. 2. Link an existing user with an OAuth provider.",
                "authed": false
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "oauth",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_otp": {
            "subpackageId": "subpackage_otp",
            "name": "otp",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-in-with-a-code",
                "method": "POST",
                "id": "signInWithACode",
                "originalEndpointId": "endpoint_otp.signInWithACode",
                "name": "Sign in with a code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/otp/sign-in"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthOtpSignInResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/otp/sign-in",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "refresh_token": "i8ns3aq2...14y",
                      "access_token": "eyJhmMiJB2TO...diI4QT",
                      "is_new_user": true,
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "refresh_token": "i8ns3aq2...14y",
                        "access_token": "eyJhmMiJB2TO...diI4QT",
                        "is_new_user": true,
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sign in with a code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-sign-in-code",
                "method": "POST",
                "id": "sendSignInCode",
                "originalEndpointId": "endpoint_otp.sendSignInCode",
                "name": "Send sign-in code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/otp/send-sign-in-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The email to sign in with.",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The base callback URL to construct the magic link from. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/auth/otp/sign-in` endpoint.",
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthOtpSendSignInCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/otp/send-sign-in-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "johndoe@example.com",
                      "callback_url": "https://example.com/handler/magic-link-callback"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "nonce": "nonce"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "johndoe@example.com",
                        "callback_url": "https://example.com/handler/magic-link-callback"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "nonce": "nonce"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send a code to the user's email address for sign-in.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "mfa-sign-in",
                "method": "POST",
                "id": "mfaSignIn",
                "originalEndpointId": "endpoint_otp.mfaSignIn",
                "name": "MFA sign in",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/mfa/sign-in"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "type",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "totp",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthMfaSignInResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/mfa/sign-in",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "type": "type",
                      "totp": "totp",
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "refresh_token": "i8ns3aq2...14y",
                      "access_token": "eyJhmMiJB2TO...diI4QT",
                      "is_new_user": true,
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "type": "type",
                        "totp": "totp",
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "refresh_token": "i8ns3aq2...14y",
                        "access_token": "eyJhmMiJB2TO...diI4QT",
                        "is_new_user": true,
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Complete multi-factor authorization to sign in, with a TOTP and an MFA attempt code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-sign-in-code",
                "method": "POST",
                "id": "checkSignInCode",
                "originalEndpointId": "endpoint_otp.checkSignInCode",
                "name": "Check sign in code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/otp/sign-in/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_otp:PostAuthOtpSignInCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/otp/sign-in/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if a sign in code is valid without using it",
                "authed": false
              }
            ],
            "types": [
              "type_otp:PostAuthOtpSignInResponse",
              "type_otp:PostAuthOtpSendSignInCodeResponse",
              "type_otp:PostAuthMfaSignInResponse",
              "type_otp:PostAuthOtpSignInCheckCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "otp",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_password": {
            "subpackageId": "subpackage_password",
            "name": "password",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-password",
                "method": "POST",
                "id": "updatePassword",
                "originalEndpointId": "endpoint_password.updatePassword",
                "name": "Update password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/update"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "key": "x-stack-refresh-token",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "old_password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "new_password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordUpdateResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/update",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "old_password": "old_password",
                      "new_password": "new_password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "old_password": "old_password",
                        "new_password": "new_password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the password of the current user, requires the old password",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-up-with-email-and-password",
                "method": "POST",
                "id": "signUpWithEmailAndPassword",
                "originalEndpointId": "endpoint_password.signUpWithEmailAndPassword",
                "name": "Sign up with email and password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/sign-up"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The email to sign in with.",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The base callback URL to construct a verification link for the verification e-mail. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/contact-channels/verify` endpoint.",
                        "key": "verification_callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSignUpResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/sign-up",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "johndoe@example.com",
                      "password": "password",
                      "verification_callback_url": "https://example.com/handler/email-verification"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "access_token": "access_token",
                      "refresh_token": "refresh_token",
                      "user_id": "user_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "johndoe@example.com",
                        "password": "password",
                        "verification_callback_url": "https://example.com/handler/email-verification"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "access_token": "access_token",
                        "refresh_token": "refresh_token",
                        "user_id": "user_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new account with email and password",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-in-with-email-and-password",
                "method": "POST",
                "id": "signInWithEmailAndPassword",
                "originalEndpointId": "endpoint_password.signInWithEmailAndPassword",
                "name": "Sign in with email and password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/sign-in"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSignInResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/sign-in",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "email",
                      "password": "password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "access_token": "access_token",
                      "refresh_token": "refresh_token",
                      "user_id": "user_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "email",
                        "password": "password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "access_token": "access_token",
                        "refresh_token": "refresh_token",
                        "user_id": "user_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sign in to an account with email and password",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "set-password",
                "method": "POST",
                "id": "setPassword",
                "originalEndpointId": "endpoint_password.setPassword",
                "name": "Set password",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/set"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/set",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "password": "password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "password": "password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Set a new password for the current user",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-reset-password-code",
                "method": "POST",
                "id": "sendResetPasswordCode",
                "originalEndpointId": "endpoint_password.sendResetPasswordCode",
                "name": "Send reset password code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/send-reset-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordSendResetCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/send-reset-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "email": "email",
                      "callback_url": "callback_url"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": "success"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "email": "email",
                        "callback_url": "callback_url"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": "success"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send a code to the user's email address for resetting the password.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "reset-password-with-a-code",
                "method": "POST",
                "id": "resetPasswordWithACode",
                "originalEndpointId": "endpoint_password.resetPasswordWithACode",
                "name": "Reset password with a code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/reset"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "password",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordResetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/reset",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "password": "password",
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "password": "password",
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Reset password with a code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-reset-password-code",
                "method": "POST",
                "id": "checkResetPasswordCode",
                "originalEndpointId": "endpoint_password.checkResetPasswordCode",
                "name": "Check reset password code",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/password/reset/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_password:PostAuthPasswordResetCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/password/reset/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if a reset password code is valid without using it",
                "authed": false
              }
            ],
            "types": [
              "type_password:PostAuthPasswordUpdateResponse",
              "type_password:PostAuthPasswordSignUpResponse",
              "type_password:PostAuthPasswordSignInResponse",
              "type_password:PostAuthPasswordSetResponse",
              "type_password:PostAuthPasswordSendResetCodeResponse",
              "type_password:PostAuthPasswordResetResponse",
              "type_password:PostAuthPasswordResetCheckCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "password",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_permissions": {
            "subpackageId": "subpackage_permissions",
            "name": "permissions",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-team-permissions-of-a-user",
                "method": "GET",
                "id": "listTeamPermissionsOfAUser",
                "originalEndpointId": "endpoint_permissions.listTeamPermissionsOfAUser",
                "name": "List team permissions of a user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-permissions"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter with the team ID. If set, only the permissions of the members in a specific team will be returned.",
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned",
                    "key": "permission_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed.",
                    "key": "recursive",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissions:GetTeamPermissionsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-permissions",
                    "pathParameters": {},
                    "queryParameters": {
                      "team_id": "cce084a3-28b7-418e-913e-c8ee6d802ea4",
                      "user_id": "me",
                      "permission_id": "16399452-c4f3-4554-8e44-c2d67bb60360",
                      "recursive": "true"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "id": "read_secret_info",
                          "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e"
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "id": "read_secret_info",
                            "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e"
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Query and filter the permission with `team_id`, `user_id`, and `permission_id`. Note that this might contain the permissions with the same permission ID across different teams and users. `(team_id, user_id, permission_id)` together uniquely identify a permission.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "grant-a-team-permission-to-a-user",
                "method": "POST",
                "id": "grantATeamPermissionToAUser",
                "originalEndpointId": "endpoint_permissions.grantATeamPermissionToAUser",
                "name": "Grant a team permission to a user",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`",
                      "key": "permission_id",
                      "type": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-permissions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "permission_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter with the team ID. If set, only the permissions of the members in a specific team will be returned.",
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned",
                    "key": "permission_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed.",
                    "key": "recursive",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": []
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissions:PostTeamPermissionsTeamIdUserIdPermissionIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-permissions/{team_id}/3241a285-8329-4d69-8f3d-316e08cf140c/read_secret_info",
                    "pathParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "permission_id": "read_secret_info"
                    },
                    "queryParameters": {
                      "team_id": "cce084a3-28b7-418e-913e-c8ee6d802ea4",
                      "user_id": "me",
                      "permission_id": "16399452-c4f3-4554-8e44-c2d67bb60360",
                      "recursive": "true"
                    },
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "read_secret_info",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "read_secret_info",
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Grant a team permission to a user (the team permission must be created first on the Stack dashboard)",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "revoke-a-team-permission-from-a-user",
                "method": "DELETE",
                "id": "revokeATeamPermissionFromAUser",
                "originalEndpointId": "endpoint_permissions.revokeATeamPermissionFromAUser",
                "name": "Revoke a team permission from a user",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The permission ID used to uniquely identify a permission. Can either be a custom permission with lowercase letters, numbers, `:`, and `_` characters, or one of the system permissions: `$update_team`, `$delete_team`, `$read_members`, `$remove_members`, `$invite_members`",
                      "key": "permission_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-permissions/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "permission_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter with the team ID. If set, only the permissions of the members in a specific team will be returned.",
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the user ID. If set, only the permissions this user has will be returned. Client request must set `user_id=me`",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Filter with the permission ID. If set, only the permissions with this specific ID will be returned",
                    "key": "permission_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Whether to list permissions recursively. If set to `false`, only the permission the users directly have will be listed. If set to `true` all the direct and indirect permissions will be listed.",
                    "key": "recursive",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_permissions:DeleteTeamPermissionsTeamIdUserIdPermissionIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-permissions/team_id/3241a285-8329-4d69-8f3d-316e08cf140c/read_secret_info",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "permission_id": "read_secret_info"
                    },
                    "queryParameters": {
                      "team_id": "cce084a3-28b7-418e-913e-c8ee6d802ea4",
                      "user_id": "me",
                      "permission_id": "16399452-c4f3-4554-8e44-c2d67bb60360",
                      "recursive": "true"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Revoke a team permission from a user",
                "authed": false
              }
            ],
            "types": [
              "type_permissions:GetTeamPermissionsResponseItemsItem",
              "type_permissions:GetTeamPermissionsResponsePagination",
              "type_permissions:GetTeamPermissionsResponse",
              "type_permissions:PostTeamPermissionsTeamIdUserIdPermissionIdResponse",
              "type_permissions:DeleteTeamPermissionsTeamIdUserIdPermissionIdResponse"
            ],
            "subpackages": [],
            "urlSlug": "permissions",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_projects": {
            "subpackageId": "subpackage_projects",
            "name": "projects",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-the-current-project",
                "method": "GET",
                "id": "getTheCurrentProject",
                "originalEndpointId": "endpoint_projects.getTheCurrentProject",
                "name": "Get the current project",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/projects/current"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_projects:GetProjectsCurrentResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/projects/current",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
                      "display_name": "MyMusic",
                      "config": {
                        "sign_up_enabled": true,
                        "credential_enabled": true,
                        "magic_link_enabled": true,
                        "passkey_enabled": true,
                        "client_team_creation_enabled": true,
                        "client_user_deletion_enabled": true
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "e0b52f4d-dece-408c-af49-d23061bb0f8d",
                        "display_name": "MyMusic",
                        "config": {
                          "sign_up_enabled": true,
                          "credential_enabled": true,
                          "magic_link_enabled": true,
                          "passkey_enabled": true,
                          "client_team_creation_enabled": true,
                          "client_user_deletion_enabled": true
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the current project information including display name, oauth providers and authentication methods. Useful for display the available login options to the user.",
                "authed": false
              }
            ],
            "types": ["type_projects:GetProjectsCurrentResponseConfig", "type_projects:GetProjectsCurrentResponse"],
            "subpackages": [],
            "urlSlug": "projects",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_sessions": {
            "subpackageId": "subpackage_sessions",
            "name": "sessions",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-session",
                "method": "POST",
                "id": "createSession",
                "originalEndpointId": "endpoint_sessions.createSession",
                "name": "Create session",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/sessions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                        "key": "user_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "expires_in_millis",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "default": 31536000000
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_sessions:PostAuthSessionsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/sessions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "refresh_token": "refresh_token",
                      "access_token": "access_token"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "refresh_token": "refresh_token",
                        "access_token": "access_token"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new session for a given user. This will return a refresh token that can be used to impersonate the user.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "sign-out-of-the-current-session",
                "method": "DELETE",
                "id": "signOutOfTheCurrentSession",
                "originalEndpointId": "endpoint_sessions.signOutOfTheCurrentSession",
                "name": "Sign out of the current session",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/sessions/current"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "key": "x-stack-refresh-token",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_sessions:DeleteAuthSessionsCurrentResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/sessions/current",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-stack-refresh-token": "x-stack-refresh-token"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Sign out of the current session and invalidate the refresh token",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "refresh-access-token",
                "method": "POST",
                "id": "refreshAccessToken",
                "originalEndpointId": "endpoint_sessions.refreshAccessToken",
                "name": "Refresh access token",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/auth/sessions/current/refresh"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [
                  {
                    "key": "x-stack-refresh-token",
                    "type": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                ],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_sessions:PostAuthSessionsCurrentRefreshResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/auth/sessions/current/refresh",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {
                      "x-stack-refresh-token": "x-stack-refresh-token"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "access_token": "access_token"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "access_token": "access_token"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a new access token using a refresh token",
                "authed": false
              }
            ],
            "types": [
              "type_sessions:PostAuthSessionsResponse",
              "type_sessions:DeleteAuthSessionsCurrentResponse",
              "type_sessions:PostAuthSessionsCurrentRefreshResponse"
            ],
            "subpackages": [],
            "urlSlug": "sessions",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_teams": {
            "subpackageId": "subpackage_teams",
            "name": "teams",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-teams",
                "method": "GET",
                "id": "listTeams",
                "originalEndpointId": "endpoint_teams.listTeams",
                "name": "List teams",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Filter for the teams that the user is a member of. Can be either `me` or an ID. Must be `me` in the client API",
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams",
                    "pathParameters": {},
                    "queryParameters": {
                      "user_id": "me"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "created_at_millis": 1630000000000,
                            "server_metadata": {
                              "key": "value"
                            },
                            "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "display_name": "My Team",
                            "profile_image_url": "https://example.com/image.jpg",
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            }
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all the teams in the project.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-a-team",
                "method": "POST",
                "id": "createATeam",
                "originalEndpointId": "endpoint_teams.createATeam",
                "name": "Create a team",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable team display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The ID of the creator of the team. If not specified, the user will not be added to the team. Can be either \"me\" or the ID of the user. Only used on the client side.",
                        "key": "creator_user_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                        "key": "client_read_only_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                        "key": "server_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "My Team",
                      "creator_user_id": "me",
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "created_at_millis": 1630000000000,
                      "server_metadata": {
                        "key": "value"
                      },
                      "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "My Team",
                        "creator_user_id": "me",
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a new team and optionally add the current user as a member.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-team-members-profiles",
                "method": "GET",
                "id": "listTeamMembersProfiles",
                "originalEndpointId": "endpoint_teams.listTeamMembersProfiles",
                "name": "List team members profiles",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-member-profiles"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "user_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-member-profiles",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "user": {
                            "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "primary_email": "johndoe@example.com",
                            "primary_email_verified": true,
                            "primary_email_auth_enabled": true,
                            "display_name": "John Doe",
                            "selected_team": {
                              "created_at_millis": 1630000000000,
                              "server_metadata": {
                                "key": "value"
                              },
                              "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                              "display_name": "My Team",
                              "profile_image_url": "https://example.com/image.jpg",
                              "client_metadata": {
                                "key": "value"
                              },
                              "client_read_only_metadata": {
                                "key": "value"
                              }
                            },
                            "selected_team_id": "team-id",
                            "profile_image_url": "https://example.com/image.jpg",
                            "signed_up_at_millis": 1630000000000,
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            },
                            "server_metadata": {
                              "key": "value"
                            },
                            "last_active_at_millis": 1630000000000
                          },
                          "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "display_name": "John Doe",
                          "profile_image_url": "https://example.com/image.jpg"
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "user": {
                              "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                              "primary_email": "johndoe@example.com",
                              "primary_email_verified": true,
                              "primary_email_auth_enabled": true,
                              "display_name": "John Doe",
                              "selected_team": {
                                "created_at_millis": 1630000000000,
                                "server_metadata": {
                                  "key": "value"
                                },
                                "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                                "display_name": "My Team",
                                "profile_image_url": "https://example.com/image.jpg",
                                "client_metadata": {
                                  "key": "value"
                                },
                                "client_read_only_metadata": {
                                  "key": "value"
                                }
                              },
                              "selected_team_id": "team-id",
                              "profile_image_url": "https://example.com/image.jpg",
                              "signed_up_at_millis": 1630000000000,
                              "client_metadata": {
                                "key": "value"
                              },
                              "client_read_only_metadata": {
                                "key": "value"
                              },
                              "server_metadata": {
                                "key": "value"
                              },
                              "last_active_at_millis": 1630000000000
                            },
                            "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "display_name": "John Doe",
                            "profile_image_url": "https://example.com/image.jpg"
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List team members profiles and filter by team ID and user ID",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-a-team",
                "method": "GET",
                "id": "getATeam",
                "originalEndpointId": "endpoint_teams.getATeam",
                "name": "Get a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamsTeamIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams/team_id",
                    "pathParameters": {
                      "team_id": "team_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "created_at_millis": 1630000000000,
                      "server_metadata": {
                        "key": "value"
                      },
                      "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a team by ID.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-a-team",
                "method": "DELETE",
                "id": "deleteATeam",
                "originalEndpointId": "endpoint_teams.deleteATeam",
                "name": "Delete a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:DeleteTeamsTeamIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams/team_id",
                    "pathParameters": {
                      "team_id": "team_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete a team by ID.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-a-team",
                "method": "PATCH",
                "id": "updateATeam",
                "originalEndpointId": "endpoint_teams.updateATeam",
                "name": "Update a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/teams/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                        "key": "client_read_only_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the team here.",
                        "key": "server_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Human-readable team display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for team. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PatchTeamsTeamIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/teams/team_id",
                    "pathParameters": {
                      "team_id": "team_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      }
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "created_at_millis": 1630000000000,
                      "server_metadata": {
                        "key": "value"
                      },
                      "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "display_name": "My Team",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update the team information by ID.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "send-an-email-to-invite-a-user-to-a-team",
                "method": "POST",
                "id": "sendAnEmailToInviteAUserToATeam",
                "originalEndpointId": "endpoint_teams.sendAnEmailToInviteAUserToATeam",
                "name": "Send an email to invite a user to a team",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/send-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "The unique identifier of the team",
                        "key": "team_id",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The email of the user to invite.",
                        "key": "email",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "The base callback URL to construct an invite link with. A query parameter `code` with the verification code will be appended to it. The page should then make a request to the `/team-invitations/accept` endpoint.",
                        "key": "callback_url",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsSendCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/send-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "email": "johndoe@example.com",
                      "callback_url": "https://example.com/handler/team-invitation"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "email": "johndoe@example.com",
                        "callback_url": "https://example.com/handler/team-invitation"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "The user receiving this email can join the team by clicking on the link in the email. If the user does not have an account yet, they will be prompted to create one.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "invite-a-user-to-a-team",
                "method": "POST",
                "id": "inviteAUserToATeam",
                "originalEndpointId": "endpoint_teams.inviteAUserToATeam",
                "name": "Invite a user to a team",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/accept"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsAcceptResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/accept",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {},
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Send an email to a user to invite them to a team",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "add-a-user-to-a-team",
                "method": "POST",
                "id": "addAUserToATeam",
                "originalEndpointId": "endpoint_teams.addAUserToATeam",
                "name": "Add a user to a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-memberships/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": []
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamMembershipsTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-memberships/{team_id}/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "team_id": "team_id",
                      "user_id": "user_id"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "team_id",
                        "user_id": "user_id"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "remove-a-user-from-a-team",
                "method": "DELETE",
                "id": "removeAUserFromATeam",
                "originalEndpointId": "endpoint_teams.removeAUserFromATeam",
                "name": "Remove a user from a team",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-memberships/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:DeleteTeamMembershipsTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-memberships/team_id/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-a-team-member-profile",
                "method": "GET",
                "id": "getATeamMemberProfile",
                "originalEndpointId": "endpoint_teams.getATeamMemberProfile",
                "name": "Get a team member profile",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-member-profiles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:GetTeamMemberProfilesTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-member-profiles/team_id/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      },
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user": {
                          "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "primary_email": "johndoe@example.com",
                          "primary_email_verified": true,
                          "primary_email_auth_enabled": true,
                          "display_name": "John Doe",
                          "selected_team": {
                            "created_at_millis": 1630000000000,
                            "server_metadata": {
                              "key": "value"
                            },
                            "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "display_name": "My Team",
                            "profile_image_url": "https://example.com/image.jpg",
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            }
                          },
                          "selected_team_id": "team-id",
                          "profile_image_url": "https://example.com/image.jpg",
                          "signed_up_at_millis": 1630000000000,
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          },
                          "server_metadata": {
                            "key": "value"
                          },
                          "last_active_at_millis": 1630000000000
                        },
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get a team member profile by user ID",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-a-team-member-profile",
                "method": "PATCH",
                "id": "updateATeamMemberProfile",
                "originalEndpointId": "endpoint_teams.updateATeamMemberProfile",
                "name": "Update a team member profile",
                "path": {
                  "pathParameters": [
                    {
                      "key": "team_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-member-profiles/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "team_id"
                    },
                    {
                      "type": "literal",
                      "value": "/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable team member display name. This is not a unique identifier. Note that this is separate from the display_name of the user.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for team member. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-member-profiles/team_id/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "team_id": "team_id",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "user": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      },
                      "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "user": {
                          "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "primary_email": "johndoe@example.com",
                          "primary_email_verified": true,
                          "primary_email_auth_enabled": true,
                          "display_name": "John Doe",
                          "selected_team": {
                            "created_at_millis": 1630000000000,
                            "server_metadata": {
                              "key": "value"
                            },
                            "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "display_name": "My Team",
                            "profile_image_url": "https://example.com/image.jpg",
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            }
                          },
                          "selected_team_id": "team-id",
                          "profile_image_url": "https://example.com/image.jpg",
                          "signed_up_at_millis": 1630000000000,
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          },
                          "server_metadata": {
                            "key": "value"
                          },
                          "last_active_at_millis": 1630000000000
                        },
                        "team_id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update a team member profile by user ID",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-team-invitation-details",
                "method": "POST",
                "id": "getTeamInvitationDetails",
                "originalEndpointId": "endpoint_teams.getTeamInvitationDetails",
                "name": "Get team invitation details",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/accept/details"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsAcceptDetailsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/accept/details",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "team_id": "team_id",
                      "team_display_name": "team_display_name"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "team_id": "team_id",
                        "team_display_name": "team_display_name"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get additional information about a team invitation code",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "check-if-a-team-invitation-code-is-valid",
                "method": "POST",
                "id": "checkIfATeamInvitationCodeIsValid",
                "originalEndpointId": "endpoint_teams.checkIfATeamInvitationCodeIsValid",
                "name": "Check if a team invitation code is valid",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/team-invitations/accept/check-code"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "code",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_teams:PostTeamInvitationsAcceptCheckCodeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/team-invitations/accept/check-code",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "code": "code"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "is_code_valid": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "code"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "is_code_valid": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Check if a team invitation code is valid without using it",
                "authed": false
              }
            ],
            "types": [
              "type_teams:GetTeamsResponseItemsItem",
              "type_teams:GetTeamsResponsePagination",
              "type_teams:GetTeamsResponse",
              "type_teams:PostTeamsResponse",
              "type_teams:GetTeamMemberProfilesResponseItemsItemUserSelectedTeam",
              "type_teams:GetTeamMemberProfilesResponseItemsItemUser",
              "type_teams:GetTeamMemberProfilesResponseItemsItem",
              "type_teams:GetTeamMemberProfilesResponsePagination",
              "type_teams:GetTeamMemberProfilesResponse",
              "type_teams:GetTeamsTeamIdResponse",
              "type_teams:DeleteTeamsTeamIdResponse",
              "type_teams:PatchTeamsTeamIdResponse",
              "type_teams:PostTeamInvitationsSendCodeResponse",
              "type_teams:PostTeamInvitationsAcceptResponse",
              "type_teams:PostTeamMembershipsTeamIdUserIdResponse",
              "type_teams:DeleteTeamMembershipsTeamIdUserIdResponse",
              "type_teams:GetTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam",
              "type_teams:GetTeamMemberProfilesTeamIdUserIdResponseUser",
              "type_teams:GetTeamMemberProfilesTeamIdUserIdResponse",
              "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponseUserSelectedTeam",
              "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponseUser",
              "type_teams:PatchTeamMemberProfilesTeamIdUserIdResponse",
              "type_teams:PostTeamInvitationsAcceptDetailsResponse",
              "type_teams:PostTeamInvitationsAcceptCheckCodeResponse"
            ],
            "subpackages": [],
            "urlSlug": "teams",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_users": {
            "subpackageId": "subpackage_users",
            "name": "users",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "list-users",
                "method": "GET",
                "id": "listUsers",
                "originalEndpointId": "endpoint_users.listUsers",
                "name": "List users",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Only return users who are members of the given team",
                    "key": "team_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The maximum number of items to return",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "double"
                        }
                      }
                    }
                  },
                  {
                    "description": "The cursor to start the result set from.",
                    "key": "cursor",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The field to sort the results by. Defaults to signed_up_at",
                    "key": "order_by",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "Whether to sort the results in descending order. Defaults to false",
                    "key": "desc",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "description": "A search query to filter the results by. This is a free-text search that is applied to the user's display name and primary email.",
                    "key": "query",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:GetUsersResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "items": [
                        {
                          "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                          "primary_email": "johndoe@example.com",
                          "primary_email_verified": true,
                          "primary_email_auth_enabled": true,
                          "display_name": "John Doe",
                          "selected_team": {
                            "created_at_millis": 1630000000000,
                            "server_metadata": {
                              "key": "value"
                            },
                            "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                            "display_name": "My Team",
                            "profile_image_url": "https://example.com/image.jpg",
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            }
                          },
                          "selected_team_id": "team-id",
                          "profile_image_url": "https://example.com/image.jpg",
                          "signed_up_at_millis": 1630000000000,
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          },
                          "server_metadata": {
                            "key": "value"
                          },
                          "last_active_at_millis": 1630000000000
                        }
                      ],
                      "pagination": {
                        "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "items": [
                          {
                            "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                            "primary_email": "johndoe@example.com",
                            "primary_email_verified": true,
                            "primary_email_auth_enabled": true,
                            "display_name": "John Doe",
                            "selected_team": {
                              "created_at_millis": 1630000000000,
                              "server_metadata": {
                                "key": "value"
                              },
                              "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                              "display_name": "My Team",
                              "profile_image_url": "https://example.com/image.jpg",
                              "client_metadata": {
                                "key": "value"
                              },
                              "client_read_only_metadata": {
                                "key": "value"
                              }
                            },
                            "selected_team_id": "team-id",
                            "profile_image_url": "https://example.com/image.jpg",
                            "signed_up_at_millis": 1630000000000,
                            "client_metadata": {
                              "key": "value"
                            },
                            "client_read_only_metadata": {
                              "key": "value"
                            },
                            "server_metadata": {
                              "key": "value"
                            },
                            "last_active_at_millis": 1630000000000
                          }
                        ],
                        "pagination": {
                          "next_cursor": "b3d396b8-c574-4c80-97b3-50031675ceb2"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Lists all the users in the project.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-user",
                "method": "POST",
                "id": "createUser",
                "originalEndpointId": "endpoint_users.createUser",
                "name": "Create user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable user display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                        "key": "client_read_only_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                        "key": "server_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Primary email",
                        "key": "primary_email",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the primary email has been verified to belong to this user",
                        "key": "primary_email_verified",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                        "key": "primary_email_auth_enabled",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Sets the user's password. Doing so revokes all current sessions.",
                        "key": "password",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA.",
                        "key": "totp_secret_base64",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:PostUsersResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "password": "my-new-password",
                      "totp_secret_base64": "dG90cC1zZWNyZXQ="
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "display_name": "John Doe",
                      "selected_team": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "selected_team_id": "team-id",
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "last_active_at_millis": 1630000000000
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "password": "my-new-password",
                        "totp_secret_base64": "dG90cC1zZWNyZXQ="
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Creates a new user. E-mail authentication is always enabled, and no password is set, meaning the only way to authenticate the newly created user is through magic link.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-current-user",
                "method": "GET",
                "id": "getCurrentUser",
                "originalEndpointId": "endpoint_users.getCurrentUser",
                "name": "Get current user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/me"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:GetUsersMeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/me",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "display_name": "John Doe",
                      "selected_team": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "selected_team_id": "team-id",
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "last_active_at_millis": 1630000000000
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Gets the currently authenticated user.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-current-user",
                "method": "DELETE",
                "id": "deleteCurrentUser",
                "originalEndpointId": "endpoint_users.deleteCurrentUser",
                "name": "Delete current user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/me"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:DeleteUsersMeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/me",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes the currently authenticated user. Use this with caution.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-current-user",
                "method": "PATCH",
                "id": "updateCurrentUser",
                "originalEndpointId": "endpoint_users.updateCurrentUser",
                "name": "Update current user",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/me"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable user display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                        "key": "client_read_only_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                        "key": "server_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Primary email",
                        "key": "primary_email",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the primary email has been verified to belong to this user",
                        "key": "primary_email_verified",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                        "key": "primary_email_auth_enabled",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Sets the user's password. Doing so revokes all current sessions.",
                        "key": "password",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA.",
                        "key": "totp_secret_base64",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "ID of the team currently selected by the user",
                        "key": "selected_team_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:PatchUsersMeResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/me",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "password": "my-new-password",
                      "totp_secret_base64": "dG90cC1zZWNyZXQ=",
                      "selected_team_id": "team-id"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "display_name": "John Doe",
                      "selected_team": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "selected_team_id": "team-id",
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "last_active_at_millis": 1630000000000
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "password": "my-new-password",
                        "totp_secret_base64": "dG90cC1zZWNyZXQ=",
                        "selected_team_id": "team-id"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates the currently authenticated user. Only the values provided will be updated.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-user",
                "method": "GET",
                "id": "getUser",
                "originalEndpointId": "endpoint_users.getUser",
                "name": "Get user",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:GetUsersUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "display_name": "John Doe",
                      "selected_team": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "selected_team_id": "team-id",
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "last_active_at_millis": 1630000000000
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Gets a user by user ID.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-user",
                "method": "DELETE",
                "id": "deleteUser",
                "originalEndpointId": "endpoint_users.deleteUser",
                "name": "Delete user",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:DeleteUsersUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "success": true
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "success": true
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Deletes a user. Use this with caution.",
                "authed": false
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.stack-auth.com/api/v1"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-user",
                "method": "PATCH",
                "id": "updateUser",
                "originalEndpointId": "endpoint_users.updateUser",
                "name": "Update user",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the user, or the special value `me` for the currently authenticated user",
                      "key": "user_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/users/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "user_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Human-readable user display name. This is not a unique identifier.",
                        "key": "display_name",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "URL of the profile image for user. Can be a Base64 encoded image. Must be smaller than 100KB. Please compress and crop to a square before passing in.",
                        "key": "profile_image_url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client.",
                        "key": "client_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Client read-only, server-writable metadata. Used as a data store, accessible from the client side. Do not store information that should not be exposed to the client. The client can read this data, but cannot modify it. This is useful for things like subscription status.",
                        "key": "client_read_only_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Server metadata. Used as a data store, only accessible from the server side. You can store secret information related to the user here.",
                        "key": "server_metadata",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "unknown"
                            }
                          }
                        }
                      },
                      {
                        "description": "Primary email",
                        "key": "primary_email",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the primary email has been verified to belong to this user",
                        "key": "primary_email_verified",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Whether the primary email is used for authentication. If this is set to `false`, the user will not be able to sign in with the primary email with password or OTP",
                        "key": "primary_email_auth_enabled",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Sets the user's password. Doing so revokes all current sessions.",
                        "key": "password",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Enables 2FA and sets a TOTP secret for the user. Set to null to disable 2FA.",
                        "key": "totp_secret_base64",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "ID of the team currently selected by the user",
                        "key": "selected_team_id",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_users:PatchUsersUserIdResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/users/3241a285-8329-4d69-8f3d-316e08cf140c",
                    "pathParameters": {
                      "user_id": "3241a285-8329-4d69-8f3d-316e08cf140c"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "display_name": "John Doe",
                      "profile_image_url": "https://example.com/image.jpg",
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "password": "my-new-password",
                      "totp_secret_base64": "dG90cC1zZWNyZXQ=",
                      "selected_team_id": "team-id"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                      "primary_email": "johndoe@example.com",
                      "primary_email_verified": true,
                      "primary_email_auth_enabled": true,
                      "display_name": "John Doe",
                      "selected_team": {
                        "created_at_millis": 1630000000000,
                        "server_metadata": {
                          "key": "value"
                        },
                        "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                        "display_name": "My Team",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        }
                      },
                      "selected_team_id": "team-id",
                      "profile_image_url": "https://example.com/image.jpg",
                      "signed_up_at_millis": 1630000000000,
                      "client_metadata": {
                        "key": "value"
                      },
                      "client_read_only_metadata": {
                        "key": "value"
                      },
                      "server_metadata": {
                        "key": "value"
                      },
                      "last_active_at_millis": 1630000000000
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "display_name": "John Doe",
                        "profile_image_url": "https://example.com/image.jpg",
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "password": "my-new-password",
                        "totp_secret_base64": "dG90cC1zZWNyZXQ=",
                        "selected_team_id": "team-id"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "id": "3241a285-8329-4d69-8f3d-316e08cf140c",
                        "primary_email": "johndoe@example.com",
                        "primary_email_verified": true,
                        "primary_email_auth_enabled": true,
                        "display_name": "John Doe",
                        "selected_team": {
                          "created_at_millis": 1630000000000,
                          "server_metadata": {
                            "key": "value"
                          },
                          "id": "ad962777-8244-496a-b6a2-e0c6a449c79e",
                          "display_name": "My Team",
                          "profile_image_url": "https://example.com/image.jpg",
                          "client_metadata": {
                            "key": "value"
                          },
                          "client_read_only_metadata": {
                            "key": "value"
                          }
                        },
                        "selected_team_id": "team-id",
                        "profile_image_url": "https://example.com/image.jpg",
                        "signed_up_at_millis": 1630000000000,
                        "client_metadata": {
                          "key": "value"
                        },
                        "client_read_only_metadata": {
                          "key": "value"
                        },
                        "server_metadata": {
                          "key": "value"
                        },
                        "last_active_at_millis": 1630000000000
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates a user. Only the values provided will be updated.",
                "authed": false
              }
            ],
            "types": [
              "type_users:GetUsersResponseItemsItemSelectedTeam",
              "type_users:GetUsersResponseItemsItem",
              "type_users:GetUsersResponsePagination",
              "type_users:GetUsersResponse",
              "type_users:PostUsersResponseSelectedTeam",
              "type_users:PostUsersResponse",
              "type_users:GetUsersMeResponseSelectedTeam",
              "type_users:GetUsersMeResponse",
              "type_users:DeleteUsersMeResponse",
              "type_users:PatchUsersMeResponseSelectedTeam",
              "type_users:PatchUsersMeResponse",
              "type_users:GetUsersUserIdResponseSelectedTeam",
              "type_users:GetUsersUserIdResponse",
              "type_users:DeleteUsersUserIdResponse",
              "type_users:PatchUsersUserIdResponseSelectedTeam",
              "type_users:PatchUsersUserIdResponse"
            ],
            "subpackages": [],
            "urlSlug": "users",
            "webhooks": [],
            "websockets": []
          }
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      }
    },
    "files": {
      "74b8f532-d981-40af-87a2-e97b54dfa380": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/custom-script.js",
      "74d94848-f6a5-4e56-8ad5-1f4fe0094607": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/assets/logo-dark-mode.svg",
      "2cd200f7-13e7-4501-ac6a-4f368a959c70": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/assets/logo-light-mode.svg",
      "c52d1fd6-b896-4918-9b36-312503951872": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/assets/favicon.ico",
      "25f0c839-ca18-4351-83bd-956c91a467ee": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/sign-in.png",
      "aaf8f9c5-32ce-4acb-929e-c75474122d30": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/dashboard.png",
      "66c6b112-60a1-48c5-9c65-eb2ba80e53e9": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/account-settings.png",
      "64adbb26-a23d-4282-9d78-05ce53cb9984": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/user-button.png",
      "0680a20e-ab62-4313-a378-418b21722742": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/team-switcher.png",
      "31e94df1-ecf0-457d-8a8a-d2a47e7d57c1": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/selected-team-switcher.png",
      "526009f0-d4d4-4b8e-9567-2ae570078c91": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/sign-up.png",
      "efafc5de-b619-4c84-9050-84577601f8e6": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/credential-sign-in.png",
      "fa183cce-a9c8-4c32-b18a-1e4b8ffb4b3c": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/credential-sign-up.png",
      "97002ac1-d095-4ed1-bd53-f2a8a6019de8": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/oauth-button.png",
      "ebab34cd-b591-4d66-a1cb-c03803140c12": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/https%3A//stack-auth.docs.buildwithfern.com/2024-11-05T09%3A22%3A53.533Z/docs/pages/imgs/oauth-button-group.png"
    },
    "filesV2": {
      "74b8f532-d981-40af-87a2-e97b54dfa380": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/custom-script.js"
      },
      "74d94848-f6a5-4e56-8ad5-1f4fe0094607": {
        "type": "image",
        "width": 851,
        "height": 242,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/assets/logo-dark-mode.svg"
      },
      "2cd200f7-13e7-4501-ac6a-4f368a959c70": {
        "type": "image",
        "width": 851,
        "height": 242,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/assets/logo-light-mode.svg"
      },
      "c52d1fd6-b896-4918-9b36-312503951872": {
        "type": "image",
        "width": 16,
        "height": 16,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/assets/favicon.ico"
      },
      "25f0c839-ca18-4351-83bd-956c91a467ee": {
        "type": "image",
        "width": 2170,
        "height": 1034,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/sign-in.png"
      },
      "aaf8f9c5-32ce-4acb-929e-c75474122d30": {
        "type": "image",
        "width": 2490,
        "height": 1592,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/dashboard.png"
      },
      "66c6b112-60a1-48c5-9c65-eb2ba80e53e9": {
        "type": "image",
        "width": 1825,
        "height": 927,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/account-settings.png"
      },
      "64adbb26-a23d-4282-9d78-05ce53cb9984": {
        "type": "image",
        "width": 1646,
        "height": 678,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/user-button.png"
      },
      "0680a20e-ab62-4313-a378-418b21722742": {
        "type": "image",
        "width": 1540,
        "height": 484,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/team-switcher.png"
      },
      "31e94df1-ecf0-457d-8a8a-d2a47e7d57c1": {
        "type": "image",
        "width": 1296,
        "height": 619,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/selected-team-switcher.png"
      },
      "526009f0-d4d4-4b8e-9567-2ae570078c91": {
        "type": "image",
        "width": 2142,
        "height": 982,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/sign-up.png"
      },
      "efafc5de-b619-4c84-9050-84577601f8e6": {
        "type": "image",
        "width": 1296,
        "height": 618,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/credential-sign-in.png"
      },
      "fa183cce-a9c8-4c32-b18a-1e4b8ffb4b3c": {
        "type": "image",
        "width": 1296,
        "height": 618,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/credential-sign-up.png"
      },
      "97002ac1-d095-4ed1-bd53-f2a8a6019de8": {
        "type": "image",
        "width": 1296,
        "height": 618,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/oauth-button.png"
      },
      "ebab34cd-b591-4d66-a1cb-c03803140c12": {
        "type": "image",
        "width": 1296,
        "height": 618,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/https://stack-auth.docs.buildwithfern.com/2024-11-05T09:22:53.533Z/docs/pages/imgs/oauth-button-group.png"
      }
    },
    "pages": {
      "docs/pages/overview.mdx": {
        "markdown": "---\nslug: overview\nsubtitle: 'Welcome to Stack Auth, the open-source authentication platform!'\n---\n\nYou can get started in five minutes with our [setup guide](/getting-started/setup), or jump straight into the documentation.\n\n<CardGroup>\n  <Card \n    title=\"Setup & Installation\"\n    icon=\"fa-regular fa-play\" \n    href=\"/getting-started/setup\"\n  >\n    Get started with Stack in 5 minutes\n  </Card>\n  <Card \n    title=\"SDK Reference\"\n    icon=\"fa-regular fa-file-lines\" \n    href=\"/sdk\"\n  >\n    Learn how to use Stack's SDKs for Next.js\n  </Card>\n  <Card \n    title=\"REST API Reference\"\n    icon=\"fa-solid fa-code\" \n    href=\"/rest-api\"\n  >\n    Explore Stack's REST API for your backends\n  </Card>\n  <Card \n    title=\"Discord\"\n    icon=\"fa-brands fa-discord\"\n    href=\"https://discord.stack-auth.com\"\n  >\n    Join our Discord community\n  </Card>\n</CardGroup>\n\n## Why Choose Stack?\n\nAuthentication is inherently difficult. Few things are more sensitive than user data and more complex than cryptography. Not surprisingly, many online businesses struggle to get it right.\n\nThe optimal authentication solution should be secure, yet approachable. If a developer has to worry about JWTs, OAuth flows, or password hashing, then we have failed. If an authentication solution uses closed-source, unauditable code for the most critical parts of your application, then we have failed.\n\nIn truth, the authentication services industry has collectively failed. It's dominated by proprietary giants with predatory \"bait-and-switch\" pricing, providing no transparency into their codebase and delivering a subpar developer experience — because they know enterprises will pay more if setting up auth systems is painful.\n\nThat's why we built Stack. Integrating secure authentication into your app should take **5 minutes**, not 5 days.\n\nAt the core of Stack are deep integrations into frontend and backend frameworks. We offer the best developer experience with Next.js. Instead of providing mediocre support for numerous frameworks, we focused on making a few integrations excellent before adding new ones. We also offer a cross-compatible REST API as a fallback.\n\nHere's an example. To get the current user, simply call:\n\n```tsx\nexport function MyComponent() {\n  const user = useUser({ or: \"redirect\" });\n  return <div>Hi, {user.displayName}</div>;\n}\n```\n\nThat's it! Stack will either return a User object or redirect the user to the login page.\n\nYou can also add a button to change the user's name:\n\n```tsx\n<button onClick={async () => await user.update({ displayName: \"New Name\" })}>\n  Change Name\n</button>\n```\n\nThe user data will update in both the frontend and backend automatically. The updated user data will be reflected in all other components on your page as well.\n\nYou also get pages and components for the authentication flow out-of-the-box. This is the sign-in page you get without writing a single line of code:\n\n![Stack sign in page](file:25f0c839-ca18-4351-83bd-956c91a467ee)\n\nNotice, there's no branding on our components. We believe we should grow by building the best product, not by forcing our brand onto your users. This means we **rely on you to spread the word about Stack**. If you like what you're reading, please take a moment to tell one or two of your friends about us.\n\nIf you prefer a fully customized UI, you can use our low-level functions like `signInWithOAuth` or `signInWithCredential` to build your own sign-in page:\n\n```tsx\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n  return (\n    <div>\n      <button onClick={async () => await app.signInWithOAuth('google')}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}\n```\n\nTo manage everything efficiently, there is a powerful admin dashboard:\n\n![Stack dashboard](file:aaf8f9c5-32ce-4acb-929e-c75474122d30)\n\nBest of all, Stack is **100% open-source**. This means the client, server, dashboard, and even this documentation you're reading right now. Check out our [GitHub](https://github.com/stack-auth/stack) to open an issue or pull request.\n\nThis is just a glimpse of what Stack can do. Stack also handles many other tasks like backend integration, data storage, emails, teams, permissions, and more, which you will learn about later in the documentation.\n\nIf this sounds interesting, [get started](/getting-started/setup) with our interactive setup wizard, or join [our Discord community](https://discord.stack-auth.com) to ask questions and get help from our team.\n\nWe're excited to have you on board! 🚀\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/overview.mdx"
      },
      "docs/pages/faq.mdx": {
        "markdown": "---\nslug: faq\nsubtitle: Frequently asked questions about Stack\n---\n\n## Languages & Frameworks\n<AccordionGroup>\n  <Accordion title=\"What languages are supported?\">\n    In the frontend, Stack supports TypeScript and JavaScript with Next.js. In the backend, Stack has a flexible [REST API](/rest-api) that can be used with any language or framework.\n  </Accordion>\n  <Accordion title=\"Can I use Stack with other JavaScript frameworks, like Astro or Angular?\">\n    While you can use any backend framework with Stack, the frontend is tightly integrated with Next.js. If you want to use a different frontend framework, you will have to build the integration ourselves with the client endpoints of our [REST API](/rest-api). Some members of our community have started projects to do this, so you may want to join [our Discord](https://discord.stack-auth.com) to coordinate with them.\n  </Accordion>\n  <Accordion title=\"Can I use Stack with the Next.js pages router?\">\n    Only the Next.js app router is currently supported. However, just like any other unsupported framework, you can use the client endpoints of our [REST API](/rest-api) to build your own integration.\n  </Accordion>\n</AccordionGroup>\n\n## Product\n<AccordionGroup>\n  <Accordion title=\"How do you compare to <X>?\">\n    Ask yourself about `<X>`:\n\n    - Is `<X>` open-source?\n    - Is `<X>` developer-friendly, well-documented, and lets you get started in minutes?\n    - Besides authentication, does `<X>` also do authorization and user management (see feature list below)?\n    \n    If you answered \"no\" to any of these questions, then that's how Stack Auth is different from `<X>`.\n  </Accordion>\n  <Accordion title=\"Can I use Stack with other JavaScript frameworks, like Astro or Angular?\">\n    While you can use any backend framework with Stack, the frontend is tightly integrated with Next.js. If you want to use a different frontend framework, you will have to build the integration ourselves with the client endpoints of our [REST API](/rest-api). Some members of our community have started projects to do this, so you may want to join [our Discord](https://discord.stack-auth.com) to coordinate with them.\n  </Accordion>\n  <Accordion title=\"Can I use Stack with the Next.js pages router?\">\n    Only the Next.js app router is currently supported. However, just like any other unsupported framework, you can use the client endpoints of our [REST API](/rest-api) to build your own integration.\n  </Accordion>\n</AccordionGroup>\n\n## Other\n<AccordionGroup>\n  <Accordion title=\"How can I contribute?\">\n    Please carefully read our [CONTRIBUTING.md](https://github.com/stack-auth/stack/blob/dev/CONTRIBUTING.md). \n  </Accordion>\n</AccordionGroup>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/faq.mdx"
      },
      "docs/pages/getting-started/setup.mdx": {
        "markdown": "---\nslug: getting-started/setup\nsubtitle: Getting started with Stack in 5 minutes\n---\n\n## Setup\n\nTo get started with Stack, you need a [Next.js project](https://nextjs.org/docs/getting-started/installation) with the app router. The pages router is not supported.\n\nWe recommend using our **setup wizard**, which will automatically detect your project structure and guide you through the installation process. In case it fails, you can choose to do the manual installation instead.\n\n<Tabs style={{backgroundColor: \"black\"}}>\n  <Tab title=\"Setup wizard (recommended)\">\n    <Steps>\n      ### Run installation wizard\n      Run Stack's installation wizard with the following command:\n\n      ```sh title=\"Terminal\"\n      npx @stackframe/init-stack@latest\n      ```\n\n      ### Update API keys\n      Then, create an account on [the Stack Auth dashboard](https://app.stack-auth.com/projects), create a new project with an API key, and copy its environment variables into the `.env.local` file of your Next.js project:\n\n      ```sh title=\".env.local\"\n      NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\n      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\n      STACK_SECRET_SERVER_KEY=<your-secret-server-key>\n      ```\n\n      ### Done!\n      That's it! The following files should have been created or updated in your project:\n\n      - `app/handler/[...stack]/page.tsx`: This file contains the default pages for sign-in, sign-out, account settings, and more. If you prefer, later you will learn how to [use custom pages](/customization/custom-pages) instead.\n      - `app/layout.tsx`: The layout file was updated to wrap the entire body with `StackProvider` and `StackTheme`.\n      - `app/loading.tsx`: If not yet found, Stack automatically adds a Suspense boundary to your app. This is shown to the user while Stack's async hooks, like `useUser`, are loading.\n      - `stack.ts`: This file contains the `stackServerApp` which you can use to access Stack from Server Components, Server Actions, API routes, and middleware.\n    </Steps>\n  </Tab>\n  <Tab title=\"Manual installation\">\n    Note: The setup wizard also supports existing, complicated projects. Cases where manual installation is necessary are rare.\n\n    If you are struggling with the setup wizard, please reach out to us on our [Discord](https://discord.stack-auth.com) first, where we'll be happy to help you.\n    <Steps>\n      ### Install npm package\n\n      First, install Stack with npm, yarn, or pnpm:\n\n      ```bash title=\"Terminal\"\n      npm install @stackframe/stack\n      ```\n\n      ### Create API keys\n\n      If you haven't already, [register a new account on Stack](https://app.stack-auth.com/handler/signup). Create a project in the dashboard, create a new API key from the left sidebar, and copy the project ID, publishable client key, and secret server key into a new file called `.env.local` in the root of your Next.js project:\n\n      ```sh title=\".env.local\"\n      NEXT_PUBLIC_STACK_PROJECT_ID=<your-project-id>\n      NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY=<your-publishable-client-key>\n      STACK_SECRET_SERVER_KEY=<your-secret-server-key>\n      ```\n\n      ### Create `stack.ts` file\n\n      Create a new file `stack.ts` in your root directory and fill it with the following:\n      \n      ```tsx title=\"stack.ts\"\n      import \"server-only\";\n      import { StackServerApp } from \"@stackframe/stack\";\n\n      export const stackServerApp = new StackServerApp({\n        tokenStore: \"nextjs-cookie\", // storing auth tokens in cookies\n      });\n      ```\n    \n      This will read the environment variables automatically and create a server app that you can later use to access Stack from your Next.js server.\n      \n      Check out the [`StackServerApp` documentation](/sdk/stack-app) to learn more about its other options.\n\n      ### Create Stack handler \n      \n      Create a new file in `app/handler/[...stack]/page.tsx` and paste the following code: \n\n      ```tsx title=\"app/handler/[...stack]/page.tsx\"\n      import { StackHandler } from \"@stackframe/stack\";\n      import { stackServerApp } from \"@/stack\";\n\n      export default function Handler(props: any) {\n        return <StackHandler fullPage app={stackServerApp} {...props} />;\n      }\n      ```\n\n      This will create pages for sign-in, sign-up, password reset, and others. Additionally, it will be used as a callback URL for OAuth. You can [replace them with your own pages](/customization/custom-pages) later.\n\n\n      ### Add StackProvider to `layout.tsx`\n\n      In your `app/layout.tsx`, wrap the entire body with a `StackProvider` and `StackTheme`. Afterwards, it should look like this:\n\n      ```tsx title=\"app/layout.tsx\"\n      import React from \"react\";\n      import { StackProvider, StackTheme } from \"@stackframe/stack\";\n      import { stackServerApp } from \"@/stack\";\n\n      export default function RootLayout({ children }: { children: React.ReactNode }) {\n        return (\n          <html lang=\"en\">\n            <body>\n              <StackProvider app={stackServerApp}>\n                <StackTheme>\n                  {children}\n                </StackTheme>\n              </StackProvider>\n            </body>\n          </html>\n        );\n      }\n      ```\n\n      ### Add Suspense boundary\n\n      By default, Stack uses [`Suspense`](https://react.dev/reference/react/Suspense) to handle loading states. To show a loading indicator while Stack is fetching user data, make sure there is a `loading.tsx` file in your `app` directory:\n\n      ```tsx title=\"app/loading.tsx\"\n      export default function Loading() {\n        // You can use any loading indicator here\n        return <>\n          Loading...\n        </>;\n      }\n      ```\n\n      ### Done!\n    </Steps>\n  </Tab>\n</Tabs>\n\n## Post-setup\n\nThat's it! Stack is now configured in your Next.js project. If you start your Next.js app with `npm run dev` and navigate to [http://localhost:3000/handler/signup](http://localhost:3000/handler/signup), you will see the Stack sign-up page.\n\n![Stack sign in page](file:25f0c839-ca18-4351-83bd-956c91a467ee)\n\nAfter signing up/in, you will be redirected back to the home page. We will show you how to add user information to it in the next section. You can also check out the [http://localhost:3000/handler/account-settings](http://localhost:3000/handler/account-settings) page which looks like this:\n\n![Stack account settings page](file:66c6b112-60a1-48c5-9c65-eb2ba80e53e9)\n\n\n\n## Next steps\n\nNext up, we will show you how to retrieve and update user information, and how to protect a page.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/getting-started/setup.mdx"
      },
      "docs/pages/getting-started/components.mdx": {
        "markdown": "---\nslug: getting-started/components\nsubtitle: Pre-built Next.js components to make your life easier\n---\n\nIn [the last guide](/getting-started/setup), we initialized Stack. This time, we will take a quick look at some of the most useful Next.js components.\n\nFor the full documentation of all available components, please refer to the [components reference](/components).\n\n## `<UserButton />`\n\nThe `<UserButton />` component shows the user's avatar and opens a dropdown with various user settings.\n\n![UserButton](file:64adbb26-a23d-4282-9d78-05ce53cb9984)\n\n```tsx title=\"page.tsx\"\nimport { UserButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <UserButton />\n  );\n}\n```\n\n## `<SignIn />` and `<SignUp />`\n\nThese components show a sign-in and sign-up form, respectively.\n\n![Sign-in Component](file:25f0c839-ca18-4351-83bd-956c91a467ee)\n\n```tsx title=\"page.tsx\"\nimport { SignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <SignIn />\n  );\n}\n```\n\nAll of Stack's components are modular and built from smaller primitives. For example, the `<SignIn />` component is composed of the following:\n\n- An `<OAuthButtonGroup />`, which itself is composed of multiple `<OAuthButton />` components\n- A `<MagicLinkSignIn />`, which has a text field and calls `useStackApp().signInWithMagicLink()`\n- A `<CredentialSignIn />`, which has two text fields and calls `useStackApp().signInWithCredential()`\n\nYou can use these components individually to build a custom sign-in component.\n\nTo change the default sign-in URL to your own, see the documentation on [custom pages](/customization/custom-pages).\n\n## Others\n\nStack has many more components available. For a comprehensive list, please check the documentation on [components](/components).\n\n## Next steps\n\nIn the next guide, we will do a deep-dive into retrieving and modifying user objects, as well as how to protect a page.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/getting-started/components.mdx"
      },
      "docs/pages/getting-started/users.mdx": {
        "markdown": "---\nslug: getting-started/users\nsubtitle: 'Reading and writing user information, and protecting pages'\n---\n\nYou will inevitably build custom components that access the user in one way or another. In this section, we will take a closer look at the functions and hooks that let you do this.\n\n## Client Component basics\n\nThe `useUser()` hook returns the current user in a Client Component. By default, it will return `null` if the user is not signed in.\n\n```tsx title=\"my-client-component.tsx\"\n\"use client\";\nimport { useUser } from \"@stackframe/stack\"\n\nexport function MyClientComponent() {\n  const user = useUser();\n  return <div>{user ? `Hello, ${user.displayName ?? \"anon\"}` : 'You are not logged in'}</div>;\n}\n```\n\nThe `useUser()` hook is simply a shorthand for `useStackApp().useUser()`. `useStackApp()` also contains other useful hooks and methods for clients, which will be described later.\n\nSometimes, you want to retrieve the user only if they're signed in, and redirect to the sign-in page otherwise. In this case, simply pass `{ or: \"redirect\" }`, and the function will never return `null`.\n\n```tsx\n  const user = useUser({ or: \"redirect\" });\n  return <div>{`Hello, ${user.displayName ?? \"anon\"}`}</div>;\n```\n\n## Server Component basics\n\nSince `useUser()` is a stateful hook, you can't use it on server components. Instead, you can import `stackServerApp` from `stack.ts` and call `getUser()`:\n\n```tsx title=\"my-server-component.tsx\"\nimport { stackServerApp } from \"@/stack\";\n\nexport default async function MyServerComponent() {\n  const user = await stackServerApp.getUser();  // or: stackServerApp.getUser({ or: \"redirect\" })\n  return <div>{user ? `Hello, ${user.displayName ?? \"anon\"}` : 'You are not logged in'}</div>;\n}\n```\n\n<Note>\nSince `useUser()` is a hook, it will re-render the component on user changes (eg. signout), while `getUser()` will only fetch the user once (on page load). You can also call `useStackApp().getUser()` on the client side to get the user in a non-component context.\n</Note>\n\n\n## Protecting a page\n\nThere are three ways to protect a page: in Client Components with `useUser({ or: \"redirect\" })`, in Server Components with `await getUser({ or: \"redirect\" })`, or with middleware.\n\nOn Client Components, the `useUser({ or: 'redirect' })` hook will redirect the user to the sign-in page if they are not logged in. Similarly, on Server Components, call `await getUser({ or: \"redirect\" })` to protect a page (or component).\n\nMiddleware can be used whenever it is easy to tell whether a page should be protected given just the URL, for example, when you have a `/private` section only accessible to logged-in users.\n\n\n<Tabs>\n  <Tab title=\"Middleware\">\n    ```tsx title=\"middleware.tsx\"\n    export async function middleware(request: NextRequest) {\n      const user = await stackServerApp.getUser();\n      if (!user) {\n        return NextResponse.redirect(new URL('/handler/sign-in', request.url));\n      }\n      return NextResponse.next();\n    }\n\n    export const config = {\n      // You can add your own route protection logic here\n      // Make sure not to protect the root URL, as it would prevent users from accessing static Next.js files or Stack's /handler path\n      matcher: '/protected/:path*',\n    };\n    ```\n  </Tab>\n\n  <Tab title=\"Client Component\">\n    ```tsx title=\"my-protected-client-component.tsx\"\n    \"use client\";\n    import { useUser } from \"@stackframe/stack\";\n\n    export default function MyProtectedClientComponent() {\n      useUser({ or: 'redirect' });\n      return <h1>You can only see this if you are logged in</h1>\n    }\n    ```\n  </Tab>\n\n  <Tab title=\"Server Component\">\n    ```tsx title=\"my-protected-server-component.tsx\"\n    import { stackServerApp } from \"@/stack\";\n\n    export default async function MyProtectedServerComponent() {\n      await stackServerApp.getUser({ or: 'redirect' });\n      return <h1>You can only see this if you are logged in</h1>\n    }\n    ```\n  </Tab>\n</Tabs>\n\n<Note>\n  If you have sensitive information hidden in the page HTML itself, be aware of Next.js differences when using Server vs. Client Components.\n\n  - **Client Components**: Client components are always sent to the browser, regardless of page protection. This is standard Next.js behavior. For more information, please refer to the [Next.js documentation](https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns#keeping-server-only-code-out-of-the-client-environment).\n\n  - **Server Components**: If a component is protected, it is guaranteed that its bundled HTML will not be sent to the browser if the user is not logged in. However, this is not necessarily true for its children and the rest of the page, as Next.js may split components on the same page and send them to the client separately for performance.\n  \n    For example, if your page is `<Parent><Child /></Parent>`, where `Parent` is protected and `Child` is not, Next.js may still send `<Child />` to the browser even if the user is not logged in. (Normal browsers will never display it, but attackers may be able to retrieve it.) Notably, this also applies to unprotected pages inside protected layouts.\n  \n    To remediate this, every component/page that contains sensitive information should protect itself, instead of relying on an outer layout. This is good practice anyways; it prevents you from accidentally exposing the data.\n  \n  - **Middleware**: Because middleware runs on the edge, it ensures that the protected URLs are not accessible to anyone who is not authorized, so you don't have to worry about Next.js pre-sending unprotected components to the client.\n  \n  Irregardless of which method you use, attackers will never be able to, say, impersonate a user.\n\n</Note>\n\n\n## User data\n\nYou can update attributes on a user object with the `user.update()` function.\n\n```tsx title=\"my-client-component.tsx\"\n'use client';\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function MyClientComponent() {\n  const user = useUser();\n  return <button onClick={async () => await user.update({ displayName: \"New Name\" })}>\n    Change Name\n  </button>;\n}\n```\n\nYou can also store custom user data in the `clientMetadata`, `serverMetadata`, or `clientReadonlyMetadata` fields. More information [here](../concepts/custom-user-data).\n\n## Signing out\n\nYou can sign out the user by redirecting them to `/handler/sign-out` or simply by calling `user.signOut()`. They will be redirected to the URL [configured as `afterSignOut` in the `StackServerApp`](/sdk/stack-app).\n\n<Tabs>\n  <Tab title=\"user.signOut()\">\n    ```tsx title=\"sign-out-button.tsx\"\n    \"use client\";\n    import { useUser } from \"@stackframe/stack\";\n\n    export default function SignOutButton() {\n      const user = useUser();\n      return user ? <button onClick={() => user.signOut()}>Sign Out</button> : \"Not signed in\";\n    }\n    ```\n  </Tab>\n\n  <Tab title=\"Redirect\">\n    ```tsx title=\"sign-out-link.tsx\"\n    import { stackServerApp } from \"@/stack\";\n\n    export default async function SignOutLink() {\n      // stackServerApp.urls.signOut is equal to /handler/sign-out\n      return <a href={stackServerApp.urls.signOut}>Sign Out</a>;\n    }\n    ```\n  </Tab>\n</Tabs>\n\n## Example: Custom profile page\n\nStack automatically creates a user profile on sign-up. Let's build a page that displays this information. In `app/profile/page.tsx`:\n\n<Tabs>\n  <Tab title=\"Client Component\">\n    ```tsx title=\"app/profile/page.tsx\"\n    'use client';\n    import { useUser, useStackApp, UserButton } from \"@stackframe/stack\";\n\n    export default function PageClient() {\n      const user = useUser();\n      const app = useStackApp();\n      return (\n        <div>\n          {user ? (\n            <div>\n              <UserButton />\n              <p>Welcome, {user.displayName ?? \"anonymous user\"}</p>\n              <p>Your e-mail: {user.primaryEmail}</p>\n              <button onClick={() => user.signOut()}>Sign Out</button>\n            </div>\n          ) : (\n            <div>\n              <p>You are not logged in</p>\n              <button onClick={() => app.redirectToSignIn()}>Sign in</button>\n              <button onClick={() => app.redirectToSignUp()}>Sign up</button>\n            </div>\n          )}\n        </div>\n      );\n    }\n    ```\n  </Tab>\n\n  <Tab title=\"Server Component\">\n    ```tsx title=\"app/profile/page.tsx\"\n    import { stackServerApp } from \"@/stack\";\n    import { UserButton } from \"@stackframe/stack\";\n\n    export default async function Page() {\n      const user = await stackServerApp.getUser();\n      return (\n        <div>\n          {user ? (\n            <div>\n              <UserButton />\n              <p>Welcome, {user.displayName ?? \"anonymous user\"}</p>\n              <p>Your e-mail: {user.primaryEmail}</p>\n              <p><a href={stackServerApp.urls.signOut}>Sign Out</a></p>\n            </div>\n          ) : (\n            <div>\n              <p>You are not logged in</p>\n              <p><a href={stackServerApp.urls.signIn}>Sign in</a></p>\n              <p><a href={stackServerApp.urls.signUp}>Sign up</a></p>\n            </div>\n          )}\n        </div>\n      );\n    }\n    ```\n  </Tab>\n</Tabs>\n\nAfter saving your code, you can see the profile page on [http://localhost:3000/profile](http://localhost:3000/profile).\n\nFor more examples on how to use the `User` object, check the [the SDK documentation](/sdk/user).\n\n## Next steps\n\nIn the next guide, we will show you how to put [your application into production](/getting-started/production).\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/getting-started/users.mdx"
      },
      "docs/pages/getting-started/production.mdx": {
        "markdown": "---\nslug: getting-started/production\nsubtitle: Steps to prepare Stack for production use\n---\n\nStack makes development easy with various default settings, but these settings need to be optimized for security and user experience when moving to production. Here's a checklist of things you need to do before switching to production mode:\n\n### Domains and handlers\n\nBy default, Stack allows all localhost paths as valid callback URLs. This is convenient for development but poses a security risk in production because attackers could use their own domains as callback URLs to intercept sensitive information. Therefore, in production, Stack must know your domain (e.g., `https://your-website.com`) and only allow callbacks from those domains.\n\nFollow these steps when you're ready to push your application to production:\n\n1. **Add Your Domain**: Navigate to the `Domain & Handlers` tab in the Stack dashboard. If you haven't configured your handler, you can leave it as the default. (Learn more about handlers [here](/sdk/stack-app)).\n\n2. **Disable Localhost Callbacks**: For enhanced security, disable the `Allow all localhost callbacks for development` option.\n\n### OAuth providers\n\nStack uses shared OAuth keys for development to simplify setup when using \"Sign in with Google/GitHub/etc.\" However, this isn't secure for production as it displays \"Stack Development\" on the providers' consent screens, making it unclear to users if the OAuth request is genuinely from your site. Thus, you should configure your own OAuth keys with the providers and connect them to Stack.\n\nTo use your own OAuth provider setups in production, follow these steps for each provider you use:\n\n1. **Create an OAuth App**: On the provider's website, create an OAuth app and set the callback URL to the corresponding Stack callback URL. Copy the client ID and client secret.\n   <Tabs>\n     <Tab title=\"Google\">\n       [Google OAuth Setup Guide](https://developers.google.com/identity/protocols/oauth2#1.-obtain-oauth-2.0-credentials-from-the-dynamic_data.setvar.console_name-.)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/google`\n     </Tab>\n     <Tab title=\"GitHub\">\n       [GitHub OAuth Setup Guide](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/creating-an-oauth-app)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/github`\n     </Tab>\n     <Tab title=\"Facebook\">\n       [Facebook OAuth Setup Guide](https://developers.facebook.com/docs/development/create-an-app/facebook-login-use-case)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/facebook`\n     </Tab>\n     <Tab title=\"Microsoft\">\n       [Microsoft Azure OAuth Setup Guide](https://learn.microsoft.com/en-us/entra/identity-platform/quickstart-register-app)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/microsoft`\n     </Tab>\n     <Tab title=\"Spotify\">\n       [Spotify OAuth Setup Guide](https://developer.spotify.com/documentation/general/guides/app-settings/)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/spotify`\n     </Tab>\n     <Tab title=\"Gitlab\">\n       [Gitlab OAuth Setup Guide](https://docs.gitlab.com/ee/integration/oauth_provider.html)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/gitlab`\n     </Tab>\n     <Tab title=\"Bitbucket\">\n       [Bitbucket OAuth Setup Guide](https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/bitbucket`\n     </Tab>\n      <Tab title=\"LinkedIn\">\n       [LinkedIn OAuth Setup Guide](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow?context=linkedin%2Fcontext&tabs=HTTPS1)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/linkedin`\n     </Tab>\n      <Tab title=\"X\">\n       [X OAuth Setup Guide](https://developer.x.com/en/docs/apps/overview)  \n       Callback URL:  \n       `https://api.stack-auth.com/api/v1/auth/oauth/callback/x`\n     </Tab>\n   </Tabs>\n\n2. **Enter OAuth Credentials**: Go to the `Auth Methods` section in the Stack dashboard, open the provider's settings, switch from shared keys to custom keys, and enter the client ID and client secret.\n\n### Email server\n\nFor development, Stack uses a shared email server, which sends emails from Stack's domain. This is not ideal for production as users may not trust emails from an unfamiliar domain. You should set up an email server connected to your own domain.\n\nSteps to connect your own email server with Stack:\n1. **Setup Email Server**: Configure your own email server and connect it to your domain (this step is beyond Stack's documentation scope).\n2. **Configure Stack's Email Settings**: Navigate to the `Emails` section in the Stack dashboard, click `Edit` in the `Email Server` section, switch from `Shared` to `Custom SMTP server`, enter your SMTP configurations, and save.\n\n### Enabling production mode\n\nAfter completing the steps above, you can enable production mode on the `Project Settings` tab in the Stack dashboard, ensuring that your website runs securely with Stack in a production environment.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/getting-started/production.mdx"
      },
      "docs/pages/concepts/stack-app.mdx": {
        "markdown": "---\nslug: concepts/stack-app\nsubtitle: The most important object of your Stack project\n---\n\nBy now, you may have seen the `useApp()` hook and the `stackServerApp` variable. Both return a `StackApp`, of type `StackClientApp` and `StackServerApp` respectively.\n\nNearly all of Stack's functionality is on your `StackApp` object. Think of this object as the \"connection\" from your code to Stack's servers. Each app is always associated with one specific project ID (by default the one found in your environment variables).\n\nThere is also a page on [StackApp](../sdk/stack-app) in the SDK reference, which lists all available functions.\n\n## `getXyz`/`listXyz` vs. `useXyz`\n\nYou will see that most of the asynchronous functions on `StackApp` come in two flavors: `getXyz`/`listXyz` and `useXyz`. The former are asynchronous fetching functions which return a `Promise`, while the latter are React hooks that [suspend](https://react.dev/reference/react/Suspense) the current component until the data is available.\n\nNormally, you would choose between the two based on whether you are in a React Server Component or a React Client Component. However, there are some scenarios where you use `getXyz` on the client, for example as the callback of an `onClick` handler.\n\n```tsx\n// server-component.tsx\nasync function ServerComponent() {\n  const app = stackServerApp;\n  // returns a Promise, must be awaited\n  const user = await app.getUser();\n\n  return <div>{user.displayName}</div>;\n}\n\n\n// client-component.tsx\n\"use client\";\nfunction ClientComponent() {\n  const app = useApp();\n  // returns the value directly\n  const user = app.useUser();\n\n  return <div>{user.displayName}</div>;\n}\n```\n\n## Client vs. server\n\n`StackClientApp` contains everything needed to build a frontend application, for example the currently authenticated user. It requires a publishable client key in its initialization (usually set by the `NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY` environment variable).\n\n`StackServerApp` has all the functionality of `StackClientApp`, but also some functions with elevated permissions, eg. listing or modifying ALL users. This requires a secret server key (usually set by the `STACK_SECRET_SERVER_KEY` environment variable), which **must always be kept secret**.\n\nThere is also a third type, `StackAdminApp`, but it is rarely used. You can use it for automation or internal tools, and can edit your project's configuration.\n\n<Note>\n  Some of the functions have different return types; for example, `StackClientApp.getUser()` returns a `Promise<User>` while `StackServerApp.getUser()` returns a `Promise<ServerUser>`. The `Server` or `Admin` prefixes indicate that the object contains server-/admin-only functionality.\n</Note>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/stack-app.mdx"
      },
      "docs/pages/concepts/custom-user-data.mdx": {
        "markdown": "---\nslug: concepts/custom-user-data\nsubtitle: How to store custom user metadata in Stack Auth\n---\n\nStack Auth allows storing additional user information through three types of metadata fields:\n\n1. **clientMetadata**: Readable and writable from a [client](/concepts/stack-app#client-vs-server).\n2. **serverMetadata**: Readable and writable only from a [server](/concepts/stack-app#client-vs-server).\n3. **clientReadOnlyMetadata**: Readable from a client, writable only from a server.\n\n## Client metadata\nYou can use the `clientMetadata` field to store non-sensitive information that both the client and server can read and write.\n\n```tsx\nawait user.update({\n  clientMetadata: {\n    mailingAddress: \"123 Main St\",\n  },\n});\n\n// On the client:\nconst user = useUser();\nconsole.log(user.clientMetadata);\n```\n\n## Server-side metadata\nFor sensitive information, use the `serverMetadata` field. This ensures the data is only accessible and modifiable by the server.\n\n```tsx\nconst user = await stackServerApp.getUser();\nawait user.update({\n  serverMetadata: {\n    secretInfo: \"This is a secret\",\n  },\n});\n\n// To read:\nconst user = await stackServerApp.getUser();\nconsole.log(user.serverMetadata);\n```\n\n## Client read-only metadata\nUse `clientReadOnlyMetadata` for data that clients need to read but never modify, such as subscription status.\n\n```tsx\n// On the server:\nconst user = await stackServerApp.getUser();\nawait user.update({\n  clientReadOnlyMetadata: {\n    subscriptionPlan: \"premium\",\n  },\n});\n\n// On the client:\nconst user = useUser();\nconsole.log(user.clientReadOnlyMetadata);\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/custom-user-data.mdx"
      },
      "docs/pages/concepts/user-onboarding.mdx": {
        "markdown": "---\nslug: concepts/user-onboarding\nsubtitle: Implementing a user onboarding page and collecting information on sign-up\n---\n\nBy default, Stack Auth collects information such as email addresses from OAuth providers. Sometimes, you may want to collect additional information from users during sign-up, for example a name or address.\n\nThe most straightforward approach is to redirect users to an onboarding page right after they sign up. However, this is not recommended for the following reasons:\n\n1. Users can accidentally (or purposefully) close or navigate away from the page before completing the onboarding.\n2. Redirect URLs may vary depending on the context. For instance, if a user is redirected to a sign-in page after trying to access a protected page, they'll expect to return to the original protected page post-authentication.\n\nInstead, a more reliable strategy is to store an `onboarded` flag in the user's metadata and redirect users to the onboarding page if they haven't completed it yet.\n\n## Example implementation\n\nLet's say you have an onboarding page that asks for an address and stores it in the user's [metadata](/concepts/custom-user-data):\n\n```jsx title=\"app/onboarding/page.tsx\"\nexport default function OnboardingPage() {\n  const user = useUser();\n  const router = useRouter();\n  const [address, setAddress] = useState('');\n\n\n  return <>\n    <input \n      type=\"text\" \n      value={address} \n      onChange={(e) => setAddress(e.target.value)} \n    />\n\n    <button onClick={async () => {\n      await user.update({\n        clientMetadata: {\n          onboarded: true,\n          address,\n        },\n      });\n      router.push('/');\n    }}>\n      Submit\n    </button>\n    </>\n  );\n}\n```\n\n<Note>\nWhile the above implementation offers a basic onboarding process, users can still skip onboarding by directly sending an API request to update the `clientMetadata.onboarded` flag. If you want to ensure that onboarding cannot be bypassed on the API level, you should create a server endpoint to validate and store the data, then save the `onboarded` flag in the `clientReadonlyMetadata` on the server side after validation.\n</Note>\n\nNext, we can create a hook/function to check if the user has completed onboarding and redirect them to the onboarding page:\n\n<Tabs>\n<Tab title=\"Client Hook\">\n```jsx title=\"app/onboarding-hooks.ts\"\n'use client';\nimport { useEffect } from 'react';\nimport { useUser } from '@stackframe/stack';\nimport { useRouter } from 'next/navigation';\n\nexport function useOnboarded() {\n  const user = useUser();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!user.clientMetadata.onboarded) {\n      router.push('/onboarding');\n    }\n  }, [user]);\n}\n```\n</Tab>\n\n<Tab title=\"Server Function\">\n```jsx title=\"app/onboarding-functions.ts\"\nimport { stackServerApp } from '@/stack';\nimport { redirect } from 'next/navigation';\n\nexport async function ensureOnboarded() {\n  const user = await stackServerApp.getUser();\n  if (!user.serverMetadata.onboarded) {\n    redirect('/onboarding');\n  }\n}\n```\n</Tab>\n</Tabs>\n\nYou can then use these functions wherever onboarding is required:\n\n<Tabs>\n<Tab title=\"Client Component\">\n```jsx title=\"app/page.tsx\"\nimport { useOnboarding } from '@/app/onboarding-hooks';\nimport { useUser } from '@stackframe/stack';\n\nexport default function HomePage() {\n  useOnboarding();\n  const user = useUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}\n```\n</Tab>\n\n<Tab title=\"Server Component\">\n```jsx title=\"app/page.tsx\"\nimport { ensureOnboarding } from '@/app/onboarding-functions';\nimport { stackServerApp } from '@/stack';\n\nexport default async function HomePage() {\n  await ensureOnboarding();\n  const user = await stackServerApp.getUser();\n\n  return (\n    <div>Welcome to the app, {user.displayName}</div>\n  );\n}\n```\n</Tab>\n</Tabs>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/user-onboarding.mdx"
      },
      "docs/pages/concepts/oauth.mdx": {
        "markdown": "---\nslug: concepts/oauth\nsubtitle: Managing third-party OAuth access tokens\n---\n\nStack has good support for working with OAuth and OIDC providers, such as Google, Facebook, Microsoft, and others.\n\nBeyond using OAuth for signing in, Stack can manage your users' access token so you can invoke APIs on their behalf. For example, you can use this to send emails with Gmail, access repositories on GitHub, or access files on OneDrive.\n\nA connected account is simply an external account that is linked to the user in some way. If you are not using shared keys (see note below), any user created with \"Sign up with OAuth\" is automatically connected to the account they signed up with, but it's also possible to connect a user with a provider that is unavailable for sign in.\n\n<Note>\n  You cannot connect a user's accounts with shared OAuth keys. You need to set up your own OAuth client ID and client secret in Stack's dashboard. For more details, check [Going to Production](../getting-started/production#oauth-providers).\n</Note>\n\n## Connecting with OAuth providers\n\nYou can access a user's connected account with the `user.getConnectedAccount(providerId)` function or `user.useConnectedAccount(providerId)` hook.\n\nOften, you'll want to redirect the user to the OAuth provider's authorization page if they have not connected the account yet. Just like the `getUser(...)` function, `getConnectedAccount(...)` can also take an `{ or: \"redirect\" }` argument to achieve this.\n\nHere's how to connect with Google:\n\n```jsx\n'use client';\n\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  // Redirects to Google authorization if not already connected\n  const account = user.useConnectedAccount('google', { or: 'redirect' });\n  // Account is always defined because of the redirect\n  return <div>Google account connected</div>;\n}\n```\n\n\n## Providing scopes\n\nMost providers have access control in the form of OAuth scopes. These are the permissions that the user will see on the authorization screen (eg. \"Your App wants access to your calendar\"). For instance, to read Google Drive content, you need the `https://www.googleapis.com/auth/drive.readonly` scope:\n\n```jsx\n'use client';\n\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  // Redirects to the Google authorization page, requesting access to Google Drive\n  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/authdrive.readonly'] });\n  // Account is always defined because of the redirect\n  return <div>Google Drive connected</div>;\n}\n```\n\nCheck your provider's API documentation to find a list of available scopes.\n\n## Retrieving the access token\n\nOnce connected with an OAuth provider, obtain the access token with the `account.getAccessToken()` function. Check your provider's API documentation to understand how you can use this token to authorize the user in requests.\n\n```jsx\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function Page() {\n  const user = useUser({ or: 'redirect' });\n  const account = user.useConnectedAccount('google', { or: 'redirect', scopes: ['https://www.googleapis.com/auth/drive.readonly'] });\n  const { accessToken } = account.useAccessToken();\n  const [response, setResponse] = useState<any>();\n\n  useEffect(() => {\n    fetch('https://www.googleapis.com/drive/v3/files', {\n      headers: { Authorization: `Bearer ${accessToken}` }\n    })\n      .then((res) => res.json())\n      .then((data) => setResponse(data))\n      .catch((err) => console.error(err));\n  }, [accessToken]);\n\n  return <div>{response ? JSON.stringify(response) : 'Loading...'}</div>;\n}\n```\n\n## Sign-in default scopes\n\nTo avoid showing the authorization page twice, you can already request scopes during the sign-in flow. This approach is optional. Some applications may prefer to request extra permissions only when needed, while others might want to obtain all necessary permissions upfront.\n\nTo do this, edit the `oauthScopesOnSignIn` setting of your `stackServerApp`:\n\n```jsx title='stack.ts'\nexport const stackServerApp = new StackServerApp({\n  // ...your other settings...\n  oauthScopesOnSignIn: {\n    google: ['https://www.googleapis.com/authdrive.readonly']\n  }\n});\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/oauth.mdx"
      },
      "docs/pages/concepts/orgs-and-teams.mdx": {
        "markdown": "---\nslug: concepts/orgs-and-teams\nsubtitle: Manage teams and team members\n---\n\nTeams provide a structured way to group users and manage their permissions. Users can belong to multiple teams simultaneously, allowing them to represent departments, B2B customers, or projects.\n\nThe server can perform all operations on a team, but the client can only carry out some actions if the user has the necessary permissions. This applies to all actions that can be performed on a server/client-side `User` object and a `Team` object.\n\n## Concepts\n\n### Team permissions \n\nIf you attempt to perform an action without the necessary team permissions, the function will throw an error. Always check if the user has the required permission before performing any action. Learn more about permissions [here](/concepts/permissions).\n\nHere is an example of how to check if a user has a specific permission on the client\n\n```tsx\nconst user = useUser({ or: 'redirect' });\nconst team = user.useTeam('some-team-id');\n\nif (!team) {\n  return <div>Team not found</div>;\n}\n\nconst hasPermission = user.usePermission(team, '$invite_members');\n\nif (!hasPermission) {\n  return <div>No permission</div>;\n}\n\n// Perform corresponding action like inviting a user\n```\n\n### Team profile\n\nA user can have a different profile for each team they belong to (Note this is different to the user's personal profile). This profile contains information like `displayName` and `profileImageUrl`. The team profile can be left empty and it will automatically take the user's personal profile information.\n\nThe team profile is visible to all the other users in the team that have the `$read_members` permission. \n\n## Retrieving a user's teams\n\nYou can list all teams a user belongs to using the `listTeams` or `useTeams` functions or fetch a specific team with `getTeam` or `useTeam`. These functions work on both clients and servers.\n\n<Tabs>\n  <Tab title=\"Client Component\">\n    ```tsx\n    const user = useUser({ or: 'redirect' });\n    const allTeams = user.useTeams();\n    const someTeam = user.useTeam('some-team-id'); // May be null if the user is not a member of this team\n\n    return (\n      <div>\n        {allTeams.map(team => (\n          <div key={team.id}>{team.displayName}</div>\n        ))}\n      </div>\n      <div>\n        {someTeam ? someTeam.displayName : 'Not a member of this team'}\n      </div>\n    );\n    ```\n  </Tab>\n\n  <Tab title=\"Server Component\">\n    ```tsx\n    const user = await stackServerApp.getUser({ or: 'redirect' });\n    const allTeams = await user.listTeams();\n    const someTeam = await user.getTeam('some-team-id'); // May be null if the user is not a member of this team\n\n    return (\n      <div>\n        {allTeams.map(team => (\n          <div key={team.id}>{team.displayName}</div>\n        ))}\n      </div>\n      <div>\n        {someTeam ? someTeam.displayName : 'Not a member of this team'}\n      </div>\n    ```\n  </Tab>\n</Tabs>\n\n## Creating a team\n\nTo create a team, use the `createTeam` function on the `User` object. The user will be added to the team with the default team creator permissions (You can change this on the permissions tab in the Stack dashboard).\n\nOn the client side, this requires enabling the \"client side team creation\" on the team settings tab in the Stack dashboard.\n\n```jsx\nconst team = await user.createTeam({\n  displayName: 'New Team',\n});\n```\n\nTo create a team on the server without adding a specific user, use the `createTeam` function on the `ServerApp` object:\n\n```jsx\nconst team = await stackServerApp.createTeam({\n  displayName: 'New Team',\n});\n```\n\n## Updating a team\n\nYou can update a team with the `update` function on the `Team` object.\n\nOn the client, the user must have the `$update_team` permission to perform this action.\n\n```tsx\nawait team.update({\n  displayName: 'New Name',\n});\n```\n\n## Custom team metadata\n\nYou can store custom metadata on a team object, similar to the user object. The metadata can be any JSON object.\n\n- `clientMetadata`: Can be read and updated on both the client and server sides.\n- `serverMetadata`: Can only be read and updated on the server side.\n- `clientReadOnlyMetadata`: Can be read on both the client and server sides, but can only be updated on the server side.\n\n```tsx\nawait team.update({\n  clientMetadata: {\n    customField: 'value',\n  },\n});\n\nconsole.log(team.clientMetadata.customField); // 'value'\n```\n\n## List users in a team\n\nYou can list all users in a team with the `listUsers` function or the `useUsers` hook on the `Team` object. Note that if you want to get the team profile, you need to get it with `user.teamProfile`.\n\nOn the client, the current user must have the `$read_members` permission in the team to perform this action.\n\n<Tabs>\n  <Tab title=\"Client Component\">\n    ```tsx\n    // ... retrieve the team and ensure user has the necessary permissions\n\n    const users = team.useUsers();\n\n    return (\n      <div>\n        {users.map(user => (\n          <div key={user.id}>{user.teamProfile.displayName}</div>\n        ))}\n      </div>\n    );\n    ```\n  </Tab>\n\n  <Tab title=\"Server Component\">\n    ```tsx\n    // ... retrieve the team\n\n    const users = await team.listUsers();\n    \n    return (\n      <div>\n        {users.map(user => (\n          <div key={user.id}>{user.teamProfile.displayName}</div>\n        ))}\n      </div>\n    );\n    ```\n  </Tab>\n</Tabs>\n\n## Get current user's team profile\n\nYou can get the current user's team profile with the `getTeamProfile` or `useTeamProfile` function on the `User` object. This function returns the team profile for the team with the given ID.\n\n<Tabs>\n  <Tab title=\"Client Component\">\n    ```tsx\n    const teamProfile = user.useTeamProfile(team);\n    ```\n  </Tab>\n  <Tab title=\"Server Component\">\n    ```tsx\n    const teamProfile = await user.getTeamProfile(team);\n    ```\n  </Tab>\n</Tabs>\n\n## Invite a user to a team\n\nYou can invite a user to a team using the `inviteUser` function on the `Team` object. The user will receive an email with a link to join the team.\n\nOn the client side, the current user must have the `$invite_members` permission to perform this action.\n\n```tsx\nawait team.inviteUser(email);\n```\n\n## Adding a user to a team\n\nIf you want to add a user to a team without sending an email, use the `addUser` function on the `ServerTeam` object. This function can only be called on the server side.\n\n```tsx\nawait team.addUser(user.id);\n```\n\n## Removing a user from a team\n\nYou can remove a user from a team with the `removeUser` function on the `Team` object.\n\nOn the client side, the current user must have the `$remove_members` permission to perform this action.\n\n```tsx\nawait team.removeUser(user.id);\n```\n\n## Leaving a team\n\nAll users can leave a team without any permissions required.\n\n```tsx\nconst team = await user.getTeam('some-team-id');\nawait user.leaveTeam(team);\n```\n\n## Deleting a team\n\nYou can delete a team with the `delete` function on the `Team` object.\n\nOn the client side, the current user must have the `$delete_team` permission to perform this action.\n\n```tsx\nawait team.delete();\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/orgs-and-teams.mdx"
      },
      "docs/pages/concepts/team-selection.mdx": {
        "markdown": "---\nslug: concepts/team-selection\nsubtitle: Switch between multiple teams of a user\n---\n\nA user can be a member of multiple teams, so most websites using teams will need a way to select a \"current team\" that the user is working on. There are two primary methods to accomplish this:\n\n- **Deep Link**: Each team has a unique URL, for example, `your-website.com/team/<team-id>`. When a team is selected, it redirects to a page with that team's URL.\n- **Current Team**: When a user selects a team, the app stores the team as a global \"current team\" state. In this way, the URL of the current team might be something like `your-website.com/current-team`, and the URL won't change after switching teams.\n\n## Deep Link Method\nThe deep link method is generally recommended because it avoids some common issues associated with the current team method. If two users share a link while using deep link URLs, the receiving user will always be directed to the correct team's information based on the link. \n\n## Current Team Method\nWhile the current team method can be simpler to implement, it has a downside. If a user shares a link, the recipient might see information about the wrong team (if their \"current team\" is set differently). This method can also cause problems when a user has multiple browser tabs open with different teams.\n\n## Selected Team Switcher\n\nTo facilitate team selection, Stack provides a component that looks like this:\n\n![TeamSwitcher](file:0680a20e-ab62-4313-a378-418b21722742)\n\nYou can import and use the `SelectedTeamSwitcher` component for the \"current team\" method. It updates the `selectedTeam` when a user selects a team:\n\n```jsx \nimport { SelectedTeamSwitcher } from \"@stackframe/stack\";\n\nexport function MyPage() {\n  return (\n    <div>\n      <SelectedTeamSwitcher/>\n    </div>\n  );\n}\n```\n\nTo combine the switcher with the deep link method, you can pass in `urlMap` and `selectedTeam`. The `urlMap` is a function to generate a URL based on the team information, and `selectedTeam` is the team that the user is currently working on. This lets you implement \"deep link\" + \"most recent team\". The component will update the `user.selectedTeam` with the `selectedTeam` prop:\n\n```jsx\n<SelectedTeamSwitcher \n  urlMap={team => `/team/${team.id}`} \n  selectedTeam={team}\n/>\n```\n\nTo implement the \"deep link\" + \"default team\" method, where you update the `selectedTeam` only when the user clicks \"set to default team\" or similar, pass `noUpdateSelectedTeam`:\n\n```jsx\n<SelectedTeamSwitcher \n  urlMap={team => `/team/${team.id}`} \n  selectedTeam={team} \n  noUpdateSelectedTeam\n/>\n```\n\n## Example: Deep Link + Most Recent Team\n\nFirst, create a page at `/app/team/[teamId]/page.tsx` to display information about a specific team:\n\n```jsx title=\"/app/team/[teamId]/page.tsx\" \n\"use client\";\n\nimport { useUser, SelectedTeamSwitcher } from \"@stackframe/stack\";\n\nexport default function TeamPage({ params }: { params: { teamId: string } }) {\n  const user = useUser({ or: 'redirect' });\n  const team = user.useTeam(params.teamId);\n\n  if (!team) {\n    return <div>Team not found</div>;\n  }\n\n  return (\n    <div>\n      <SelectedTeamSwitcher \n        urlMap={team => `/team/${team.id}`} \n        selectedTeam={team}\n      />\n      \n      <p>Team Name: {team.displayName}</p>\n      <p>You are a member of this team.</p>\n    </div>\n  );\n}\n```\n\nNext, create a page to display all teams at `/app/team/page.tsx`:\n\n```jsx title=\"/app/team/page.tsx\"\n\"use client\";\n\nimport { useRouter } from \"next/navigation\";\nimport { useUser } from \"@stackframe/stack\";\n\nexport default function TeamsPage() {\n  const user = useUser({ or: 'redirect' });\n  const teams = user.useTeams();\n  const router = useRouter();\n  const selectedTeam = user.selectedTeam;\n\n  return (\n    <div>\n      {selectedTeam && \n        <button onClick={() => router.push(`/team/${selectedTeam.id}`)}>\n          Most recent team\n        </button>}\n\n      <h2>All Teams</h2>\n      {teams.map(team => (\n        <button key={team.id} onClick={() => router.push(`/team/${team.id}`)}>\n          Open {team.displayName}\n        </button>\n      ))}\n    </div>\n  );\n}\n```\n\nNow, if you navigate to `http://localhost:3000/team`, you should be able to see and interact with the teams.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/team-selection.mdx"
      },
      "docs/pages/concepts/permissions.mdx": {
        "markdown": "---\nslug: concepts/permissions\nsubtitle: Control what each user can do and access with the permission system\n---\n\n## Team Permissions\n\nTeam permissions control what a user can do within each team. You can create and assign permissions to team members from the Stack dashboard. These permissions could include actions like `create_post` or `read_secret_info`, or roles like `admin` or `moderator`. Within your app, you can verify if a user has a specific permission within a team.\n\nPermissions can be nested to create a hierarchical structure. For example, an `admin` permission can include both `moderator` and `user` permissions. We provide tools to help you verify whether a user has a permission directly or indirectly.\n\n### Creating a Permission\n\nTo create a new permission, navigate to the `Team Permissions` section of the Stack dashboard. You can select the permissions that the new permission will contain. Any permissions included within these selected permissions will also be recursively included.\n\n### System Permissions\n\nStack comes with a few predefined team permissions known as system permissions. These permissions start with a dollar sign (`$`). While you can assign these permissions to members or include them within other permissions, you cannot modify them as they are integral to the Stack backend system.\n\n### Checking if a User has a Permission\n\nTo check whether a user has a specific permission, use the `getPermission` method or the `usePermission` hook on the `User` object. This returns the `Permission` object if the user has it; otherwise, it returns `null`. Always perform permission checks on the server side for business logic, as client-side checks can be bypassed. Here's an example:\n\n<Tabs>\n  <Tab title=\"Client Component\">\n    \n    ```tsx title=\"Check user permission on the client\"\n    \"use client\";\n    import { useUser } from \"@stackframe/stack\";\n\n    export function CheckUserPermission() {\n      const user = useUser({ or: 'redirect' });\n      const permission = user.usePermission('read');\n\n      // Don't rely on client-side permission checks for business logic.\n      return (\n        <div>\n          {permission ? 'You have the read permission' : 'You shall not pass'}\n        </div>\n      );\n    }\n    ```\n  </Tab>\n  <Tab title=\"Server Component\">\n    \n    ```tsx title=\"Check user permission on the server\"\n    import { stackServerApp } from \"@/stack\";\n\n    export default async function CheckUserPermission() {\n      const user = await stackServerApp.getUser({ or: 'redirect' });\n      const permission = await user.getPermission('read');\n\n      // This is a server-side check, so it's secure.\n      return (\n        <div>\n          {permission ? 'You have the read permission' : 'You shall not pass'}\n        </div>\n      );\n    }\n    ```\n  </Tab>\n</Tabs>\n\n### Listing All Permissions of a User\n\nTo get a list of all permissions a user has, use the `listPermissions` method or the `usePermissions` hook on the `User` object. This method retrieves both direct and indirect permissions. Here is an example:\n\n<Tabs>\n  <Tab title=\"Client Component\" default>\n\n    ```tsx title=\"List user permissions on the client\"\n    \"use client\";\n    import { useUser } from \"@stackframe/stack\";\n\n    export function DisplayUserPermissions() {\n      const user = useUser({ or: 'redirect' });\n      const permissions = user.usePermissions();\n\n      return (\n        <div>\n          {permissions.map(permission => (\n            <div key={permission.id}>{permission.id}</div>\n          ))}\n        </div>\n      );\n    }\n    ```\n  </Tab>\n  <Tab title=\"Server Component\">\n\n    ```tsx title=\"List user permissions on the server\"\n    import { stackServerApp } from \"@/stack\";\n\n    export default async function DisplayUserPermissions() {\n      const user = await stackServerApp.getUser({ or: 'redirect' });\n      const permissions = await user.listPermissions();\n\n      return (\n        <div>\n          {permissions.map(permission => (\n            <div key={permission.id}>{permission.id}</div>\n          ))}\n        </div>\n      );\n    }\n    ```\n  </Tab>\n</Tabs>\n\n### Granting a Permission to a User\n\nTo grant a permission to a user, use the `grantPermission` method on the `ServerUser`. Here's an example:\n\n```tsx\nconst team = await stackServerApp.getTeam('teamId');\nconst user = await stackServerApp.getUser();\nawait user.grantPermission(team, 'read');\n```\n\n### Revoking a Permission from a User\n\nTo revoke a permission from a user, use the `revokePermission` method on the `ServerUser`. Here's an example:\n\n```tsx\nconst team = await stackServerApp.getTeam('teamId');\nconst user = await stackServerApp.getUser();\nawait user.revokePermission(team, 'read');\n```\n\nBy following these guidelines, you can efficiently manage and verify team permissions within your application.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/permissions.mdx"
      },
      "docs/pages/concepts/webhooks.mdx": {
        "markdown": "---\nslug: concepts/webhooks\nsubtitle: Syncing team & user data with your backend\n---\n\nWebhooks are a powerful way to keep your backend in sync with Stack. They allow you to receive real-time updates when events occur in your Stack project, such as when a user or team is created, updated, or deleted.\n\n## Setting up webhooks\n\nIn the Stack dashboard, you can create a webhook endpoint in the \"Webhooks\" section. After creating this endpoint with your server URL, you will start receiving POST requests with a JSON payload at that endpoint. The event payload will look something like this:\n\n```json\n{\n  \"type\": \"team.created\",\n  \"data\": {\n    \"id\": \"2209422a-eef7-4668-967d-be79409972c5\",\n    \"display_name\": \"My Team\",\n    ...\n  }\n}\n```\n\n## Testing webhooks locally\n\nYou can use services like [Svix Playground](https://www.svix.com/play/) or [Webhook.site](https://webhook.site/) to test the receiving of webhooks or relay them to your local development environment.\n\n## Verifying webhooks\n\nTo ensure the webhook is coming from Stack (and not from a malicious actor) and is not prone to replay attacks, you should verify the request. \n\nStack signs the webhook payload with a secret key that you can find in the endpoint details on the dashboard. You can verify the signature using the Svix client library. Check out the [Svix documentation](https://docs.svix.com/receiving/verifying-payloads/how) for instructions on how to verify the signature in JavaScript, Python, Ruby, and other languages. Here is an quick example in JavaScript:\n\n```jsx\nimport { Webhook } from \"svix\";\n\nconst secret = \"<from the dashboard>\";\nconst headers = {\n  \"svix-id\": \"<from the webhook request headers>\",\n  \"svix-timestamp\": \"<from the webhook request headers>\",\n  \"svix-signature\": \"<from the webhook request headers>\",\n};\nconst payload = \"<the webhook request body>\";\n\nconst wh = new Webhook(secret);\n// Throws on error, returns the verified content on success\nconst payload = wh.verify(payload, headers);\n```\n\nIf you do not want to install the Svix client library or are using a language that is not supported, you can [verify the signature manually](https://docs.svix.com/receiving/verifying-payloads/how-manual).\n\n## Event types\n\nPlease refer to the webhook endpoint API reference for more details on the available event types and their payload structures.\n\n- [user.created](/rest-api/webhooks/users/user-created)\n- [user.updated](/rest-api/webhooks/users/user-updated)\n- [user.deleted](/rest-api/webhooks/users/user-deleted)\n- [team.created](/rest-api/webhooks/teams/team-created)\n- [team.updated](/rest-api/webhooks/teams/team-updated)\n- [team.deleted](/rest-api/webhooks/teams/team-deleted)\n\n## Examples\n\nSome members of the community have shared their webhook implementations. For example, [here is an example by Clark Gredoña](https://gist.github.com/clarkg/56ffad44949826ae3efe0a431b6021c4) that validates the Webhook schema and update a database user.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/webhooks.mdx"
      },
      "docs/pages/concepts/backend-integration.mdx": {
        "markdown": "---\nslug: concepts/backend-integration\nsubtitle: Integrate Stack Auth with your own server with the REST APIs\n---\n\nTo authenticate your endpoints, you need to send the user's access token in the headers of the request to your server, and then make a request to Stack's server API to verify the user's identity.\n\n## Sending requests to your server endpoints\n\nTo authenticate your own server endpoints using Stack's server API, you need to protect your endpoints by sending the user's access token in the headers of the request.\n\nOn the client side, you can retrieve the access token from the `user` object by calling `user.getAuthJson()`. This will return an object containing `accessToken`.\n\nThen, you can call your server endpoint with these two tokens in the headers, like this:\n\n```typescript\nconst { accessToken } = await user.getAuthJson();\nconst response = await fetch('/api/users/me', {\n  headers: {\n    'x-stack-access-token': accessToken,\n  },\n  // your other options and parameters\n});\n```\n\n## Authenticating the user on the server endpoints\n\nOn the server side, you can extract the access token from the headers of the request and use it to [authenticate the user with the REST API](/rest-api/auth).\n\n<Tabs>\n  <Tab title=\"Node.js\">\n    ```javascript\n    const url = 'https://api.stack-auth.com/api/v1/users/me';\n    const headers = {\n      'x-stack-access-type': 'server',\n      'x-stack-project-id': 'generated on the Stack Auth dashboard',\n      'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n      'x-stack-access-token': 'access token from the headers',\n    };\n\n    fetch(url, { headers })\n      .then(response => response.json())\n      .then(data => {\n        if (data.id) {\n          console.log('User is authenticated');\n        } else {\n          console.log('User is not authenticated');\n        }\n      });\n    ```\n  </Tab>\n\n  <Tab title=\"Python\">\n   ```python\n    import requests\n\n    url = 'https://api.stack-auth.com/api/v1/users/me'\n    headers = {\n      'x-stack-access-type': 'server',\n      'x-stack-project-id': 'generated on the Stack Auth dashboard',\n      'x-stack-secret-server-key': 'generated on the Stack Auth dashboard',\n      'x-stack-access-token': 'access token from the headers',\n    }\n\n    response = requests.get(url, headers=headers)\n    if (response.json()['id'] is not None):\n      print('User is authenticated')\n    else:\n      print('User is not authenticated')\n    ```\n  </Tab>\n</Tabs>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/concepts/backend-integration.mdx"
      },
      "docs/pages/customization/dark-mode.mdx": {
        "markdown": "---\nslug: customization/dark-mode\n---\n\nStack components support light and dark mode out of the box. You can switch between light and dark mode using [next-themes](https://github.com/pacocoursey/next-themes) (or any other library that changes the `data-theme` or `class` to `dark` or `light` attribute of the `html` element).\n\nHere is an example of how to set up next-themes with Stack (find more details in the [next-themes documentation](https://github.com/pacocoursey/next-themes)):\n\n1. Install next-themes:\n\n  ```bash\n  npm install next-themes\n  ```\n\n2. Add the `ThemeProvider` to your `layout.tsx` file:\n\n  ```jsx\n  import { ThemeProvider } from 'next-themes'\n\n  export default function Layout({ children }) {\n    return (\n      <ThemeProvider>\n        <StackTheme>\n          {children}\n        </StackTheme>\n      </ThemeProvider>\n    )\n  }\n  ```\n\n3. Build a color mode switcher component:\n\n  ```jsx\n  'use client';\n  import { useTheme } from 'next-themes'\n\n  export default function ColorModeSwitcher() {\n    const { theme, setTheme } = useTheme()\n    return (\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle theme\n      </button>\n    )\n  }\n  ```\n\nNow if you put the `ColorModeSwitcher` component in your app, you should be able to switch between light and dark mode. There should be no flickering or re-rendering of the page after reloading.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/customization/dark-mode.mdx"
      },
      "docs/pages/customization/custom-styles.mdx": {
        "markdown": "---\nslug: customization/custom-styles\n---\n\nIf you want to spend minimal time on styling but still want to align with your brand, you can customize the colors of the Stack app. Colors are stored in React context and can be easily overridden.\n\nThere are some color variables that you can customize:\n\n- `background`\n- `foreground`\n- `card`\n- `cardForeground`\n- `popover`\n- `popoverForeground`\n- `primary`\n- `primaryForeground`\n- `secondary`\n- `secondaryForeground`\n- `muted`\n- `mutedForeground`\n- `accent`\n- `accentForeground`\n- `destructive`\n- `destructiveForeground`\n- `border`\n- `input`\n- `ring`\n\nAnd some other variables:\n\n- `radius`: border radius of components like buttons, inputs, etc.\n\nThese variables are css variables so you can use the syntax like `hsl(0, 0%, 0%)`, `black`, `#fff`, etc.\n\nThe colors can be different for light and dark mode. You can pass these into the `StackTheme` component (in your `layout.tsx` file if you followed the get started guide) as follows:\n\n```jsx title=\"app/layout.tsx\"\nconst theme = {\n  light: {\n    primary: 'red',\n  },\n  dark: {\n    primary: '#00FF00',\n  },\n  radius: '8px',\n}\n\n// ...\n\n<StackTheme theme={theme}>\n  {/* children */}\n</StackTheme>\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/customization/custom-styles.mdx"
      },
      "docs/pages/customization/internationalization.mdx": {
        "markdown": "---\nslug: customization/internationalization\n---\n\n## Setup\n\nInternationalization with Stack is very straightforward. Simply pass the `lang` prop to the `StackProvider` component, and all the pages will be translated to the specified language.\n\n```jsx title=\"layout.tsx\"\n...\n  <StackProvider ... lang={'de-DE'}>\n    ...\n  </StackProvider>\n...\n```\n\nBy default, if no language is provided, it will be set to `en-US`.\n\nYou can choose which languages to use by employing your own methods, such as storing the language in `localStorage` or using the user's browser language. \n\n## Supported languages\n\n- `en-US`: English (United States)\n- `de-DE`: German (Germany)\n- `es-419`: Spanish (Latin America)\n- `es-ES`: Spanish (Spain)\n- `fr-CA`: French (Canada)\n- `fr-FR`: French (France)\n- `it-IT`: Italian (Italy)\n- `pt-BR`: Portuguese (Brazil)\n- `pt-PT`: Portuguese (Portugal)\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/customization/internationalization.mdx"
      },
      "docs/pages/customization/custom-pages.mdx": {
        "markdown": "---\nslug: customization/custom-pages\n---\n\nIf you want to have full control over the layout and logic flow, you can build your own pages using our built-in components or low-level functions.\n\nBy default, `StackHandler` creates all pages you need, however, you can replace them with your own pages.\n\n## Simple Example\n\nFor example, if you want to create a custom sign-in page with a customized title on the top, you can create a file at `app/signin/page.tsx`:\n\n```tsx title=\"app/signin/page.tsx\"\nimport { SignIn } from \"@stackframe/stack\";\n\nexport default function CustomSignInPage() {\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <SignIn />\n    </div>\n  );\n}\n```\n\nThen you can instruct the Stack app in `stack.ts` to use your custom sign in page:\n\n```tsx title=\"stack.ts\"\nexport const stackServerApp = new StackServerApp({\n  // ...\n  // add these three lines\n  urls: {\n    signIn: '/signin',\n  }\n});\n```\n\nYou are now all set! If you visit the `/signin` page, you should see your custom sign in page. If your user visits a protected page or the old `/handler/sign-in` URL, they will be redirected to your new sign-in page.\n\nFor more examples, please refer to the [Examples](/customization/page-examples/signin).\n\n\n## From scratch\n\nWe also provide the low-level functions powering our components, so that you can build your own logic. For example, to build a custom OAuth sign-in button, create a file at `app/signin/page.tsx`:\n\n```tsx title=\"app/signin/page.tsx\"\n'use client';\nimport { useStackApp } from \"@stackframe/stack\";\n\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <button onClick={async () => {\n        // this will redirect to the OAuth provider's login page\n        await app.signInWithOAuth('google');\n      }}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}\n```\n\nAgain, edit the Stack app in `stack.ts` to use your custom sign in page:\n\n```tsx title=\"stack.ts\"\nexport const stackServerApp = new StackServerApp({\n  // ...\n  // add these three lines\n  urls: {\n    signIn: '/signin',\n  }\n});\n```\n\nAs above, visit the `/signin` page to see your newly created custom OAuth page.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/customization/custom-pages.mdx"
      },
      "docs/pages/customization/page-examples/sign-in.mdx": {
        "markdown": "---\nslug: customization/page-examples/signin\n---\n\n## Custom page with `SignIn` component\n\n```tsx\n'use client';\nimport { SignIn } from \"@stackframe/stack\";\n\nexport default function DefaultSignIn() {\n  // optionally redirect to some other page if the user is already signed in\n  // const user = useUser();\n  // if (user) { redirect to some other page }\n  return <SignIn fullPage />;\n}\n```\n\nYou can also use `useUser` at the beginning of the sign in page to check if wether the user is already signed in and redirect them to some other page if they are.\n\n\n## Other useful components\n\n`CredentialSignIn`: A component that contains a form for signing in with email and password.\n\n`OAuthGroup`: A list of available OAuth provider signin buttons components. The available provider list is fetched from the server.\n\n`OAuthButton`: A single OAuth sign in button.\n\n\n## Custom OAuth Sign In\n\n```tsx\n'use client';\nimport { useStackApp } from \"@stackframe/stack\";\n\nexport default function CustomOAuthSignIn() {\n  const app = useStackApp();\n\n  return (\n    <div>\n      <h1>My Custom Sign In page</h1>\n      <button onClick={async () => {\n        // this will redirect to the OAuth provider's login page\n        await app.signInWithOAuth('google');\n      }}>\n        Sign In with Google\n      </button>\n    </div>\n  );\n}\n```\n\n## Custom Credential Sign In\n\n```tsx\n'use client';\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomCredentialSignIn() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (!password) {\n      setError('Please enter your password');\n      return;\n    }\n    // this will redirect to app.urls.afterSignIn if successful, you can customize it in the StackServerApp constructor\n    const result = await app.signInWithCredential({ email, password });\n    // It is better to handle each error code separately, but we will just show the error code directly for simplicity here\n    if (result.status === 'error') {\n      setError(result.error.message);\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>\n      {error}\n      <input type='email' placeholder=\"email@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <input type='password' placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button type='submit'>Sign In</button>\n    </form>\n  );\n}\n```\n\n## Custom Magic Link Sign In\n\n```tsx\n'use client';\n\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomCredentialSignIn() {\n  const [email, setEmail] = useState('');\n  const [error, setError] = useState('');\n  const [message, setMessage] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    // this will redirect to app.urls.afterSignIn if successful, you can customize it in the StackServerApp constructor\n    const result = await app.sendMagicLinkEmail(email);\n    // It is better to handle each error code separately, but we will just show the error code directly for simplicity here\n    if (result.status === 'error') {\n      setError(result.error.message);\n    } else {\n      setMessage('Magic link sent! Please check your email.');\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>\n      {error}\n      {message ? \n        <div>{message}</div> :\n        <>\n          <input type='email' placeholder=\"email@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} />\n          <button type='submit'>Send Magic Link</button>\n        </>}\n    </form>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/customization/page-examples/sign-in.mdx"
      },
      "docs/pages/customization/page-examples/sign-up.mdx": {
        "markdown": "---\nslug: customization/page-examples/signup\n---\n\n## Custom page with `SignUp` component\n\n```tsx\n'use client';\nimport { SignUp } from \"@stackframe/stack\";\n\nexport default function DefaultSignUp() {\n  // optionally redirect to some other page if the user is already signed in\n  // const user = useUser();\n  // if (user) { redirect to some other page }\n  return <SignUp fullPage />;\n}\n```\n\nYou can also use `useUser` at the beginning of the sign in page to check if wether the user is already signed in and redirect them to some other page if they are. \n\n## Other useful components\n\n`CredentialSignUp`: A component that contains a form for signing in with email and password.\n\n`OAuthGroup`: A list of available OAuth provider sign-up buttons components. The available provider list is fetched from the server.\n\n`OAuthButton`: A single OAuth sign-up button.\n\n## Custom OAuth Sign Up\n\nOAuth sign-in and sign-up shares the same function. Check out the [Sign In example](/customization/page-examples/signin#custom-oauth-sign-in) for more information.\n\n## Custom Credential Sign Up\n\n```tsx\n'use client';\n\nimport { useStackApp } from \"@stackframe/stack\";\nimport { useState } from \"react\";\n\nexport default function CustomCredentialSignUp() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const app = useStackApp();\n\n  const onSubmit = async () => {\n    if (!password) {\n      setError('Please enter your password');\n      return;\n    }\n    // this will redirect to app.urls.afterSignUp if successful, you can customize it in the StackServerApp constructor\n    const result = await app.signUpWithCredential({ email, password });\n    // It is better to handle each error code separately, but we will just show the error code directly for simplicity here\n    if (result.status === 'error') {\n      setError(result.error.message);\n    }\n  };\n  \n  return (\n    <form onSubmit={(e) => { e.preventDefault(); onSubmit(); } }>\n      {error}\n      <input type='email' placeholder=\"email@example.com\" value={email} onChange={(e) => setEmail(e.target.value)} />\n      <input type='password' placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button type='submit'>Sign Up</button>\n    </form>\n  );\n}\n```\n\n## Custom Magic Link Sign Up\n\nMagic link sign-in and sign-up shares the same function. Check out the [Sign In example](/customization/page-examples/signin#custom-magic-link-sign-in) for more information.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/customization/page-examples/sign-up.mdx"
      },
      "docs/pages/others/supabase.mdx": {
        "markdown": "---\nslug: others/supabase\nsubtitle: Integrate Stack Auth with Supabase RLS\n---\n\nThis guide shows how to integrate Stack Auth with Supabase row level security (RLS).\n\n<Note>\n  This guide only focuses on the RLS/JWT integration and does not sync user data between Supabase and Stack. You should use [webhooks](/concepts/webhooks) to achieve data sync.\n</Note>\n\n## Setup\n\nLet's create a sample table and some RLS policies to demonstrate how to integrate Stack Auth with Supabase RLS. You can apply the same logic to your own tables and policies.\n<Steps>\n### Setup Supabase\nFirst, let's create a Supabase project, then go to the [SQL Editor](https://supabase.com/dashboard/project/_/sql/new) and create a new table with some sample data and RLS policies.\n\n```sql title=\"Supabase SQL Editor\"\n-- Create the 'data' table\nCREATE TABLE data (\n  id bigint PRIMARY KEY,\n  text text NOT NULL,\n  user_id UUID\n);\n\n-- Insert sample data\nINSERT INTO data (id, text, user_id) VALUES\n  (1, 'Everyone can see this', NULL),\n  (2, 'Only authenticated users can see this', NULL),\n  (3, 'Only user with specific id can see this', NULL);\n\n-- Enable Row Level Security\nALTER TABLE data ENABLE ROW LEVEL SECURITY;\n\n-- Allow everyone to read the first row\nCREATE POLICY \"Public read\" ON \"public\".\"data\" TO public\nUSING (id = 1);\n\n-- Allow authenticated users to read the second row\nCREATE POLICY \"Authenticated access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 2);\n\n-- Allow only the owner of the row to read it\nCREATE POLICY \"User access\" ON \"public\".\"data\" TO authenticated\nUSING (id = 3 AND auth.uid() = user_id);\n```\n\n### Setup a new Next.js project\n\nNow let's create a new Next.js project and install Stack Auth and Supabase client. (more details on [Next.js setup](https://nextjs.org/docs/getting-started/installation), [Stack Auth setup](/getting-started/setup), and [Supabase setup](https://supabase.com/docs/guides/getting-started/quickstarts/nextjs))\n\n```bash title=\"Terminal\"\nnpx create-next-app@latest -e with-supabase stack-supabase\ncd stack-supabase\nnpx @stackframe/init-stack@latest\n```\n\nNow copy the environment variables from the Supabase dashboard to the `.env.local` file: \n- `NEXT_PUBLIC_SUPABASE_URL`\n- `NEXT_PUBLIC_SUPABASE_ANON_KEY`\n- `SUPABASE_JWT_SECRET`\n\nCopy environment variables from the Stack dashboard to the `.env.local` file.\n- `NEXT_PUBLIC_STACK_PROJECT_ID`\n- `NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY`\n- `STACK_SECRET_SERVER_KEY`\n\n### Set up Supbase client\n\nNow let's create a server action that mints a supabase JWT with the Stack Auth user ID if the user is authenticated.\n\n```tsx title=\"/utils/actions.ts\"\n'use server';\n\nimport { stackServerApp } from \"@/stack\";\nimport * as jose from \"jose\";\n\nexport const getSupabaseJwt = async () => {\n  const user = await stackServerApp.getUser();\n\n  if (!user) {\n    return null;\n  }\n\n  const token = await new jose.SignJWT({\n    sub: user.id,\n    role: \"authenticated\",\n  })\n    .setProtectedHeader({ alg: \"HS256\" })\n    .setIssuedAt()\n    .setExpirationTime('1h')\n    .sign(new TextEncoder().encode(process.env.SUPABASE_JWT_SECRET));\n\n  return token;\n};\n```\n\nAnd now create a helper function to create a Supabase client with the JWT signed by the server action\n\n```tsx title=\"/utils/supabase-client.ts\"\nimport { createBrowserClient } from \"@supabase/ssr\";\nimport { getSupabaseJwt } from \"./actions\";\n\nexport const createSupabaseClient = () => {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    { accessToken: async () => await getSupabaseJwt() || \"\" }\n  );\n}\n```\n\n### Fetch data from Supabase\n\nLet's create an example page that fetches data from Supabase and displays it.\n\n```tsx title=\"/app/page.tsx\"\n'use client';\n\nimport { createSupabaseClient } from \"@/utils/supabase-client\";\nimport { useStackApp, useUser } from \"@stackframe/stack\";\nimport Link from \"next/link\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Page() {\n  const app = useStackApp();\n  const user = useUser();\n  const supabase = createSupabaseClient();\n  const [data, setData] = useState<null | any[]>(null);\n\n  useEffect(() => {\n    supabase.from(\"data\").select().then(({ data }) => setData(data ?? []));\n  }, []);\n\n  const listContent = data === null ? \n    <p>Loading...</p> :\n    data.length === 0 ?\n      <p>No notes found</p> :\n      data.map((note) => <li key={note.id}>{note.text}</li>);\n\n  return (\n    <div>\n      {\n        user ? \n        <>\n          <p>You are signed in</p>\n          <p>User ID: {user.id}</p>\n          <Link href={app.urls.signOut}>Sign Out</Link>\n        </> : \n        <Link href={app.urls.signIn}>Sign In</Link>\n      }\n      <h3>Supabase data</h3>\n      <ul>{listContent}</ul>\n    </div>\n  )\n}\n```\n\nNow you should be able to compare the data you can view with an anonymous user, an authenticated user. You can also add your user Id to the row 3 of the Supabase table, and you should be able to see the row if and only if you are signed in with that user.\n\n</Steps>\n\nYou can find the full example [here on GitHub](https://github.com/stack-auth/stack/tree/main/examples/supabase).\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/others/supabase.mdx"
      },
      "docs/pages/others/self-host.mdx": {
        "markdown": "---\nslug: others/self-host\nsubtitle: Self-host Stack Auth on your own server\n---\n\nStack Auth is fully open-source and can be self-hosted on your own infrastructure. This guide will introduce each component of the project and how to set them up.\n\n<Note>\nIf you are unsure whether you should self-host, here are some things to consider:\n\n- **Complexity**: Stack Auth is a complex project with many interdependent services. Self-hosting requires managing these services and ensuring they work together seamlessly.\n- **Updates**: Stack Auth is a rapidly evolving project with frequent feature and fix releases. Self-hosting requires you to manage updates and apply them timely.\n- **Reliability**: Self-hosting requires you to ensure the reliability of your infrastructure. Downtimes and outages can be costly to handle.\n- **Security**: Self-hosting requires ensuring the security of your infrastructure. A compromised service can affect your users.\n\nFor most users, we recommend using [Stack Auth's cloud hosted solution](https://app.stack-auth.com). However, if you understand the above challenges and are comfortable managing them, follow the instructions below to self-host!\n</Note>\n\n## Services\n\nOn a high level, Stack Auth is composed of the following services:\n- **API backend**: The core of Stack Auth, providing the REST API that the dashboard and your app connect to. This is what [api.stack-auth.com](https://api.stack-auth.com) provides.\n- **Dashboard**: The interface for managing users, teams, auth methods, etc. This is available at [app.stack-auth.com](https://app.stack-auth.com).\n- **Client SDK**: An SDK used to connect your app to the Stack Auth API backend, wrapping API calls and providing easy-to-use interfaces. More details [here](/getting-started/setup).\n- **Postgres database**: Used to store all user data. We use [Prisma](https://prisma.io) as the ORM and manage the database schema migrations.\n- **Svix**: Used to send webhooks. Svix is open-source and can be self-hosted, but also offers a cloud hosted solution. More on Svix [here](https://svix.com)\n- **Email server**: We use [Inbucket](https://inbucket.org) as a local email server for development and a separate SMTP server for production. Any email service supporting SMTP will work.\n\n## Local development\n\n### Setup\n\nClone the repository and check out the directory:\n\n```sh\ngit clone git@github.com:stack-auth/stack.git\ncd stack\n```\n\nPre-populated `.env` files for the setup below are available and used by default in `.env.development` in each package. Copy all the `.env.development` files to `.env.local` in the respective packages for local development.\n\nIn a terminal, start the dependencies (Postgres and Inbucket) as Docker containers:\n\n```sh\ndocker compose -f dependencies.compose.yaml up\n```\n\nThen open a new terminal:\n\n```sh\npnpm install\n\n# Build everything once\npnpm run build\n\n# Initialize the database and seed it with some data\npnpm prisma db push\npnpm prisma db seed\n\n# Run code generation (repeat this after e.g., changing the Prisma schema). This is part of the build script but faster.\npnpm run codegen\n\n# Start the dev server\npnpm run dev\n\n# In a different terminal, run tests in watch mode\npnpm run test\n```\n\nYou can now open the dashboard at [http://localhost:8101](http://localhost:8101), the API on port 8102, a demo on port 8103, docs on port 8104, Inbucket (emails) on port 8105, and Prisma Studio on port 8106.\n\nYour IDE may show errors on all `@stackframe/XYZ` imports. To fix this, restart the TypeScript language server; for example, in VSCode, you can open the command palette (Ctrl+Shift+P) and run `Developer: Reload Window` or `TypeScript: Restart TS server`.\n\n### Database migrations\n\nIf you make changes to the Prisma schema, you need to run the following command to create a migration:\n\n```sh\npnpm run prisma migrate dev\n```\n\n## Production deployment\n\n### Database, Svix, email\n\nDeploy these services with your preferred platform. Copy the URLs/API keys—you'll need them in the next step.\n\n### API backend\n\nClone the repository and check out the root directory:\n\n```sh\ngit clone git@github.com:stack-auth/stack.git\ncd stack\n```\n\nSet all the necessary environment variables (you can check out `apps/backend/.env`). Note that `STACK_BASE_URL` should be the URL of your deployed domain (e.g., https://your-backend-url.com).\n\nBuild and start the server:\n\n```sh\npnpm install\npnpm build:backend\npnpm start:backend\n```\n\n### Dashboard\n\nClone the repository (if you are running it on a separate server, or skip this step if you are using the same server as the API backend) and check out the dashboard directory:\n\n```sh\ngit clone git@github.com:stack-auth/stack.git\ncd stack\n```\n\nSet all the necessary environment variables (you can check out `apps/dashboard/.env`). Note that `NEXT_PUBLIC_STACK_URL` should be the URL of your deployed backend (e.g., https://your-backend-url.com).\n\nBuild and start the server:\n\n```sh\npnpm install\npnpm build:dashboard\npnpm start:dashboard\n```\n\n### Initialize the database\n\nYou need to initialize the database with the following command with the backend environment variables set:\n\n```sh\npnpm prisma migrate deploy\n```\n\nThe database is still empty; you need to create a project with the ID \"internal\" used by the dashboard to authenticate itself. You can do this with the following command:\n\n```sh\npnpm prisma db seed\n```\n\nNow you can go to the dashboard (e.g., https://your-dashboard-url.com) and sign up for an account.\n\nTo manage your dashboard configs with this account, manually go into the database, find the user you just created, and add `{ managedProjectIds: [\"internal\"] }` to the `serverMetadata` jsonb column.\n\nGo back to the dashboard, refresh the page, and you should see the \"Stack Dashboard\" project. We recommend disabling new user sign-ups to your internal project to avoid unauthorized account and project creations.\n\nNow, create a new project for your app and follow the [normal setup process](/getting-started/setup). Add `NEXT_PUBLIC_STACK_URL=https://your-backend-url.com` to your app's environment variables so that it connects to your API backend instead of the default Stack Auth API backend (https://api.stack-auth.com).\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/others/self-host.mdx"
      },
      "docs/pages/components/user-button.mdx": {
        "markdown": "---\nslug: components/user-button\n---\n\nRenders a user button component with optional user information, color mode toggle, and extra menu items.\n\n![UserButton](file:64adbb26-a23d-4282-9d78-05ce53cb9984)\n\n## Props\n\n- `showUserInfo`: `boolean` - Whether to display user information (display name and email) or only show the avatar.\n- `colorModeToggle`: `() => void | Promise<void>` - Function to be called when the color mode toggle button is clicked. If specified, a color mode toggle button will be shown.\n- `extraItems`: `Array<{text: string, icon: React.ReactNode, onClick: Function}>` - Additional menu items to display.\n\n## Example\n\n```tsx\n'use client';\nimport { UserButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>User Button</h1>\n      <UserButton\n        showUserInfo={true}\n        colorModeToggle={() => { console.log(\"color mode toggle clicked\") }}\n        extraItems={[{\n          text: 'Custom Action',\n          icon: <CustomIcon />,\n          onClick: () => console.log('Custom action clicked')\n        }]}\n      />\n    </div>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/user-button.mdx"
      },
      "docs/pages/components/selected-team-switcher.mdx": {
        "markdown": "---\nslug: components/selected-team-switcher\n---\n\nA React component for switching between teams. It displays a dropdown of teams and allows the user to select a team.\n\n![SelectedTeamSwitcher](file:31e94df1-ecf0-457d-8a8a-d2a47e7d57c1)\n\nFor a comprehensive guide on using this component, refer to our [Team Selection documentation](/concepts/team-selection).\n\n## Props\n\n- `urlMap` (optional): `(team: Team) => string` - A function that maps a team to a URL. If provided, the component will navigate to this URL when a team is selected.\n- `selectedTeam` (optional): `Team` - The initially selected team.\n- `noUpdateSelectedTeam` (optional): `boolean` - If true, prevents updating the selected team in the user's settings when a new team is selected. Default is false.\n\n## Example\n\n```tsx\nimport { SelectedTeamSwitcher } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Team Switcher</h1>\n      <SelectedTeamSwitcher\n        urlMap={(team) => `/team/${team.id}`}\n        selectedTeam={currentTeam}\n        noUpdateSelectedTeam={false}\n      />\n    </div>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/selected-team-switcher.mdx"
      },
      "docs/pages/components/account-settings.mdx": {
        "markdown": "---\nslug: components/account-settings\n---\n\nRenders an account settings page with customizable sidebar items and optional full-page layout.\n\n## Props\n\n- `fullPage` (optional): `boolean` - If true, renders the component in full-page mode.\n- `extraItems` (optional): `Array` - Additional items to be added to the sidebar. Each item should have the following properties:\n  - `title`: `string` - The title of the item.\n  - `icon`: `LucideIcon` - The icon component for the item.\n  - `content`: `React.ReactNode` - The content to be rendered for the item.\n  - `subpath`: `string` - The subpath for the item's route.\n\n## Example\n\n```tsx\nimport { AccountSettings } from '@stackframe/stack';\n\nexport default function MyAccountPage() {\n  return (\n    <AccountSettings\n      fullPage={true}\n      extraItems={[{\n        title: 'Custom Section',\n        icon: CustomLucideIcon,\n        content: <CustomContent />,\n        subpath: '/custom',\n      }]}\n    />\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/account-settings.mdx"
      },
      "docs/pages/components/sign-in.mdx": {
        "markdown": "---\nslug: components/sign-in\n---\n\nRenders a sign-in component with customizable options.\n\n![SignIn](file:25f0c839-ca18-4351-83bd-956c91a467ee)\n\nFor more information, please refer to the [custom pages guide](/customization/custom-pages).\n\n## Props\n\n- `fullPage` (optional): `boolean` - If true, renders the sign-in page in full-page mode.\n- `automaticRedirect` (optional): `boolean` - If true, redirect to `afterSignIn` URL if the user is already signed-in.\n- `extraInfo` (optional): `React.ReactNode` - Additional content to be displayed on the sign-in page.\n- `firstTab` (optional): `'magic-link' | 'password'` - Determines which tab is initially active. Defaults to 'magic-link' if not specified.\n\n## Example\n\n```tsx\nimport { SignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <SignIn\n        fullPage={true}\n        automaticRedirect={true}\n        firstTab='password'\n        extraInfo={<>When signing in, you agree to our <a href=\"/terms\">Terms</a></>}\n      />\n    </div>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/sign-in.mdx"
      },
      "docs/pages/components/sign-up.mdx": {
        "markdown": "---\nslug: components/sign-up\n---\n\nA component that renders a sign-up page with various customization options.\n\n![SignUp](file:526009f0-d4d4-4b8e-9567-2ae570078c91)\n\nFor more information, please refer to the [custom pages guide](/customization/custom-pages).\n\n## Props\n\n- `fullPage` (optional): `boolean` - If true, renders the sign-up page in full-page mode.\n- `automaticRedirect` (optional): `boolean` - If true, redirect to `afterSignUp` URL if the user is already signed-in.\n- `noPasswordRepeat` (optional): `boolean` - If true, removes the password confirmation field.\n- `extraInfo` (optional): `React.ReactNode` - Additional information to display on the sign-up page.\n- `firstTab` (optional): `'magic-link' | 'password' - Determines which tab is initially active. Defaults to 'magic-link' if not specified.\n\n## Example\n\n```tsx\nimport { SignUp } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <SignUp\n        fullPage={true}\n        automaticRedirect={true}\n        firstTab='password'\n        extraInfo={<>By signing up, you agree to our <a href=\"/terms\">Terms</a></>}\n      />\n    </div>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/sign-up.mdx"
      },
      "docs/pages/components/credential-sign-in.mdx": {
        "markdown": "---\nslug: components/credential-sign-in\n---\n\nA component that renders a sign-in form with email and password fields.\n\n![CredentialSignIn](file:efafc5de-b619-4c84-9050-84577601f8e6)\n\nNote that if credential sign-in is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.\n\nFor more information, please refer to the [custom pages guide](/customization/custom-pages).\n\n## Props\n\nThis component does not accept any props.\n\n## Example\n\n```tsx\nimport { CredentialSignIn } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <CredentialSignIn />\n    </div>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/credential-sign-in.mdx"
      },
      "docs/pages/components/credential-sign-up.mdx": {
        "markdown": "---\nslug: components/credential-sign-up\n---\n\nA component that renders a sign-up form with email and password fields.\n\n![CredentialSignUp](file:fa183cce-a9c8-4c32-b18a-1e4b8ffb4b3c)\n\nNote that if credential sign-up is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.\n\nFor more information, please refer to the [custom pages guide](/customization/custom-pages).\n\n## Props\n\n- `noPasswordRepeat` (optional): `boolean` - If set to `true`, the form will not include a password repeat field.\n\n## Example\n\n```tsx\nimport { CredentialSignUp } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign Up</h1>\n      <CredentialSignUp noPasswordRepeat />\n    </div>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/credential-sign-up.mdx"
      },
      "docs/pages/components/oauth-button.mdx": {
        "markdown": "---\nslug: components/oauth-button\n---\n\nRenders a customized OAuth button for various providers to initiate sign-in or sign-up processes.\n\n![OAuthButton](file:97002ac1-d095-4ed1-bd53-f2a8a6019de8)\n\nNote that if the specific OAuth provider is disabled in the dashboard, this component will still render. However, attempting to use it will result in an error being thrown.\n\nFor more information, please refer to the [custom pages guide](/customization/custom-pages).\n\n## Props\n\n- `provider`: `string` - The name of the OAuth provider (e.g., 'google', 'github', 'facebook').\n- `type`: `'sign-in' | 'sign-up'` - Determines whether the button text is for signing in or signing up. (both are the same in terms of functionality)\n\n## Example\n\n```tsx\nimport { OAuthButton } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <OAuthButton provider=\"google\" type=\"sign-in\" />\n      <OAuthButton provider=\"github\" type=\"sign-up\" />\n    </div>\n  );\n}\n\n```\n\nThe `OAuthButton` component automatically styles itself based on the provided OAuth provider and handles the sign-in or sign-up process when clicked.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/oauth-button.mdx"
      },
      "docs/pages/components/oauth-button-group.mdx": {
        "markdown": "---\nslug: components/oauth-button-group\n---\n\nRenders all the available OAuth buttons for sign-in or sign-up functionality.\n\n![OAuthButtonGroup](file:ebab34cd-b591-4d66-a1cb-c03803140c12)\n\nNote that if there are no OAuth providers enabled in the dashboard, this component will be empty.\n\n## Props\n\n- `type`: `'sign-in' | 'sign-up'` - Specifies whether the buttons text are for sign-in or sign-up (both are the same in terms of functionality).\n\n## Example\n\n```tsx\nimport { OAuthButtonGroup } from '@stackframe/stack';\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n      <OAuthButtonGroup type='sign-in' />\n    </div>\n  );\n}\n\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/oauth-button-group.mdx"
      },
      "docs/pages/components/stack-handler.mdx": {
        "markdown": "---\nslug: components/stack-handler\n---\n\nRenders the appropriate authentication or account-related component based on the current route.\n\nFor detailed usage instructions, please refer to the manual section of the [setup guide](/getting-started/setup).\n\n## Props\n\n- `app`: `StackServerApp` - The Stack server application instance.\n- `params`: `{ stack?: string[] }` - The route parameters, where `stack` is an array of path segments.\n- `searchParams`: `Record<string, string>` - The URL search parameters.\n- `fullPage`: `boolean` - Whether to render the component in full-page mode.\n- `componentProps`: `{ [K in keyof Components]?: Partial<ComponentProps<Components[K]>> }` - Props to pass to the rendered components.\n\n## Example\n\n```tsx title=\"app/handler/[...stack].tsx\"\nimport { StackHandler } from '@stackframe/stack';\nimport { stackServerApp } from \"@/stack\";\n\nexport default function Hanlder(props: { params: any, searchParams: any }) {\n  return (\n    <StackHandler\n      app={stackServerApp}\n      params={props.params}\n      searchParams={props.searchParams}\n      fullPage={true}\n      componentProps={{\n        SignIn: { /* SignIn component props */ },\n        SignUp: { /* SignUp component props */ },\n        // ... other component props\n      }}\n    />\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/stack-handler.mdx"
      },
      "docs/pages/components/stack-provider.mdx": {
        "markdown": "---\nslug: components/stack-provider\n---\n\nA React component that provides Stack context to its children.\n\nFor detailed usage instructions, please refer to the manual section of the [setup guide](/getting-started/setup).\n\n\n## Props\n\n- `children`: `React.ReactNode` - The child components to be wrapped by the StackProvider.\n- `app`: `StackClientApp | StackServerApp` - The Stack app instance to be used.\n- `lang` (optional): `\"en-US\" | \"de-DE\" | \"es-419\" | \"es-ES\" | \"fr-CA\" | \"fr-FR\" | \"it-IT\" | \"pt-BR\" | \"pt-PT\"` - The language to be used for translations.\n\n## Example\n\n```tsx title=\"layout.tsx\"\nimport { StackProvider } from '@stackframe/stack';\nimport { stackServerApp } from '@/stack';\n\nfunction App() {\n  return (\n    <StackProvider app={stackServerApp} lang=\"de-DE\">\n      {/* Your app content */}\n    </StackProvider>\n  );\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/stack-provider.mdx"
      },
      "docs/pages/components/stack-theme.mdx": {
        "markdown": "---\nslug: components/stack-theme\n---\n\nA component that applies a theme to its children.\n\nFor more information, please refer to the [color and styles guide](/customization/custom-styles).\n\n## Props\n\n- `theme` (optional): `ThemeConfig` - Custom theme configuration to override the default theme.\n- `children` (optional): `React.ReactNode` - Child components to be rendered within the themed context.\n\n## Example\n\n```tsx\nconst theme = {\n  light: {\n    primary: 'red',\n  },\n  dark: {\n    primary: '#00FF00',\n  },\n  radius: '8px',\n}\n\n// ...\n\n<StackTheme theme={theme}>\n  {/* children */}\n</StackTheme>\n\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/components/stack-theme.mdx"
      },
      "docs/pages/sdk/user.mdx": {
        "markdown": "---\nslug: sdk/user\n---\n\nThis is a detailed reference for the `User` object. If you're looking for a more high-level overview, please refer to our guide on users [here](/concepts/orgs-and-teams).\n\n## Different types of `User` objects\n\nThere are a few types of user objects in Stack Auth:\n\n1. `CurrentUser`\n   - Represents the authenticated user on the client side\n   - Has an active session (typically stored in browser cookies)\n   - Used in client-side code\n   - Obtained by calling `useUser()` in a Client Component\n\n2. `ServerUser`\n   - Represents a user on the server side without an active session\n   - extends most of the attributes and methods of `CurrentUser`\n   - Has additional capabilities like being able to update emails or passwords without confirmation\n   - Lacks session-dependent functions like `signOut()`\n   - Obtained by calling `stackServerApp.getUser('user_id_123')` or `stackServerApp.listUsers()` on the server side\n\n3. `CurrentServerUser`\n   - Combines attributes and methods of both `ServerUser` and `CurrentUser`\n   - Obtained by calling `stackServerApp.getUser()` on the server side\n\nThese user types provide flexible and secure user management across both client and server environments, each serving a specific purpose in different application contexts.\n\n## `CurrentUser`\n\nYou can call `useUser()` or `stackServerApp.getUser()` to get the `CurrentUser` object.\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n  The user ID. This is the unique identifier of the user.\n  </ParamField>\n\n  <ParamField path=\"displayName\" type=\"string | null\">\n  The display name of the user. Can be changed by the user.\n  </ParamField>\n\n  <ParamField path=\"primaryEmail\" type=\"string | null\">\n  The primary email of the user. Note: this is not unique.\n  </ParamField>\n\n  <ParamField path=\"primaryEmailVerified\" type=\"boolean\">\n  Whether the primary email is verified.\n  </ParamField>\n\n  <ParamField path=\"profileImageUrl\" type=\"string | null\">\n  The profile image URL of the user.\n  </ParamField>\n\n  <ParamField path=\"signedUpAt\" type=\"Date\">\n  The Date when the user signed up.\n  </ParamField>\n\n  <ParamField path=\"hasPassword\" type=\"boolean\">\n  Whether the user has a password set.\n  </ParamField>\n\n  <ParamField path=\"clientMetadata\" type=\"object\">\n  The JSON metadata that is visible on the client side. Note that this should not contain information that should be kept private on the server side or information that should not be modified by the client.\n  </ParamField>\n\n  <ParamField path=\"clientReadOnlyMetadata\" type=\"object\">\n  Metadata that can be read on the client side but can only be modified on the server side.\n  </ParamField>\n\n  <ParamField path=\"selectedTeam\" type=\"Team | null\">\n  The currently selected team for the user, if applicable.\n  </ParamField>\n</div>\n\n### `update()`\n\nUpdate the user information.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\" required>\n    <div className=\"indented\">\n      <ParamField path=\"displayName\" type=\"string\">\n        The new display name for the user.\n      </ParamField>\n      <ParamField path=\"clientMetadata\" type=\"object\">\n        Custom metadata visible to the client.\n      </ParamField>\n      <ParamField path=\"selectedTeamId\" type=\"string | null\">\n        The ID of the team to set as selected, or null to clear selection.\n      </ParamField>\n      <ParamField path=\"profileImageUrl\" type=\"string | null\">\n        The URL of the user's new profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait user.update({\n  displayName: \"New Display Name\",\n  clientMetadata: {\n    address: \"123 Main St\",\n  },\n});\n```\n\n### `getTeam()`\n\nGet the team with the given ID.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The ID of the team to get.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<Team | null>`: The team object, or null if the team is not found (either because it doesn't exist or because the user is not a member of the team).\n</div>\n\n**Example:**\n```typescript\nconst team = await user.getTeam(\"teamId\");\n```\n\n### `useTeam()`\n\nGet the team with the given ID.\n\nThis is the same as `getTeam` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\" required>\n    The ID of the team to get.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Team | null`: The team object, or null if the team is not found (either because it doesn't exist or because the user is not a member of the team).\n</div>\n\n**Example:**\n```typescript\nconst team = user.useTeam(\"teamId\");\n```\n\n### `listTeams()`\n\n\nList all the teams the user is a member of.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<Team[]>`: The list of teams.\n</div>\n\n**Example:**\n\n```typescript\nconst teams = await user.listTeams();\n```\n\n### `useTeams()`\n\nList all the teams the user is a member of.\n\nThis is the same as `listTeams` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\nNo parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Team[]`: The list of teams.\n</div>\n\n**Example:**\n```typescript\nconst teams = user.useTeams();\n```\n\n### `setSelectedTeam()`\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"team\" type=\"Team | null\" required>\n    The team to set as selected, or null to clear selection.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\nSet the currently selected team for the user.\n\n**Example:**\n```typescript\nconst team = await user.getTeam(\"team_id_123\");\nawait user.setSelectedTeam(team);\n```\n\n### `createTeam()`\n\nCreate a new team for the user. The user will be added to the team and be given the creator permissions.\n\nNote that if client side team creation is disabled in the Stack dashboard, this will throw an error.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"data\" type=\"object\" required>\n    <div className=\"indented\">\n      <ParamField path=\"displayName\" type=\"string\">\n        The display name for the team.\n      </ParamField>\n      <ParamField path=\"profileImageUrl\" type=\"string | null\">\n        The URL of the team's profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Promise<Team>`: The created team.\n</div>\n\n**Example:**\n```typescript\nconst team = await user.createTeam({\n  displayName: \"New Team\",\n  profileImageUrl: \"https://example.com/profile.jpg\",\n});\n```\n\n### `leaveTeam()`\n\nLeave a team.\n\nNote that if the user is not a member of the team, this will throw an error.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"team\" type=\"Team\" required>\n    The team to leave.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Promise<void>`\n</div>\n\n**Example:**\n```typescript\nawait user.leaveTeam(team);\n```\n\n### `getTeamProfile()`\n\nGet the user's profile for a team.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"team\" type=\"Team\" required>\n    The team to get the profile for.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Promise<EditableTeamMemberProfile>`: The editable team member profile\n</div>\n\n**Example:**\n\n```typescript\nconst profile = await user.getTeamProfile(team);\n```\n\n### `useTeamProfile()`\n\nGet the user's profile for a team.\n\nThis is the same as `getTeamProfile` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"team\" type=\"Team\" required>\n    The team to get the profile for.\n  </ParamField>\n</div>\n**Returns:**\n\n`EditableTeamMemberProfile`: The editable team member profile\n\n**Example:**\n```typescript\nconst profile = user.useTeamProfile(team);\n```\n\n\n### `hasPermission()`\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n  The team to check the permission for.\n  </ParamField>\n\n  <ParamField path=\"permissionId\" type=\"string\" required>\n  The ID of the permission to check.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<boolean>`: Whether the user has the permission.\n</div>\n\nThis will check if the user has a permission for a team. Note that if the permission is not defined in the Stack dashboard, it will still return false.\n\n**Example:**\n```typescript\nconst hasPermission = await user.hasPermission(team, \"permissionId\");\n```\n\n### `getPermission()`\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n    The team to get the permission for.\n  </ParamField>\n\n  <ParamField path=\"permissionId\" type=\"string\" required>\n    The ID of the permission to get.\n  </ParamField>\n\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"recursive\" type=\"boolean\">\n        Whether to get the permission recursively. default `true`.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<TeamPermission | null>`: The permission object, or null if the permission is not found.\n</div>\n\nThis will get the permission of a user for a team. Note that if the permission is not defined in the Stack dashboard, it will still return null.\n\n**Example:**\n\n```typescript\nconst permission = await user.getPermission(team, \"read_secret_info\");\n```\n\n### `usePermission()`\n\n- `TeamPermission | null`: The permission object, or null if the permission is not found.\n\nThis will get the permission of a user for a team. Note that if the permission is not defined in the Stack dashboard, it will still return null.\n\nThis is the same as `getPermission` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n    The team to get the permission for.\n  </ParamField>\n\n  <ParamField path=\"permissionId\" type=\"string\" required>\n    The ID of the permission to get.\n  </ParamField>\n\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"recursive\" type=\"boolean\">\n        Whether to get the permission recursively. default `true`.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n**Returns:**\n\n<div className=\"indented\">\n  `TeamPermission | null`: The permission object, or null if the permission is not found.\n</div>\n\n**Example:**\n\n```typescript\nconst permission = user.usePermission(team, \"read_secret_info\");\n```\n\n### `listPermissions()`\n\nList all the permissions a user has for a team.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n    The team to list the permissions for.\n  </ParamField>\n\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"recursive\" type=\"boolean\">\n      Whether to list the permissions recursively. default `true`.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<TeamPermission[]>`: The list of permissions.\n</div>\n\n**Example:**\n```typescript\nconst permissions = await user.listPermissions(team);\n```\n\n### `usePermissions()`\n\nList all the permissions a user has for a team.\n\nThis is the same as `listPermissions` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n    The team to use the permissions for.\n  </ParamField>\n\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"recursive\" type=\"boolean\">\n        Whether to use the permissions recursively. default `true`.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n**Returns:**\n\n<div className=\"indented\">\n  `TeamPermission[]`: The list of permissions.\n</div>\n\n**Example:**\n```typescript\nconst permissions = user.usePermissions(team);\n```\n\n### `listContactChannels()`\n\nList all the contact channels of the user.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ContactChannel[]>`: The list of contact channels.\n</div>\n\n**Example:**\n```typescript\nconst contactChannels = await user.listContactChannels();\n```\n\n### `useContactChannels()`\n\nList all the contact channels of the user.\n\nThis is the same as `listContactChannels` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `ContactChannel[]`: The list of contact channels.\n</div>\n\n**Example:**\n```typescript\nconst contactChannels = user.useContactChannels();\n```\n\n### `updatePassword()`\n\nThis will update the user's password. It will return an error object (not throw an error) if the passwords mismatch or if the new password does not meet the requirements. If successful, it will return undefined.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\" required>\n    <div className=\"indented\">\n      <ParamField path=\"oldPassword\" type=\"string\" required>\n        The old password.\n      </ParamField>\n      <ParamField path=\"newPassword\" type=\"string\" required>\n        The new password.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nconst result = await user.updatePassword({\n  oldPassword: \"currentPassword\",\n  newPassword: \"newPassword\",\n});\nif (result.status === \"error\" ) {\n  console.error(\"Error updating password\", result.error);\n} else {\n  console.log(\"Password updated\");\n}\n```\n\n### `getAuthJson()`\n\nThis will return the authentication tokens of the user. This is normally then used for authentication to an external server. See more details [here](/concepts/backend-integration).\n\n**Parameters:**\n\n<div className=\"indented\">\nNo parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<{ accessToken: string | null }>`\n</div>\n**Example:**\n\n```typescript\nconst { accessToken } = await user.getAuthJson();\n```\n\n\n### `signOut()`\n\nThis will sign out the user and clear the session.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait user.signOut();\n```\n\n### `delete()`\n\nDelete the user. Use it with caution as it is irreversible. Note that this only works if the \"allow client side user deletion\" option is enabled in the Stack dashboard.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait user.delete();\n```\n\n## `ServerUser`\n\n`ServerUser` is only available on the server side. Some of the methods on the `StackServerApp` return `ServerUser` objects, for example `stackServerApp.listUsers()` or `stackServerApp.getUser('user_id_123')`.\n\nThe `ServerUser` object contains everything in the `CurrentUser` object, except for the following methods:\n\n- `signOut()`\n- `getAuthJson()`\n\nIt also has some additional properties and methods (some of the methods have the same name but more capabilities):\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"lastActiveAt\" type=\"Date\">\n    The last active at date of the user.\n  </ParamField>\n\n  <ParamField path=\"serverMetadata\" type=\"object\">\n    The server metadata of the user. Only readable and writable on the server side.\n  </ParamField>\n</div>\n### `update()`\n\nUpdate the user information.\n\nThis is similar to the `CurrentUser.update()` method, but is strictly more powerful (like update password, update server metadata, etc.)\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\" required>\n    <div className=\"indented\">\n      <ParamField path=\"displayName\" type=\"string\">\n        The new display name for the user.\n      </ParamField>\n      <ParamField path=\"clientMetadata\" type=\"object\">\n        Custom metadata visible to the client.\n      </ParamField>\n      <ParamField path=\"selectedTeamId\" type=\"string | null\">\n        The ID of the team to set as selected, or null to clear selection.\n      </ParamField>\n      <ParamField path=\"profileImageUrl\" type=\"string | null\">\n        The URL of the user's new profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\n      </ParamField>\n      <ParamField path=\"clientReadOnlyMetadata\" type=\"object\">\n        Metadata that can be read on the client side but can only be modified on the server side.\n      </ParamField>\n      <ParamField path=\"serverMetadata\" type=\"object\">\n        Metadata that can be read and modified on the server side.\n      </ParamField>\n      <ParamField path=\"password\" type=\"string\">\n        The new password for the user.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait serverUser.update({\n  displayName: \"New Display Name\",\n  password: \"newPassword\",\n  serverMetadata: {\n    secret: \"shh\",\n  },\n});\n```\n\n### `listContactChannels()`\n\nList all the contact channels of the user.\n\nThis is similar to `CurrentUser.listContactChannels()` but it returns a list of `ServerContactChannel` objects instead of `ContactChannel` objects.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerContactChannel[]>`: The list of contact channels.\n</div>\n\n**Example:**\n```typescript\nconst contactChannels = await serverUser.listContactChannels();\n```\n\n### `useContactChannels()`\n\nList all the contact channels of the user.\n\nThis is the same as `listContactChannels` but it is a React hook. This is also similar to `CurrentUser.useContactChannels()` but it returns a list of `ServerContactChannel` objects instead of `ContactChannel` objects.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `ServerContactChannel[]`: The list of contact channels.\n</div>\n\n**Example:**\n```typescript\nconst contactChannels = serverUser.useContactChannels();\n```\n\n### `grantPermission()`\n\nGrant a permission to a user for a team.\n\nThis action will still succeed if the permission is already granted. It will throw an error if the permission is not defined in the Stack dashboard.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n    The team to grant the permission to.\n  </ParamField>\n\n  <ParamField path=\"permissionId\" type=\"string\" required>\n    The ID of the permission to grant.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait serverUser.grantPermission(team, \"read_secret_info\");\n```\n\n### `revokePermission()`\n\nRevoke a permission from a user for a team.\n\nThis action will still succeed if the permission is not granted in the first place. It will throw an error if the permission is not defined in the Stack dashboard.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"scope\" type=\"Team\" required>\n    The team to revoke the permission from.\n  </ParamField>\n\n  <ParamField path=\"permissionId\" type=\"string\" required>\n    The ID of the permission to revoke.\n  </ParamField>\n</div>\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait serverUser.revokePermission(team, \"read_secret_info\");\n```\n\n## `CurrentServerUser`\n\nThe `CurrentServerUser` has the same properties and methods from `ServerUser` and `CurrentUser` combined (for the overloaded methods like `update`, the `ServerUser` methods take precedence).\n\nTo get a `CurrentServerUser` object, you can use the `stackServerApp.getUser()` method. Note that this can only be used on the server side.\n\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/user.mdx"
      },
      "docs/pages/sdk/stack-app.mdx": {
        "markdown": "---\nslug: sdk/stack-app\n---\n\nThis is a detailed reference for the `StackApp` object. [Here](/concepts/stack-app) is a more high-level overview.\n\n## Different types of `StackApp` objects\n\nStack offers two types of app objects: `StackClientApp` and `StackServerApp`.\n\n1. `StackClientApp`:\n   - Designed for client-side applications\n   - Provides functionality like `signInWithOAuth`, `useUser`, `useProject`, etc.\n   - Obtain it by calling `useStackApp()` in a Client Component\n\n2. `StackServerApp`:\n   - extends `StackClientApp`\n   - Has additional capabilities like being able to listing all the users in the project\n   - Access it by importing the object from the file where you created it (`import { stackServerApp } from '@/stack'`)\n   - While `StackServerApp` includes `useXYZ` hooks, they are generally not usable in server-side code due to its non-reactive nature. These hooks are primarily designed for client-side use where reactivity is supported.\n\nChoose the appropriate type based on your application's needs and environment.\n\n\n## `StackClientApp`\n\nYou can get a `StackClientApp` instance by calling `useStackApp()` in a Client Component.\n\n### Initialization\n\nIn most cases, we don't create a `StackClientApp` directly. Instead, we typically:\n\n1. Create a `StackServerApp` instance, pass it into the `StackProvider` component\n2. Use the `useStackApp()` hook to obtain a `StackClientApp` from it\n\nCheck out the manual [setup guide](/getting-started/setup) for more details. For details on how to initialize a `StackServerApp`, refer to the [StackServerApp section](#stackserverapp) below.\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"projectId\" type=\"string\">\n  The ID of the project that the app is associated with.\n  </ParamField>\n\n  <ParamField path=\"urls\" type=\"object\">\n    The URLs that Stack uses to route and redirect.\n\n    <div className=\"indented\">\n      <ParamField path=\"home\" type=\"string\">\n      The URL of the home page.\n      </ParamField>\n      <ParamField path=\"signIn\" type=\"string\">\n      The URL of the sign-in page.\n      </ParamField>\n      <ParamField path=\"afterSignIn\" type=\"string\">\n      The URL that the user will be redirected to after successful signing in.\n      </ParamField>\n      <ParamField path=\"signUp\" type=\"string\">\n      The URL of the sign-up page.\n      </ParamField>\n      <ParamField path=\"afterSignUp\" type=\"string\">\n      The URL that the user will be redirected to after successful signing up.\n      </ParamField>\n      <ParamField path=\"afterSignOut\" type=\"string\">\n      The URL that the user will be redirected to after successful signing out.\n      </ParamField>\n      <ParamField path=\"emailVerification\" type=\"string\">\n      The URL of the email verification page.\n      </ParamField>\n      <ParamField path=\"passwordReset\" type=\"string\">\n      The URL of the password reset page.\n      </ParamField>\n      <ParamField path=\"forgotPassword\" type=\"string\">\n      The URL of the forgot password page.\n      </ParamField>\n      <ParamField path=\"accountSettings\" type=\"string\">\n      The URL of the account settings page.\n      </ParamField>\n      <ParamField path=\"handler\" type=\"string\">\n      The URL of the handler root. \n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n### `getUser()`\n\nGet the current user.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"or\" type=\"string\" required>\n        What to do if the user is not signed in. Can be:\n        - `\"redirect\"`: Redirects the user to the `signIn` URL.\n        - `\"throw\"`: Throws an error.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n- If `or` is not provided, returns `Promise<CurrentUser | null>`.\n- If `or` is `\"redirect\"` or `\"throw\"`, always returns `Promise<CurrentUser>`.\n</div>\n\n**Example:**\n\n```typescript\nconst user = await stackClientApp.getUser({ or: \"redirect\" });\nconsole.log(user); // always defined\n\nconst user = await stackClientApp.getUser();\nconsole.log(user); // null if not signed in\n```\n\n### `useUser()`\n\nGet the current user.\n\nThis is the same as `getUser()` but it is a React hook. The `useUser` hook imported from the package is an alias for this function.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"or\" type=\"string\" required>\n        What to do if the user is not signed in. Can be:\n        - `\"redirect\"`: Redirects the user to the `signIn` URL.\n        - `\"throw\"`: Throws an error.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n- If `or` is not provided, returns `CurrentUser | null`.\n- If `or` is `\"redirect\"` or `\"throw\"`, always returns `CurrentUser`.\n</div>\n\n**Example:**\n\n```typescript\nconst user = useUser({ or: \"redirect\" });\nconsole.log(user); // always defined\n\nconst user = useUser();\nconsole.log(user); // null if not signed in\n```\n\n### `signInWithOAuth()`\n\nInitiates the OAuth sign-in process with the specified provider. This method:\n\n1. Redirects the user to the OAuth provider's sign-in page.\n2. After successful authentication, redirects the user back to your application.\n3. The final redirect destination is determined as follows:\n   - If an `after_auth_return_to` query parameter was provided when calling this function, it uses that URL.\n   - Otherwise, it uses the `afterSignIn` URL configured in the app settings.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"provider\" type=\"string\" required>\n    The type of the OAuth provider to sign in with.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`: A promise that resolves when the redirect is complete.\n</div>\n\n**Example:**\n\n```typescript\nawait stackClientApp.signInWithOAuth(\"google\");\n```\n\n### `signInWithCredential()`\n \nSign in using email and password credentials. The behavior is as follows:\n\n1. If sign-in is successful:\n   - By default, redirects the user to the `afterSignIn` URL.\n   - If `after_auth_return_to` is provided in the query parameters, redirects to that URL instead.\n   - If `noRedirect` is set to `true`, it will not redirect and instead return a success `Result` object.\n\n2. If sign-in fails:\n   - No redirection occurs.\n   - Returns a `Result` object containing error information.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"email\" type=\"string\" required>\n        The email of the user to sign in with.\n      </ParamField>\n      <ParamField path=\"password\" type=\"string\" required>\n        The password of the user to sign in with.\n      </ParamField>\n      <ParamField path=\"noRedirect\" type=\"boolean\">\n        Whether to not redirect the user after sign-in. Defaults to `false`.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<Result<undefined, KnownErrors[\"EmailPasswordMismatch\"]>>`: A promise that resolves to a `Result` object.\n</div>\n\n**Example:**\n\n```typescript\nconst result = await stackClientApp.signInWithCredential({\n  email: \"test@example.com\",\n  password: \"password\",\n});\n\nif (result.status === \"error\") {\n  console.error(\"Sign in failed\", result.error.message);\n}\n```\n\n### `signUpWithCredential()`\n\nSign up using email and password credentials. The behavior is as follows:\n\n1. If sign-up is successful:\n   - By default, redirects the user to the `afterSignUp` URL.\n   - If `after_auth_return_to` is provided in the query parameters, redirects to that URL instead.\n   - If `noRedirect` is set to `true`, it will not redirect and instead return a success `Result` object.\n\n2. If sign-up fails:\n   - No redirection occurs.\n   - Returns a `Result` object containing error information.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"email\" type=\"string\" required>\n        The email of the user to sign up with.\n      </ParamField>\n      <ParamField path=\"password\" type=\"string\" required>\n        The password of the user to sign up with.\n      </ParamField>\n      <ParamField path=\"noRedirect\" type=\"boolean\">\n        Whether to not redirect the user after sign-up. Defaults to `false`.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n`Promise<Result<undefined, KnownErrors[\"UserEmailAlreadyExists\"] | KnownErrors[\"PasswordRequirementsNotMet\"]>>`: A promise that resolves to a `Result` object.\n</div>\n\n**Example:**\n\n```typescript\nconst result = await stackClientApp.signUpWithCredential({\n  email: \"test@example.com\",\n  password: \"password\",\n});\n\nif (result.status === \"error\") {\n  console.error(\"Sign up failed\", result.error.message);\n}\n```\n\n### `sendForgotPasswordEmail()`\n\nSend a forgot password email to an email address.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"email\" type=\"string\" required>\n    The email of the user to send the forgot password email to.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<Result<undefined, KnownErrors[\"UserNotFound\"]>>`: A promise that resolves to a `Result` object.\n</div>\n\n**Example:**\n\n```typescript\nconst result = await stackClientApp.sendForgotPasswordEmail(\"test@example.com\");\n\nif (result.status === \"success\") {\n  console.log(\"Forgot password email sent\");\n} else {\n  console.error(\"Failed to send forgot password email\", result.error.message);\n}\n```\n\n### `sendMagicLinkEmail()`\n\nSend a magic link/OTP sign-in email to an email address.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"email\" type=\"string\" required>\n    The email of the user to send the magic link email to.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<Result<{ nonce: string }, KnownErrors[\"RedirectUrlNotWhitelisted\"]>>`: A promise that resolves to a `Result` object.\n</div>\n\n**Example:**\n\n```typescript\nconst result = await stackClientApp.sendMagicLinkEmail(\"test@example.com\");\n```\n\n### `getProject()`\n\nGet the current project.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<Project>`: The current project.\n</div>\n\n**Example:**\n\n```typescript\nconst project = await stackClientApp.getProject();\n```\n\n### `useProject()`\n\nGet the current project.\n\nThis is the same as `getProject()` but it is a React hook. The `useProject` hook imported from the package is an alias for this function.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Project`: The current project.\n</div>\n\n**Example:**\n\n```typescript\nconst project = useProject();\n```\n\n## `StackServerApp`\n\n`StackServerApp` extends `StackClientApp`, so it has all the same capabilities, plus some extra ones listed below. \n\nNote that although the `useXYZ` hooks are available on `StackServerApp`, they are generally not usable in server-side code due to its non-reactive nature. These hooks are primarily designed for client-side use where reactivity is supported.\n\n### Initialization\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"tokenStore\" type=\"string\" required>\n        Where to store the auth tokens. Currently only `\"nextjs-cookie\"` is supported.\n      </ParamField>\n\n      <ParamField path=\"oauthScopesOnSignIn\" type=\"object\">\n        Extra OAuth scopes to request when signing in. It is an object of format `{ [provider: string]: string[] }`, where the key is the provider type (e.g. `\"google\"`, `\"apple\"`, etc.) and the value is an array of scopes to request. Checkout the [OAuth](/concepts/oauth) page for more details.\n      </ParamField>\n\n      <ParamField path=\"baseUrl\" type=\"string\">\n        The base URL of the Stack server. By default it is read from the `NEXT_PUBLIC_STACK_URL` environment variable if it exists, or use `https://api.stack-auth.com` if it doesn't.\n      </ParamField>\n\n      <ParamField path=\"projectId\" type=\"string\">\n        The ID of the project to use. By default it is read from the `NEXT_PUBLIC_STACK_PROJECT_ID` environment variable.\n      </ParamField>\n\n      <ParamField path=\"publishableClientKey\" type=\"string\">\n        The publishable client key to use. By default it is read from the `NEXT_PUBLIC_STACK_PUBLISHABLE_CLIENT_KEY` environment variable.\n      </ParamField>\n\n      <ParamField path=\"secretServerKey\" type=\"string\">\n        The secret server key to use. By default it is read from the `STACK_SECRET_SERVER_KEY` environment variable.\n      </ParamField>\n\n      <ParamField path=\"urls\" type=\"object\">\n        Modify the URLs that Stack uses to route and redirect.\n        <div className=\"indented\">\n          <ParamField path=\"home\" type=\"string\" default=\"'/'\" >\n            The URL of the home page.\n          </ParamField>\n          <ParamField path=\"signIn\" type=\"string\" default=\"urls.handler + '/sign-in'\">\n            The URL of the sign-in page.\n          </ParamField>\n          <ParamField path=\"afterSignIn\" type=\"string\" default=\"urls.home\">\n            The URL that the user will be redirected to after successful signing in.\n          </ParamField>\n          <ParamField path=\"signUp\" type=\"string\" default=\"urls.handler + '/sign-up'\">\n            The URL of the sign-up page.\n          </ParamField>\n          <ParamField path=\"afterSignUp\" type=\"string\" default=\"urls.home\">\n            The URL that the user will be redirected to after successful signing up.\n          </ParamField>\n          <ParamField path=\"afterSignOut\" type=\"string\" default=\"urls.home\">\n            The URL that the user will be redirected to after successful signing out.\n          </ParamField>\n          <ParamField path=\"emailVerification\" type=\"string\" default=\"urls.handler + '/email-verification'\">\n            The URL of the email verification page.\n          </ParamField>\n          <ParamField path=\"passwordReset\" type=\"string\" default=\"urls.handler + '/password-reset'\">\n            The URL of the password reset page.\n          </ParamField>\n          <ParamField path=\"forgotPassword\" type=\"string\" default=\"urls.handler + '/forgot-password'\">\n            The URL of the forgot password page.\n          </ParamField>\n          <ParamField path=\"accountSettings\" type=\"string\" default=\"urls.handler + '/account-settings'\">\n            The URL of the account settings page.\n          </ParamField>\n          <ParamField path=\"handler\" type=\"string\" default=\"'/handler'\">\n            The URL of the handler root. When changing this, you should also change the location of the `StackHandler` component and the domain handler path on the dashboard. Currently putting the handler at the root `/` is not supported.\n          </ParamField>\n        </div>\n      </ParamField>\n    </div>\n\n  </ParamField>\n</div>\n\n**Example:**\n\n```typescript\nconst stackServerApp = new StackServerApp({\n  tokenStore: \"nextjs-cookie\",\n  oauthScopesOnSignIn: {\n    google: [\"extra-scope\"],\n  },\n  urls: {\n    signIn: '/my-custom-sign-in-page',\n  },\n});\n```\n\n### Properties\n\nSame as `StackClientApp`.\n\n### `getUser()`\n\nGet a user. There are two overloads:\n\n**Overload 1 (get current server user):**\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"or\" type=\"string\" required>\n        What to do if the user is not signed in. Can be:\n        - `\"redirect\"`: Redirects the user to the `signIn` URL.\n        - `\"throw\"`: Throws an error.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n- If `or` is not provided, returns `Promise<ServerUser | null>`.\n- If `or` is `\"redirect\"` or `\"throw\"`, always returns `Promise<ServerUser>`.\n</div>\n\n**Example:**\n\n```typescript\nconst user = await stackServerApp.getUser({ or: \"redirect\" });\nconsole.log(user); // always defined\n\nconst user = await stackServerApp.getUser();\nconsole.log(user); // null if not signed in\n```\n\n**Overload 2 (get user by ID):**\n\n**Parameters:**\n\n<div className=\"indented\">\n<ParamField path=\"id\" type=\"string\" required>\nThe ID of the user to get.\n</ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerUser | null>`: The user, or null if not found.\n</div>\n\n**Example:**\n\n```typescript\nconst user = await stackServerApp.getUser(\"user_id_123\");\nconsole.log(user); // null if not found\n```\n\n### `listUsers()`\n\nLists users.\n\nIf `limit` is not provided, it will return all users by making multiple requests to the server (this might be slow for a large number of users, so it is recommended to always use pagination).\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"cursor\" type=\"string\">\n        The cursor to start the result set from.\n      </ParamField>\n\n      <ParamField path=\"limit\" type=\"number\">\n        The maximum number of items to return. If not provided, it will return all users.\n      </ParamField>\n\n      <ParamField path=\"orderBy\" type=\"'signedUpAt'\">\n        The field to sort the results by. Currently only `signedUpAt` is supported.\n      </ParamField>\n\n      <ParamField path=\"desc\" type=\"boolean\" default=\"false\">\n        Whether to sort the results in descending order.\n      </ParamField>\n\n      <ParamField path=\"query\" type=\"string\">\n        A query to filter the results by. This is a free-text search on the user's display name and emails.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerUser[] & { nextCursor: string | null }>`: The list of users. If `nextCursor` is not null, there is a next page.\n</div>\n\n**Example:**\n\n```typescript\nconst users = await stackServerApp.listUsers({ limit: 20 });\nconsole.log(users);\n\nif (users.nextCursor) {\n  const nextPageUsers = await stackServerApp.listUsers({ cursor: users.nextCursor, limit: 20 });\n  console.log(nextPageUsers);\n}\n```\n\n### `useUsers()`\n\nGet the list of users. \n\nIf `limit` is not provided, it will return all users by making multiple requests to the server (this might be slow for a large number of users, so it is recommended to always use pagination).\n\nThis is the same as `listUsers()` but it is a React hook.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"cursor\" type=\"string\">\n        The cursor to start the result set from.\n      </ParamField>\n\n      <ParamField path=\"limit\" type=\"number\">\n        The maximum number of items to return. If not provided, it will return all users.\n      </ParamField>\n\n      <ParamField path=\"orderBy\" type=\"'signedUpAt'\">\n        The field to sort the results by. Currently only `signedUpAt` is supported.\n      </ParamField>\n\n      <ParamField path=\"desc\" type=\"boolean\" default=\"false\">\n        Whether to sort the results in descending order.\n      </ParamField>\n\n      <ParamField path=\"query\" type=\"string\">\n        A query to filter the results by. This is a free-text search on the user's display name and emails.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `ServerUser[] & { nextCursor: string | null }`: The list of users. If `nextCursor` is not null, there is a next page.\n</div>\n\n**Example:**\n\n```typescript\nconst [cursor, setCursor] = useState<string | null>(null);\nconst users = useUsers({ cursor: nextCursor, limit: 20 });\n\nreturn <div>\n  {users.map((user) => <div key={user.id}>{user.displayName}</div>)}\n  {users.nextCursor && <button onClick={() => setCursor(users.nextCursor)}>Next</button>}\n</div>\n```\n\n### `createUser()`\n\nCreate a new user.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"primaryEmail\" type=\"string\">\n        The primary email of the user to create.\n      </ParamField>\n\n      <ParamField path=\"primaryEmailAuthEnabled\" type=\"boolean\">\n        Whether the primary email is enabled. When using password or otp auth, this must be set to `true`, otherwise the user will not be able to sign in.\n      </ParamField>\n\n      <ParamField path=\"password\" type=\"string\">\n        The password for the new user. An error will be thrown if a password is provided\n        but password authentication is not enabled for the project in the dashboard.\n      </ParamField>\n\n      <ParamField path=\"otpAuthEnabled\" type=\"boolean\">\n        Enables OTP (One-Time Password) or magic link sign-in using the primary email.\n        Note: Only verified emails can be used for OTP sign-in. An error will be thrown\n        if set to `true` when OTP authentication is not enabled in the dashboard.\n      </ParamField>\n\n      <ParamField path=\"displayName\" type=\"string\">\n        The display name of the user to create.\n      </ParamField>\n\n      <ParamField path=\"primaryEmailVerified\" type=\"boolean\" default=\"false\">\n        Whether the primary email is verified.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerUser>`: The created user.\n</div>\n\n**Example:**\n\n```typescript\n// Create a user with password authentication\nconst user = await stackServerApp.createUser({\n  primaryEmail: \"test@example.com\",\n  primaryEmailAuthEnabled: true,\n  password: \"password123\",\n});\n\n// Create a user with OTP authentication\nconst user = await stackServerApp.createUser({\n  primaryEmail: \"test@example.com\",\n  primaryEmailVerified: true,\n  primaryEmailAuthEnabled: true,\n  otpAuthEnabled: true,\n});\n```\n\n### `getTeam()`\n\nGet a team by ID.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\" required>\n    The ID of the team to get.\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerTeam | null>`: The team, or null if not found.\n</div>\n\n**Example:**\n\n```typescript\nconst team = await stackServerApp.getTeam(\"team_id_123\");\nconsole.log(team); // null if not found\n```\n\n### `listTeams()`\n\nList all teams.\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerTeam[]>`: The list of teams.\n</div>\n\n**Example:**\n\n```typescript\nconst teams = await stackServerApp.listTeams();\nconsole.log(teams);\n```\n\n### `createTeam()`\n\ncreate a team without a user.\n\nThis is similar to `user.createTeam()`, except it does not add the user to the team.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"data\" type=\"object\" required>\n    <div className=\"indented\">\n      <ParamField path=\"displayName\" type=\"string\">\n        The display name for the team.\n      </ParamField>\n      <ParamField path=\"profileImageUrl\" type=\"string | null\">\n        The URL of the team's profile image (base64 image allowed, crop and compress before passing it in), or null to remove.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<ServerTeam>`: The created team.\n</div>\n\n**Example:**\n\n```typescript\nconst team = await stackServerApp.createTeam({\n  displayName: \"New Team\",\n  profileImageUrl: \"https://example.com/profile.jpg\",\n});\n```\n\n\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/stack-app.mdx"
      },
      "docs/pages/sdk/team.mdx": {
        "markdown": "---\nslug: sdk/team\n---\n\nThis is a detailed reference for the `Team` object. If you're looking for a more high-level overview, please refer to our guide on teams [here](/concepts/orgs-and-teams).\n\n### Different types of `Team` objects\n\nStack Auth provides two types of `Team` objects:\n\n1. `Team`\n   - Represents a team on the client side\n   - Provides functions like `update` and `inviteUser`\n   - Requires appropriate user permissions for function usage\n   - Obtained by calling `user.useTeam('team_id_123')` or `user.useTeams()`\n\n2. `ServerTeam`\n   - Represents a team on the server side\n   - Includes additional capabilities such as `delete` and `addUser`\n   - No user permissions required for function usage\n   - Obtained by calling `stackServerApp.getTeam('team_id_123')` or `stackServerApp.listTeams()`\n\n## `Team`\n\nYou can call `user.useTeam('team_id_123')` or `user.useTeams()` to get the `Team` object.\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The team ID. This is the unique identifier of the team.\n  </ParamField>\n\n  <ParamField path=\"displayName\" type=\"string\">\n    The display name of the team.\n  </ParamField>\n\n  <ParamField path=\"profileImageUrl\" type=\"string | null\">\n    The profile image URL of the team.\n  </ParamField>\n\n  <ParamField path=\"clientMetadata\" type=\"Json\">\n    The client metadata of the team.\n  </ParamField>\n\n  <ParamField path=\"clientReadOnlyMetadata\" type=\"Json\">\n    The client read-only metadata of the team.\n  </ParamField>\n</div>\n\n### `update()`\n\nUpdate the team information.\n\nNote that this operation requires the current user to have the `$update_team` permission. If the user lacks this permission, an error will be thrown.\n\n**Parameters**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"TeamUpdateOptions\" required>\n    <div className=\"indented\">\n      <ParamField path=\"displayName\" type=\"string\">\n        The display name of the team.\n      </ParamField>\n\n      <ParamField path=\"profileImageUrl\" type=\"string | null\">\n        The profile image URL of the team.\n      </ParamField>\n\n      <ParamField path=\"clientMetadata\" type=\"Json\">\n        The client metadata of the team.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example**\n\n```tsx\nawait team.update({\n  displayName: 'New Team Name',\n  profileImageUrl: 'https://example.com/profile.png',\n  clientMetadata: {\n    address: '123 Main St, Anytown, USA',\n  },\n});\n```\n\n### `inviteUser()`\n\nSend an invitation email to a user to join the team. \n\nNote that this operation requires the current user to have the `$invite_members` permission. If the user lacks this permission, an error will be thrown.\n\nAn invitation email containing a magic link will be sent to the specified user. If the user has an existing account, they will be automatically added to the team upon clicking the link. For users without an account, the link will guide them through the sign-up process before adding them to the team.\n\n**Parameters**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"TeamInviteUserOptions\" required>\n    <div className=\"indented\">\n      <ParamField path=\"email\" type=\"string\" required>\n        The email of the user to invite.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example**\n\n```tsx\nawait team.inviteUser({\n  email: 'user@example.com',\n});\n```\n\n### `listUsers()`\n\nGet a list of users in the team.\n\nNote that this operation requires the current user to have the `$read_members` permission. If the user lacks this permission, an error will be thrown.\n\n**Parameters**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<TeamUser[]>`\n</div>\n\n**Example**\n\n```tsx\nconst users = await team.listUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n\n### `useUsers()`\n\nGet a list of users in the team.\n\nNote that this operation requires the current user to have the `$read_members` permission. If the user lacks this permission, an error will be thrown.\n\nThis is the same as `listUsers` but it is a React hook.\n\n**Parameters**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `TeamUser[]`\n</div>\n\n**Example**\n\n```tsx\nconst users = team.useUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n\n## `ServerTeam`\n\nYou can call `stackServerApp.getTeam('team_id_123')` or `stackServerApp.listTeams()` to get the `ServerTeam` object.\n\n`ServerTeam` extends the `Team` object, providing additional functions and properties as detailed below. It's important to note that while the `Team` object's functions may require specific user permissions, the corresponding functions in `ServerTeam` can be executed without these permission checks. This allows for more flexible and unrestricted team management on the server side.\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"createdAt\" type=\"Date\">\n    The date and time when the team was created.\n  </ParamField>\n\n  <ParamField path=\"serverMetadata\" type=\"Json\">\n    The server metadata of the team.\n  </ParamField>\n</div>\n\n### `listUsers()`\n\nGet a list of users in the team. \n\nThis is similar to the `listUsers` method on the `Team` object, but it returns `ServerTeamUser` objects instead of `TeamUser` objects and does not require any permissions.\n\n**Parameters**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<ServerTeamUser[]>`\n</div>\n\n**Example**\n\n```tsx\nconst users = await team.listUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n### `useUsers()`\n\nGet a list of users in the team. \n\nThis is similar to the `useUsers` method on the `Team` object, but it returns `ServerTeamUser` objects instead of `TeamUser` objects and does not require any permissions. This is the same as `listUsers` but it is a React hook.\n\n**Parameters**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `ServerTeamUser[]`\n</div>\n\n**Example**\n\n```tsx\nconst users = team.useUsers();\nusers.forEach(user => {\n  console.log(user.id, user.teamProfile.displayName);\n});\n```\n\n### `addUser()`\n\nAdd a user to the team directly without sending an invitation email.\n\n**Parameters**\n\n<div className=\"indented\">\n  <ParamField path=\"userId\" type=\"string\" required>\n    The ID of the user to add.\n  </ParamField>\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example**\n\n```tsx\nawait team.addUser('user_id_123');\n```\n\n### `removeUser()`\n\nRemove a user from the team.\n\n**Parameters**\n\n<div className=\"indented\">\n  <ParamField path=\"userId\" type=\"string\" required>\n    The ID of the user to remove.\n  </ParamField>\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example**\n\n```tsx\nawait team.removeUser('user_id_123');\n```\n\n### `delete()`\n\nDelete the team.\n\n**Parameters**\n\n<div className=\"indented\">\n  No parameters.\n</div>\n\n**Returns**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example**\n\n```tsx\nawait team.delete();\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/team.mdx"
      },
      "docs/pages/sdk/team-user.mdx": {
        "markdown": "---\nslug: sdk/team-user\n---\n\n\n`TeamUser` is represents a user in the context of a team. There are two types of `TeamUser`\n\n1. `TeamUser`\n    - This is used on the client side.\n    - It contains minimal information about the user, only the user's ID.\n    - It contains a `teamProfile` object, which is the user's profile for the team.\n    - You can obtain it by calling `team.useUsers()` or `team.listUsers()` on a `Team` object.\n\n2. `ServerTeamUser`\n    - This is used on the server side.\n    - Currently it only contains the user's ID, but in the future it will extend `ServerUser`.\n    - You can obtain it by calling `serverTeam.listUsers()` on a `ServerTeam` object.\n\n\n## `TeamUser`\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The ID of the user.\n  </ParamField>\n\n  <ParamField path=\"teamProfile\" type=\"TeamMemberProfile\">\n    The team profile of the user.\n  </ParamField>\n</div>\n\n## `ServerTeamUser`\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The ID of the user.\n  </ParamField>\n\n  <ParamField path=\"teamProfile\" type=\"ServerTeamMemberProfile\">\n    The team profile of the user.\n  </ParamField>\n</div>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/team-user.mdx"
      },
      "docs/pages/sdk/team-profile.mdx": {
        "markdown": "---\nslug: sdk/team-profile\n---\n\n\n`TeamProfile` is the profile of a user in the context of a team. There are two types of `TeamProfile`\n\n1. `TeamProfile`\n    - This is used on the client side.\n    - It contains the user's profile information for the team.\n    - You can obtain it by calling `teamUser.teamProfile` on a `TeamUser` object.\n2. `ServerTeamProfile`\n    - This is used on the server side.\n    - Currently it contains the same information as `TeamProfile`, but in the future it might contain more information.\n    - You can obtain it by calling `serverTeamUser.teamProfile` on a `ServerTeamUser` object.\n\n\n## `TeamProfile`\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"displayName\" type=\"string | null\">\n    The display name of the user.\n  </ParamField>\n  <ParamField path=\"profileImageUrl\" type=\"string | null\">\n    The profile image URL of the user.\n  </ParamField>\n</div>\n\n## `ServerTeamProfile`\n\nSame as `TeamProfile`.\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/team-profile.mdx"
      },
      "docs/pages/sdk/team-permission.mdx": {
        "markdown": "---\nslug: sdk/team-permission\n---\n\n\n`TeamPermission` represents that a user has a certain permission for a team. It is currently very simple and only contains an id.\n\nIt can be obtained by calling functions like `user.getPermission()` or `user.listPermissions()`.\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The id of the permission.\n  </ParamField>\n</div>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/team-permission.mdx"
      },
      "docs/pages/sdk/project.mdx": {
        "markdown": "---\nslug: sdk/project\n---\n\nThe `Project` object contains the information and configuration of a project like the name, description, enabled auth methods, etc.\n\nYou can obtain a `Project` object by calling `stackApp.getProject()` or `useProject()`.\n\n## `Project`\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The id of the project.\n  </ParamField>\n\n  <ParamField path=\"displayName\" type=\"string\">\n    The display name of the project.\n  </ParamField>\n\n  <ParamField path=\"config\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"signUpEnabled\" type=\"boolean\">\n        Whether sign up is enabled for the project.\n      </ParamField>\n\n      <ParamField path=\"credentialEnabled\" type=\"boolean\">\n        Whether credential auth is enabled for the project.\n      </ParamField>\n\n      <ParamField path=\"magicLinkEnabled\" type=\"boolean\">\n        Whether magic link auth is enabled for the project.\n      </ParamField>\n\n      <ParamField path=\"clientTeamCreationEnabled\" type=\"boolean\">\n        Whether client-side team creation is enabled for the project.\n      </ParamField>\n\n      <ParamField path=\"clientUserDeletionEnabled\" type=\"boolean\">\n        Whether client-side user deletion is enabled for the project.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/project.mdx"
      },
      "docs/pages/sdk/contact-channel.mdx": {
        "markdown": "---\nslug: sdk/contact-channel\n---\n\n`ContactChannel` represents a user's contact information, such as an email address. In the future, it will support additional contact types like phone numbers. Contact channels can optionally be used for authentication.\n\nStack provides two types of contact channels:\n\n1. `ContactChannel`\n    - Used on the client side\n    - Contains basic information like the contact value (e.g. email address) and type\n    - You can obtain it by calling `user.listContactChannels()` or `user.useContactChannels()`\n2. `ServerContactChannel`\n    - Used on the server side\n    - Extends `ContactChannel` with additional properties:\n      - Verification status\n      - Whether it's the user's primary contact channel\n    - You can obtain it by calling `serverUser.listContactChannels()` or `serverUser.useContactChannels()`\n\n## `ContactChannel`\n\n### Properties\n\n<div className=\"indented\">\n  <ParamField path=\"id\" type=\"string\">\n    The id of the contact channel.\n  </ParamField>\n  <ParamField path=\"value\" type=\"string\">\n    The value of the contact channel. If type is `\"email\"`, this is an email address.\n  </ParamField>\n  <ParamField path=\"type\" type=\"'email'\">\n    The type of the contact channel. Currently always `\"email\"`.\n  </ParamField>\n  <ParamField path=\"isPrimary\" type=\"boolean\">\n    Whether the contact channel is the user's primary contact channel. If an email is set to primary, it will be the value on the `user.primaryEmail` field.\n  </ParamField>\n  <ParamField path=\"isVerified\" type=\"boolean\">\n    Whether the contact channel is verified.\n  </ParamField>\n  <ParamField path=\"usedForAuth\" type=\"boolean\">\n    Whether the contact channel is used for authentication. If set to `true`, the user can use this contact channel together with OTP or password to sign in.\n  </ParamField>\n</div>\n\n### `sendVerificationEmail()`\n\nSends a verification email to this contact channel. Once the user clicks the verification link in the email, the contact channel will be marked as verified.\n\nThis method will throw an error if the contact channel has already been verified.\n\n**Parameters:**\n\n<div className=\"indented\">\n  None\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait contactChannel.sendVerificationEmail();\n```\n\n### `update()`\n\nUpdate the contact channel.\n\nAfter updating the value, the contact channel will be marked as unverified.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"value\" type=\"string\">\n        The new value of the contact channel.\n      </ParamField>\n      <ParamField path=\"type\" type=\"'email'\">\n        The new type of the contact channel. Currently always `\"email\"`.\n      </ParamField>\n      <ParamField path=\"usedForAuth\" type=\"boolean\">\n        Whether the contact channel is used for authentication.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait contactChannel.update({ value: \"new-email@example.com\", usedForAuth: true });\n```\n\n### `delete()`\n\nDelete the contact channel.\n\n**Parameters:**\n\n<div className=\"indented\">\n  No parameters\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n**Example:**\n\n```typescript\nawait contactChannel.delete();\n```\n\n\n## `ServerContactChannel`\n\nIt extends `ContactChannel` with additional methods listed below.\n\n### `update()`\n\nUpdate the contact channel.\n\nThis is similar to `ContactChannel.update()`, but it also allows you to set the `isVerified` property.\n\n**Parameters:**\n\n<div className=\"indented\">\n  <ParamField path=\"options\" type=\"object\">\n    <div className=\"indented\">\n      <ParamField path=\"value\" type=\"string\">\n        The new value of the contact channel.\n      </ParamField>\n      <ParamField path=\"type\" type=\"'email'\">\n        The new type of the contact channel. Currently always `\"email\"`.\n      </ParamField>\n      <ParamField path=\"usedForAuth\" type=\"boolean\">\n        Whether the contact channel is used for authentication.\n      </ParamField>\n      <ParamField path=\"isVerified\" type=\"boolean\">\n        Whether the contact channel is verified.\n      </ParamField>\n    </div>\n  </ParamField>\n</div>\n\n**Returns:**\n\n<div className=\"indented\">\n  `Promise<void>`\n</div>\n\n\n**Example:**\n\n```typescript\nawait serverContactChannel.update({ value: \"new-email@example.com\", usedForAuth: true, isVerified: true });\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/contact-channel.mdx"
      },
      "docs/pages/sdk/use-user.mdx": {
        "markdown": "---\ntitle: useUser\n---\n\nA React hook that fetches and manages user data.\n\n## Returns\n\n- `user`: `User | null` - The user data object if available, or null if not fetched yet.\n- `loading`: `boolean` - Indicates whether the user data is currently being fetched.\n\n## Example\n\n```tsx\nimport { useUser } from '@stackframe/stack';\n\nfunction UserProfile() {\n  const { user, loading } = useUser();\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!user) {\n    return <div>User not found</div>;\n  }\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>Email: {user.email}</p>\n    </div>\n  );\n}\n``````jsx\nimport { useUser } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  const user = useUser({ or: \"redirect\" }); // user is garanteed to be non-null\n  return <div>Hello, {user.name}</div>;\n}\n```\n\nThe same hook can also be used to protect a page. (You might also want to check out the server-side version [here](/getting-started/users))\n```jsx\nimport { useUser } from \"@stackframe/stack\";\n\nfunction MyProtectedPage() {\n  useUser({ or: \"redirect\" });\n  return <div>You can only see this if you are authenticated</div>;\n}\n```\n\n## Throw an error when not authenticated\n\nBy passing `{ or: \"throw\" }` into the hook, it will throw an error if the user is not authenticated. This can be used for places where the user should never be unauthenticated if the app is working correctly.\n```jsx\nimport { useUser } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  // user is garanteed to be non-null, but an error will be thrown if the user is not authenticated\n  const user = useUser({ or: \"throw\" }); \n\n  return <div>Hello, {user.name}</div>;\n}\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/use-user.mdx"
      },
      "docs/pages/sdk/use-stack-app.mdx": {
        "markdown": "---\nslug: sdk/use-stack-app\n---\n\nThe `useStackApp` hook returns the `StackClientApp` object that you can use to interact with the Stack API. If you want to learn more about the `StackClientApp` object, check out the [StackApp](/sdk/stack-app) documentation.\n\nExample:\n\n```jsx\nimport { useStackApp } from \"@stackframe/stack\";\n\nfunction MyComponent() {\n  const stackApp = useStackApp();\n  return <div>Sign In URL: {stackApp.urls.signIn}</div>;\n}\n```\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/sdk/use-stack-app.mdx"
      },
      "docs/pages/rest-api/auth.mdx": {
        "markdown": "---\nslug: rest-api/auth\nsubtitle: REST API Overview\n---\n\nStack offers a REST API for backends & frontends of any programming language or framework. This API is used to authenticate users, manage user data, and more.\n\n## Authentication\n\nThe following authentication headers are common to every endpoint:\n\n```http\ncurl https://api.stack-auth.com/api/v1/ \\\n     -H \"X-Stack-Access-Type: <either 'client' or 'server'>\" \\\n     -H \"X-Stack-Project-Id: <your project UUID>\" \\\n     -H \"X-Stack-Publishable-Client-Key: pck_<your publishable client key>\" \\\n     -H \"X-Stack-Secret-Server-Key: ssk_<your secret server key>\" \\\n     -H \"X-Stack-Access-Token: <the current user's access token>\"\n```\n\n| Header | Type | Description |\n| ------ | ---- | ----------- |\n| `X-Stack-Access-Type` | \"client\" \\| \"server\" | Required. \"client\" (without quotes) for the frontend API, or \"server\" for the backend API. |\n| `X-Stack-Project-Id` | UUID | Required. The project ID as found on the Stack dashboard. |\n| `X-Stack-Publishable-Client-Key` | string | Required for client access. The API key as found on the Stack dashboard. |\n| `X-Stack-Secret-Server-Key` | string | Required for server access. The API key as found on the Stack dashboard. |\n| `X-Stack-Access-Token` | string | Optional. The access token for the current user. If not given, the request is considered to be logged out. |\n\nTo see how to use these headers in various programming languages, see the [examples](/concepts/backend-integration).\n\n## FAQ\n\n<AccordionGroup>\n  <Accordion title=\"Which languages are supported?\">\n    Any language that has the ability to send HTTP requests can use the Stack REST API. This includes JavaScript, Python, Ruby, Java, Go, C#, Dart, and many more. \n  </Accordion>\n  <Accordion title=\"Should I use client or server access type?\">\n    Client access type is mostly used for client-side applications, like a browser or mobile app. The client APIs can only read and update the currently authenticated user's data, and it is usually fine to post the publishable client key in the client-side code.\n\n    Server access type, on the other hand, is for your backend server that you control. It has full access over all user data, and the secret server key should never be exposed to client-side code.\n\n    For more information, see the concept documentation on [StackApp](../concepts/stack-app#client-vs-server).\n  </Accordion>\n  <Accordion title=\"What is this 'admin' access type that I see?\">\n    If you'd like to build your own version of the Stack dashboard (or update project configuration programmatically), you can use the `admin` access type. These endpoints are very dangerous and you should only use them if you know what you're doing.\n\n    For more information, see the concept documentation on [StackApp](../concepts/stack-app#client-vs-server).\n  </Accordion>\n</AccordionGroup>\n",
        "editThisPageUrl": "https://github.com/stack-auth/stack/blob/dev/docs/fern/docs/pages/rest-api/auth.mdx"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_stack-auth.docs.buildwithfern.com_51148247-8408-4a53-8c02-94334872c2ce",
          "searchApiKey": "OWYxYzBjZjRmNzZiMDQ3ODJjZTgyNDE1MjRmNzY4NGJlMzU2NzVmOWJhYTE4OWQ0YjM4YzExYzAyNDAyMjFlMGZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfc3RhY2stYXV0aC5kb2NzLmJ1aWxkd2l0aGZlcm4uY29tXzUxMTQ4MjQ3LTg0MDgtNGE1My04YzAyLTk0MzM0ODcyYzJjZSZ2YWxpZFVudGlsPTE3MzA4MjkxNzY="
        }
      }
    },
    "id": "docs_definition_63fffeb5-2af3-4e2a-9488-1c3f438932e7"
  },
  "lightModeEnabled": true
}
