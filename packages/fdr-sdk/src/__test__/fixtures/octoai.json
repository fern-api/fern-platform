{
  "baseUrl": {
    "domain": "octo.ai",
    "basePath": "/docs"
  },
  "definition": {
    "config": {
      "navigation": {
        "tabs": [
          {
            "type": "group",
            "title": "Documentation",
            "items": [
              {
                "type": "section",
                "title": "Quickstart",
                "urlSlug": "quickstart",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/getting-started/quickstart.mdx",
                    "title": "Quickstart",
                    "urlSlug": "quickstart",
                    "fullSlug": ["getting-started", "quickstart"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/getting-started/pricing-and-billing.mdx",
                    "title": "Pricing & billing",
                    "urlSlug": "pricing-billing",
                    "fullSlug": ["getting-started", "pricing-and-billing"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/rest-api.mdx",
                    "title": "Text Gen REST API",
                    "urlSlug": "text-gen-rest-api",
                    "fullSlug": ["text-gen-solution", "rest-api"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/migration-from-openai.mdx",
                    "title": "Migrate from OpenAI to OctoAI in 3 lines of code",
                    "urlSlug": "migrate-from-open-ai-to-octo-ai-in-3-lines-of-code",
                    "fullSlug": ["text-gen-solution", "migration-from-openai"],
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Media Gen REST APIs",
                    "urlSlug": "media-gen-rest-ap-is",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/rest-apis/image-gen-api.mdx",
                        "title": "Image Gen",
                        "urlSlug": "image-gen",
                        "fullSlug": ["media-gen-solution", "rest-apis", "image-gen-api"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/rest-apis/video-gen.mdx",
                        "title": "Video Gen",
                        "urlSlug": "video-gen",
                        "fullSlug": ["media-gen-solution", "rest-apis", "video-gen"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/rest-apis/background-removal.mdx",
                        "title": "Background Removal",
                        "urlSlug": "background-removal",
                        "fullSlug": ["media-gen-solution", "rest-apis", "background-removal"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/rest-apis/upscaling.mdx",
                        "title": "Upscaling",
                        "urlSlug": "upscaling",
                        "fullSlug": ["media-gen-solution", "rest-apis", "upscaling"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/rest-apis/adetailer.mdx",
                        "title": "Adetailer",
                        "urlSlug": "adetailer",
                        "fullSlug": ["media-gen-solution", "rest-apis", "adetailer"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "page",
                    "id": "docs/getting-started/inference-models.mdx",
                    "title": "Inference models",
                    "urlSlug": "inference-models",
                    "fullSlug": ["getting-started", "inference-models"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/getting-started/how-to-create-an-octoai-access-token.mdx",
                    "title": "Create an API token",
                    "urlSlug": "create-an-api-token",
                    "fullSlug": ["getting-started", "how-to-create-an-octoai-access-token"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Text Gen Solution",
                "urlSlug": "text-gen-solution",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/getting-started.mdx",
                    "title": "Getting started",
                    "urlSlug": "getting-started",
                    "fullSlug": ["text-gen-solution", "getting-started"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/python-sdk.mdx",
                    "title": "Text Gen Python SDK",
                    "urlSlug": "text-gen-python-sdk",
                    "fullSlug": ["text-gen-solution", "python-sdk"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/typescript-sdk.mdx",
                    "title": "Text Gen TypeScript SDK",
                    "urlSlug": "text-gen-type-script-sdk",
                    "fullSlug": ["text-gen-solution", "typescript-sdk"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/json-mode.mdx",
                    "title": "Using JSON mode with Text Gen endpoints",
                    "urlSlug": "using-json-mode-with-text-gen-endpoints",
                    "fullSlug": ["text-gen-solution", "json-mode"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/llama-guard.mdx",
                    "title": "Using Llama Guard to moderate text",
                    "urlSlug": "using-llama-guard-to-moderate-text",
                    "fullSlug": ["text-gen-solution", "llama-guard"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/text-gen-solution/using-unstructured-io-for-embedding-documents.mdx",
                    "title": "Using Unstructured.io for embedding documents",
                    "urlSlug": "using-unstructured-io-for-embedding-documents",
                    "fullSlug": ["text-gen-solution", "using-unstructured-io-for-embedding-documents"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Media Gen Solution",
                "urlSlug": "media-gen-solution",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/media-gen-solution/getting-started.mdx",
                    "title": "Getting started",
                    "urlSlug": "getting-started",
                    "fullSlug": ["media-gen-solution", "getting-started"],
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Customizations",
                    "urlSlug": "customizations",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/customizations/overview.mdx",
                        "title": "Overview",
                        "urlSlug": "overview",
                        "fullSlug": ["media-gen-solution", "customizations", "overview"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/customizations/checkpoints.mdx",
                        "title": "Checkpoints",
                        "urlSlug": "checkpoints",
                        "fullSlug": ["media-gen-solution", "customizations", "checkpoints"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/customizations/loras.mdx",
                        "title": "LoRAs",
                        "urlSlug": "lo-r-as",
                        "fullSlug": ["media-gen-solution", "customizations", "loras"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/customizations/textual-inversions.mdx",
                        "title": "Textual Inversions",
                        "urlSlug": "textual-inversions",
                        "fullSlug": ["media-gen-solution", "customizations", "textual-inversions"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/customizations/prompt-weighting.mdx",
                        "title": "Prompt Weighting",
                        "urlSlug": "prompt-weighting",
                        "fullSlug": ["media-gen-solution", "customizations", "prompt-weighting"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/customizations/controlnets.mdx",
                        "title": "ControlNets",
                        "urlSlug": "control-nets",
                        "fullSlug": ["media-gen-solution", "customizations", "controlnets"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "section",
                    "title": "Optimizations",
                    "urlSlug": "optimizations",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/optimizations/sdxl-lighting.mdx",
                        "title": "SDXL Lighting",
                        "urlSlug": "sdxl-lighting",
                        "fullSlug": ["media-gen-solution", "optimizations", "sdxl-lighting"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/optimizations/ssd.mdx",
                        "title": "SSD",
                        "urlSlug": "ssd",
                        "fullSlug": ["media-gen-solution", "optimizations", "ssd"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/optimizations/samplers.mdx",
                        "title": "Samplers",
                        "urlSlug": "samplers",
                        "fullSlug": ["media-gen-solution", "optimizations", "samplers"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "page",
                    "id": "docs/python-sdk/image-generator-client.mdx",
                    "title": "Image Generator Python client",
                    "urlSlug": "image-generator-python-client",
                    "fullSlug": ["python-sdk", "image-generator-client"],
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Fine-tuning Stable Diffusion",
                    "urlSlug": "fine-tuning-stable-diffusion",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/fine-tuning-stable-diffusion/fine-tuning-stable-diffusion.mdx",
                        "title": "Overview",
                        "urlSlug": "overview",
                        "fullSlug": [
                          "media-gen-solution",
                          "fine-tuning-stable-diffusion",
                          "fine-tuning-stable-diffusion"
                        ],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/fine-tuning-stable-diffusion/typescript-sdk-finetuning.mdx",
                        "title": "TypeScript SDK",
                        "urlSlug": "type-script-sdk",
                        "fullSlug": ["media-gen-solution", "fine-tuning-stable-diffusion", "typescript-sdk-finetuning"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "section",
                    "title": "Managing custom assets with Asset Library",
                    "urlSlug": "managing-custom-assets-with-asset-library",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/uploading-a-custom-asset-to-the-octoai-asset-library.mdx",
                        "title": "Uploading custom assets",
                        "urlSlug": "uploading-custom-assets",
                        "fullSlug": ["media-gen-solution", "uploading-a-custom-asset-to-the-octoai-asset-library"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/python-sdk/asset-orchestrator-client.mdx",
                        "title": "Asset Library Python client",
                        "urlSlug": "asset-library-python-client",
                        "fullSlug": ["python-sdk", "asset-orchestrator-client"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/typescript-sdk/asset-library.mdx",
                        "title": "Asset Library TypeScript client",
                        "urlSlug": "asset-library-type-script-client",
                        "fullSlug": ["typescript-sdk", "asset-library"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "section",
                    "title": "Supported image utilities",
                    "urlSlug": "supported-image-utilities",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/image-utilities/inpainting.mdx",
                        "title": "Inpainting",
                        "urlSlug": "inpainting",
                        "fullSlug": ["media-gen-solution", "image-utilities", "inpainting"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/image-utilities/outpainting.mdx",
                        "title": "Outpainting",
                        "urlSlug": "outpainting",
                        "fullSlug": ["media-gen-solution", "image-utilities", "outpainting"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/image-utilities/adetailer.mdx",
                        "title": "Adetailer",
                        "urlSlug": "adetailer",
                        "fullSlug": ["media-gen-solution", "image-utilities", "adetailer"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/image-utilities/photo-merge.mdx",
                        "title": "Photo Merge",
                        "urlSlug": "photo-merge",
                        "fullSlug": ["media-gen-solution", "image-utilities", "photo-merge"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/image-utilities/upscaling.mdx",
                        "title": "Upscaling",
                        "urlSlug": "upscaling",
                        "fullSlug": ["media-gen-solution", "image-utilities", "upscaling"],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/media-gen-solution/image-utilities/bg-removal.mdx",
                        "title": "Background Removal",
                        "urlSlug": "background-removal",
                        "fullSlug": ["media-gen-solution", "image-utilities", "bg-removal"],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Private Deployment",
                "urlSlug": "private-deployment",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/private-deployment/octostack.mdx",
                    "title": "OctoStack",
                    "urlSlug": "octo-stack",
                    "fullSlug": ["private-deployment", "octostack"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/private-deployment/secure-link.mdx",
                    "title": "SecureLink guide",
                    "urlSlug": "secure-link-guide",
                    "fullSlug": ["private-deployment", "secure-link"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Compute Service",
                "urlSlug": "compute-service",
                "collapsed": true,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/compute-service/compute-getting-started.mdx",
                    "title": "Getting started",
                    "urlSlug": "getting-started",
                    "fullSlug": ["compute-service", "compute-getting-started"],
                    "hidden": false
                  },
                  {
                    "type": "section",
                    "title": "Create an endpoint from an existing container",
                    "urlSlug": "create-an-endpoint-from-an-existing-container",
                    "collapsed": false,
                    "hidden": false,
                    "items": [
                      {
                        "type": "page",
                        "id": "docs/compute-service/create-endpoint-from-existing-container/create-custom-endpoints-from-a-container.mdx",
                        "title": "Overview",
                        "urlSlug": "overview",
                        "fullSlug": [
                          "compute-service",
                          "create-endpoint-from-existing-container",
                          "create-custom-endpoints-from-a-container"
                        ],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/compute-service/create-endpoint-from-existing-container/pulling-containers-from-a-private-registry.mdx",
                        "title": "Pulling containers from a private registry",
                        "urlSlug": "pulling-containers-from-a-private-registry",
                        "fullSlug": [
                          "compute-service",
                          "create-endpoint-from-existing-container",
                          "pulling-containers-from-a-private-registry"
                        ],
                        "hidden": false
                      },
                      {
                        "type": "page",
                        "id": "docs/compute-service/create-endpoint-from-existing-container/setting-account-wide-secrets-for-custom-endpoints.mdx",
                        "title": "Setting up account-wide secrets for your custom endpoints",
                        "urlSlug": "setting-up-account-wide-secrets-for-your-custom-endpoints",
                        "fullSlug": [
                          "compute-service",
                          "create-endpoint-from-existing-container",
                          "setting-account-wide-secrets-for-custom-endpoints"
                        ],
                        "hidden": false
                      }
                    ],
                    "skipUrlSlug": false
                  },
                  {
                    "type": "page",
                    "id": "docs/compute-service/create-custom-endpoint-using-the-cli.mdx",
                    "title": "Create a container and endpoint using the CLI",
                    "urlSlug": "create-a-container-and-endpoint-using-the-cli",
                    "fullSlug": ["compute-service", "create-custom-endpoint-using-the-cli"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/compute-service/advanced-build-a-container-from-scratch-in-python.mdx",
                    "title": "Advanced: build a container from scratch in Python",
                    "urlSlug": "advanced-build-a-container-from-scratch-in-python",
                    "fullSlug": ["compute-service", "advanced-build-a-container-from-scratch-in-python"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/compute-service/health-check-path-in-custom-containers.mdx",
                    "title": "Healthcheck path in custom containers",
                    "urlSlug": "healthcheck-path-in-custom-containers",
                    "fullSlug": ["compute-service", "health-check-path-in-custom-containers"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "CLI",
                "urlSlug": "cli",
                "collapsed": true,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/cli/cli-and-sdk-installation.mdx",
                    "title": "CLI installation",
                    "urlSlug": "cli-installation",
                    "fullSlug": ["cli", "cli-and-sdk-installation"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/cli/cli-reference-guide.mdx",
                    "title": "CLI reference",
                    "urlSlug": "cli-reference",
                    "fullSlug": ["cli", "cli-reference-guide"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "Python SDK",
                "urlSlug": "python-sdk",
                "collapsed": true,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/python-sdk/installation-and-setup.mdx",
                    "title": "Python SDK installation",
                    "urlSlug": "python-sdk-installation",
                    "fullSlug": ["python-sdk", "installation-and-setup"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/python-sdk/python-sdk-inferences.mdx",
                    "title": "Python SDK inference",
                    "urlSlug": "python-sdk-inference",
                    "fullSlug": ["python-sdk", "python-sdk-inferences"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/python-sdk/upgrading-from-old-sdk.mdx",
                    "title": "Upgrading from octoai-sdk",
                    "urlSlug": "upgrading-from-octoai-sdk",
                    "fullSlug": ["python-sdk", "upgrading-from-old-sdk"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "TypeScript SDK",
                "urlSlug": "type-script-sdk",
                "collapsed": true,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/typescript-sdk/installation-and-setup.mdx",
                    "title": "TypeScript SDK installation",
                    "urlSlug": "type-script-sdk-installation",
                    "fullSlug": ["typescript-sdk", "installation-and-setup"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/typescript-sdk/upgrading-from-old-sdk.mdx",
                    "title": "Upgrading from @octoai/client",
                    "urlSlug": "upgrading-from-octoai-client",
                    "fullSlug": ["typescript-sdk", "upgrading-from-old-sdk"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "FAQs",
                "urlSlug": "fa-qs",
                "collapsed": true,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/faqs/rate-limits.mdx",
                    "title": "Rate limits",
                    "urlSlug": "rate-limits",
                    "fullSlug": ["faqs", "rate-limits"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/faqs/privacy-and-security.mdx",
                    "title": "Privacy & security",
                    "urlSlug": "privacy-security",
                    "fullSlug": ["faqs", "privacy-and-security"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/faqs/rag.mdx",
                    "title": "RAG with OctoAI",
                    "urlSlug": "rag-with-octo-ai",
                    "fullSlug": ["faqs", "rag"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/faqs/service-regions.mdx",
                    "title": "Service regions",
                    "urlSlug": "service-regions",
                    "fullSlug": ["faqs", "service-regions"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/faqs/multi-user-accounts.mdx",
                    "title": "Multi-user accounts",
                    "urlSlug": "multi-user-accounts",
                    "fullSlug": ["faqs", "multi-user-accounts"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/faqs/open-source-licenses.mdx",
                    "title": "Open source licenses",
                    "urlSlug": "open-source-licenses",
                    "fullSlug": ["faqs", "open-source-licenses"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlug": "documentation"
          },
          {
            "type": "group",
            "title": "API Reference",
            "items": [
              {
                "type": "section",
                "title": "OctoAI API",
                "urlSlug": "octoai-api",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/api-reference/octoai-api/authentication.mdx",
                    "title": "Authentication",
                    "urlSlug": "authentication",
                    "fullSlug": ["api-reference", "octoai-api", "authentication"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/api-reference/octoai-api/inference.mdx",
                    "title": "Inference",
                    "urlSlug": "inference",
                    "fullSlug": ["api-reference", "octoai-api", "inference"],
                    "hidden": false
                  },
                  {
                    "type": "api",
                    "title": "OctoAI API",
                    "api": "cb786748-d42f-427d-9c21-00e6c59bd56c",
                    "skipUrlSlug": true,
                    "showErrors": false,
                    "navigation": {
                      "items": []
                    },
                    "flattened": true,
                    "hidden": false,
                    "urlSlug": "octo-ai-api"
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "api",
                "title": "OctoAI API",
                "api": "270fcb14-fecb-45b5-8075-3e207a0d4b31",
                "skipUrlSlug": true,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": true,
                "hidden": false,
                "urlSlug": "octo-ai-api"
              },
              {
                "type": "api",
                "title": "Media Utilities API",
                "api": "2eeac53f-90cc-492b-9d29-e3ed711d7704",
                "urlSlugOverride": "media-util",
                "skipUrlSlug": false,
                "showErrors": false,
                "navigation": {
                  "items": []
                },
                "flattened": false,
                "hidden": false,
                "urlSlug": "media-util"
              }
            ],
            "urlSlugOverride": "api-reference",
            "urlSlug": "api-reference"
          },
          {
            "type": "group",
            "title": "Integrations",
            "items": [
              {
                "type": "section",
                "title": "Integrations",
                "urlSlug": "integrations",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/integrations/overview.mdx",
                    "title": "All",
                    "urlSlug": "all",
                    "fullSlug": ["integrations", "overview"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/integrations/langchain.mdx",
                    "title": "LangChain",
                    "urlSlug": "lang-chain",
                    "fullSlug": ["integrations", "langchain"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/integrations/pinecone.mdx",
                    "title": "Pinecone",
                    "urlSlug": "pinecone",
                    "fullSlug": ["integrations", "pinecone"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/integrations/unstructured.mdx",
                    "title": "Unstructured.io",
                    "urlSlug": "unstructured-io",
                    "fullSlug": ["integrations", "unstructured"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/integrations/openrouter.mdx",
                    "title": "OpenRouter",
                    "urlSlug": "open-router",
                    "fullSlug": ["integrations", "openrouter"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/integrations/llamaindex.mdx",
                    "title": "LlamaIndex",
                    "urlSlug": "llama-index",
                    "fullSlug": ["integrations", "llamaindex"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "integrations",
            "urlSlug": "integrations"
          },
          {
            "type": "group",
            "title": "Release Notes",
            "items": [
              {
                "type": "section",
                "title": "2024",
                "urlSlug": "2024",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/release-notes/2024/may.mdx",
                    "title": "May",
                    "urlSlug": "may",
                    "fullSlug": ["release-notes", "2024", "may"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2024/april.mdx",
                    "title": "April",
                    "urlSlug": "april",
                    "fullSlug": ["release-notes", "2024", "april"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2024/february.mdx",
                    "title": "February",
                    "urlSlug": "february",
                    "fullSlug": ["release-notes", "2024", "february"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2024/january.mdx",
                    "title": "January",
                    "urlSlug": "january",
                    "fullSlug": ["release-notes", "2024", "january"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              },
              {
                "type": "section",
                "title": "2023",
                "urlSlug": "2023",
                "collapsed": false,
                "hidden": false,
                "items": [
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/december.mdx",
                    "title": "December",
                    "urlSlug": "december",
                    "fullSlug": ["release-notes", "2023", "december"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/november.mdx",
                    "title": "November",
                    "urlSlug": "november",
                    "fullSlug": ["release-notes", "2023", "november"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/october.mdx",
                    "title": "October",
                    "urlSlug": "october",
                    "fullSlug": ["release-notes", "2023", "october"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/september.mdx",
                    "title": "September",
                    "urlSlug": "september",
                    "fullSlug": ["release-notes", "2023", "september"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/august.mdx",
                    "title": "August",
                    "urlSlug": "august",
                    "fullSlug": ["release-notes", "2023", "august"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/july.mdx",
                    "title": "July",
                    "urlSlug": "july",
                    "fullSlug": ["release-notes", "2023", "july"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/june.mdx",
                    "title": "June",
                    "urlSlug": "june",
                    "fullSlug": ["release-notes", "2023", "june"],
                    "hidden": false
                  },
                  {
                    "type": "page",
                    "id": "docs/release-notes/2023/may.mdx",
                    "title": "May",
                    "urlSlug": "may",
                    "fullSlug": ["release-notes", "2023", "may"],
                    "hidden": false
                  }
                ],
                "skipUrlSlug": false
              }
            ],
            "urlSlugOverride": "release-notes",
            "urlSlug": "release-notes"
          },
          {
            "type": "link",
            "title": "Community",
            "icon": "brands discord",
            "url": "https://discord.com/invite/rXTPeRBcG7"
          },
          {
            "type": "link",
            "title": "Support",
            "icon": "duotone headset",
            "url": "https://discord.com/channels/1085222662504194098/1085613782006509600"
          }
        ]
      },
      "logoHeight": 28,
      "logoHref": "https://octo.ai/",
      "colorsV3": {
        "type": "darkAndLight",
        "light": {
          "accentPrimary": {
            "r": 0,
            "g": 150,
            "b": 255,
            "a": 1
          },
          "logo": "3f0a7ef8-4d3c-4ee5-b046-cbc13cef6274",
          "background": {
            "type": "gradient"
          },
          "backgroundImage": "12c01624-1783-4e1e-9ffe-2034acd4154c"
        },
        "dark": {
          "accentPrimary": {
            "r": 0,
            "g": 150,
            "b": 255,
            "a": 1
          },
          "logo": "25b9c627-4c15-4398-be27-8040160c2b74",
          "background": {
            "type": "gradient"
          },
          "backgroundImage": "a1db33e3-0540-4764-92e6-e56ce4eb32e0"
        }
      },
      "navbarLinks": [
        {
          "type": "secondary",
          "text": "Login",
          "url": "https://identity.octo.ai/oauth/account/login?redirectUrl=https://octoai.cloud"
        },
        {
          "type": "filled",
          "text": "Sign up",
          "url": "https://identity.octo.ai/oauth/account/sign-up?redirectUrl=https://octoai.cloud"
        }
      ],
      "title": "OctoAI",
      "favicon": "d2848057-bb27-44c5-9e9f-5e358a6a9c29",
      "typographyV2": {
        "headingsFont": {
          "type": "custom",
          "name": "Faktum",
          "variants": [
            {
              "fontFile": "28634fb5-e7bf-48e5-8950-ec75598f9a33",
              "weight": ["400"],
              "style": ["normal"]
            },
            {
              "fontFile": "67ace420-e431-4047-9031-39b01a0815f9",
              "weight": ["500"],
              "style": ["normal"]
            },
            {
              "fontFile": "d2caeedb-042a-459b-a10e-9d090167ea4f",
              "weight": ["600"],
              "style": ["normal"]
            }
          ]
        },
        "bodyFont": {
          "type": "custom",
          "name": "Faktum",
          "variants": [
            {
              "fontFile": "28634fb5-e7bf-48e5-8950-ec75598f9a33",
              "weight": ["400"],
              "style": ["normal"]
            },
            {
              "fontFile": "67ace420-e431-4047-9031-39b01a0815f9",
              "weight": ["500"],
              "style": ["normal"]
            },
            {
              "fontFile": "d2caeedb-042a-459b-a10e-9d090167ea4f",
              "weight": ["600"],
              "style": ["normal"]
            }
          ]
        }
      },
      "layout": {
        "pageWidth": {
          "type": "px",
          "value": 1440
        },
        "sidebarWidth": {
          "type": "px",
          "value": 292
        },
        "headerHeight": {
          "type": "px",
          "value": 69
        },
        "searchbarPlacement": "HEADER",
        "tabsPlacement": "HEADER",
        "contentAlignment": "CENTER",
        "headerPosition": "FIXED",
        "disableHeader": false
      },
      "css": {
        "inline": [
          "html {\n  background-image: var(--docs-background-image);\n}\n\n:root {\n  --accent-aa: 0, 136, 255;\n  --accent-aaa: 0, 150, 255;\n  --slate-a11y: #667085;\n}\n\n:is(.dark) {\n  --accent-aa: 134, 205, 255;\n  --accent-aaa: 53, 165, 255;\n}\n\n.prose {\n  --tw-prose-code: #c93822;\n  --tw-prose-invert-code: #32d583;\n}\n\n#fern-header .fern-background {\n  background: #f7f8f8;\n}\n.dark #fern-header .fern-background {\n  background: rgba(255, 255, 255, 0.05);\n}\n\n.fern-background::after {\n  content: \"\";\n  background: url(\"https://octo.ai/assets/images/noise.png\");\n  background-size: 143px 50px;\n  opacity: 0.2;\n  pointer-events: none;\n  mix-blend-mode: overlay;\n  display: block;\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n\n.dark .fern-background::after {\n  display: none;\n}\n\n.fern-sidebar-link-container[data-state=\"active\"] .fern-sidebar-link {\n  background-color: #e8f5ff;\n  color: #0c5dbb;\n}\n\n.dark .fern-sidebar-link-container[data-state=\"active\"] .fern-sidebar-link {\n  background-color: rgba(255, 255, 255, 0.05);\n  color: #b2deff;\n}\n\n.fern-sidebar-container\n  > nav\n  > .fern-scroll-area\n  > .fern-scroll-area-viewport\n  > div\n  > ul.fern-sidebar-group\n  > .fern-sidebar-item\n  > .fern-sidebar-link-container\n  > button.fern-sidebar-link\n  > .fern-sidebar-link-content\n  > .fern-sidebar-link-text {\n  font-weight: 600;\n  color: #000000;\n}\n\n.dark\n  .fern-sidebar-container\n  > nav\n  > .fern-scroll-area\n  > .fern-scroll-area-viewport\n  > div\n  > ul.fern-sidebar-group\n  > .fern-sidebar-item\n  > .fern-sidebar-link-container\n  > button.fern-sidebar-link\n  > .fern-sidebar-link-content\n  > .fern-sidebar-link-text {\n  color: #ffffff;\n}\n\ntable {\n  table-layout: fixed;\n}\n\ntable td.p-3 {\n  padding: 0.75rem 1rem;\n  white-space: normal;\n}\ntable td + td {\n  border-left: 1px solid var(--border);\n}\n\n.changelog {\n  padding-bottom: 12px;\n  position: relative;\n}\n\n.changelog::after {\n  content: \"\";\n  position: absolute;\n  display: block;\n  width: 100%;\n  height: 100%;\n  bottom: -10px;\n  left: 0;\n  border-bottom: 1px solid rgb(208, 208, 208);\n  pointer-events: none;\n}\n\n.changelog:last-of-type::after {\n  display: none;\n}\n\n.dark .changelog::after {\n  border-bottom: 1px solid rgb(37, 41, 45);\n}\n\n.changelog-status {\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 12px;\n  padding-top: 32px;\n  margin-bottom: -65px;\n  position: relative;\n}\n\n.changelog-status span {\n  text-transform: uppercase;\n  font-size: 14px;\n  letter-spacing: 2px;\n  font-weight: bold;\n  color: #646464;\n}\n\n.dark .changelog-status span {\n  color: #bbbbbb;\n}\n.data-\\[state\\=inactive\\]\\:t-muted[data-state=\"inactive\"],\n.t-muted {\n  color: #667085;\n}\n\n.prose-p\\:t-muted\n  :is(:where(p):not(:where([class~=\"not-prose\"], [class~=\"not-prose\"] *))) {\n  color: #475467;\n}\n\n.fern-card.interactive .space-y-1 > .t-default.text-base.font-semibold {\n  display: none;\n}\n\n.fern-card.interactive .t-muted .title {\n  display: block;\n  margin: 12px 0;\n  font-weight: 600;\n  color: #000000;\n}\n\n.dark .fern-card.interactive .t-muted .title {\n  color: #ffffff;\n}\n\n.fern-card.interactive .t-muted img {\n  height: 60px;\n  width: auto;\n  max-width: 72px;\n}\n\n.dark .fern-card.interactive .t-muted .langchain img {\n  filter: brightness(0) saturate(100%) invert(67%) sepia(15%) saturate(1326%)\n    hue-rotate(133deg) brightness(84%) contrast(80%);\n}\n.dark .fern-card.interactive .t-muted .pinecone img {\n  filter: brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(426%)\n    hue-rotate(225deg) brightness(118%) contrast(98%);\n}\n\n.data-\\[border\\=show\\]\\:dark\\:shadow-header-dark[data-border=\"show\"] {\n  box-shadow: 0px 4px 24px 0px rgba(102, 112, 133, 0.075);\n}\n\n.data-\\[border\\=show\\]\\:dark\\:shadow-header-dark:is(\n    .dark *\n  )[data-border=\"show\"] {\n  --tw-shadow: 0px 4px 24px 0px rgba(32, 11, 108, 0.1);\n}\n\n.not-prose.bg-card > button.fern-button:not(.disabled).\\!minimal,\n.not-prose.bg-card > button.fern-button:not(.disabled).minimal {\n  background-color: #b2deff;\n  color: #000000;\n}\n\n.not-prose.bg-card > button.fern-button:not(.disabled).minimal:hover {\n  background-color: #86cdff;\n}\n\n.dark .not-prose.bg-card > button.fern-button:not(.disabled).\\!minimal,\n.dark .not-prose.bg-card > button.fern-button:not(.disabled).minimal {\n  background-color: #0c5dbb;\n  color: #ffffff;\n}\n\n.dark .not-prose.bg-card > button.fern-button:not(.disabled).minimal:hover {\n  background-color: #0096ff;\n  color: #ffffff;\n}\n"
        ]
      },
      "js": {
        "files": []
      }
    },
    "apis": {
      "cb786748-d42f-427d-9c21-00e6c59bd56c": {
        "id": "cb786748-d42f-427d-9c21-00e6c59bd56c",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_account",
            "subpackage_endpoint",
            "subpackage_telemetry",
            "subpackage_secret",
            "subpackage_registryCredential",
            "subpackage_publicEndpoint",
            "subpackage_instanceTypes"
          ],
          "types": [
            "type_:AccountStatus",
            "type_:Account",
            "type_:EndpointUpdateVisibility",
            "type_:EndpointUpdateEndpointState",
            "type_:EndpointUpdate",
            "type_:EndpointCreate",
            "type_:VolumeExperimental",
            "type_:ContainerPort",
            "type_:ContainerResponse",
            "type_:VolumeToken",
            "type_:SecretKeyValue",
            "type_:RegistryCredential",
            "type_:RegistryCredentialSummary",
            "type_:AggregationEnum",
            "type_:MetricEntry",
            "type_:EventEntry",
            "type_:EventLevel",
            "type_:Event",
            "type_:LogEntry",
            "type_:ReplicaStatus",
            "type_:Replica",
            "type_:EndpointResponse",
            "type_:HostedEndpoint",
            "type_:InstanceTypeInfoAccelerator",
            "type_:InstanceTypeInfo"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_endpoint:EndpointDeleteEndpointResponse": {
            "name": "EndpointDeleteEndpointResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_secret:SecretDeleteSecretResponse": {
            "name": "SecretDeleteSecretResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_registryCredential:RegistryCredentialDeleteRegistryCredentialResponse": {
            "name": "RegistryCredentialDeleteRegistryCredentialResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "message",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:AccountStatus": {
            "name": "AccountStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ready_trial"
                },
                {
                  "value": "ready_billed"
                },
                {
                  "value": "suspended_billing"
                },
                {
                  "value": "suspended_tos"
                },
                {
                  "value": "error"
                }
              ]
            }
          },
          "type_:Account": {
            "name": "Account",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "email",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "provider",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "country",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "company",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:AccountStatus"
                  }
                }
              ]
            }
          },
          "type_:EndpointUpdateVisibility": {
            "description": "Visibility of the endpoint",
            "name": "EndpointUpdateVisibility",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "private"
                },
                {
                  "value": "public"
                }
              ]
            }
          },
          "type_:EndpointUpdateEndpointState": {
            "description": "State of a endpoint",
            "name": "EndpointUpdateEndpointState",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "active"
                },
                {
                  "value": "disabled"
                }
              ]
            }
          },
          "type_:EndpointUpdate": {
            "name": "EndpointUpdate",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Minimum number of replicas",
                  "key": "min_replicas",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 999
                      }
                    }
                  }
                },
                {
                  "description": "Maximum number of replicas",
                  "key": "max_replicas",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 999
                      }
                    }
                  }
                },
                {
                  "description": "Time to scale to zero (in seconds)",
                  "key": "scale_to_zero",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3600
                      }
                    }
                  }
                },
                {
                  "description": "User-friendly name of the endpoint (e.g. Stable Diffusion 2.1)",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                },
                {
                  "description": "Description of the endpoint",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                },
                {
                  "description": "URL of the docker image",
                  "key": "image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The key of a registry credential used to authenticate to a private registry",
                  "key": "registry_credential",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "URL path of a health check endpoint",
                  "key": "health_check_path",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Visibility of the endpoint",
                  "key": "visibility",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EndpointUpdateVisibility"
                    }
                  }
                },
                {
                  "description": "State of a endpoint",
                  "key": "endpoint_state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EndpointUpdateEndpointState"
                    }
                  }
                },
                {
                  "description": "JSON object with environment variable overrides",
                  "key": "env_overrides",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Endpoint to query against",
                  "key": "instance_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A list of container secrets to inject as environment variables",
                  "key": "container_secrets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The maximum concurrency per replica",
                  "key": "concurrency_per_replica",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 500
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:EndpointCreate": {
            "name": "EndpointCreate",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Name of the endpoint",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "User-friendly name of the endpoint (e.g. Stable Diffusion 2.1)",
                  "key": "display_name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                },
                {
                  "description": "Description of the endpoint",
                  "key": "description",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                },
                {
                  "description": "Port number of the endpoint",
                  "key": "port",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "URL path of a health check endpoint",
                  "key": "health_check_path",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "EXPERIMENTAL: autogenerate a volume for the endpoint",
                  "key": "auto_volume_experimental",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "EXPERIMENTAL: volumes to be used by this container",
                  "key": "volumes_experimental",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:VolumeExperimental"
                      }
                    }
                  }
                },
                {
                  "description": "Minimum number of replicas",
                  "key": "min_replicas",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 999
                      }
                    }
                  }
                },
                {
                  "description": "Maximum number of replicas",
                  "key": "max_replicas",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 999
                      }
                    }
                  }
                },
                {
                  "description": "Time to scale to zero (in seconds)",
                  "key": "scale_to_zero",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 3600
                      }
                    }
                  }
                },
                {
                  "description": "URL of the docker image",
                  "key": "image_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The key of a registry credential used to authenticate to a private registry",
                  "key": "registry_credential",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Visibility of the endpoint",
                  "key": "visibility",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EndpointUpdateVisibility"
                    }
                  }
                },
                {
                  "description": "State of a endpoint",
                  "key": "endpoint_state",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EndpointUpdateEndpointState"
                    }
                  }
                },
                {
                  "description": "JSON object with environment variable overrides",
                  "key": "env_overrides",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Endpoint to query against",
                  "key": "instance_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "A list of container secrets to inject as environment variables",
                  "key": "container_secrets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "description": "The maximum concurrency per replica",
                  "key": "concurrency_per_replica",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 500
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VolumeExperimental": {
            "name": "VolumeExperimental",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "path",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "mount",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ContainerPort": {
            "name": "ContainerPort",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "port_num",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "key": "proto",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ContainerResponse": {
            "name": "ContainerResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "URL of the docker image",
                  "key": "image_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Ports exposed by container",
                  "key": "exposed_ports",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ContainerPort"
                    }
                  }
                },
                {
                  "description": "Labels for container",
                  "key": "labels",
                  "valueType": {
                    "type": "map",
                    "keyType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    },
                    "valueType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Env is a list of environment variables to be used in a container",
                  "key": "env",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:VolumeToken": {
            "name": "VolumeToken",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Opaque token for accessing the volume using OctoAI tooling (e.g. CLI)",
                  "key": "token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:SecretKeyValue": {
            "name": "SecretKeyValue",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Secret key",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Secret value",
                  "key": "value",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:RegistryCredential": {
            "name": "RegistryCredential",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The lookup key for this credential",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Username corresponding to this credential",
                  "key": "username",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The password for the credential",
                  "key": "password",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:RegistryCredentialSummary": {
            "name": "RegistryCredentialSummary",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The lookup key for this credntial",
                  "key": "key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Username corresponding to this credential",
                  "key": "username",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:AggregationEnum": {
            "name": "AggregationEnum",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "1m"
                },
                {
                  "value": "30m"
                },
                {
                  "value": "1h"
                },
                {
                  "value": "24h"
                }
              ]
            }
          },
          "type_:MetricEntry": {
            "name": "MetricEntry",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "the number of 2xx response codes",
                  "key": "count_2xx",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "the number of 3xx response codes",
                  "key": "count_3xx",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "the number of 4xx response codes",
                  "key": "count_4xx",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "the number of 5xx response codes",
                  "key": "count_5xx",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "the quantile for p99 response times in milliseconds",
                  "key": "p99_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "the quantile for p95 response times in milliseconds",
                  "key": "p95_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "the quantile for p50 response times in milliseconds",
                  "key": "p50_millis",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                }
              ]
            }
          },
          "type_:EventEntry": {
            "name": "EventEntry",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "time of the log entry (ISO8601 format)",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "optional replica id associated with the event",
                  "key": "replica_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "event log data",
                  "key": "event",
                  "valueType": {
                    "type": "id",
                    "value": "type_:Event"
                  }
                }
              ]
            }
          },
          "type_:EventLevel": {
            "description": "type of event",
            "name": "EventLevel",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "normal"
                },
                {
                  "value": "warning"
                }
              ]
            }
          },
          "type_:Event": {
            "name": "Event",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "type of event",
                  "key": "level",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_:EventLevel"
                    }
                  }
                },
                {
                  "description": "type of the event",
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "name of the endpoint",
                  "key": "endpoint",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "ID of the tenant",
                  "key": "tenant_id",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Key of the account",
                  "key": "account_key",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "type of instance this event occurred on",
                  "key": "instance_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "extra details about this event",
                  "key": "details",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:LogEntry": {
            "name": "LogEntry",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "time of the log entry (ISO8601 format)",
                  "key": "timestamp",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "description": "unique ID of the replica",
                  "key": "replica_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "user-provided log data",
                  "key": "data",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_:ReplicaStatus": {
            "description": "status of the replica",
            "name": "ReplicaStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "pending"
                },
                {
                  "value": "running"
                },
                {
                  "value": "succeeded"
                },
                {
                  "value": "failed"
                },
                {
                  "value": "unknown"
                }
              ]
            }
          },
          "type_:Replica": {
            "name": "Replica",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "account key for this replica",
                  "key": "account_key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "endpoint name",
                  "key": "endpoint_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "unique ID of the replica",
                  "key": "replica_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "status of the replica",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_:ReplicaStatus"
                  }
                },
                {
                  "key": "restarts",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer",
                      "minimum": 0
                    }
                  }
                },
                {
                  "description": "number of seconds this replica has been ready. set to -1 if replica is not ready",
                  "key": "age",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:EndpointResponse": {
            "name": "EndpointResponse",
            "shape": {
              "type": "object",
              "extends": ["type_:EndpointCreate"],
              "properties": [
                {
                  "description": "Endpoint to query against",
                  "key": "endpoint",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Active replicas for the endpoint",
                  "key": "replicas",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:Replica"
                    }
                  }
                }
              ]
            }
          },
          "type_:HostedEndpoint": {
            "name": "HostedEndpoint",
            "shape": {
              "type": "object",
              "extends": ["type_:EndpointCreate"],
              "properties": [
                {
                  "description": "Endpoint to query against",
                  "key": "endpoint",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "If this endpoint should be considered live or not",
                  "key": "is_live",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:InstanceTypeInfoAccelerator": {
            "description": "Type of accelerator attached to this instance type",
            "name": "InstanceTypeInfoAccelerator",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "none"
                },
                {
                  "value": "gpu"
                }
              ]
            }
          },
          "type_:InstanceTypeInfo": {
            "name": "InstanceTypeInfo",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "String to specify when creating/updating an endpoint",
                  "key": "instance_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "User-friendly name of the instance type",
                  "key": "display_name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Number of vCPUs available on the instance type",
                  "key": "vcpu",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Amount of memory in GB available on the instance type",
                  "key": "ram",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Amount of video memory in GB available on the instance type",
                  "key": "vram",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Type of accelerator attached to this instance type",
                  "key": "accelerator",
                  "valueType": {
                    "type": "id",
                    "value": "type_:InstanceTypeInfoAccelerator"
                  }
                },
                {
                  "description": "If the hardware target is available right now",
                  "key": "available",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Price per second in dollars (e.g. 0.0001 for 1/100th of a cent) to use this instance type",
                  "key": "price",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_account": {
            "subpackageId": "subpackage_account",
            "name": "account",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-account",
                "migratedFromUrlSlugs": ["get-fields-on-an-account"],
                "method": "GET",
                "id": "getAccount",
                "originalEndpointId": "endpoint_account.getAccount",
                "name": "Get fields on an account",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/account"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Account"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/account",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "name": "name",
                      "email": "email",
                      "provider": "provider",
                      "key": "key",
                      "country": "country",
                      "company": "company",
                      "status": "ready_trial"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "email": "email",
                        "provider": "provider",
                        "key": "key",
                        "country": "country",
                        "company": "company",
                        "status": "ready_trial"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return fields on an account",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "patch-account",
                "migratedFromUrlSlugs": ["update-fields-on-an-account"],
                "method": "PATCH",
                "id": "patchAccount",
                "originalEndpointId": "endpoint_account.patchAccount",
                "name": "Update fields on an account",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/account"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "country",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "company",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:Account"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/account",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "country": "country",
                      "company": "company"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "name": "name",
                      "email": "email",
                      "provider": "provider",
                      "key": "key",
                      "country": "country",
                      "company": "company",
                      "status": "ready_trial"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "country": "country",
                        "company": "company"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "name": "name",
                        "email": "email",
                        "provider": "provider",
                        "key": "key",
                        "country": "country",
                        "company": "company",
                        "status": "ready_trial"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Update fields on account",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "account",
            "description": "Accounts API",
            "webhooks": [],
            "websockets": [],
            "displayName": "Account"
          },
          "subpackage_endpoint": {
            "subpackageId": "subpackage_endpoint",
            "name": "endpoint",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-endpoint",
                "migratedFromUrlSlugs": ["create-new-endpoint"],
                "method": "POST",
                "id": "createEndpoint",
                "originalEndpointId": "endpoint_endpoint.createEndpoint",
                "name": "Create new endpoint",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoint"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EndpointCreate"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EndpointResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoint",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "image_url": "image_url",
                      "name": "name",
                      "port": 1
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "min_replicas": 1,
                      "max_replicas": 1,
                      "scale_to_zero": 1,
                      "display_name": "display_name",
                      "description": "description",
                      "image_url": "image_url",
                      "registry_credential": "registry_credential",
                      "health_check_path": "health_check_path",
                      "visibility": "private",
                      "endpoint_state": "active",
                      "env_overrides": {
                        "env_overrides": {
                          "key": "value"
                        }
                      },
                      "instance_type": "instance_type",
                      "container_secrets": ["container_secrets"],
                      "concurrency_per_replica": 1,
                      "name": "name",
                      "port": 1,
                      "auto_volume_experimental": true,
                      "volumes_experimental": [
                        {
                          "name": "name",
                          "path": "path",
                          "mount": "mount"
                        }
                      ],
                      "endpoint": "endpoint",
                      "replicas": [
                        {
                          "account_key": "account_key",
                          "endpoint_name": "endpoint_name",
                          "replica_id": "replica_id",
                          "status": "pending",
                          "restarts": 1,
                          "age": 1
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "image_url": "image_url",
                        "name": "name",
                        "port": 1
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "min_replicas": 1,
                        "max_replicas": 1,
                        "scale_to_zero": 1,
                        "display_name": "display_name",
                        "description": "description",
                        "image_url": "image_url",
                        "registry_credential": "registry_credential",
                        "health_check_path": "health_check_path",
                        "visibility": "private",
                        "endpoint_state": "active",
                        "env_overrides": {
                          "env_overrides": {
                            "key": "value"
                          }
                        },
                        "instance_type": "instance_type",
                        "container_secrets": ["container_secrets"],
                        "concurrency_per_replica": 1,
                        "name": "name",
                        "port": 1,
                        "auto_volume_experimental": true,
                        "volumes_experimental": [
                          {
                            "name": "name",
                            "path": "path",
                            "mount": "mount"
                          }
                        ],
                        "endpoint": "endpoint",
                        "replicas": [
                          {
                            "account_key": "account_key",
                            "endpoint_name": "endpoint_name",
                            "replica_id": "replica_id",
                            "status": "pending",
                            "restarts": 1,
                            "age": 1
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create new endpoint",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoint",
                "migratedFromUrlSlugs": ["get-description-of-an-endpoint"],
                "method": "GET",
                "id": "getEndpoint",
                "originalEndpointId": "endpoint_endpoint.getEndpoint",
                "name": "Get description of an endpoint",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint to retrieve",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoint/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EndpointResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoint/endpoint_name",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "min_replicas": 1,
                      "max_replicas": 1,
                      "scale_to_zero": 1,
                      "display_name": "display_name",
                      "description": "description",
                      "image_url": "image_url",
                      "registry_credential": "registry_credential",
                      "health_check_path": "health_check_path",
                      "visibility": "private",
                      "endpoint_state": "active",
                      "env_overrides": {
                        "env_overrides": {
                          "key": "value"
                        }
                      },
                      "instance_type": "instance_type",
                      "container_secrets": ["container_secrets"],
                      "concurrency_per_replica": 1,
                      "name": "name",
                      "port": 1,
                      "auto_volume_experimental": true,
                      "volumes_experimental": [
                        {
                          "name": "name",
                          "path": "path",
                          "mount": "mount"
                        }
                      ],
                      "endpoint": "endpoint",
                      "replicas": [
                        {
                          "account_key": "account_key",
                          "endpoint_name": "endpoint_name",
                          "replica_id": "replica_id",
                          "status": "pending",
                          "restarts": 1,
                          "age": 1
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "min_replicas": 1,
                        "max_replicas": 1,
                        "scale_to_zero": 1,
                        "display_name": "display_name",
                        "description": "description",
                        "image_url": "image_url",
                        "registry_credential": "registry_credential",
                        "health_check_path": "health_check_path",
                        "visibility": "private",
                        "endpoint_state": "active",
                        "env_overrides": {
                          "env_overrides": {
                            "key": "value"
                          }
                        },
                        "instance_type": "instance_type",
                        "container_secrets": ["container_secrets"],
                        "concurrency_per_replica": 1,
                        "name": "name",
                        "port": 1,
                        "auto_volume_experimental": true,
                        "volumes_experimental": [
                          {
                            "name": "name",
                            "path": "path",
                            "mount": "mount"
                          }
                        ],
                        "endpoint": "endpoint",
                        "replicas": [
                          {
                            "account_key": "account_key",
                            "endpoint_name": "endpoint_name",
                            "replica_id": "replica_id",
                            "status": "pending",
                            "restarts": 1,
                            "age": 1
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return description of an endpoint",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-endpoint",
                "migratedFromUrlSlugs": ["delete-an-endpoint"],
                "method": "DELETE",
                "id": "deleteEndpoint",
                "originalEndpointId": "endpoint_endpoint.deleteEndpoint",
                "name": "Delete an endpoint",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint to delete",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoint/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_endpoint:EndpointDeleteEndpointResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoint/endpoint_name",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "message": "message"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "message"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete an endpoint",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "patch-endpoint",
                "migratedFromUrlSlugs": ["update-an-endpoint"],
                "method": "PATCH",
                "id": "patchEndpoint",
                "originalEndpointId": "endpoint_endpoint.patchEndpoint",
                "name": "Update an endpoint",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint to retrieve",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoint/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EndpointUpdate"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:EndpointResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoint/endpoint_name",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "min_replicas": 1,
                      "max_replicas": 1,
                      "scale_to_zero": 1,
                      "display_name": "display_name",
                      "description": "description",
                      "image_url": "image_url",
                      "registry_credential": "registry_credential",
                      "health_check_path": "health_check_path",
                      "visibility": "private",
                      "endpoint_state": "active",
                      "env_overrides": {
                        "env_overrides": {
                          "key": "value"
                        }
                      },
                      "instance_type": "instance_type",
                      "container_secrets": ["container_secrets"],
                      "concurrency_per_replica": 1,
                      "name": "name",
                      "port": 1,
                      "auto_volume_experimental": true,
                      "volumes_experimental": [
                        {
                          "name": "name",
                          "path": "path",
                          "mount": "mount"
                        }
                      ],
                      "endpoint": "endpoint",
                      "replicas": [
                        {
                          "account_key": "account_key",
                          "endpoint_name": "endpoint_name",
                          "replica_id": "replica_id",
                          "status": "pending",
                          "restarts": 1,
                          "age": 1
                        }
                      ]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "min_replicas": 1,
                        "max_replicas": 1,
                        "scale_to_zero": 1,
                        "display_name": "display_name",
                        "description": "description",
                        "image_url": "image_url",
                        "registry_credential": "registry_credential",
                        "health_check_path": "health_check_path",
                        "visibility": "private",
                        "endpoint_state": "active",
                        "env_overrides": {
                          "env_overrides": {
                            "key": "value"
                          }
                        },
                        "instance_type": "instance_type",
                        "container_secrets": ["container_secrets"],
                        "concurrency_per_replica": 1,
                        "name": "name",
                        "port": 1,
                        "auto_volume_experimental": true,
                        "volumes_experimental": [
                          {
                            "name": "name",
                            "path": "path",
                            "mount": "mount"
                          }
                        ],
                        "endpoint": "endpoint",
                        "replicas": [
                          {
                            "account_key": "account_key",
                            "endpoint_name": "endpoint_name",
                            "replica_id": "replica_id",
                            "status": "pending",
                            "restarts": 1,
                            "age": 1
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Updates an endpoint",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoints",
                "migratedFromUrlSlugs": ["list-endpoints"],
                "method": "GET",
                "id": "getEndpoints",
                "originalEndpointId": "endpoint_endpoint.getEndpoints",
                "name": "List endpoints",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoints"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:EndpointResponse"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoints",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "min_replicas": 1,
                        "max_replicas": 1,
                        "scale_to_zero": 1,
                        "display_name": "display_name",
                        "description": "description",
                        "image_url": "image_url",
                        "registry_credential": "registry_credential",
                        "health_check_path": "health_check_path",
                        "visibility": "private",
                        "endpoint_state": "active",
                        "env_overrides": {
                          "env_overrides": {
                            "key": "value"
                          }
                        },
                        "instance_type": "instance_type",
                        "container_secrets": ["container_secrets"],
                        "concurrency_per_replica": 1,
                        "name": "name",
                        "port": 1,
                        "auto_volume_experimental": true,
                        "volumes_experimental": [
                          {
                            "name": "name",
                            "path": "path",
                            "mount": "mount"
                          }
                        ],
                        "endpoint": "endpoint",
                        "replicas": [
                          {
                            "account_key": "account_key",
                            "endpoint_name": "endpoint_name",
                            "replica_id": "replica_id",
                            "status": "pending",
                            "restarts": 1,
                            "age": 1
                          }
                        ]
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "min_replicas": 1,
                          "max_replicas": 1,
                          "scale_to_zero": 1,
                          "display_name": "display_name",
                          "description": "description",
                          "image_url": "image_url",
                          "registry_credential": "registry_credential",
                          "health_check_path": "health_check_path",
                          "visibility": "private",
                          "endpoint_state": "active",
                          "env_overrides": {
                            "env_overrides": {
                              "key": "value"
                            }
                          },
                          "instance_type": "instance_type",
                          "container_secrets": ["container_secrets"],
                          "concurrency_per_replica": 1,
                          "name": "name",
                          "port": 1,
                          "auto_volume_experimental": true,
                          "volumes_experimental": [
                            {
                              "name": "name",
                              "path": "path",
                              "mount": "mount"
                            }
                          ],
                          "endpoint": "endpoint",
                          "replicas": [
                            {
                              "account_key": "account_key",
                              "endpoint_name": "endpoint_name",
                              "replica_id": "replica_id",
                              "status": "pending",
                              "restarts": 1,
                              "age": 1
                            }
                          ]
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return list of endpoints",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-container-metadata",
                "method": "GET",
                "id": "getContainerMetadata",
                "originalEndpointId": "endpoint_endpoint.getContainerMetadata",
                "name": "Get container metadata",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint name",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoint/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": "/container/metadata"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:ContainerResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoint/endpoint_name/container/metadata",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "image_url": "image_url",
                      "exposed_ports": [
                        {
                          "port_num": 1,
                          "proto": "proto"
                        }
                      ],
                      "labels": {
                        "labels": "labels"
                      },
                      "env": ["env"]
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "image_url": "image_url",
                        "exposed_ports": [
                          {
                            "port_num": 1,
                            "proto": "proto"
                          }
                        ],
                        "labels": {
                          "labels": "labels"
                        },
                        "env": ["env"]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return container metadata",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoint-volume-token",
                "migratedFromUrlSlugs": ["get-token-for-accessing-the-volume"],
                "method": "GET",
                "id": "getEndpointVolumeToken",
                "originalEndpointId": "endpoint_endpoint.getEndpointVolumeToken",
                "name": "Get token for accessing the volume",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint name",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/endpoint/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": "/volume_token"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:VolumeToken"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/endpoint/endpoint_name/volume_token",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "token": "token"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "token": "token"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Returns a token for accessing the volume",
                "authed": true
              }
            ],
            "types": ["type_endpoint:EndpointDeleteEndpointResponse"],
            "subpackages": [],
            "urlSlug": "endpoint",
            "description": "Endpoints API",
            "webhooks": [],
            "websockets": [],
            "displayName": "Endpoint"
          },
          "subpackage_telemetry": {
            "subpackageId": "subpackage_telemetry",
            "name": "telemetry",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoint-logs",
                "method": "GET",
                "id": "getEndpointLogs",
                "originalEndpointId": "endpoint_telemetry.getEndpointLogs",
                "name": "Get endpoint logs",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint name",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/logs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Optional begin of time range",
                    "key": "begin_time",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  },
                  {
                    "description": "Optional end of time range",
                    "key": "end_time",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of lines to return",
                    "key": "max_lines",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Replica for which to fetch log output",
                    "key": "replica_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:LogEntry"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/logs/endpoint_name",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "timestamp": "2024-01-15T09:30:00Z",
                        "replica_id": "replica_id",
                        "data": "data"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "timestamp": "2024-01-15T09:30:00Z",
                          "replica_id": "replica_id",
                          "data": "data"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return endpoint logs",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoint-logs-stream",
                "migratedFromUrlSlugs": ["get-endpoint-logs-as-stream"],
                "method": "GET",
                "id": "getEndpointLogsStream",
                "originalEndpointId": "endpoint_telemetry.getEndpointLogsStream",
                "name": "Get endpoint logs as stream",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint name",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/logs/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": "/stream"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Replica for which to fetch log output",
                    "key": "replica_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:LogEntry"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/logs/endpoint_name/stream",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "timestamp": "2024-01-15T09:30:00Z",
                        "replica_id": "replica_id",
                        "data": "data"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "timestamp": "2024-01-15T09:30:00Z",
                          "replica_id": "replica_id",
                          "data": "data"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return endpoint logs as stream",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoint-events",
                "method": "GET",
                "id": "getEndpointEvents",
                "originalEndpointId": "endpoint_telemetry.getEndpointEvents",
                "name": "Get endpoint events",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint name",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/events/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Optional begin of time range",
                    "key": "begin_time",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  },
                  {
                    "description": "Optional end of time range",
                    "key": "end_time",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "datetime"
                        }
                      }
                    }
                  },
                  {
                    "description": "Maximum number of lines to return",
                    "key": "max_lines",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "Replica for which to fetch log output",
                    "key": "replica_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:EventEntry"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/events/endpoint_name",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "timestamp": "2024-01-15T09:30:00Z",
                        "replica_id": "replica_id",
                        "event": {
                          "level": "normal",
                          "type": "type",
                          "endpoint": "endpoint",
                          "tenant_id": "tenant_id",
                          "account_key": "account_key",
                          "instance_type": "instance_type"
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "timestamp": "2024-01-15T09:30:00Z",
                          "replica_id": "replica_id",
                          "event": {
                            "level": "normal",
                            "type": "type",
                            "endpoint": "endpoint",
                            "tenant_id": "tenant_id",
                            "account_key": "account_key",
                            "instance_type": "instance_type"
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return endpoint events",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-endpoint-events-stream",
                "migratedFromUrlSlugs": ["get-endpoint-events-as-stream"],
                "method": "GET",
                "id": "getEndpointEventsStream",
                "originalEndpointId": "endpoint_telemetry.getEndpointEventsStream",
                "name": "Get endpoint events as stream",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The endpoint name",
                      "key": "endpoint_name",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/events/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "endpoint_name"
                    },
                    {
                      "type": "literal",
                      "value": "/stream"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Replica for which to fetch log output",
                    "key": "replica_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:EventEntry"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/events/endpoint_name/stream",
                    "pathParameters": {
                      "endpoint_name": "endpoint_name"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "timestamp": "2024-01-15T09:30:00Z",
                        "replica_id": "replica_id",
                        "event": {
                          "level": "normal",
                          "type": "type",
                          "endpoint": "endpoint",
                          "tenant_id": "tenant_id",
                          "account_key": "account_key",
                          "instance_type": "instance_type"
                        }
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "timestamp": "2024-01-15T09:30:00Z",
                          "replica_id": "replica_id",
                          "event": {
                            "level": "normal",
                            "type": "type",
                            "endpoint": "endpoint",
                            "tenant_id": "tenant_id",
                            "account_key": "account_key",
                            "instance_type": "instance_type"
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return endpoint events as stream",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "telemetry",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_secret": {
            "subpackageId": "subpackage_secret",
            "name": "secret",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-secret",
                "migratedFromUrlSlugs": ["create-new-secret"],
                "method": "POST",
                "id": "createSecret",
                "originalEndpointId": "endpoint_secret.createSecret",
                "name": "Create new secret",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/secret"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SecretKeyValue"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SecretKeyValue"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/secret",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "key": "key",
                      "value": "value"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "key",
                      "value": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "value": "value"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "value": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create new secret",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-secret",
                "migratedFromUrlSlugs": ["retrieve-secret-by-key"],
                "method": "GET",
                "id": "getSecret",
                "originalEndpointId": "endpoint_secret.getSecret",
                "name": "Retrieve secret by key",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Key of the secret to retrieve",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/secret/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SecretKeyValue"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/secret/key",
                    "pathParameters": {
                      "key": "key"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "key",
                      "value": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "value": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-secret",
                "migratedFromUrlSlugs": ["update-secret-by-key"],
                "method": "PUT",
                "id": "updateSecret",
                "originalEndpointId": "endpoint_secret.updateSecret",
                "name": "Update secret by key",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Key of the secret to create or update",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/secret/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "value",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:SecretKeyValue"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/secret/key",
                    "pathParameters": {
                      "key": "key"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "value": "value"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "key",
                      "value": "value"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "value": "value"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "value": "value"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-secret",
                "migratedFromUrlSlugs": ["delete-secret-by-key"],
                "method": "DELETE",
                "id": "deleteSecret",
                "originalEndpointId": "endpoint_secret.deleteSecret",
                "name": "Delete secret by key",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Key of the secret to delete",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/secret/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_secret:SecretDeleteSecretResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/secret/key",
                    "pathParameters": {
                      "key": "key"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "message": "message"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "message"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-secrets",
                "migratedFromUrlSlugs": ["get-secret"],
                "method": "GET",
                "id": "getSecrets",
                "originalEndpointId": "endpoint_secret.getSecrets",
                "name": "Get secret",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/secrets"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/secrets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": ["string"],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": ["string"]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return list of secrets",
                "authed": true
              }
            ],
            "types": ["type_secret:SecretDeleteSecretResponse"],
            "subpackages": [],
            "urlSlug": "secret",
            "description": "Secrets API",
            "webhooks": [],
            "websockets": [],
            "displayName": "Secret"
          },
          "subpackage_registryCredential": {
            "subpackageId": "subpackage_registryCredential",
            "name": "registryCredential",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "create-registry-credential",
                "migratedFromUrlSlugs": ["create-new-registry-credentials"],
                "method": "POST",
                "id": "createRegistryCredential",
                "originalEndpointId": "endpoint_registryCredential.createRegistryCredential",
                "name": "Create new registry credentials",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/registry-credential"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RegistryCredential"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RegistryCredentialSummary"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/registry-credential",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "key": "key",
                      "username": "username",
                      "password": "password"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "key",
                      "username": "username"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "username": "username",
                        "password": "password"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "username": "username"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create new registry credentials",
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-registry-credential",
                "migratedFromUrlSlugs": ["retrieve-registry-credentials-by-key"],
                "method": "GET",
                "id": "getRegistryCredential",
                "originalEndpointId": "endpoint_registryCredential.getRegistryCredential",
                "name": "Retrieve registry credentials by key",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Key of the registry credential to retrieve",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/registry-credential/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RegistryCredential"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/registry-credential/key",
                    "pathParameters": {
                      "key": "key"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "key",
                      "username": "username",
                      "password": "password"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "username": "username",
                        "password": "password"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "update-registry-credential",
                "migratedFromUrlSlugs": ["update-registry-credentials"],
                "method": "PUT",
                "id": "updateRegistryCredential",
                "originalEndpointId": "endpoint_registryCredential.updateRegistryCredential",
                "name": "Update registry credentials",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Key of the registry credential to create or update",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/registry-credential/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "username",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "password",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_:RegistryCredentialSummary"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/registry-credential/key",
                    "pathParameters": {
                      "key": "key"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "key": "key",
                      "username": "username"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "key": "key",
                        "username": "username"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "delete-registry-credential",
                "migratedFromUrlSlugs": ["delete-registry-credentials"],
                "method": "DELETE",
                "id": "deleteRegistryCredential",
                "originalEndpointId": "endpoint_registryCredential.deleteRegistryCredential",
                "name": "Delete registry credentials",
                "path": {
                  "pathParameters": [
                    {
                      "description": "Key of the registry credential to delete",
                      "key": "key",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/registry-credential/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "key"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_registryCredential:RegistryCredentialDeleteRegistryCredentialResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/registry-credential/key",
                    "pathParameters": {
                      "key": "key"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "message": "message"
                    },
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "message": "message"
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": true
              },
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-registry-credentials",
                "method": "GET",
                "id": "getRegistryCredentials",
                "originalEndpointId": "endpoint_registryCredential.getRegistryCredentials",
                "name": "Get registry credentials",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/registry-credentials"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:RegistryCredentialSummary"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/registry-credentials",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "key": "key",
                        "username": "username"
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "key": "key",
                          "username": "username"
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return list of registry credentials",
                "authed": true
              }
            ],
            "types": ["type_registryCredential:RegistryCredentialDeleteRegistryCredentialResponse"],
            "subpackages": [],
            "urlSlug": "registry-credential",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_publicEndpoint": {
            "subpackageId": "subpackage_publicEndpoint",
            "name": "publicEndpoint",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-public-endpoints",
                "migratedFromUrlSlugs": ["list-public-octo-ai-deployed-endpoints"],
                "method": "GET",
                "id": "getPublicEndpoints",
                "originalEndpointId": "endpoint_publicEndpoint.getPublicEndpoints",
                "name": "List public, OctoAI-deployed endpoints",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/public-endpoints"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:HostedEndpoint"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/public-endpoints",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "min_replicas": 1,
                        "max_replicas": 1,
                        "scale_to_zero": 1,
                        "display_name": "display_name",
                        "description": "description",
                        "image_url": "image_url",
                        "registry_credential": "registry_credential",
                        "health_check_path": "health_check_path",
                        "visibility": "private",
                        "endpoint_state": "active",
                        "env_overrides": {
                          "env_overrides": {
                            "key": "value"
                          }
                        },
                        "instance_type": "instance_type",
                        "container_secrets": ["container_secrets"],
                        "concurrency_per_replica": 1,
                        "name": "name",
                        "port": 1,
                        "auto_volume_experimental": true,
                        "volumes_experimental": [
                          {
                            "name": "name",
                            "path": "path",
                            "mount": "mount"
                          }
                        ],
                        "endpoint": "endpoint",
                        "is_live": true
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "min_replicas": 1,
                          "max_replicas": 1,
                          "scale_to_zero": 1,
                          "display_name": "display_name",
                          "description": "description",
                          "image_url": "image_url",
                          "registry_credential": "registry_credential",
                          "health_check_path": "health_check_path",
                          "visibility": "private",
                          "endpoint_state": "active",
                          "env_overrides": {
                            "env_overrides": {
                              "key": "value"
                            }
                          },
                          "instance_type": "instance_type",
                          "container_secrets": ["container_secrets"],
                          "concurrency_per_replica": 1,
                          "name": "name",
                          "port": 1,
                          "auto_volume_experimental": true,
                          "volumes_experimental": [
                            {
                              "name": "name",
                              "path": "path",
                              "mount": "mount"
                            }
                          ],
                          "endpoint": "endpoint",
                          "is_live": true
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return list of public, OctoAI-deployed endpoints",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "public-endpoint",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_instanceTypes": {
            "subpackageId": "subpackage_instanceTypes",
            "name": "instanceTypes",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Default",
                    "baseUrl": "https://api.octoai.cloud"
                  }
                ],
                "defaultEnvironment": "Default",
                "urlSlug": "get-instance-types",
                "migratedFromUrlSlugs": ["list-hardware-instance-types"],
                "method": "GET",
                "id": "getInstanceTypes",
                "originalEndpointId": "endpoint_instanceTypes.getInstanceTypes",
                "name": "List hardware instance types",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/instance-types"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:InstanceTypeInfo"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [],
                "examples": [
                  {
                    "path": "/v1/instance-types",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": [
                      {
                        "instance_name": "instance_name",
                        "display_name": "display_name",
                        "vcpu": 1,
                        "ram": 1,
                        "vram": 1,
                        "accelerator": "none",
                        "available": true,
                        "price": 1.1
                      }
                    ],
                    "codeExamples": {
                      "nodeAxios": ""
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": [
                        {
                          "instance_name": "instance_name",
                          "display_name": "display_name",
                          "vcpu": 1,
                          "ram": 1,
                          "vram": 1,
                          "accelerator": "none",
                          "available": true,
                          "price": 1.1
                        }
                      ]
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Return list of available instance types to deploy an endpoint to",
                "authed": true
              }
            ],
            "types": [],
            "subpackages": [],
            "urlSlug": "instance-types",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "token"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "2eeac53f-90cc-492b-9d29-e3ed711d7704": {
        "id": "2eeac53f-90cc-492b-9d29-e3ed711d7704",
        "rootPackage": {
          "endpoints": [
            {
              "environments": [],
              "urlSlug": "upscale",
              "migratedFromUrlSlugs": ["upscaling"],
              "method": "POST",
              "id": "upscale",
              "originalEndpointId": "endpoint_.upscale",
              "name": "Upscaling",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/upscaling"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "description": "True to enable the face enhancer model variant",
                      "key": "face_enhance",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    {
                      "key": "init_image_url",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "init_image",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "One of UpscalingModel, identifies the upscaling model to use.",
                      "key": "model",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:UpscalingModel"
                        }
                      }
                    },
                    {
                      "key": "output_image_height",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    {
                      "key": "output_image_width",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    {
                      "description": "Define which encoding process should be applied before returning the modified image.",
                      "key": "output_image_encoding",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ImageEncoding"
                        }
                      }
                    },
                    {
                      "key": "scale",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "id",
                    "value": "type_:ImageResponse"
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:HTTPValidationError"
                    }
                  },
                  "statusCode": 422,
                  "description": "Validation Error",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/upscaling",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {},
                  "responseStatusCode": 200,
                  "responseBody": {
                    "image_b64": "image_b64",
                    "removed_for_safety": true
                  },
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {}
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "image_b64": "image_b64",
                      "removed_for_safety": true
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/upscaling",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 422,
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {}
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": [
                        {
                          "loc": ["string"],
                          "msg": "string",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Upscale the given image.",
              "authed": false
            },
            {
              "environments": [],
              "urlSlug": "remove-background",
              "method": "POST",
              "id": "remove_background",
              "originalEndpointId": "endpoint_.remove_background",
              "name": "Remove Background",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/background-removal"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "init_image",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "init_image_url",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "output_image_encoding",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "unknown"
                        }
                      }
                    },
                    {
                      "key": "alpha_matting",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    {
                      "key": "alpha_matting_foreground_threshold",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                          }
                        }
                      }
                    },
                    {
                      "key": "alpha_matting_background_threshold",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                          }
                        }
                      }
                    },
                    {
                      "key": "alpha_matting_erode_size",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                          }
                        }
                      }
                    },
                    {
                      "key": "only_mask",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    {
                      "key": "post_process_mask",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    {
                      "key": "bgcolor",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "list",
                          "itemType": {
                            "type": "unknown"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "id",
                    "value": "type_:ImageResponse"
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:HTTPValidationError"
                    }
                  },
                  "statusCode": 422,
                  "description": "Validation Error",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/background-removal",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {},
                  "responseStatusCode": 200,
                  "responseBody": {
                    "image_b64": "image_b64",
                    "removed_for_safety": true
                  },
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {}
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "image_b64": "image_b64",
                      "removed_for_safety": true
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/background-removal",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 422,
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {}
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": [
                        {
                          "loc": ["string"],
                          "msg": "string",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Remove background from the given image.",
              "authed": false
            },
            {
              "environments": [],
              "urlSlug": "generate-images",
              "migratedFromUrlSlugs": ["adetailer"],
              "method": "POST",
              "id": "generate_images",
              "originalEndpointId": "endpoint_.generate_images",
              "name": "Adetailer",
              "path": {
                "pathParameters": [],
                "parts": [
                  {
                    "type": "literal",
                    "value": ""
                  },
                  {
                    "type": "literal",
                    "value": "/adetailer"
                  }
                ]
              },
              "queryParameters": [],
              "headers": [],
              "request": {
                "contentType": "application/json",
                "type": {
                  "type": "object",
                  "extends": [],
                  "properties": [
                    {
                      "key": "init_image",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "init_image_url",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "description": "Define which encoding process should be applied before returning the modified image.",
                      "key": "image_encoding",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ImageEncoding"
                        }
                      }
                    },
                    {
                      "key": "transfer_images",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "map",
                          "keyType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "list",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "key": "prompt",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "negative_prompt",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "sampler",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:Scheduler"
                        }
                      }
                    },
                    {
                      "key": "steps",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "default": 20
                          }
                        }
                      }
                    },
                    {
                      "key": "inpainting_base_model",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ADetailerInpaintingBaseModel"
                        }
                      }
                    },
                    {
                      "key": "checkpoint",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    {
                      "key": "loras",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "map",
                          "keyType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          },
                          "valueType": {
                            "type": "optional",
                            "itemType": {
                              "type": "primitive",
                              "value": {
                                "type": "double"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "key": "use_refiner",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    {
                      "key": "style_preset",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string",
                            "default": "base"
                          }
                        }
                      }
                    },
                    {
                      "key": "strength",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "double",
                            "maximum": 1,
                            "default": 0.9
                          }
                        }
                      }
                    },
                    {
                      "description": "Floating-point number represeting how closely to adhere to prompt description. Must be a positive number no greater than 50.0.",
                      "key": "cfg_scale",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "double",
                            "maximum": 50,
                            "default": 7.5
                          }
                        }
                      }
                    },
                    {
                      "description": "Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific image. Must be greater than 0 and less than 2^32.",
                      "key": "seed",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_:ADetailerRequestSeed"
                        }
                      }
                    },
                    {
                      "description": "A mask is created for each inpainted area in the image. Mask Dilation allows you to expand the size of the mask while maintaining its shape. This technique is typically used to reduce artifacts near borders in the mask. This parameter is the size, in pixels, of the dilation kernel to apply. Defaults to 4. Must be greater than or equal to 0 and recommended to be less than 64.",
                      "key": "mask_dilation",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 4
                          }
                        }
                      }
                    },
                    {
                      "description": "A mask is created for each inpainted area in the image. After dilation (see mask_dilation parameter), the mask is blurred. This technique is typically used to smoothly blend the inpainted area with the original image. This option specifies the radius, in pixels, of the gaussian blur kernel. The higher the value, the wider the blur. Defaults to 4. Must be greater than or equal to 0 and recommended to be less than 64.",
                      "key": "mask_blur",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 4
                          }
                        }
                      }
                    },
                    {
                      "description": "Each inpainted area is passed to the image-to-image generator with some surrounding context. The contextual area is created by padding the area occupied by the blurred, dilated mask. This technique improves inpainting quality, and the contextual area is not modified. This parameter specifies the amount of padding, in pixels, to apply around the processed mask. When the computed padding goes off the edge of the image, the padded area is slid towards the center of the image. Must be greater than or equal to 0 and recommended to be less than 10% the size of an inpainting mask.",
                      "key": "mask_padding",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 32
                          }
                        }
                      }
                    },
                    {
                      "key": "max_num_detections",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    {
                      "description": "Inpainted areas are determined using a detector. This setting adjusts the sensitivity of the detector (lower considers more image fragments for inpainting). ",
                      "key": "confidence",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "double",
                            "default": 0.3
                          }
                        }
                      }
                    },
                    {
                      "description": "Detection model to use. Configures whether e.g. faces or hands or people are targeted for after-detailing.",
                      "key": "detector",
                      "valueType": {
                        "type": "id",
                        "value": "type_:ADetailerDetector"
                      }
                    },
                    {
                      "description": "When true, create a single mask by unioning the mask for each detected object together, then send a single inpainting request to the backing model.",
                      "key": "union_masks",
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "response": {
                "type": {
                  "type": "reference",
                  "value": {
                    "type": "id",
                    "value": "type_:ADetailerResponse"
                  }
                }
              },
              "errors": [],
              "errorsV2": [
                {
                  "type": {
                    "type": "alias",
                    "value": {
                      "type": "id",
                      "value": "type_:HTTPValidationError"
                    }
                  },
                  "statusCode": 422,
                  "description": "Validation Error",
                  "examples": []
                }
              ],
              "examples": [
                {
                  "path": "/adetailer",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "requestBody": {
                    "detector": "face_yolov8n"
                  },
                  "responseStatusCode": 200,
                  "responseBody": {
                    "image_b64": "image_b64",
                    "num_objects_inpainted": 1,
                    "num_objects_detected": 1,
                    "num_removed_for_safety": 1
                  },
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "detector": "face_yolov8n"
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "image_b64": "image_b64",
                      "num_objects_inpainted": 1,
                      "num_objects_detected": 1,
                      "num_removed_for_safety": 1
                    }
                  },
                  "codeSamples": []
                },
                {
                  "path": "/adetailer",
                  "pathParameters": {},
                  "queryParameters": {},
                  "headers": {},
                  "responseStatusCode": 422,
                  "codeExamples": {
                    "nodeAxios": ""
                  },
                  "requestBodyV3": {
                    "type": "json",
                    "value": {
                      "detector": "face_yolov8n"
                    }
                  },
                  "responseBodyV3": {
                    "type": "json",
                    "value": {
                      "detail": [
                        {
                          "loc": ["string"],
                          "msg": "string",
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "codeSamples": []
                }
              ],
              "description": "Detail the given image.",
              "authed": false
            }
          ],
          "subpackages": [],
          "types": [
            "type_:ADetailerRequestSeed",
            "type_:ADetailerDetector",
            "type_:ADetailerInpaintingBaseModel",
            "type_:ADetailerResponse",
            "type_:HTTPValidationError",
            "type_:ImageEncoding",
            "type_:ImageResponse",
            "type_:Scheduler",
            "type_:UpscalingModel",
            "type_:ValidationErrorLocItem",
            "type_:ValidationError"
          ],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_:ADetailerRequestSeed": {
            "description": "Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific image. Must be greater than 0 and less than 2^32.",
            "name": "ADetailerRequestSeed",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ADetailerDetector": {
            "description": "ADetailer detector models available.",
            "name": "ADetailerDetector",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "face_yolov8n"
                },
                {
                  "value": "hand_yolov8n"
                },
                {
                  "value": "face_full_mediapipe"
                },
                {
                  "value": "face_short_mediapipe"
                },
                {
                  "value": "face_mesh_mediapipe"
                },
                {
                  "value": "eyes_mesh_mediapipe"
                },
                {
                  "value": "face_hair_mediapipe"
                }
              ]
            }
          },
          "type_:ADetailerInpaintingBaseModel": {
            "description": "Base model which ADetailer should use for inpainting.",
            "name": "ADetailerInpaintingBaseModel",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "sdxl"
                },
                {
                  "value": "sd15"
                }
              ]
            }
          },
          "type_:ADetailerResponse": {
            "description": "Represent an adetailed image.",
            "name": "ADetailerResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "image_b64",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The number of objects that were successfully inpainted.",
                  "key": "num_objects_inpainted",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The number of objects that were successfully detected.",
                  "key": "num_objects_detected",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Number of inpainting requests that violated the OctoAI Terms of Service.",
                  "key": "num_removed_for_safety",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:HTTPValidationError": {
            "name": "HTTPValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_:ValidationError"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_:ImageEncoding": {
            "description": "The image encoding types available for image modification response.",
            "name": "ImageEncoding",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "jpeg"
                },
                {
                  "value": "png"
                }
              ]
            }
          },
          "type_:ImageResponse": {
            "description": "Represent a generated image.",
            "name": "ImageResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "image_b64",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "True if the image was removed for safety, False otherwise.",
                  "key": "removed_for_safety",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                }
              ]
            }
          },
          "type_:Scheduler": {
            "description": "The schedulers available for image generation.",
            "name": "Scheduler",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "PNDM"
                },
                {
                  "value": "LMS"
                },
                {
                  "value": "KLMS"
                },
                {
                  "value": "DDIM"
                },
                {
                  "value": "DDPM"
                },
                {
                  "value": "HEUN"
                },
                {
                  "value": "K_HEUN"
                },
                {
                  "value": "K_EULER"
                },
                {
                  "value": "K_EULER_ANCESTRAL"
                },
                {
                  "value": "DPM_SOLVER_MULTISTEP"
                },
                {
                  "value": "DPM_PLUS_PLUS_2M_KARRAS"
                },
                {
                  "value": "DPM_SINGLE"
                },
                {
                  "value": "DPM_2"
                },
                {
                  "value": "DPM_2_ANCESTRAL"
                },
                {
                  "value": "DPM_PLUS_PLUS_SDE_KARRAS"
                },
                {
                  "value": "UNI_PC"
                },
                {
                  "value": "LCM"
                }
              ]
            }
          },
          "type_:UpscalingModel": {
            "description": "Specifies models either in the API or in server config.",
            "name": "UpscalingModel",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "real-esrgan-x4-plus"
                },
                {
                  "value": "real-esrgan-x4-v3"
                },
                {
                  "value": "real-esrgan-x4-v3-wdn"
                },
                {
                  "value": "real-esrgan-animevideo-v3"
                },
                {
                  "value": "real-esrgan-x4-plus-anime"
                },
                {
                  "value": "real-esrgan-x2-plus"
                }
              ]
            }
          },
          "type_:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {},
        "auth": {
          "type": "bearerAuth",
          "tokenName": "apiKey"
        },
        "hasMultipleBaseUrls": false,
        "globalHeaders": []
      },
      "270fcb14-fecb-45b5-8075-3e207a0d4b31": {
        "id": "270fcb14-fecb-45b5-8075-3e207a0d4b31",
        "rootPackage": {
          "endpoints": [],
          "subpackages": [
            "subpackage_asset-library",
            "subpackage_fine-tuning",
            "subpackage_image-gen",
            "subpackage_text-gen"
          ],
          "types": [],
          "webhooks": [],
          "websockets": []
        },
        "types": {
          "type_asset-library:Data": {
            "description": "Asset data.",
            "name": "Data",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "asset_type",
              "variants": [
                {
                  "discriminantValue": "checkpoint",
                  "additionalProperties": {
                    "extends": ["type_asset-library:CheckpointData"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "file",
                  "additionalProperties": {
                    "extends": ["type_asset-library:FileData"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "latent",
                  "additionalProperties": {
                    "extends": ["type_asset-library:LatentData"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "lora",
                  "additionalProperties": {
                    "extends": ["type_asset-library:LoraData"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "textual_inversion",
                  "additionalProperties": {
                    "extends": ["type_asset-library:TextualInversionData"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "vae",
                  "additionalProperties": {
                    "extends": ["type_asset-library:VAEData"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_asset-library:Asset": {
            "name": "Asset",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Asset type.",
                  "key": "asset_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:AssetType"
                  }
                },
                {
                  "description": "Asset creation time.",
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Asset data.",
                  "key": "data",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:Data"
                  }
                },
                {
                  "description": "Description.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "File structure.",
                  "key": "file_structure",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileStructure"
                    }
                  }
                },
                {
                  "key": "hf_repo",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Asset id.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "True if asset is public.",
                  "key": "is_public",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Asset name.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Size in bytes.",
                  "key": "size_bytes",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Asset status.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:Status"
                  }
                },
                {
                  "description": "Asset status.",
                  "key": "status_details",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Asset status info.",
                  "key": "status_info",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Asset tenant ID.",
                  "key": "tenant_uuid",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 1
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:AssetType": {
            "name": "AssetType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "file"
                },
                {
                  "value": "checkpoint"
                },
                {
                  "value": "lora"
                },
                {
                  "value": "textual_inversion"
                },
                {
                  "value": "vae"
                },
                {
                  "value": "latent"
                }
              ]
            }
          },
          "type_asset-library:BaseEngine": {
            "name": "BaseEngine",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "text/llama-2-7b"
                },
                {
                  "value": "text/llama-2-13b"
                },
                {
                  "value": "text/llama-2-70b"
                },
                {
                  "value": "text/codellama-7b"
                },
                {
                  "value": "text/codellama-13b"
                },
                {
                  "value": "text/codellama-34b"
                },
                {
                  "value": "text/codellama-70b"
                },
                {
                  "value": "text/mistral-7b"
                },
                {
                  "value": "text/mixtral-8x7b"
                },
                {
                  "value": "image/controlnet-sd15"
                },
                {
                  "value": "image/controlnet-sdxl"
                },
                {
                  "value": "image/stable-diffusion-v1-5"
                },
                {
                  "value": "image/stable-diffusion-xl-v1-0"
                },
                {
                  "value": "image/stable-diffusion-ssd"
                },
                {
                  "value": "audio/tortoise-tts"
                },
                {
                  "value": "audio/rvc"
                }
              ]
            }
          },
          "type_asset-library:BaseEngineType": {
            "name": "BaseEngineType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "text"
                },
                {
                  "value": "image"
                },
                {
                  "value": "audio"
                }
              ]
            }
          },
          "type_asset-library:CheckpointData": {
            "name": "CheckpointData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Data type.",
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:DataType"
                    }
                  }
                },
                {
                  "description": "Engine type.",
                  "key": "engine",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:BaseEngine"
                  }
                },
                {
                  "description": "File format.",
                  "key": "file_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileFormat"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:CompleteAssetUploadResponse": {
            "name": "CompleteAssetUploadResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "error",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:CreateAssetResponseTransferApi": {
            "description": "Asset transfer API.",
            "name": "CreateAssetResponseTransferApi",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "none",
                  "additionalProperties": {
                    "extends": ["type_asset-library:NoTransferApi"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "presigned-url",
                  "additionalProperties": {
                    "extends": ["type_asset-library:PresignedUrlTransferApi"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sts",
                  "additionalProperties": {
                    "extends": ["type_asset-library:StsTransferApi"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_asset-library:CreateAssetResponse": {
            "name": "CreateAssetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Asset.",
                  "key": "asset",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:Asset"
                  }
                },
                {
                  "description": "Unused. Present for compatibility purposes.",
                  "key": "token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                },
                {
                  "description": "Asset transfer API.",
                  "key": "transfer_api",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:CreateAssetResponseTransferApi"
                  }
                }
              ]
            }
          },
          "type_asset-library:DataType": {
            "name": "DataType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "fp16"
                },
                {
                  "value": "fp32"
                },
                {
                  "value": "int4"
                },
                {
                  "value": "int8"
                }
              ]
            }
          },
          "type_asset-library:DeleteAssetResponse": {
            "name": "DeleteAssetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Deletion time.",
                  "key": "deleted_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Asset ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:FileData": {
            "name": "FileData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "File format.",
                  "key": "file_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileExtension"
                    }
                  }
                },
                {
                  "key": "preview_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Version.",
                  "key": "version",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": ""
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:FileExtension": {
            "name": "FileExtension",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "unknown"
                },
                {
                  "value": "png"
                },
                {
                  "value": "jpg"
                },
                {
                  "value": "jpeg"
                },
                {
                  "value": "txt"
                },
                {
                  "value": "mp3"
                },
                {
                  "value": "wav"
                }
              ]
            }
          },
          "type_asset-library:FileFormat": {
            "name": "FileFormat",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "safetensors"
                },
                {
                  "value": "pt"
                }
              ]
            }
          },
          "type_asset-library:FileStructure": {
            "name": "FileStructure",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "unknown"
                },
                {
                  "value": "single_file"
                },
                {
                  "value": "multiple_files"
                }
              ]
            }
          },
          "type_asset-library:HTTPValidationError": {
            "name": "HTTPValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_asset-library:ValidationError"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:LatentData": {
            "name": "LatentData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Engine type.",
                  "key": "engine",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:BaseEngine"
                  }
                },
                {
                  "description": "File format.",
                  "key": "file_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileFormat"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:ListAssetsResponse": {
            "name": "ListAssetsResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "List of assets.",
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:Asset"
                    }
                  }
                },
                {
                  "description": "True if there are more asset to show.",
                  "key": "has_more",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Total number of assets.",
                  "key": "total",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:LoraData": {
            "name": "LoraData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "checkpoint",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Data type.",
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:DataType"
                    }
                  }
                },
                {
                  "description": "Engine type.",
                  "key": "engine",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:BaseEngine"
                  }
                },
                {
                  "description": "File format.",
                  "key": "file_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileFormat"
                    }
                  }
                },
                {
                  "key": "trigger_words",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:NoTransferApi": {
            "description": "This type exists to avoid Optional[TransferApi] so openapi-generator can work.\n\nIn this class, type is not added to TransferApiType because it is not a valid\nTransferApiType. It exists only to note that no TransferApi is defined.",
            "name": "NoTransferApi",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": []
            }
          },
          "type_asset-library:PresignedUrlTransferApi": {
            "name": "PresignedUrlTransferApi",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Get asset URL.",
                  "key": "get_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Asset URL to upload.",
                  "key": "put_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:RetrieveAssetResponseTransferApi": {
            "description": "Transfer API.",
            "name": "RetrieveAssetResponseTransferApi",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "type",
              "variants": [
                {
                  "discriminantValue": "none",
                  "additionalProperties": {
                    "extends": ["type_asset-library:NoTransferApi"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "presigned-url",
                  "additionalProperties": {
                    "extends": ["type_asset-library:PresignedUrlTransferApi"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "sts",
                  "additionalProperties": {
                    "extends": ["type_asset-library:StsTransferApi"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_asset-library:RetrieveAssetResponse": {
            "name": "RetrieveAssetResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Asset.",
                  "key": "asset",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:Asset"
                  }
                },
                {
                  "description": "Transfer API.",
                  "key": "transfer_api",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:RetrieveAssetResponseTransferApi"
                  }
                }
              ]
            }
          },
          "type_asset-library:Status": {
            "name": "Status",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "ready_to_upload"
                },
                {
                  "value": "uploaded"
                },
                {
                  "value": "ready"
                },
                {
                  "value": "deleted"
                },
                {
                  "value": "rejected"
                },
                {
                  "value": "error"
                },
                {
                  "value": "uploading"
                }
              ]
            }
          },
          "type_asset-library:StsTransferApi": {
            "name": "StsTransferApi",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "AWS access key.",
                  "key": "aws_access_key_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "AWS secret accesss key.",
                  "key": "aws_secret_access_key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "aws_session_token",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "S3 bucket.",
                  "key": "s3_bucket",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "s3_endpoint_url",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "S3 key.",
                  "key": "s3_key",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "S3 full URL.",
                  "key": "s3_url",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:TextualInversionData": {
            "name": "TextualInversionData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Data type.",
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:DataType"
                    }
                  }
                },
                {
                  "description": "Engine type.",
                  "key": "engine",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:BaseEngine"
                  }
                },
                {
                  "description": "File format.",
                  "key": "file_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileFormat"
                    }
                  }
                },
                {
                  "description": "Trigger words.",
                  "key": "trigger_words",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:TransferApiType": {
            "name": "TransferApiType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "presigned-url"
                },
                {
                  "value": "sts"
                }
              ]
            }
          },
          "type_asset-library:VAEData": {
            "name": "VAEData",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Data type.",
                  "key": "data_type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:DataType"
                    }
                  }
                },
                {
                  "description": "Engine type.",
                  "key": "engine",
                  "valueType": {
                    "type": "id",
                    "value": "type_asset-library:BaseEngine"
                  }
                },
                {
                  "description": "File format.",
                  "key": "file_format",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:FileFormat"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_asset-library:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_asset-library:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:Details": {
            "description": "Details of the tune.",
            "name": "Details",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "tune_type",
              "variants": [
                {
                  "discriminantValue": "lora_tune",
                  "additionalProperties": {
                    "extends": ["type_fine-tuning:LoraTune"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text_to_speech_latent_tune",
                  "additionalProperties": {
                    "extends": ["type_fine-tuning:TextToSpeechLatentTune"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_fine-tuning:BaseEngine": {
            "description": "BaseEngine",
            "name": "BaseEngine",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "text/llama-2-7b"
                },
                {
                  "value": "text/llama-2-13b"
                },
                {
                  "value": "text/llama-2-70b"
                },
                {
                  "value": "text/codellama-7b"
                },
                {
                  "value": "text/codellama-13b"
                },
                {
                  "value": "text/codellama-34b"
                },
                {
                  "value": "text/codellama-70b"
                },
                {
                  "value": "text/mistral-7b"
                },
                {
                  "value": "text/mixtral-8x7b"
                },
                {
                  "value": "image/controlnet-sd15"
                },
                {
                  "value": "image/controlnet-sdxl"
                },
                {
                  "value": "image/stable-diffusion-v1-5"
                },
                {
                  "value": "image/stable-diffusion-xl-v1-0"
                },
                {
                  "value": "image/stable-diffusion-ssd"
                },
                {
                  "value": "audio/tortoise-tts"
                },
                {
                  "value": "audio/rvc"
                }
              ]
            }
          },
          "type_fine-tuning:HTTPValidationError": {
            "name": "HTTPValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_fine-tuning:ValidationError"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:ListTunesResponse": {
            "description": "The list tunes response.",
            "name": "ListTunesResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "List of tunes.",
                  "key": "data",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_fine-tuning:Tune"
                    }
                  }
                },
                {
                  "description": "True if it has more items than the returned list.",
                  "key": "has_more",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Total number of tunes.",
                  "key": "total",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:LoraTune": {
            "description": "A LoRA Tune.",
            "name": "LoraTune",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The base checkpoint used for this LoRA Tune.",
                  "key": "base_checkpoint",
                  "valueType": {
                    "type": "id",
                    "value": "type_fine-tuning:LoraTuneCheckpoint"
                  }
                },
                {
                  "description": "The files used for this LoRA Tune.",
                  "key": "files",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_fine-tuning:LoraTuneFile"
                    }
                  }
                },
                {
                  "key": "resize_images",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "The number of steps used for this LoRA Tune.",
                  "key": "steps",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "The trigger words used for this tune. As of now, only one trigger word is supported. `List` is used for future-proofing.",
                  "key": "trigger_words",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:LoraTuneCheckpoint": {
            "description": "A checkpoint used for a LoRA Tune.",
            "name": "LoraTuneCheckpoint",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The checkpoint asset ID.",
                  "key": "checkpoint_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "engine",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_fine-tuning:BaseEngine"
                    }
                  }
                },
                {
                  "key": "name",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:LoraTuneFile": {
            "description": "An input file to a LoRA tune with its caption.",
            "name": "LoraTuneFile",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "caption",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The ID of the file on asset lake.",
                  "key": "file_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:TextToSpeechLatentTune": {
            "description": "A TextToSpeechLatentTune.",
            "name": "TextToSpeechLatentTune",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The Asset Lake asset ids used for this task.",
                  "key": "asset_ids",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "inline_assets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:TuneDetails": {
            "description": "Tune details.",
            "name": "TuneDetails",
            "shape": {
              "type": "discriminatedUnion",
              "discriminant": "tune_type",
              "variants": [
                {
                  "discriminantValue": "lora_tune",
                  "additionalProperties": {
                    "extends": ["type_fine-tuning:LoraTune"],
                    "properties": []
                  }
                },
                {
                  "discriminantValue": "text_to_speech_latent_tune",
                  "additionalProperties": {
                    "extends": ["type_fine-tuning:TextToSpeechLatentTune"],
                    "properties": []
                  }
                }
              ]
            }
          },
          "type_fine-tuning:Tune": {
            "description": "A tune base class.",
            "name": "Tune",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The time this tune task was created.",
                  "key": "created_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                },
                {
                  "key": "deleted_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The description of the tune.",
                  "key": "description",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "Tune details.",
                  "key": "details",
                  "valueType": {
                    "type": "id",
                    "value": "type_fine-tuning:TuneDetails"
                  }
                },
                {
                  "description": "The ID of the LoRA tune.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the tune.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The output LoRA IDs, if the task was successful.",
                  "key": "output_lora_ids",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "result",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_fine-tuning:TuneResult"
                    }
                  }
                },
                {
                  "description": "The status of the associated task.",
                  "key": "status",
                  "valueType": {
                    "type": "id",
                    "value": "type_fine-tuning:TuneStatus"
                  }
                },
                {
                  "description": "The details of the status, only used when the associated task failed.",
                  "key": "status_details",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "succeeded_at",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "datetime"
                      }
                    }
                  }
                },
                {
                  "description": "The tenant who requested the LoRA tune.",
                  "key": "tenant_id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The type of this tune.",
                  "key": "tune_type",
                  "valueType": {
                    "type": "id",
                    "value": "type_fine-tuning:TuneType"
                  }
                },
                {
                  "description": "The time this tune task was updated.",
                  "key": "updated_at",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "datetime"
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:TuneResult": {
            "description": "Tune result on worker.",
            "name": "TuneResult",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "number_of_available_assets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "output_assets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "rejected_assets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "unready_assets",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:TuneStatus": {
            "description": "The status of the tune job.",
            "name": "TuneStatus",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "pending"
                },
                {
                  "value": "running"
                },
                {
                  "value": "succeeded"
                },
                {
                  "value": "cancelled"
                },
                {
                  "value": "failed"
                }
              ]
            }
          },
          "type_fine-tuning:TuneType": {
            "description": "The type of tune requested.",
            "name": "TuneType",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "lora_tune"
                },
                {
                  "value": "text_to_speech_latent_tune"
                },
                {
                  "value": "text_to_speech_rvc_tune"
                },
                {
                  "value": "text_to_speech_tortoise_tune"
                }
              ]
            }
          },
          "type_fine-tuning:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_fine-tuning:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_fine-tuning:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:VideoGenerationRequestSeed": {
            "description": "Integer number or list of integers representing the seeds of random generators.Fixing random seed is useful when attempting to generate a specific video/animation (or set of videos/animations). Must be greater than 0 and less than 2^32.",
            "name": "VideoGenerationRequestSeed",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:HTTPValidationError": {
            "name": "HTTPValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_image-gen:ValidationError"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:ImageEncoding": {
            "description": "The image encoding types available for image generation response.",
            "name": "ImageEncoding",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "jpeg"
                },
                {
                  "value": "png"
                }
              ]
            }
          },
          "type_image-gen:ImageGeneration": {
            "description": "Represent a generated image.",
            "name": "ImageGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "image_b64",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "True if the image was removed for safety, False otherwise.",
                  "key": "removed_for_safety",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Seed used to generate the image. It can be used to recreate the generation.",
                  "key": "seed",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "safety_score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:ImageGenerationRequestSeed": {
            "description": "Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific image. Must be greater than 0 and less than 2^32.",
            "name": "ImageGenerationRequestSeed",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:ImageGenerationRequest": {
            "description": "Generate one or more images based on the given parameters.",
            "name": "ImageGenerationRequest",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Text describing the image content to generate.",
                  "key": "prompt",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "prompt_2",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "negative_prompt",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "negative_prompt_2",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "checkpoint",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "controlnet",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "vae",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "textual_inversions",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "key": "loras",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "primitive",
                          "value": {
                            "type": "double"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "description": "Sampler name (also known as 'scheduler') to use during image generation.",
                  "key": "sampler",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:Scheduler"
                    }
                  }
                },
                {
                  "key": "height",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "key": "width",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "description": "Floating-point number represeting how closely to adhere to prompt description. Must be a positive number no greater than 50.0.",
                  "key": "cfg_scale",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "maximum": 50,
                        "default": 12
                      }
                    }
                  }
                },
                {
                  "description": "Integer repreenting how many steps of diffusion to run. Must be greater than 0 and less than or equal to 200.",
                  "key": "steps",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "maximum": 200,
                        "default": 30
                      }
                    }
                  }
                },
                {
                  "description": "Integer representing how many output images to generate with a single prompt/configuration.",
                  "key": "num_images",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "maximum": 16,
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "description": "Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific image. Must be greater than 0 and less than 2^32.",
                  "key": "seed",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationRequestSeed"
                    }
                  }
                },
                {
                  "key": "controlnet_image",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "init_image",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "mask_image",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "Floating-point number indicating how much creative the Image to Image generation mode should be. Must be greater than 0 and less than or equal to 1.0.",
                  "key": "strength",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.8
                      }
                    }
                  }
                },
                {
                  "key": "style_preset",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:SDXLStyles"
                    }
                  }
                },
                {
                  "description": "Whether to enable and apply the SDXL refiner model to the image generation.",
                  "key": "use_refiner",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Floating-point number that defines the fraction of steps to perform with the base model. Used only by SD XL. Must be greater than or equal to 0.0 and less than or equal to 1.0.",
                  "key": "high_noise_frac",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.8
                      }
                    }
                  }
                },
                {
                  "description": "How strong the effect of the controlnet should be.",
                  "key": "controlnet_conditioning_scale",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "key": "controlnet_early_stop",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double",
                        "minimum": 0,
                        "maximum": 1
                      }
                    }
                  }
                },
                {
                  "description": "Whether to apply automatic ControlNet preprocessing.",
                  "key": "controlnet_preprocess",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "clip_skip",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 12
                      }
                    }
                  }
                },
                {
                  "description": "Whether the request requires outpainting or not. If so, special preprocessing is applied for better results.",
                  "key": "outpainting",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Boolean defining whether to use safety checker system on generated outputs or not.",
                  "key": "enable_safety",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "Define which encoding process should be applied before returning the generated image(s).",
                  "key": "image_encoding",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:ImageEncoding"
                    }
                  }
                },
                {
                  "key": "transfer_images",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "list",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "description": "[Internal] Boolean defining if assets must be re-downloaded into the cache even if present.",
                  "key": "force_asset_download",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "description": "[Internal] Boolean defining if assets must to be copied into the GPU even if present.",
                  "key": "force_asset_gpu_copy",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:ImageGenerationResponse": {
            "description": "Response to an ImageGenerationRequest.",
            "name": "ImageGenerationResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "List of ImageGeneration(s) generated by the request.",
                  "key": "images",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:ImageGeneration"
                    }
                  }
                },
                {
                  "description": "Total runtime of the image generation(s).",
                  "key": "prediction_time_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:SDXLStyles": {
            "description": "The supported SDXL styles.",
            "name": "SDXLStyles",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "base"
                },
                {
                  "value": "3d-model"
                },
                {
                  "value": "analog-film"
                },
                {
                  "value": "anime"
                },
                {
                  "value": "cinematic"
                },
                {
                  "value": "comic-book"
                },
                {
                  "value": "Craft Clay"
                },
                {
                  "value": "modeling-compound"
                },
                {
                  "value": "digital-art"
                },
                {
                  "value": "enhance"
                },
                {
                  "value": "fantasy-art"
                },
                {
                  "value": "isometric"
                },
                {
                  "value": "line-art"
                },
                {
                  "value": "low-poly"
                },
                {
                  "value": "neon-punk"
                },
                {
                  "value": "origami"
                },
                {
                  "value": "photographic"
                },
                {
                  "value": "pixel-art"
                },
                {
                  "value": "tile-texture"
                },
                {
                  "value": "Advertising"
                },
                {
                  "value": "Food Photography"
                },
                {
                  "value": "Real Estate"
                },
                {
                  "value": "Abstract"
                },
                {
                  "value": "Cubist"
                },
                {
                  "value": "Graffiti"
                },
                {
                  "value": "Hyperrealism"
                },
                {
                  "value": "Impressionist"
                },
                {
                  "value": "Pointillism"
                },
                {
                  "value": "Pop Art"
                },
                {
                  "value": "Psychedelic"
                },
                {
                  "value": "Renaissance"
                },
                {
                  "value": "Steampunk"
                },
                {
                  "value": "Surrealist"
                },
                {
                  "value": "Typography"
                },
                {
                  "value": "Watercolor"
                },
                {
                  "value": "Fighting Game"
                },
                {
                  "value": "GTA"
                },
                {
                  "value": "Super Mario"
                },
                {
                  "value": "Minecraft"
                },
                {
                  "value": "Pokémon"
                },
                {
                  "value": "Retro Arcade"
                },
                {
                  "value": "Retro Game"
                },
                {
                  "value": "RPG Fantasy Game"
                },
                {
                  "value": "Strategy Game"
                },
                {
                  "value": "Street Fighter"
                },
                {
                  "value": "Legend of Zelda"
                },
                {
                  "value": "Architectural"
                },
                {
                  "value": "Disco"
                },
                {
                  "value": "Dreamscape"
                },
                {
                  "value": "Dystopian"
                },
                {
                  "value": "Fairy Tale"
                },
                {
                  "value": "Gothic"
                },
                {
                  "value": "Grunge"
                },
                {
                  "value": "Horror"
                },
                {
                  "value": "Minimalist"
                },
                {
                  "value": "Monochrome"
                },
                {
                  "value": "Nautical"
                },
                {
                  "value": "Space"
                },
                {
                  "value": "Stained Glass"
                },
                {
                  "value": "Techwear Fashion"
                },
                {
                  "value": "Tribal"
                },
                {
                  "value": "Zentangle"
                },
                {
                  "value": "Collage"
                },
                {
                  "value": "Flat Papercut"
                },
                {
                  "value": "Kirigami"
                },
                {
                  "value": "Paper Mache"
                },
                {
                  "value": "Paper Quilling"
                },
                {
                  "value": "Papercut Collage"
                },
                {
                  "value": "Papercut Shadow Box"
                },
                {
                  "value": "Stacked Papercut"
                },
                {
                  "value": "Thick Layered Papercut"
                },
                {
                  "value": "Alien"
                },
                {
                  "value": "Film Noir"
                },
                {
                  "value": "HDR"
                },
                {
                  "value": "Long Exposure"
                },
                {
                  "value": "Neon Noir"
                },
                {
                  "value": "Silhouette"
                },
                {
                  "value": "Tilt-Shift"
                }
              ]
            }
          },
          "type_image-gen:Scheduler": {
            "description": "The schedulers available for image generation.",
            "name": "Scheduler",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "PNDM"
                },
                {
                  "value": "LMS"
                },
                {
                  "value": "KLMS"
                },
                {
                  "value": "DDIM"
                },
                {
                  "value": "DDPM"
                },
                {
                  "value": "HEUN"
                },
                {
                  "value": "K_HEUN"
                },
                {
                  "value": "K_EULER"
                },
                {
                  "value": "K_EULER_ANCESTRAL"
                },
                {
                  "value": "DPM_SOLVER_MULTISTEP"
                },
                {
                  "value": "DPM_PLUS_PLUS_2M_KARRAS"
                },
                {
                  "value": "DPM_SINGLE"
                },
                {
                  "value": "DPM_2"
                },
                {
                  "value": "DPM_2_ANCESTRAL"
                },
                {
                  "value": "DPM_PLUS_PLUS_SDE_KARRAS"
                },
                {
                  "value": "UNI_PC"
                },
                {
                  "value": "LCM"
                }
              ]
            }
          },
          "type_image-gen:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:VideoGeneration": {
            "description": "Represent a generated video/animation.",
            "name": "VideoGeneration",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "video",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "True if the video/animation was removed for safety, False otherwise.",
                  "key": "removed_for_safety",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "description": "Seed used to generate the video/animation. It can be used to recreate the generation.",
                  "key": "seed",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "safety_score",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "double"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_image-gen:VideoGenerationResponse": {
            "description": "Response to an VideoGenerationRequest.",
            "name": "VideoGenerationResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "List of VideoGeneration(s) generated by the request.",
                  "key": "videos",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_image-gen:VideoGeneration"
                    }
                  }
                },
                {
                  "description": "Total runtime of the video(s) generation(s).",
                  "key": "prediction_time_ms",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:Stop": {
            "description": "Strings that stop the generation when they are generated.",
            "name": "Stop",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:Prompt": {
            "description": "The prompt to generate completions from.",
            "name": "Prompt",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer"
                      }
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionChoice": {
            "description": "A single chat completion choice. A response will contain one or\nmore of these based on the setting of `n`.",
            "name": "ChatCompletionChoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:FinishReason"
                    }
                  }
                },
                {
                  "description": "A unique identifier for the chat completion.Each chunk has the same ID.",
                  "key": "index",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:Logprobs"
                    }
                  }
                },
                {
                  "description": "A chat completion message generated by the model.",
                  "key": "message",
                  "valueType": {
                    "type": "id",
                    "value": "type_text-gen:ChatMessage"
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionChunk": {
            "description": "Represents a single chunk of a streaming chat completion response.\n\nThis object's schema is compatible with OpenAI's Chat Completion API.",
            "name": "ChatCompletionChunk",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of chat completion choices.Can be more than one if n is greater than 1.",
                  "key": "choices",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:ChatCompletionChunkChoice"
                    }
                  }
                },
                {
                  "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "A unique identifier for the entire chat completion request. Each chunk in the stream has the same ID.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The model used for the chat completion.",
                  "key": "model",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "object",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:UsageStats"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionChunkChoice": {
            "description": "An OpenAPI compatible schema for a chat completion chunk choice.",
            "name": "ChatCompletionChunkChoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "delta",
                  "valueType": {
                    "type": "id",
                    "value": "type_text-gen:ChatCompletionDelta"
                  }
                },
                {
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:FinishReason"
                    }
                  }
                },
                {
                  "key": "index",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:Logprobs"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionDelta": {
            "description": "An OpenAPI compatible schema for a chat completion choice delta.",
            "name": "ChatCompletionDelta",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "role",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionRequestExt": {
            "description": "OctoAI specific extensions for a chat completion request.",
            "name": "ChatCompletionRequestExt",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "vllm",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:ChatCompletionRequestExtVLLM"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionRequestExtVLLM": {
            "name": "ChatCompletionRequestExtVLLM",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "best_of",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": 1
                      }
                    }
                  }
                },
                {
                  "key": "ignore_eos",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "skip_special_tokens",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                },
                {
                  "key": "stop_token_ids",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                {
                  "key": "top_k",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "integer",
                        "default": -1
                      }
                    }
                  }
                },
                {
                  "key": "use_beam_search",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionResponse": {
            "description": "An OpenAI API compatible schema for a chat completion response object.",
            "name": "ChatCompletionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "A list of chat completion choices.Can be more than one if n is greater than 1.",
                  "key": "choices",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:ChatCompletionChoice"
                    }
                  }
                },
                {
                  "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "A unique identifier for the chat completion.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The model used for the chat completion.",
                  "key": "model",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "object",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "description": "Usage statistics for the completion request.",
                  "key": "usage",
                  "valueType": {
                    "type": "id",
                    "value": "type_text-gen:UsageStats"
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatCompletionResponseFormat": {
            "name": "ChatCompletionResponseFormat",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "schema",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ChatMessage": {
            "description": "An OpenAI API compatible schema for a single ChatMessage.",
            "name": "ChatMessage",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "description": "The role of the author of this message.",
                  "key": "role",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:CompletionChoice": {
            "name": "CompletionChoice",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "finish_reason",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:FinishReason"
                    }
                  }
                },
                {
                  "key": "index",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:Logprobs"
                    }
                  }
                },
                {
                  "key": "text",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:CompletionResponse": {
            "description": "Represents a completion response from the API.\nNote: both the streamed and non-streamed response objects\nshare the same shape (unlike the chat endpoint).",
            "name": "CompletionResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "choices",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:CompletionChoice"
                    }
                  }
                },
                {
                  "description": "The Unix timestamp (in seconds) of when the completion was created.",
                  "key": "created",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "model",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "object",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                },
                {
                  "key": "system_fingerprint",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:UsageStats"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ErrorResponseValidationErrorsValue": {
            "name": "ErrorResponseValidationErrorsValue",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "list",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ErrorResponse": {
            "description": "An OpenAI API compatible schema for a error response.",
            "name": "ErrorResponse",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "code",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "message",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "object",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string",
                        "default": "error"
                      }
                    }
                  }
                },
                {
                  "key": "param",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "validation_errors",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_text-gen:ErrorResponseValidationErrorsValue"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:FinishReason": {
            "description": "The reason why the model stopped generating tokens.\n\nThis will be `stop` if the model naturally completed generation or encountered a\nprovided stop sequence, `length` if the maximum number of tokens specified in the\nrequest was reached, content_filter if content was omitted due to a flag from our\ncontent filters, tool_calls if the model called a tool, or function_call\n(deprecated) if the model called a function.",
            "name": "FinishReason",
            "shape": {
              "type": "enum",
              "values": [
                {
                  "value": "stop"
                },
                {
                  "value": "length"
                },
                {
                  "value": "tool_calls"
                },
                {
                  "value": "content_filter"
                },
                {
                  "value": "function_call"
                },
                {
                  "value": "cancelled"
                }
              ]
            }
          },
          "type_text-gen:FunctionCall": {
            "description": "The representation of a function called during tool use.",
            "name": "FunctionCall",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The arguments to the function call.",
                  "key": "arguments",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "The name of the function to call.",
                  "key": "name",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:HTTPValidationError": {
            "name": "HTTPValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "detail",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_text-gen:ValidationError"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:Logprobs": {
            "description": "An OpenAI API compatible schema for logprobs output.\nSee details in https://platform.openai.com/docs/api-reference/chat/object#chat-create-logprobs",
            "name": "Logprobs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "List of logprobs info",
                  "key": "content",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "optional",
                        "itemType": {
                          "type": "id",
                          "value": "type_text-gen:LogprobsContent"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:LogprobsContent": {
            "description": "An OpenAI API compatible schema for logprobs output.",
            "name": "LogprobsContent",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "bytes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Logprob corresponding to the token",
                  "key": "logprob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "New generated token or token from prompt for loglikelihood case",
                  "key": "token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "description": "List of top tokens info",
                  "key": "top_logprobs",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "id",
                        "value": "type_text-gen:TopLogprobs"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:StreamOptions": {
            "name": "StreamOptions",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Whether or not to include token usage stats on the final chunk before the [Done] message.",
                  "key": "include_usage",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "primitive",
                      "value": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ToolCall": {
            "description": "An OpenAI API compatible schema for a tool invocation.",
            "name": "ToolCall",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "The function called by the model.",
                  "key": "function",
                  "valueType": {
                    "type": "id",
                    "value": "type_text-gen:FunctionCall"
                  }
                },
                {
                  "description": "A unique ID for the tool call used to reference it in the response.",
                  "key": "id",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "unknown"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:TopLogprobs": {
            "description": "An OpenAI API compatible schema for logprobs output.",
            "name": "TopLogprobs",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "bytes",
                  "valueType": {
                    "type": "optional",
                    "itemType": {
                      "type": "list",
                      "itemType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                {
                  "description": "Logprob corresponding to the top token",
                  "key": "logprob",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "double"
                    }
                  }
                },
                {
                  "description": "Token from the top list",
                  "key": "token",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:UsageStats": {
            "description": "The token usage statistics for a request.",
            "name": "UsageStats",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "description": "Number of tokens in the prompt.",
                  "key": "completion_tokens",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Number of tokens in the prompt.",
                  "key": "prompt_tokens",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                },
                {
                  "description": "Total number of tokens used in the request (prompt + completion).",
                  "key": "total_tokens",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ValidationErrorLocItem": {
            "name": "ValidationErrorLocItem",
            "shape": {
              "type": "undiscriminatedUnion",
              "variants": [
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": {
                    "type": "primitive",
                    "value": {
                      "type": "integer"
                    }
                  }
                }
              ]
            }
          },
          "type_text-gen:ValidationError": {
            "name": "ValidationError",
            "shape": {
              "type": "object",
              "extends": [],
              "properties": [
                {
                  "key": "loc",
                  "valueType": {
                    "type": "list",
                    "itemType": {
                      "type": "id",
                      "value": "type_text-gen:ValidationErrorLocItem"
                    }
                  }
                },
                {
                  "key": "msg",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "key": "type",
                  "valueType": {
                    "type": "primitive",
                    "value": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        },
        "subpackages": {
          "subpackage_asset-library": {
            "subpackageId": "subpackage_asset-library",
            "name": "asset-library",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-assets"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_asset-library.list",
                "name": "List Assets",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/assets"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "is_public",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "key": "data_type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_asset-library:DataType"
                      }
                    }
                  },
                  {
                    "key": "asset_type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_asset-library:AssetType"
                      }
                    }
                  },
                  {
                    "key": "engine",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_asset-library:BaseEngine"
                      }
                    }
                  },
                  {
                    "key": "engine_type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_asset-library:BaseEngineType"
                      }
                    }
                  },
                  {
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "key": "get_preview_urls",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "boolean"
                        }
                      }
                    }
                  },
                  {
                    "key": "asset_ids",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "key": "owner",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_asset-library:ListAssetsResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_asset-library:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/assets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [],
                      "has_more": true,
                      "total": 1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.list()\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.list()\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [],
                        "has_more": true,
                        "total": 1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/assets",
                    "pathParameters": {},
                    "queryParameters": {
                      "name": "string",
                      "is_public": true
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.list()\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.list()\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.assetLibrary.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "isPublic: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "is_public"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "fp16": "OctoAI.DataType.Fp16",
                                    "fp32": "OctoAI.DataType.Fp32",
                                    "int4": "OctoAI.DataType.Int4",
                                    "int8": "OctoAI.DataType.Int8"
                                  },
                                  "templateString": "dataType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "data_type"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "file": "OctoAI.AssetType.File",
                                    "checkpoint": "OctoAI.AssetType.Checkpoint",
                                    "lora": "OctoAI.AssetType.Lora",
                                    "textual_inversion": "OctoAI.AssetType.TextualInversion",
                                    "vae": "OctoAI.AssetType.Vae",
                                    "latent": "OctoAI.AssetType.Latent"
                                  },
                                  "templateString": "assetType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "asset_type"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                    "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                    "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                    "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                    "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                    "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                    "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                    "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                    "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                    "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                    "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                    "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                    "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                    "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                    "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                    "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                  },
                                  "templateString": "engine: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "engine"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "text": "OctoAI.BaseEngineType.Text",
                                    "image": "OctoAI.BaseEngineType.Image",
                                    "audio": "OctoAI.BaseEngineType.Audio"
                                  },
                                  "templateString": "engineType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "engine_type"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "limit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "offset: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "offset"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "getPreviewUrls: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "get_preview_urls"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "assetIds: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "asset_ids"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "owner: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "owner"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.asset_library.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "is_public=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "is_public",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "data_type=$FERN_INPUT",
                            "values": {
                              "fp16": "\"fp16\"",
                              "fp32": "\"fp32\"",
                              "int4": "\"int4\"",
                              "int8": "\"int8\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "data_type"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "asset_type=$FERN_INPUT",
                            "values": {
                              "file": "\"file\"",
                              "checkpoint": "\"checkpoint\"",
                              "lora": "\"lora\"",
                              "textual_inversion": "\"textual_inversion\"",
                              "vae": "\"vae\"",
                              "latent": "\"latent\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "asset_type"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine=$FERN_INPUT",
                            "values": {
                              "text/llama-2-7b": "\"text/llama-2-7b\"",
                              "text/llama-2-13b": "\"text/llama-2-13b\"",
                              "text/llama-2-70b": "\"text/llama-2-70b\"",
                              "text/codellama-7b": "\"text/codellama-7b\"",
                              "text/codellama-13b": "\"text/codellama-13b\"",
                              "text/codellama-34b": "\"text/codellama-34b\"",
                              "text/codellama-70b": "\"text/codellama-70b\"",
                              "text/mistral-7b": "\"text/mistral-7b\"",
                              "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                              "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                              "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                              "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                              "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                              "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                              "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                              "audio/rvc": "\"audio/rvc\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "engine"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine_type=$FERN_INPUT",
                            "values": {
                              "text": "\"text\"",
                              "image": "\"image\"",
                              "audio": "\"audio\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "engine_type"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "offset=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "offset",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "get_preview_urls=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "get_preview_urls",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "asset_ids=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "asset_ids",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "owner=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "owner",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-asset"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_asset-library.create",
                "name": "Create Asset",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/assets"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Asset type.",
                        "key": "asset_type",
                        "valueType": {
                          "type": "id",
                          "value": "type_asset-library:AssetType"
                        }
                      },
                      {
                        "description": "Asset data.",
                        "key": "data",
                        "valueType": {
                          "type": "id",
                          "value": "type_asset-library:Data"
                        }
                      },
                      {
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "hf_repo",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "key": "hf_token_secret",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "True if asset is public.",
                        "key": "is_public",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Asset name.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Skip asset validation.",
                        "key": "skip_validation",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Transfer API type.",
                        "key": "transfer_api_type",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_asset-library:TransferApiType"
                          }
                        }
                      },
                      {
                        "key": "url",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_asset-library:CreateAssetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_asset-library:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/assets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.asset_library import Data_Checkpoint\nfrom octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.create(\n    asset_type=\"file\",\n    data=Data_Checkpoint(\n        data_type=\"fp16\",\n        engine=\"text/llama-2-7b\",\n        file_format=\"safetensors\",\n    ),\n    description=\"string\",\n    hf_repo=\"string\",\n    hf_token_secret=\"string\",\n    is_public=True,\n    name=\"string\",\n    skip_validation=True,\n    transfer_api_type=\"presigned-url\",\n    url=\"string\",\n)\n",
                        "sync_client": "from octoai.asset_library import Data_Checkpoint\nfrom octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.create(\n    asset_type=\"file\",\n    data=Data_Checkpoint(\n        data_type=\"fp16\",\n        engine=\"text/llama-2-7b\",\n        file_format=\"safetensors\",\n    ),\n    description=\"string\",\n    hf_repo=\"string\",\n    hf_token_secret=\"string\",\n    is_public=True,\n    name=\"string\",\n    skip_validation=True,\n    transfer_api_type=\"presigned-url\",\n    url=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient, OctoAI } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.create({\n    assetType: OctoAI.AssetType.File,\n    data: {\n        assetType: \"checkpoint\",\n        dataType: OctoAI.DataType.Fp16,\n        engine: OctoAI.BaseEngine.TextLlama27B,\n        fileFormat: OctoAI.FileFormat.Safetensors\n    },\n    description: \"string\",\n    hfRepo: \"string\",\n    hfTokenSecret: \"string\",\n    isPublic: true,\n    name: \"string\",\n    skipValidation: true,\n    transferApiType: OctoAI.TransferApiType.PresignedUrl,\n    url: \"string\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "asset_type": "file",
                        "data": {
                          "asset_type": "checkpoint",
                          "engine": "text/llama-2-7b"
                        },
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "asset": {
                          "asset_type": "file",
                          "created_at": "string",
                          "data": {
                            "asset_type": "checkpoint",
                            "data_type": "fp16",
                            "engine": "text/llama-2-7b",
                            "file_format": "safetensors"
                          },
                          "description": "string",
                          "file_structure": "unknown",
                          "hf_repo": "string",
                          "id": "string",
                          "is_public": true,
                          "name": "string",
                          "size_bytes": 0,
                          "status": "ready_to_upload",
                          "status_details": "string",
                          "status_info": {
                            "string": {}
                          },
                          "tenant_uuid": "string",
                          "url": "string"
                        },
                        "token": "string",
                        "transfer_api": {
                          "type": "none"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/assets",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.asset_library import Data_Checkpoint\nfrom octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.create(\n    asset_type=\"file\",\n    data=Data_Checkpoint(\n        data_type=\"fp16\",\n        engine=\"text/llama-2-7b\",\n        file_format=\"safetensors\",\n    ),\n    description=\"string\",\n    hf_repo=\"string\",\n    hf_token_secret=\"string\",\n    is_public=True,\n    name=\"string\",\n    skip_validation=True,\n    transfer_api_type=\"presigned-url\",\n    url=\"string\",\n)\n",
                        "sync_client": "from octoai.asset_library import Data_Checkpoint\nfrom octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.create(\n    asset_type=\"file\",\n    data=Data_Checkpoint(\n        data_type=\"fp16\",\n        engine=\"text/llama-2-7b\",\n        file_format=\"safetensors\",\n    ),\n    description=\"string\",\n    hf_repo=\"string\",\n    hf_token_secret=\"string\",\n    is_public=True,\n    name=\"string\",\n    skip_validation=True,\n    transfer_api_type=\"presigned-url\",\n    url=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient, OctoAI } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.create({\n    assetType: OctoAI.AssetType.File,\n    data: {\n        assetType: \"checkpoint\",\n        dataType: OctoAI.DataType.Fp16,\n        engine: OctoAI.BaseEngine.TextLlama27B,\n        fileFormat: OctoAI.FileFormat.Safetensors\n    },\n    description: \"string\",\n    hfRepo: \"string\",\n    hfTokenSecret: \"string\",\n    isPublic: true,\n    name: \"string\",\n    skipValidation: true,\n    transferApiType: OctoAI.TransferApiType.PresignedUrl,\n    url: \"string\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "asset_type": "file",
                        "data": {
                          "asset_type": "checkpoint",
                          "engine": "text/llama-2-7b"
                        },
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.assetLibrary.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "file": "OctoAI.AssetType.File",
                                    "checkpoint": "OctoAI.AssetType.Checkpoint",
                                    "lora": "OctoAI.AssetType.Lora",
                                    "textual_inversion": "OctoAI.AssetType.TextualInversion",
                                    "vae": "OctoAI.AssetType.Vae",
                                    "latent": "OctoAI.AssetType.Latent"
                                  },
                                  "templateString": "assetType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "asset_type"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "discriminatedUnion",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "data: '$FERN_INPUT'",
                                  "discriminantField": "asset_type",
                                  "members": {
                                    "checkpoint": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "data: { \n\t\t\tassetType : \"checkpoint\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "fp16": "OctoAI.DataType.Fp16",
                                                    "fp32": "OctoAI.DataType.Fp32",
                                                    "int4": "OctoAI.DataType.Int4",
                                                    "int8": "OctoAI.DataType.Int8"
                                                  },
                                                  "templateString": "dataType: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.data_type"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                                    "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                                    "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                                    "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                                    "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                                    "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                                    "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                                    "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                                    "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                                    "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                                    "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                                    "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                                    "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                                    "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                                    "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                                    "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                                  },
                                                  "templateString": "engine: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.engine"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "safetensors": "OctoAI.FileFormat.Safetensors",
                                                    "pt": "OctoAI.FileFormat.Pt"
                                                  },
                                                  "templateString": "fileFormat: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.file_format"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "file": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "data: { \n\t\t\tassetType : \"file\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "unknown": "OctoAI.FileExtension.Unknown",
                                                    "png": "OctoAI.FileExtension.Png",
                                                    "jpg": "OctoAI.FileExtension.Jpg",
                                                    "jpeg": "OctoAI.FileExtension.Jpeg",
                                                    "txt": "OctoAI.FileExtension.Txt",
                                                    "mp3": "OctoAI.FileExtension.Mp3",
                                                    "wav": "OctoAI.FileExtension.Wav"
                                                  },
                                                  "templateString": "fileFormat: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.file_format"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "previewUrl: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "data.preview_url"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "version: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "data.version"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "latent": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "data: { \n\t\t\tassetType : \"latent\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                                    "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                                    "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                                    "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                                    "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                                    "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                                    "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                                    "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                                    "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                                    "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                                    "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                                    "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                                    "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                                    "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                                    "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                                    "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                                  },
                                                  "templateString": "engine: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.engine"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "safetensors": "OctoAI.FileFormat.Safetensors",
                                                    "pt": "OctoAI.FileFormat.Pt"
                                                  },
                                                  "templateString": "fileFormat: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.file_format"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "lora": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "data: { \n\t\t\tassetType : \"lora\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "checkpoint: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "data.checkpoint"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "fp16": "OctoAI.DataType.Fp16",
                                                    "fp32": "OctoAI.DataType.Fp32",
                                                    "int4": "OctoAI.DataType.Int4",
                                                    "int8": "OctoAI.DataType.Int8"
                                                  },
                                                  "templateString": "dataType: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.data_type"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                                    "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                                    "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                                    "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                                    "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                                    "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                                    "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                                    "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                                    "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                                    "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                                    "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                                    "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                                    "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                                    "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                                    "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                                    "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                                  },
                                                  "templateString": "engine: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.engine"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "safetensors": "OctoAI.FileFormat.Safetensors",
                                                    "pt": "OctoAI.FileFormat.Pt"
                                                  },
                                                  "templateString": "fileFormat: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.file_format"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "triggerWords: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.trigger_words"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "textual_inversion": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "data: { \n\t\t\tassetType : \"textual_inversion\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "fp16": "OctoAI.DataType.Fp16",
                                                    "fp32": "OctoAI.DataType.Fp32",
                                                    "int4": "OctoAI.DataType.Int4",
                                                    "int8": "OctoAI.DataType.Int8"
                                                  },
                                                  "templateString": "dataType: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.data_type"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                                    "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                                    "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                                    "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                                    "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                                    "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                                    "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                                    "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                                    "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                                    "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                                    "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                                    "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                                    "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                                    "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                                    "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                                    "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                                  },
                                                  "templateString": "engine: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.engine"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "safetensors": "OctoAI.FileFormat.Safetensors",
                                                    "pt": "OctoAI.FileFormat.Pt"
                                                  },
                                                  "templateString": "fileFormat: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.file_format"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "triggerWords: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.trigger_words"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "vae": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "data: { \n\t\t\tassetType : \"vae\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "fp16": "OctoAI.DataType.Fp16",
                                                    "fp32": "OctoAI.DataType.Fp32",
                                                    "int4": "OctoAI.DataType.Int4",
                                                    "int8": "OctoAI.DataType.Int8"
                                                  },
                                                  "templateString": "dataType: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.data_type"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                                    "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                                    "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                                    "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                                    "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                                    "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                                    "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                                    "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                                    "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                                    "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                                    "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                                    "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                                    "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                                    "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                                    "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                                    "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                                  },
                                                  "templateString": "engine: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.engine"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "enum",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "values": {
                                                    "safetensors": "OctoAI.FileFormat.Safetensors",
                                                    "pt": "OctoAI.FileFormat.Pt"
                                                  },
                                                  "templateString": "fileFormat: $FERN_INPUT",
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "data.file_format"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "data"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "description: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "description"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "hfRepo: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "hf_repo"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "hfTokenSecret: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "hf_token_secret"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "isPublic: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "is_public"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "skipValidation: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "skip_validation"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "presigned-url": "OctoAI.TransferApiType.PresignedUrl",
                                    "sts": "OctoAI.TransferApiType.Sts"
                                  },
                                  "templateString": "transferApiType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "transfer_api_type"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "url: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "url"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.asset_library.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "asset_type=$FERN_INPUT",
                            "values": {
                              "file": "\"file\"",
                              "checkpoint": "\"checkpoint\"",
                              "lora": "\"lora\"",
                              "textual_inversion": "\"textual_inversion\"",
                              "vae": "\"vae\"",
                              "latent": "\"latent\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "asset_type"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "data=$FERN_INPUT",
                            "discriminantField": "asset_type",
                            "members": {
                              "checkpoint": {
                                "imports": ["from octoai.asset_library import Data_Checkpoint"],
                                "isOptional": true,
                                "templateString": "data=Data_Checkpoint($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "data_type=$FERN_INPUT",
                                      "values": {
                                        "fp16": "\"fp16\"",
                                        "fp32": "\"fp32\"",
                                        "int4": "\"int4\"",
                                        "int8": "\"int8\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.data_type"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "engine=$FERN_INPUT",
                                      "values": {
                                        "text/llama-2-7b": "\"text/llama-2-7b\"",
                                        "text/llama-2-13b": "\"text/llama-2-13b\"",
                                        "text/llama-2-70b": "\"text/llama-2-70b\"",
                                        "text/codellama-7b": "\"text/codellama-7b\"",
                                        "text/codellama-13b": "\"text/codellama-13b\"",
                                        "text/codellama-34b": "\"text/codellama-34b\"",
                                        "text/codellama-70b": "\"text/codellama-70b\"",
                                        "text/mistral-7b": "\"text/mistral-7b\"",
                                        "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                                        "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                                        "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                                        "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                                        "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                                        "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                                        "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                                        "audio/rvc": "\"audio/rvc\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.engine"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "file_format=$FERN_INPUT",
                                      "values": {
                                        "safetensors": "\"safetensors\"",
                                        "pt": "\"pt\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.file_format"
                                      },
                                      "type": "enum"
                                    }
                                  }
                                ],
                                "type": "generic"
                              },
                              "file": {
                                "imports": ["from octoai.asset_library import Data_File"],
                                "isOptional": true,
                                "templateString": "data=Data_File($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "file_format=$FERN_INPUT",
                                      "values": {
                                        "unknown": "\"unknown\"",
                                        "png": "\"png\"",
                                        "jpg": "\"jpg\"",
                                        "jpeg": "\"jpeg\"",
                                        "txt": "\"txt\"",
                                        "mp3": "\"mp3\"",
                                        "wav": "\"wav\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.file_format"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "preview_url=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "data.preview_url",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "version=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "data.version",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  }
                                ],
                                "type": "generic"
                              },
                              "latent": {
                                "imports": ["from octoai.asset_library import Data_Latent"],
                                "isOptional": true,
                                "templateString": "data=Data_Latent($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "engine=$FERN_INPUT",
                                      "values": {
                                        "text/llama-2-7b": "\"text/llama-2-7b\"",
                                        "text/llama-2-13b": "\"text/llama-2-13b\"",
                                        "text/llama-2-70b": "\"text/llama-2-70b\"",
                                        "text/codellama-7b": "\"text/codellama-7b\"",
                                        "text/codellama-13b": "\"text/codellama-13b\"",
                                        "text/codellama-34b": "\"text/codellama-34b\"",
                                        "text/codellama-70b": "\"text/codellama-70b\"",
                                        "text/mistral-7b": "\"text/mistral-7b\"",
                                        "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                                        "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                                        "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                                        "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                                        "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                                        "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                                        "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                                        "audio/rvc": "\"audio/rvc\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.engine"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "file_format=$FERN_INPUT",
                                      "values": {
                                        "safetensors": "\"safetensors\"",
                                        "pt": "\"pt\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.file_format"
                                      },
                                      "type": "enum"
                                    }
                                  }
                                ],
                                "type": "generic"
                              },
                              "lora": {
                                "imports": ["from octoai.asset_library import Data_Lora"],
                                "isOptional": true,
                                "templateString": "data=Data_Lora($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "checkpoint=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "data.checkpoint",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "data_type=$FERN_INPUT",
                                      "values": {
                                        "fp16": "\"fp16\"",
                                        "fp32": "\"fp32\"",
                                        "int4": "\"int4\"",
                                        "int8": "\"int8\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.data_type"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "engine=$FERN_INPUT",
                                      "values": {
                                        "text/llama-2-7b": "\"text/llama-2-7b\"",
                                        "text/llama-2-13b": "\"text/llama-2-13b\"",
                                        "text/llama-2-70b": "\"text/llama-2-70b\"",
                                        "text/codellama-7b": "\"text/codellama-7b\"",
                                        "text/codellama-13b": "\"text/codellama-13b\"",
                                        "text/codellama-34b": "\"text/codellama-34b\"",
                                        "text/codellama-70b": "\"text/codellama-70b\"",
                                        "text/mistral-7b": "\"text/mistral-7b\"",
                                        "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                                        "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                                        "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                                        "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                                        "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                                        "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                                        "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                                        "audio/rvc": "\"audio/rvc\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.engine"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "file_format=$FERN_INPUT",
                                      "values": {
                                        "safetensors": "\"safetensors\"",
                                        "pt": "\"pt\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.file_format"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "trigger_words=[\n\t\t$FERN_INPUT\n\t]",
                                      "delimiter": ",\n\t\t",
                                      "innerTemplate": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "RELATIVE",
                                            "path": null,
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.trigger_words"
                                      },
                                      "type": "iterable"
                                    }
                                  }
                                ],
                                "type": "generic"
                              },
                              "textual_inversion": {
                                "imports": ["from octoai.asset_library import Data_TextualInversion"],
                                "isOptional": true,
                                "templateString": "data=Data_TextualInversion($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "data_type=$FERN_INPUT",
                                      "values": {
                                        "fp16": "\"fp16\"",
                                        "fp32": "\"fp32\"",
                                        "int4": "\"int4\"",
                                        "int8": "\"int8\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.data_type"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "engine=$FERN_INPUT",
                                      "values": {
                                        "text/llama-2-7b": "\"text/llama-2-7b\"",
                                        "text/llama-2-13b": "\"text/llama-2-13b\"",
                                        "text/llama-2-70b": "\"text/llama-2-70b\"",
                                        "text/codellama-7b": "\"text/codellama-7b\"",
                                        "text/codellama-13b": "\"text/codellama-13b\"",
                                        "text/codellama-34b": "\"text/codellama-34b\"",
                                        "text/codellama-70b": "\"text/codellama-70b\"",
                                        "text/mistral-7b": "\"text/mistral-7b\"",
                                        "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                                        "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                                        "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                                        "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                                        "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                                        "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                                        "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                                        "audio/rvc": "\"audio/rvc\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.engine"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "file_format=$FERN_INPUT",
                                      "values": {
                                        "safetensors": "\"safetensors\"",
                                        "pt": "\"pt\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.file_format"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "trigger_words=[\n\t\t$FERN_INPUT\n\t]",
                                      "delimiter": ",\n\t\t",
                                      "innerTemplate": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "RELATIVE",
                                            "path": null,
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.trigger_words"
                                      },
                                      "type": "iterable"
                                    }
                                  }
                                ],
                                "type": "generic"
                              },
                              "vae": {
                                "imports": ["from octoai.asset_library import Data_Vae"],
                                "isOptional": true,
                                "templateString": "data=Data_Vae($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "data_type=$FERN_INPUT",
                                      "values": {
                                        "fp16": "\"fp16\"",
                                        "fp32": "\"fp32\"",
                                        "int4": "\"int4\"",
                                        "int8": "\"int8\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.data_type"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "engine=$FERN_INPUT",
                                      "values": {
                                        "text/llama-2-7b": "\"text/llama-2-7b\"",
                                        "text/llama-2-13b": "\"text/llama-2-13b\"",
                                        "text/llama-2-70b": "\"text/llama-2-70b\"",
                                        "text/codellama-7b": "\"text/codellama-7b\"",
                                        "text/codellama-13b": "\"text/codellama-13b\"",
                                        "text/codellama-34b": "\"text/codellama-34b\"",
                                        "text/codellama-70b": "\"text/codellama-70b\"",
                                        "text/mistral-7b": "\"text/mistral-7b\"",
                                        "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                                        "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                                        "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                                        "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                                        "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                                        "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                                        "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                                        "audio/rvc": "\"audio/rvc\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.engine"
                                      },
                                      "type": "enum"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "file_format=$FERN_INPUT",
                                      "values": {
                                        "safetensors": "\"safetensors\"",
                                        "pt": "\"pt\""
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "data.file_format"
                                      },
                                      "type": "enum"
                                    }
                                  }
                                ],
                                "type": "generic"
                              }
                            },
                            "type": "discriminatedUnion"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "hf_repo=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "hf_repo",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "hf_token_secret=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "hf_token_secret",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "is_public=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "is_public",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "skip_validation=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "skip_validation",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "transfer_api_type=$FERN_INPUT",
                            "values": {
                              "presigned-url": "\"presigned-url\"",
                              "sts": "\"sts\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "transfer_api_type"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "url=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "url",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-asset"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_asset-library.delete",
                "name": "Delete Asset",
                "path": {
                  "pathParameters": [
                    {
                      "key": "asset_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/assets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "asset_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_asset-library:DeleteAssetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_asset-library:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/assets/asset_id",
                    "pathParameters": {
                      "asset_id": "asset_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "deleted_at": "deleted_at",
                      "id": "id"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.delete(\n    asset_id=\"asset_id\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.delete(\n    asset_id=\"asset_id\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.delete(\"asset_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "deleted_at": "deleted_at",
                        "id": "id"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/assets/:asset_id",
                    "pathParameters": {
                      "asset_id": ":asset_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.delete(\n    asset_id=\"asset_id\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.delete(\n    asset_id=\"asset_id\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.delete(\"asset_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.assetLibrary.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "asset_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.asset_library.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "asset_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "asset_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "complete-upload",
                "migratedFromUrlSlugs": ["complete-asset-upload"],
                "method": "POST",
                "id": "completeUpload",
                "originalEndpointId": "endpoint_asset-library.completeUpload",
                "name": "Complete Asset Upload",
                "path": {
                  "pathParameters": [
                    {
                      "key": "asset_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/assets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "asset_id"
                    },
                    {
                      "type": "literal",
                      "value": "/complete-upload"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Skip asset validation.",
                        "key": "skip_validation",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Unused",
                        "key": "token",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string",
                              "default": ""
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_asset-library:CompleteAssetUploadResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_asset-library:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/assets/asset_id/complete-upload",
                    "pathParameters": {
                      "asset_id": "asset_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "error": "error"
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.complete_upload(\n    asset_id=\"asset_id\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.complete_upload(\n    asset_id=\"asset_id\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.completeUpload(\"asset_id\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "error": "error"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/assets/:asset_id/complete-upload",
                    "pathParameters": {
                      "asset_id": ":asset_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.complete_upload(\n    asset_id=\"asset_id\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.complete_upload(\n    asset_id=\"asset_id\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.completeUpload(\"asset_id\");\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {}
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.assetLibrary.completeUpload(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "asset_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "skipValidation: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "skip_validation"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "token: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "token"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.asset_library.complete_upload(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "asset_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "asset_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "skip_validation=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "skip_validation",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "token=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "token",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["retrieve-asset"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_asset-library.get",
                "name": "Retrieve Asset",
                "path": {
                  "pathParameters": [
                    {
                      "key": "asset_owner_and_name_or_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/assets/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "asset_owner_and_name_or_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "key": "transfer_api_type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_asset-library:TransferApiType"
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_asset-library:RetrieveAssetResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_asset-library:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/assets/:asset_owner_and_name_or_id",
                    "pathParameters": {
                      "asset_owner_and_name_or_id": ":asset_owner_and_name_or_id"
                    },
                    "queryParameters": {
                      "transfer_api_type": "presigned-url"
                    },
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.get(\n    asset_owner_and_name_or_id=\"string\",\n    transfer_api_type=\"presigned-url\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.get(\n    asset_owner_and_name_or_id=\"string\",\n    transfer_api_type=\"presigned-url\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient, OctoAI } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.get(\"string\", {\n    transferApiType: OctoAI.TransferApiType.PresignedUrl\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "asset": {
                          "asset_type": "file",
                          "created_at": "string",
                          "data": {
                            "asset_type": "checkpoint",
                            "data_type": "fp16",
                            "engine": "text/llama-2-7b",
                            "file_format": "safetensors"
                          },
                          "description": "string",
                          "file_structure": "unknown",
                          "hf_repo": "string",
                          "id": "string",
                          "is_public": true,
                          "name": "string",
                          "size_bytes": 0,
                          "status": "ready_to_upload",
                          "status_details": "string",
                          "status_info": {
                            "string": {}
                          },
                          "tenant_uuid": "string",
                          "url": "string"
                        },
                        "transfer_api": {
                          "type": "none"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/assets/:asset_owner_and_name_or_id",
                    "pathParameters": {
                      "asset_owner_and_name_or_id": ":asset_owner_and_name_or_id"
                    },
                    "queryParameters": {
                      "transfer_api_type": "presigned-url"
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.asset_library.get(\n    asset_owner_and_name_or_id=\"string\",\n    transfer_api_type=\"presigned-url\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.asset_library.get(\n    asset_owner_and_name_or_id=\"string\",\n    transfer_api_type=\"presigned-url\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient, OctoAI } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.assetLibrary.get(\"string\", {\n    transferApiType: OctoAI.TransferApiType.PresignedUrl\n});\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.assetLibrary.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "asset_owner_and_name_or_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "presigned-url": "OctoAI.TransferApiType.PresignedUrl",
                                    "sts": "OctoAI.TransferApiType.Sts"
                                  },
                                  "templateString": "transferApiType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "transfer_api_type"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.asset_library.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "asset_owner_and_name_or_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "asset_owner_and_name_or_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "transfer_api_type=$FERN_INPUT",
                            "values": {
                              "presigned-url": "\"presigned-url\"",
                              "sts": "\"sts\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "transfer_api_type"
                            },
                            "type": "enum"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              }
            ],
            "types": [
              "type_asset-library:Data",
              "type_asset-library:Asset",
              "type_asset-library:AssetType",
              "type_asset-library:BaseEngine",
              "type_asset-library:BaseEngineType",
              "type_asset-library:CheckpointData",
              "type_asset-library:CompleteAssetUploadResponse",
              "type_asset-library:CreateAssetResponseTransferApi",
              "type_asset-library:CreateAssetResponse",
              "type_asset-library:DataType",
              "type_asset-library:DeleteAssetResponse",
              "type_asset-library:FileData",
              "type_asset-library:FileExtension",
              "type_asset-library:FileFormat",
              "type_asset-library:FileStructure",
              "type_asset-library:HTTPValidationError",
              "type_asset-library:LatentData",
              "type_asset-library:ListAssetsResponse",
              "type_asset-library:LoraData",
              "type_asset-library:NoTransferApi",
              "type_asset-library:PresignedUrlTransferApi",
              "type_asset-library:RetrieveAssetResponseTransferApi",
              "type_asset-library:RetrieveAssetResponse",
              "type_asset-library:Status",
              "type_asset-library:StsTransferApi",
              "type_asset-library:TextualInversionData",
              "type_asset-library:TransferApiType",
              "type_asset-library:VAEData",
              "type_asset-library:ValidationErrorLocItem",
              "type_asset-library:ValidationError"
            ],
            "subpackages": [],
            "urlSlug": "asset-library",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_fine-tuning": {
            "subpackageId": "subpackage_fine-tuning",
            "name": "fine-tuning",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create",
                "migratedFromUrlSlugs": ["create-tune"],
                "method": "POST",
                "id": "create",
                "originalEndpointId": "endpoint_fine-tuning.create",
                "name": "Create Tune",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/tune"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "key": "continue_on_rejection",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "description",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Details of the tune.",
                        "key": "details",
                        "valueType": {
                          "type": "id",
                          "value": "type_fine-tuning:Details"
                        }
                      },
                      {
                        "description": "The name of the tune.",
                        "key": "name",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_fine-tuning:Tune"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_fine-tuning:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/tune",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.fine_tuning import (\n    Details_LoraTune,\n    LoraTuneCheckpoint,\n    LoraTuneFile,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.create(\n    continue_on_rejection=True,\n    description=\"string\",\n    details=Details_LoraTune(\n        base_checkpoint=LoraTuneCheckpoint(),\n        files=[LoraTuneFile()],\n        resize_images=True,\n        seed=1,\n        steps=1,\n        trigger_words=[\"string\"],\n    ),\n    name=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.fine_tuning import (\n    Details_LoraTune,\n    LoraTuneCheckpoint,\n    LoraTuneFile,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.create(\n    continue_on_rejection=True,\n    description=\"string\",\n    details=Details_LoraTune(\n        base_checkpoint=LoraTuneCheckpoint(),\n        files=[LoraTuneFile()],\n        resize_images=True,\n        seed=1,\n        steps=1,\n        trigger_words=[\"string\"],\n    ),\n    name=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.create({\n    continueOnRejection: true,\n    description: \"string\",\n    details: {\n        tuneType: \"lora_tune\",\n        baseCheckpoint: {},\n        files: [{}],\n        resizeImages: true,\n        seed: 1,\n        steps: 1,\n        triggerWords: [\"string\"]\n    },\n    name: \"string\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "details": {
                          "tune_type": "lora_tune",
                          "base_checkpoint": {
                            "checkpoint_id": "string"
                          },
                          "files": [
                            {
                              "file_id": "string"
                            }
                          ],
                          "steps": 0,
                          "trigger_words": ["string"]
                        },
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "created_at": "2023-01-01T00:00:00Z",
                        "deleted_at": "2023-01-01T00:00:00Z",
                        "description": "string",
                        "details": {
                          "tune_type": "lora_tune",
                          "base_checkpoint": {
                            "checkpoint_id": "string",
                            "engine": "text/llama-2-7b",
                            "name": "string"
                          },
                          "files": [
                            {
                              "caption": "string",
                              "file_id": "string"
                            }
                          ],
                          "resize_images": true,
                          "seed": 0,
                          "steps": 0,
                          "trigger_words": ["string"]
                        },
                        "id": "string",
                        "name": "string",
                        "output_lora_ids": ["string"],
                        "result": {
                          "number_of_available_assets": 0,
                          "output_assets": ["string"],
                          "rejected_assets": ["string"],
                          "unready_assets": ["string"]
                        },
                        "status": "pending",
                        "status_details": "string",
                        "succeeded_at": "2023-01-01T00:00:00Z",
                        "tenant_id": "string",
                        "tune_type": "lora_tune",
                        "updated_at": "2023-01-01T00:00:00Z"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/tune",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.fine_tuning import (\n    Details_LoraTune,\n    LoraTuneCheckpoint,\n    LoraTuneFile,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.create(\n    continue_on_rejection=True,\n    description=\"string\",\n    details=Details_LoraTune(\n        base_checkpoint=LoraTuneCheckpoint(),\n        files=[LoraTuneFile()],\n        resize_images=True,\n        seed=1,\n        steps=1,\n        trigger_words=[\"string\"],\n    ),\n    name=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.fine_tuning import (\n    Details_LoraTune,\n    LoraTuneCheckpoint,\n    LoraTuneFile,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.create(\n    continue_on_rejection=True,\n    description=\"string\",\n    details=Details_LoraTune(\n        base_checkpoint=LoraTuneCheckpoint(),\n        files=[LoraTuneFile()],\n        resize_images=True,\n        seed=1,\n        steps=1,\n        trigger_words=[\"string\"],\n    ),\n    name=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.create({\n    continueOnRejection: true,\n    description: \"string\",\n    details: {\n        tuneType: \"lora_tune\",\n        baseCheckpoint: {},\n        files: [{}],\n        resizeImages: true,\n        seed: 1,\n        steps: 1,\n        triggerWords: [\"string\"]\n    },\n    name: \"string\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "details": {
                          "tune_type": "lora_tune",
                          "base_checkpoint": {
                            "checkpoint_id": "string"
                          },
                          "files": [
                            {
                              "file_id": "string"
                            }
                          ],
                          "steps": 0,
                          "trigger_words": ["string"]
                        },
                        "name": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Spawn a tune.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.fineTuning.create(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "continueOnRejection: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "continue_on_rejection"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "description: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "description"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "discriminatedUnion",
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "details: '$FERN_INPUT'",
                                  "discriminantField": "tune_type",
                                  "members": {
                                    "lora_tune": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "details: { \n\t\t\ttuneType : \"lora_tune\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "baseCheckpoint: {\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t}",
                                                  "isOptional": true,
                                                  "inputDelimiter": ",\n\t\t\t\t\t",
                                                  "templateInputs": [
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "checkpointId: $FERN_INPUT",
                                                        "isOptional": true,
                                                        "templateInputs": [
                                                          {
                                                            "type": "payload",
                                                            "location": "BODY",
                                                            "path": "details.base_checkpoint.checkpoint_id"
                                                          }
                                                        ]
                                                      }
                                                    },
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "enum",
                                                        "imports": [],
                                                        "isOptional": true,
                                                        "values": {
                                                          "text/llama-2-7b": "OctoAI.BaseEngine.TextLlama27B",
                                                          "text/llama-2-13b": "OctoAI.BaseEngine.TextLlama213B",
                                                          "text/llama-2-70b": "OctoAI.BaseEngine.TextLlama270B",
                                                          "text/codellama-7b": "OctoAI.BaseEngine.TextCodellama7B",
                                                          "text/codellama-13b": "OctoAI.BaseEngine.TextCodellama13B",
                                                          "text/codellama-34b": "OctoAI.BaseEngine.TextCodellama34B",
                                                          "text/codellama-70b": "OctoAI.BaseEngine.TextCodellama70B",
                                                          "text/mistral-7b": "OctoAI.BaseEngine.TextMistral7B",
                                                          "text/mixtral-8x7b": "OctoAI.BaseEngine.TextMixtral8X7B",
                                                          "image/controlnet-sd15": "OctoAI.BaseEngine.ImageControlnetSd15",
                                                          "image/controlnet-sdxl": "OctoAI.BaseEngine.ImageControlnetSdxl",
                                                          "image/stable-diffusion-v1-5": "OctoAI.BaseEngine.ImageStableDiffusionV15",
                                                          "image/stable-diffusion-xl-v1-0": "OctoAI.BaseEngine.ImageStableDiffusionXlV10",
                                                          "image/stable-diffusion-ssd": "OctoAI.BaseEngine.ImageStableDiffusionSsd",
                                                          "audio/tortoise-tts": "OctoAI.BaseEngine.AudioTortoiseTts",
                                                          "audio/rvc": "OctoAI.BaseEngine.AudioRvc"
                                                        },
                                                        "templateString": "engine: $FERN_INPUT",
                                                        "templateInput": {
                                                          "location": "BODY",
                                                          "path": "details.base_checkpoint.engine"
                                                        }
                                                      }
                                                    },
                                                    {
                                                      "type": "template",
                                                      "value": {
                                                        "type": "generic",
                                                        "imports": [],
                                                        "templateString": "name: $FERN_INPUT",
                                                        "isOptional": true,
                                                        "templateInputs": [
                                                          {
                                                            "type": "payload",
                                                            "location": "BODY",
                                                            "path": "details.base_checkpoint.name"
                                                          }
                                                        ]
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "files: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "{\n\t\t\t\t\t\t$FERN_INPUT\n\t\t\t\t\t}",
                                                    "isOptional": true,
                                                    "inputDelimiter": ",\n\t\t\t\t\t\t",
                                                    "templateInputs": [
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "caption: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "caption"
                                                            }
                                                          ]
                                                        }
                                                      },
                                                      {
                                                        "type": "template",
                                                        "value": {
                                                          "type": "generic",
                                                          "imports": [],
                                                          "templateString": "fileId: $FERN_INPUT",
                                                          "isOptional": true,
                                                          "templateInputs": [
                                                            {
                                                              "type": "payload",
                                                              "location": "RELATIVE",
                                                              "path": "file_id"
                                                            }
                                                          ]
                                                        }
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "details.files"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "resizeImages: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "details.resize_images"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "seed: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "details.seed"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "steps: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "details.steps"
                                                    }
                                                  ]
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "triggerWords: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "details.trigger_words"
                                                  }
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "text_to_speech_latent_tune": {
                                      "type": "generic",
                                      "imports": [],
                                      "templateString": "details: { \n\t\t\ttuneType : \"text_to_speech_latent_tune\", \n\t\t\t$FERN_INPUT\n\t\t}",
                                      "isOptional": true,
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                            "isOptional": true,
                                            "inputDelimiter": ",\n\t\t\t\t",
                                            "templateInputs": [
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "iterable",
                                                  "imports": [],
                                                  "isOptional": true,
                                                  "containerTemplateString": "assetIds: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                                  "delimiter": ",\n\t\t\t\t\t",
                                                  "innerTemplate": {
                                                    "type": "generic",
                                                    "imports": [],
                                                    "templateString": "$FERN_INPUT",
                                                    "isOptional": true,
                                                    "templateInputs": [
                                                      {
                                                        "type": "payload",
                                                        "location": "RELATIVE",
                                                        "path": null
                                                      }
                                                    ]
                                                  },
                                                  "templateInput": {
                                                    "location": "BODY",
                                                    "path": "details.asset_ids"
                                                  }
                                                }
                                              },
                                              {
                                                "type": "template",
                                                "value": {
                                                  "type": "generic",
                                                  "imports": [],
                                                  "templateString": "inlineAssets: $FERN_INPUT",
                                                  "isOptional": true,
                                                  "templateInputs": [
                                                    {
                                                      "type": "payload",
                                                      "location": "BODY",
                                                      "path": "details.inline_assets"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "details"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "name"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.fine_tuning.create(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "continue_on_rejection=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "continue_on_rejection",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "description=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "description",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "details=$FERN_INPUT",
                            "discriminantField": "tune_type",
                            "members": {
                              "lora_tune": {
                                "imports": ["from octoai.fine_tuning import Details_LoraTune"],
                                "isOptional": true,
                                "templateString": "details=Details_LoraTune($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": ["from octoai.fine_tuning import LoraTuneCheckpoint"],
                                      "isOptional": true,
                                      "templateString": "base_checkpoint=LoraTuneCheckpoint(\n\t\t$FERN_INPUT\n\t)",
                                      "templateInputs": [
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "checkpoint_id=$FERN_INPUT",
                                            "templateInputs": [
                                              {
                                                "location": "BODY",
                                                "path": "details.base_checkpoint.checkpoint_id",
                                                "type": "payload"
                                              }
                                            ],
                                            "type": "generic"
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "engine=$FERN_INPUT",
                                            "values": {
                                              "text/llama-2-7b": "\"text/llama-2-7b\"",
                                              "text/llama-2-13b": "\"text/llama-2-13b\"",
                                              "text/llama-2-70b": "\"text/llama-2-70b\"",
                                              "text/codellama-7b": "\"text/codellama-7b\"",
                                              "text/codellama-13b": "\"text/codellama-13b\"",
                                              "text/codellama-34b": "\"text/codellama-34b\"",
                                              "text/codellama-70b": "\"text/codellama-70b\"",
                                              "text/mistral-7b": "\"text/mistral-7b\"",
                                              "text/mixtral-8x7b": "\"text/mixtral-8x7b\"",
                                              "image/controlnet-sd15": "\"image/controlnet-sd15\"",
                                              "image/controlnet-sdxl": "\"image/controlnet-sdxl\"",
                                              "image/stable-diffusion-v1-5": "\"image/stable-diffusion-v1-5\"",
                                              "image/stable-diffusion-xl-v1-0": "\"image/stable-diffusion-xl-v1-0\"",
                                              "image/stable-diffusion-ssd": "\"image/stable-diffusion-ssd\"",
                                              "audio/tortoise-tts": "\"audio/tortoise-tts\"",
                                              "audio/rvc": "\"audio/rvc\""
                                            },
                                            "templateInput": {
                                              "location": "BODY",
                                              "path": "details.base_checkpoint.checkpoint_id.base_checkpoint.engine"
                                            },
                                            "type": "enum"
                                          }
                                        },
                                        {
                                          "type": "template",
                                          "value": {
                                            "imports": [],
                                            "isOptional": true,
                                            "templateString": "name=$FERN_INPUT",
                                            "templateInputs": [
                                              {
                                                "location": "BODY",
                                                "path": "details.base_checkpoint.checkpoint_id.base_checkpoint.engine.base_checkpoint.name",
                                                "type": "payload"
                                              }
                                            ],
                                            "type": "generic"
                                          }
                                        }
                                      ],
                                      "inputDelimiter": ",\n\t\t",
                                      "type": "generic"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "files=[\n\t\t$FERN_INPUT\n\t]",
                                      "delimiter": ",\n\t\t",
                                      "innerTemplate": {
                                        "imports": ["from octoai.fine_tuning import LoraTuneFile"],
                                        "isOptional": true,
                                        "templateString": "LoraTuneFile(\n\t\t\t$FERN_INPUT\n\t\t)",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "caption=$FERN_INPUT",
                                              "templateInputs": [
                                                {
                                                  "location": "RELATIVE",
                                                  "path": "caption",
                                                  "type": "payload"
                                                }
                                              ],
                                              "type": "generic"
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "imports": [],
                                              "isOptional": true,
                                              "templateString": "file_id=$FERN_INPUT",
                                              "templateInputs": [
                                                {
                                                  "location": "RELATIVE",
                                                  "path": "file_id",
                                                  "type": "payload"
                                                }
                                              ],
                                              "type": "generic"
                                            }
                                          }
                                        ],
                                        "inputDelimiter": ",\n\t\t\t",
                                        "type": "generic"
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "details.files"
                                      },
                                      "type": "iterable"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "resize_images=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "details.resize_images",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "seed=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "details.seed",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "steps=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "details.steps",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "trigger_words=[\n\t\t$FERN_INPUT\n\t]",
                                      "delimiter": ",\n\t\t",
                                      "innerTemplate": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "RELATIVE",
                                            "path": null,
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "details.trigger_words"
                                      },
                                      "type": "iterable"
                                    }
                                  }
                                ],
                                "type": "generic"
                              },
                              "text_to_speech_latent_tune": {
                                "imports": ["from octoai.fine_tuning import Details_TextToSpeechLatentTune"],
                                "isOptional": true,
                                "templateString": "details=Details_TextToSpeechLatentTune($FERN_INPUT, )",
                                "templateInputs": [
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "containerTemplateString": "asset_ids=[\n\t\t$FERN_INPUT\n\t]",
                                      "delimiter": ",\n\t\t",
                                      "innerTemplate": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "RELATIVE",
                                            "path": null,
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      },
                                      "templateInput": {
                                        "location": "BODY",
                                        "path": "details.asset_ids"
                                      },
                                      "type": "iterable"
                                    }
                                  },
                                  {
                                    "type": "template",
                                    "value": {
                                      "imports": [],
                                      "isOptional": true,
                                      "templateString": "inline_assets=$FERN_INPUT",
                                      "templateInputs": [
                                        {
                                          "location": "BODY",
                                          "path": "details.inline_assets",
                                          "type": "payload"
                                        }
                                      ],
                                      "type": "generic"
                                    }
                                  }
                                ],
                                "type": "generic"
                              }
                            },
                            "type": "discriminatedUnion"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "get",
                "migratedFromUrlSlugs": ["get-tune"],
                "method": "GET",
                "id": "get",
                "originalEndpointId": "endpoint_fine-tuning.get",
                "name": "Get Tune",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the tune.",
                      "key": "tune_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/tune/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tune_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_fine-tuning:Tune"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_fine-tuning:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/tune/:tune_id",
                    "pathParameters": {
                      "tune_id": ":tune_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.get(\n    tune_id=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.get(\n    tune_id=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.get(\"string\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "created_at": "2023-01-01T00:00:00Z",
                        "deleted_at": "2023-01-01T00:00:00Z",
                        "description": "string",
                        "details": {
                          "tune_type": "lora_tune",
                          "base_checkpoint": {
                            "checkpoint_id": "string",
                            "engine": "text/llama-2-7b",
                            "name": "string"
                          },
                          "files": [
                            {
                              "caption": "string",
                              "file_id": "string"
                            }
                          ],
                          "resize_images": true,
                          "seed": 0,
                          "steps": 0,
                          "trigger_words": ["string"]
                        },
                        "id": "string",
                        "name": "string",
                        "output_lora_ids": ["string"],
                        "result": {
                          "number_of_available_assets": 0,
                          "output_assets": ["string"],
                          "rejected_assets": ["string"],
                          "unready_assets": ["string"]
                        },
                        "status": "pending",
                        "status_details": "string",
                        "succeeded_at": "2023-01-01T00:00:00Z",
                        "tenant_id": "string",
                        "tune_type": "lora_tune",
                        "updated_at": "2023-01-01T00:00:00Z"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/tune/:tune_id",
                    "pathParameters": {
                      "tune_id": ":tune_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.get(\n    tune_id=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.get(\n    tune_id=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.get(\"string\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Get the specific tune.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.fineTuning.get(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "tune_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.fine_tuning.get(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "tune_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "tune_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "delete",
                "migratedFromUrlSlugs": ["delete-tune"],
                "method": "DELETE",
                "id": "delete",
                "originalEndpointId": "endpoint_fine-tuning.delete",
                "name": "Delete Tune",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the tune.",
                      "key": "tune_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/tune/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tune_id"
                    },
                    {
                      "type": "literal",
                      "value": ""
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "map",
                      "keyType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      },
                      "valueType": {
                        "type": "unknown"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_fine-tuning:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/tune/tune_id",
                    "pathParameters": {
                      "tune_id": "tune_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "string": {
                        "key": "value"
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.delete(\n    tune_id=\"tune_id\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.delete(\n    tune_id=\"tune_id\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.delete(\"tune_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "string": {
                          "key": "value"
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/tune/:tune_id",
                    "pathParameters": {
                      "tune_id": ":tune_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.delete(\n    tune_id=\"tune_id\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.delete(\n    tune_id=\"tune_id\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.delete(\"tune_id\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Delete the specified tune.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.fineTuning.delete(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "tune_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.fine_tuning.delete(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "tune_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "tune_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "cancel",
                "migratedFromUrlSlugs": ["cancel-tune"],
                "method": "POST",
                "id": "cancel",
                "originalEndpointId": "endpoint_fine-tuning.cancel",
                "name": "Cancel Tune",
                "path": {
                  "pathParameters": [
                    {
                      "description": "The ID of the tune to cancel.",
                      "key": "tune_id",
                      "type": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  ],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/tune/"
                    },
                    {
                      "type": "pathParameter",
                      "value": "tune_id"
                    },
                    {
                      "type": "literal",
                      "value": "/cancel"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_fine-tuning:Tune"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_fine-tuning:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/tune/:tune_id/cancel",
                    "pathParameters": {
                      "tune_id": ":tune_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.cancel(\n    tune_id=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.cancel(\n    tune_id=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.cancel(\"string\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "created_at": "2023-01-01T00:00:00Z",
                        "deleted_at": "2023-01-01T00:00:00Z",
                        "description": "string",
                        "details": {
                          "tune_type": "lora_tune",
                          "base_checkpoint": {
                            "checkpoint_id": "string",
                            "engine": "text/llama-2-7b",
                            "name": "string"
                          },
                          "files": [
                            {
                              "caption": "string",
                              "file_id": "string"
                            }
                          ],
                          "resize_images": true,
                          "seed": 0,
                          "steps": 0,
                          "trigger_words": ["string"]
                        },
                        "id": "string",
                        "name": "string",
                        "output_lora_ids": ["string"],
                        "result": {
                          "number_of_available_assets": 0,
                          "output_assets": ["string"],
                          "rejected_assets": ["string"],
                          "unready_assets": ["string"]
                        },
                        "status": "pending",
                        "status_details": "string",
                        "succeeded_at": "2023-01-01T00:00:00Z",
                        "tenant_id": "string",
                        "tune_type": "lora_tune",
                        "updated_at": "2023-01-01T00:00:00Z"
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/tune/:tune_id/cancel",
                    "pathParameters": {
                      "tune_id": ":tune_id"
                    },
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.cancel(\n    tune_id=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.cancel(\n    tune_id=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.cancel(\"string\");\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Cancel the specified tune.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.fineTuning.cancel(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "$FERN_INPUT",
                            "isOptional": false,
                            "inputDelimiter": ",\n\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "$FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "PATH",
                                      "path": "tune_id"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.fine_tuning.cancel(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "tune_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "PATH",
                                "path": "tune_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://api.octoai.cloud"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://api.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "list",
                "migratedFromUrlSlugs": ["list-tunes"],
                "method": "GET",
                "id": "list",
                "originalEndpointId": "endpoint_fine-tuning.list",
                "name": "List Tunes",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/tunes"
                    }
                  ]
                },
                "queryParameters": [
                  {
                    "description": "Offset into the results.",
                    "key": "offset",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The max number of results to be shown (limit 100).",
                    "key": "limit",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  {
                    "description": "The name of the tune to filter on.",
                    "key": "name",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The type of the tune to filter on.",
                    "key": "tune_type",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "id",
                        "value": "type_fine-tuning:TuneType"
                      }
                    }
                  },
                  {
                    "description": "The base checkpoint ID for the LoRA tune.",
                    "key": "base_checkpoint_id",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The trigger words to filter on.",
                    "key": "trigger_words",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  {
                    "description": "The engine type.",
                    "key": "engine",
                    "type": {
                      "type": "optional",
                      "itemType": {
                        "type": "primitive",
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                ],
                "headers": [],
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_fine-tuning:ListTunesResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_fine-tuning:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/tunes",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "responseBody": {
                      "data": [],
                      "has_more": true,
                      "total": 1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.list()\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.list()\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "data": [],
                        "has_more": true,
                        "total": 1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/tunes",
                    "pathParameters": {},
                    "queryParameters": {
                      "offset": 0,
                      "limit": 0
                    },
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.fine_tuning.list()\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.fine_tuning.list()\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.fineTuning.list();\n"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "List all tunes owned by the current user.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.fineTuning.list(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "offset: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "offset"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "limit: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "limit"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "name: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "name"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "enum",
                                  "imports": [],
                                  "isOptional": true,
                                  "values": {
                                    "lora_tune": "OctoAI.TuneType.LoraTune",
                                    "text_to_speech_latent_tune": "OctoAI.TuneType.TextToSpeechLatentTune",
                                    "text_to_speech_rvc_tune": "OctoAI.TuneType.TextToSpeechRvcTune",
                                    "text_to_speech_tortoise_tune": "OctoAI.TuneType.TextToSpeechTortoiseTune"
                                  },
                                  "templateString": "tuneType: $FERN_INPUT",
                                  "templateInput": {
                                    "location": "QUERY",
                                    "path": "tune_type"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "baseCheckpointId: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "base_checkpoint_id"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "triggerWords: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "trigger_words"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "engine: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "QUERY",
                                      "path": "engine"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.fine_tuning.list(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "offset=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "offset",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "limit=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "limit",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "name=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "name",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "tune_type=$FERN_INPUT",
                            "values": {
                              "lora_tune": "\"lora_tune\"",
                              "text_to_speech_latent_tune": "\"text_to_speech_latent_tune\"",
                              "text_to_speech_rvc_tune": "\"text_to_speech_rvc_tune\"",
                              "text_to_speech_tortoise_tune": "\"text_to_speech_tortoise_tune\""
                            },
                            "templateInput": {
                              "location": "QUERY",
                              "path": "tune_type"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "base_checkpoint_id=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "base_checkpoint_id",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "trigger_words=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "trigger_words",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "engine=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "QUERY",
                                "path": "engine",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              }
            ],
            "types": [
              "type_fine-tuning:Details",
              "type_fine-tuning:BaseEngine",
              "type_fine-tuning:HTTPValidationError",
              "type_fine-tuning:ListTunesResponse",
              "type_fine-tuning:LoraTune",
              "type_fine-tuning:LoraTuneCheckpoint",
              "type_fine-tuning:LoraTuneFile",
              "type_fine-tuning:TextToSpeechLatentTune",
              "type_fine-tuning:TuneDetails",
              "type_fine-tuning:Tune",
              "type_fine-tuning:TuneResult",
              "type_fine-tuning:TuneStatus",
              "type_fine-tuning:TuneType",
              "type_fine-tuning:ValidationErrorLocItem",
              "type_fine-tuning:ValidationError"
            ],
            "subpackages": [],
            "urlSlug": "fine-tuning",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_image-gen": {
            "subpackageId": "subpackage_image-gen",
            "name": "image-gen",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://image.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://image.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "generate-ssd",
                "method": "POST",
                "id": "generateSsd",
                "originalEndpointId": "endpoint_image-gen.generateSsd",
                "name": "Generate SSD",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate/ssd"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_image-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/generate/ssd",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "prompt": "An octopus playing chess, masterpiece, photorealistic"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "images": [
                        {
                          "image_b64": "image_b64",
                          "removed_for_safety": true,
                          "seed": 1,
                          "safety_score": 1.1
                        }
                      ],
                      "prediction_time_ms": 1.1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_ssd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_ssd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSsd({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "An octopus playing chess, masterpiece, photorealistic"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "images": [
                          {
                            "image_b64": "image_b64",
                            "removed_for_safety": true,
                            "seed": 1,
                            "safety_score": 1.1
                          }
                        ],
                        "prediction_time_ms": 1.1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate/ssd",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_ssd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_ssd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSsd({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Generate images in response to the given request.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.imageGen.generateSsd(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "checkpoint: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "checkpoint"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnet: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vae: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "vae"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "textualInversions: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "textual_inversions"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "loras: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "loras"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "PNDM": "OctoAI.Scheduler.Pndm",
                                          "LMS": "OctoAI.Scheduler.Lms",
                                          "KLMS": "OctoAI.Scheduler.Klms",
                                          "DDIM": "OctoAI.Scheduler.Ddim",
                                          "DDPM": "OctoAI.Scheduler.Ddpm",
                                          "HEUN": "OctoAI.Scheduler.Heun",
                                          "K_HEUN": "OctoAI.Scheduler.KHeun",
                                          "K_EULER": "OctoAI.Scheduler.KEuler",
                                          "K_EULER_ANCESTRAL": "OctoAI.Scheduler.KEulerAncestral",
                                          "DPM_SOLVER_MULTISTEP": "OctoAI.Scheduler.DpmSolverMultistep",
                                          "DPM_PLUS_PLUS_2M_KARRAS": "OctoAI.Scheduler.DpmPlusPlus2MKarras",
                                          "DPM_SINGLE": "OctoAI.Scheduler.DpmSingle",
                                          "DPM_2": "OctoAI.Scheduler.Dpm2",
                                          "DPM_2_ANCESTRAL": "OctoAI.Scheduler.Dpm2Ancestral",
                                          "DPM_PLUS_PLUS_SDE_KARRAS": "OctoAI.Scheduler.DpmPlusPlusSdeKarras",
                                          "UNI_PC": "OctoAI.Scheduler.UniPc",
                                          "LCM": "OctoAI.Scheduler.Lcm"
                                        },
                                        "templateString": "sampler: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "sampler"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "height: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "height"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "width: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "width"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "cfgScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "cfg_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "steps: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "steps"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "numImages: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "num_images"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "initImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "init_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "maskImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "mask_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strength: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "strength"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "base": "OctoAI.SdxlStyles.Base",
                                          "3d-model": "OctoAI.SdxlStyles.ThreeDModel",
                                          "analog-film": "OctoAI.SdxlStyles.AnalogFilm",
                                          "anime": "OctoAI.SdxlStyles.Anime",
                                          "cinematic": "OctoAI.SdxlStyles.Cinematic",
                                          "comic-book": "OctoAI.SdxlStyles.ComicBook",
                                          "Craft Clay": "OctoAI.SdxlStyles.CraftClay",
                                          "modeling-compound": "OctoAI.SdxlStyles.ModelingCompound",
                                          "digital-art": "OctoAI.SdxlStyles.DigitalArt",
                                          "enhance": "OctoAI.SdxlStyles.Enhance",
                                          "fantasy-art": "OctoAI.SdxlStyles.FantasyArt",
                                          "isometric": "OctoAI.SdxlStyles.Isometric",
                                          "line-art": "OctoAI.SdxlStyles.LineArt",
                                          "low-poly": "OctoAI.SdxlStyles.LowPoly",
                                          "neon-punk": "OctoAI.SdxlStyles.NeonPunk",
                                          "origami": "OctoAI.SdxlStyles.Origami",
                                          "photographic": "OctoAI.SdxlStyles.Photographic",
                                          "pixel-art": "OctoAI.SdxlStyles.PixelArt",
                                          "tile-texture": "OctoAI.SdxlStyles.TileTexture",
                                          "Advertising": "OctoAI.SdxlStyles.Advertising",
                                          "Food Photography": "OctoAI.SdxlStyles.FoodPhotography",
                                          "Real Estate": "OctoAI.SdxlStyles.RealEstate",
                                          "Abstract": "OctoAI.SdxlStyles.Abstract",
                                          "Cubist": "OctoAI.SdxlStyles.Cubist",
                                          "Graffiti": "OctoAI.SdxlStyles.Graffiti",
                                          "Hyperrealism": "OctoAI.SdxlStyles.Hyperrealism",
                                          "Impressionist": "OctoAI.SdxlStyles.Impressionist",
                                          "Pointillism": "OctoAI.SdxlStyles.Pointillism",
                                          "Pop Art": "OctoAI.SdxlStyles.PopArt",
                                          "Psychedelic": "OctoAI.SdxlStyles.Psychedelic",
                                          "Renaissance": "OctoAI.SdxlStyles.Renaissance",
                                          "Steampunk": "OctoAI.SdxlStyles.Steampunk",
                                          "Surrealist": "OctoAI.SdxlStyles.Surrealist",
                                          "Typography": "OctoAI.SdxlStyles.Typography",
                                          "Watercolor": "OctoAI.SdxlStyles.Watercolor",
                                          "Fighting Game": "OctoAI.SdxlStyles.FightingGame",
                                          "GTA": "OctoAI.SdxlStyles.Gta",
                                          "Super Mario": "OctoAI.SdxlStyles.SuperMario",
                                          "Minecraft": "OctoAI.SdxlStyles.Minecraft",
                                          "Pokémon": "OctoAI.SdxlStyles.Pokemon",
                                          "Retro Arcade": "OctoAI.SdxlStyles.RetroArcade",
                                          "Retro Game": "OctoAI.SdxlStyles.RetroGame",
                                          "RPG Fantasy Game": "OctoAI.SdxlStyles.RpgFantasyGame",
                                          "Strategy Game": "OctoAI.SdxlStyles.StrategyGame",
                                          "Street Fighter": "OctoAI.SdxlStyles.StreetFighter",
                                          "Legend of Zelda": "OctoAI.SdxlStyles.LegendOfZelda",
                                          "Architectural": "OctoAI.SdxlStyles.Architectural",
                                          "Disco": "OctoAI.SdxlStyles.Disco",
                                          "Dreamscape": "OctoAI.SdxlStyles.Dreamscape",
                                          "Dystopian": "OctoAI.SdxlStyles.Dystopian",
                                          "Fairy Tale": "OctoAI.SdxlStyles.FairyTale",
                                          "Gothic": "OctoAI.SdxlStyles.Gothic",
                                          "Grunge": "OctoAI.SdxlStyles.Grunge",
                                          "Horror": "OctoAI.SdxlStyles.Horror",
                                          "Minimalist": "OctoAI.SdxlStyles.Minimalist",
                                          "Monochrome": "OctoAI.SdxlStyles.Monochrome",
                                          "Nautical": "OctoAI.SdxlStyles.Nautical",
                                          "Space": "OctoAI.SdxlStyles.Space",
                                          "Stained Glass": "OctoAI.SdxlStyles.StainedGlass",
                                          "Techwear Fashion": "OctoAI.SdxlStyles.TechwearFashion",
                                          "Tribal": "OctoAI.SdxlStyles.Tribal",
                                          "Zentangle": "OctoAI.SdxlStyles.Zentangle",
                                          "Collage": "OctoAI.SdxlStyles.Collage",
                                          "Flat Papercut": "OctoAI.SdxlStyles.FlatPapercut",
                                          "Kirigami": "OctoAI.SdxlStyles.Kirigami",
                                          "Paper Mache": "OctoAI.SdxlStyles.PaperMache",
                                          "Paper Quilling": "OctoAI.SdxlStyles.PaperQuilling",
                                          "Papercut Collage": "OctoAI.SdxlStyles.PapercutCollage",
                                          "Papercut Shadow Box": "OctoAI.SdxlStyles.PapercutShadowBox",
                                          "Stacked Papercut": "OctoAI.SdxlStyles.StackedPapercut",
                                          "Thick Layered Papercut": "OctoAI.SdxlStyles.ThickLayeredPapercut",
                                          "Alien": "OctoAI.SdxlStyles.Alien",
                                          "Film Noir": "OctoAI.SdxlStyles.FilmNoir",
                                          "HDR": "OctoAI.SdxlStyles.Hdr",
                                          "Long Exposure": "OctoAI.SdxlStyles.LongExposure",
                                          "Neon Noir": "OctoAI.SdxlStyles.NeonNoir",
                                          "Silhouette": "OctoAI.SdxlStyles.Silhouette",
                                          "Tilt-Shift": "OctoAI.SdxlStyles.TiltShift"
                                        },
                                        "templateString": "stylePreset: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "style_preset"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "useRefiner: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "use_refiner"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "highNoiseFrac: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "high_noise_frac"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetConditioningScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_conditioning_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetEarlyStop: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_early_stop"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetPreprocess: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_preprocess"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "clipSkip: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "clip_skip"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "outpainting: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "outpainting"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "enableSafety: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "enable_safety"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "jpeg": "OctoAI.ImageEncoding.Jpeg",
                                          "png": "OctoAI.ImageEncoding.Png"
                                        },
                                        "templateString": "imageEncoding: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "image_encoding"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "transferImages: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "transfer_images"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetDownload: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_download"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetGpuCopy: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_gpu_copy"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.image_gen.generate_ssd(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "checkpoint=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "checkpoint",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "vae=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "vae",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "textual_inversions={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "textual_inversions"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "loras={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "loras"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sampler=$FERN_INPUT",
                            "values": {
                              "PNDM": "\"PNDM\"",
                              "LMS": "\"LMS\"",
                              "KLMS": "\"KLMS\"",
                              "DDIM": "\"DDIM\"",
                              "DDPM": "\"DDPM\"",
                              "HEUN": "\"HEUN\"",
                              "K_HEUN": "\"K_HEUN\"",
                              "K_EULER": "\"K_EULER\"",
                              "K_EULER_ANCESTRAL": "\"K_EULER_ANCESTRAL\"",
                              "DPM_SOLVER_MULTISTEP": "\"DPM_SOLVER_MULTISTEP\"",
                              "DPM_PLUS_PLUS_2M_KARRAS": "\"DPM_PLUS_PLUS_2M_KARRAS\"",
                              "DPM_SINGLE": "\"DPM_SINGLE\"",
                              "DPM_2": "\"DPM_2\"",
                              "DPM_2_ANCESTRAL": "\"DPM_2_ANCESTRAL\"",
                              "DPM_PLUS_PLUS_SDE_KARRAS": "\"DPM_PLUS_PLUS_SDE_KARRAS\"",
                              "UNI_PC": "\"UNI_PC\"",
                              "LCM": "\"LCM\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "sampler"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cfg_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "cfg_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "steps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "steps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "num_images=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "num_images",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "init_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "init_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mask_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "mask_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "strength=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "strength",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "style_preset=$FERN_INPUT",
                            "values": {
                              "base": "\"base\"",
                              "3d-model": "\"3d-model\"",
                              "analog-film": "\"analog-film\"",
                              "anime": "\"anime\"",
                              "cinematic": "\"cinematic\"",
                              "comic-book": "\"comic-book\"",
                              "Craft Clay": "\"Craft Clay\"",
                              "modeling-compound": "\"modeling-compound\"",
                              "digital-art": "\"digital-art\"",
                              "enhance": "\"enhance\"",
                              "fantasy-art": "\"fantasy-art\"",
                              "isometric": "\"isometric\"",
                              "line-art": "\"line-art\"",
                              "low-poly": "\"low-poly\"",
                              "neon-punk": "\"neon-punk\"",
                              "origami": "\"origami\"",
                              "photographic": "\"photographic\"",
                              "pixel-art": "\"pixel-art\"",
                              "tile-texture": "\"tile-texture\"",
                              "Advertising": "\"Advertising\"",
                              "Food Photography": "\"Food Photography\"",
                              "Real Estate": "\"Real Estate\"",
                              "Abstract": "\"Abstract\"",
                              "Cubist": "\"Cubist\"",
                              "Graffiti": "\"Graffiti\"",
                              "Hyperrealism": "\"Hyperrealism\"",
                              "Impressionist": "\"Impressionist\"",
                              "Pointillism": "\"Pointillism\"",
                              "Pop Art": "\"Pop Art\"",
                              "Psychedelic": "\"Psychedelic\"",
                              "Renaissance": "\"Renaissance\"",
                              "Steampunk": "\"Steampunk\"",
                              "Surrealist": "\"Surrealist\"",
                              "Typography": "\"Typography\"",
                              "Watercolor": "\"Watercolor\"",
                              "Fighting Game": "\"Fighting Game\"",
                              "GTA": "\"GTA\"",
                              "Super Mario": "\"Super Mario\"",
                              "Minecraft": "\"Minecraft\"",
                              "Pokémon": "\"Pokémon\"",
                              "Retro Arcade": "\"Retro Arcade\"",
                              "Retro Game": "\"Retro Game\"",
                              "RPG Fantasy Game": "\"RPG Fantasy Game\"",
                              "Strategy Game": "\"Strategy Game\"",
                              "Street Fighter": "\"Street Fighter\"",
                              "Legend of Zelda": "\"Legend of Zelda\"",
                              "Architectural": "\"Architectural\"",
                              "Disco": "\"Disco\"",
                              "Dreamscape": "\"Dreamscape\"",
                              "Dystopian": "\"Dystopian\"",
                              "Fairy Tale": "\"Fairy Tale\"",
                              "Gothic": "\"Gothic\"",
                              "Grunge": "\"Grunge\"",
                              "Horror": "\"Horror\"",
                              "Minimalist": "\"Minimalist\"",
                              "Monochrome": "\"Monochrome\"",
                              "Nautical": "\"Nautical\"",
                              "Space": "\"Space\"",
                              "Stained Glass": "\"Stained Glass\"",
                              "Techwear Fashion": "\"Techwear Fashion\"",
                              "Tribal": "\"Tribal\"",
                              "Zentangle": "\"Zentangle\"",
                              "Collage": "\"Collage\"",
                              "Flat Papercut": "\"Flat Papercut\"",
                              "Kirigami": "\"Kirigami\"",
                              "Paper Mache": "\"Paper Mache\"",
                              "Paper Quilling": "\"Paper Quilling\"",
                              "Papercut Collage": "\"Papercut Collage\"",
                              "Papercut Shadow Box": "\"Papercut Shadow Box\"",
                              "Stacked Papercut": "\"Stacked Papercut\"",
                              "Thick Layered Papercut": "\"Thick Layered Papercut\"",
                              "Alien": "\"Alien\"",
                              "Film Noir": "\"Film Noir\"",
                              "HDR": "\"HDR\"",
                              "Long Exposure": "\"Long Exposure\"",
                              "Neon Noir": "\"Neon Noir\"",
                              "Silhouette": "\"Silhouette\"",
                              "Tilt-Shift": "\"Tilt-Shift\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "style_preset"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "use_refiner=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "use_refiner",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "high_noise_frac=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "high_noise_frac",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_conditioning_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_conditioning_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_early_stop=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_early_stop",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_preprocess=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_preprocess",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "clip_skip=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clip_skip",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "outpainting=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "outpainting",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "enable_safety=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "enable_safety",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_encoding=$FERN_INPUT",
                            "values": {
                              "jpeg": "\"jpeg\"",
                              "png": "\"png\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "image_encoding"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "transfer_images={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                              "delimiter": ",\n\t\t\t",
                              "innerTemplate": {
                                "imports": [],
                                "isOptional": true,
                                "templateString": "$FERN_INPUT",
                                "templateInputs": [
                                  {
                                    "location": "RELATIVE",
                                    "path": null,
                                    "type": "payload"
                                  }
                                ],
                                "type": "generic"
                              },
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "iterable"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "transfer_images"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_download=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_download",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_gpu_copy=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_gpu_copy",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://image.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://image.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "generate-controlnet-sdxl",
                "migratedFromUrlSlugs": ["generate-control-net-sdxl"],
                "method": "POST",
                "id": "generateControlnetSdxl",
                "originalEndpointId": "endpoint_image-gen.generateControlnetSdxl",
                "name": "Generate ControlNet SDXL",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate/controlnet-sdxl"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_image-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/generate/controlnet-sdxl",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "prompt": "An octopus playing chess, masterpiece, photorealistic"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "images": [
                        {
                          "image_b64": "image_b64",
                          "removed_for_safety": true,
                          "seed": 1,
                          "safety_score": 1.1
                        }
                      ],
                      "prediction_time_ms": 1.1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_controlnet_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_controlnet_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateControlnetSdxl({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "An octopus playing chess, masterpiece, photorealistic"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "images": [
                          {
                            "image_b64": "image_b64",
                            "removed_for_safety": true,
                            "seed": 1,
                            "safety_score": 1.1
                          }
                        ],
                        "prediction_time_ms": 1.1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate/controlnet-sdxl",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_controlnet_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_controlnet_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateControlnetSdxl({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Generate images in response to the given request.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.imageGen.generateControlnetSdxl(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "checkpoint: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "checkpoint"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnet: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vae: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "vae"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "textualInversions: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "textual_inversions"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "loras: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "loras"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "PNDM": "OctoAI.Scheduler.Pndm",
                                          "LMS": "OctoAI.Scheduler.Lms",
                                          "KLMS": "OctoAI.Scheduler.Klms",
                                          "DDIM": "OctoAI.Scheduler.Ddim",
                                          "DDPM": "OctoAI.Scheduler.Ddpm",
                                          "HEUN": "OctoAI.Scheduler.Heun",
                                          "K_HEUN": "OctoAI.Scheduler.KHeun",
                                          "K_EULER": "OctoAI.Scheduler.KEuler",
                                          "K_EULER_ANCESTRAL": "OctoAI.Scheduler.KEulerAncestral",
                                          "DPM_SOLVER_MULTISTEP": "OctoAI.Scheduler.DpmSolverMultistep",
                                          "DPM_PLUS_PLUS_2M_KARRAS": "OctoAI.Scheduler.DpmPlusPlus2MKarras",
                                          "DPM_SINGLE": "OctoAI.Scheduler.DpmSingle",
                                          "DPM_2": "OctoAI.Scheduler.Dpm2",
                                          "DPM_2_ANCESTRAL": "OctoAI.Scheduler.Dpm2Ancestral",
                                          "DPM_PLUS_PLUS_SDE_KARRAS": "OctoAI.Scheduler.DpmPlusPlusSdeKarras",
                                          "UNI_PC": "OctoAI.Scheduler.UniPc",
                                          "LCM": "OctoAI.Scheduler.Lcm"
                                        },
                                        "templateString": "sampler: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "sampler"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "height: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "height"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "width: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "width"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "cfgScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "cfg_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "steps: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "steps"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "numImages: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "num_images"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "initImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "init_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "maskImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "mask_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strength: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "strength"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "base": "OctoAI.SdxlStyles.Base",
                                          "3d-model": "OctoAI.SdxlStyles.ThreeDModel",
                                          "analog-film": "OctoAI.SdxlStyles.AnalogFilm",
                                          "anime": "OctoAI.SdxlStyles.Anime",
                                          "cinematic": "OctoAI.SdxlStyles.Cinematic",
                                          "comic-book": "OctoAI.SdxlStyles.ComicBook",
                                          "Craft Clay": "OctoAI.SdxlStyles.CraftClay",
                                          "modeling-compound": "OctoAI.SdxlStyles.ModelingCompound",
                                          "digital-art": "OctoAI.SdxlStyles.DigitalArt",
                                          "enhance": "OctoAI.SdxlStyles.Enhance",
                                          "fantasy-art": "OctoAI.SdxlStyles.FantasyArt",
                                          "isometric": "OctoAI.SdxlStyles.Isometric",
                                          "line-art": "OctoAI.SdxlStyles.LineArt",
                                          "low-poly": "OctoAI.SdxlStyles.LowPoly",
                                          "neon-punk": "OctoAI.SdxlStyles.NeonPunk",
                                          "origami": "OctoAI.SdxlStyles.Origami",
                                          "photographic": "OctoAI.SdxlStyles.Photographic",
                                          "pixel-art": "OctoAI.SdxlStyles.PixelArt",
                                          "tile-texture": "OctoAI.SdxlStyles.TileTexture",
                                          "Advertising": "OctoAI.SdxlStyles.Advertising",
                                          "Food Photography": "OctoAI.SdxlStyles.FoodPhotography",
                                          "Real Estate": "OctoAI.SdxlStyles.RealEstate",
                                          "Abstract": "OctoAI.SdxlStyles.Abstract",
                                          "Cubist": "OctoAI.SdxlStyles.Cubist",
                                          "Graffiti": "OctoAI.SdxlStyles.Graffiti",
                                          "Hyperrealism": "OctoAI.SdxlStyles.Hyperrealism",
                                          "Impressionist": "OctoAI.SdxlStyles.Impressionist",
                                          "Pointillism": "OctoAI.SdxlStyles.Pointillism",
                                          "Pop Art": "OctoAI.SdxlStyles.PopArt",
                                          "Psychedelic": "OctoAI.SdxlStyles.Psychedelic",
                                          "Renaissance": "OctoAI.SdxlStyles.Renaissance",
                                          "Steampunk": "OctoAI.SdxlStyles.Steampunk",
                                          "Surrealist": "OctoAI.SdxlStyles.Surrealist",
                                          "Typography": "OctoAI.SdxlStyles.Typography",
                                          "Watercolor": "OctoAI.SdxlStyles.Watercolor",
                                          "Fighting Game": "OctoAI.SdxlStyles.FightingGame",
                                          "GTA": "OctoAI.SdxlStyles.Gta",
                                          "Super Mario": "OctoAI.SdxlStyles.SuperMario",
                                          "Minecraft": "OctoAI.SdxlStyles.Minecraft",
                                          "Pokémon": "OctoAI.SdxlStyles.Pokemon",
                                          "Retro Arcade": "OctoAI.SdxlStyles.RetroArcade",
                                          "Retro Game": "OctoAI.SdxlStyles.RetroGame",
                                          "RPG Fantasy Game": "OctoAI.SdxlStyles.RpgFantasyGame",
                                          "Strategy Game": "OctoAI.SdxlStyles.StrategyGame",
                                          "Street Fighter": "OctoAI.SdxlStyles.StreetFighter",
                                          "Legend of Zelda": "OctoAI.SdxlStyles.LegendOfZelda",
                                          "Architectural": "OctoAI.SdxlStyles.Architectural",
                                          "Disco": "OctoAI.SdxlStyles.Disco",
                                          "Dreamscape": "OctoAI.SdxlStyles.Dreamscape",
                                          "Dystopian": "OctoAI.SdxlStyles.Dystopian",
                                          "Fairy Tale": "OctoAI.SdxlStyles.FairyTale",
                                          "Gothic": "OctoAI.SdxlStyles.Gothic",
                                          "Grunge": "OctoAI.SdxlStyles.Grunge",
                                          "Horror": "OctoAI.SdxlStyles.Horror",
                                          "Minimalist": "OctoAI.SdxlStyles.Minimalist",
                                          "Monochrome": "OctoAI.SdxlStyles.Monochrome",
                                          "Nautical": "OctoAI.SdxlStyles.Nautical",
                                          "Space": "OctoAI.SdxlStyles.Space",
                                          "Stained Glass": "OctoAI.SdxlStyles.StainedGlass",
                                          "Techwear Fashion": "OctoAI.SdxlStyles.TechwearFashion",
                                          "Tribal": "OctoAI.SdxlStyles.Tribal",
                                          "Zentangle": "OctoAI.SdxlStyles.Zentangle",
                                          "Collage": "OctoAI.SdxlStyles.Collage",
                                          "Flat Papercut": "OctoAI.SdxlStyles.FlatPapercut",
                                          "Kirigami": "OctoAI.SdxlStyles.Kirigami",
                                          "Paper Mache": "OctoAI.SdxlStyles.PaperMache",
                                          "Paper Quilling": "OctoAI.SdxlStyles.PaperQuilling",
                                          "Papercut Collage": "OctoAI.SdxlStyles.PapercutCollage",
                                          "Papercut Shadow Box": "OctoAI.SdxlStyles.PapercutShadowBox",
                                          "Stacked Papercut": "OctoAI.SdxlStyles.StackedPapercut",
                                          "Thick Layered Papercut": "OctoAI.SdxlStyles.ThickLayeredPapercut",
                                          "Alien": "OctoAI.SdxlStyles.Alien",
                                          "Film Noir": "OctoAI.SdxlStyles.FilmNoir",
                                          "HDR": "OctoAI.SdxlStyles.Hdr",
                                          "Long Exposure": "OctoAI.SdxlStyles.LongExposure",
                                          "Neon Noir": "OctoAI.SdxlStyles.NeonNoir",
                                          "Silhouette": "OctoAI.SdxlStyles.Silhouette",
                                          "Tilt-Shift": "OctoAI.SdxlStyles.TiltShift"
                                        },
                                        "templateString": "stylePreset: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "style_preset"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "useRefiner: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "use_refiner"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "highNoiseFrac: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "high_noise_frac"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetConditioningScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_conditioning_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetEarlyStop: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_early_stop"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetPreprocess: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_preprocess"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "clipSkip: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "clip_skip"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "outpainting: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "outpainting"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "enableSafety: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "enable_safety"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "jpeg": "OctoAI.ImageEncoding.Jpeg",
                                          "png": "OctoAI.ImageEncoding.Png"
                                        },
                                        "templateString": "imageEncoding: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "image_encoding"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "transferImages: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "transfer_images"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetDownload: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_download"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetGpuCopy: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_gpu_copy"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.image_gen.generate_controlnet_sdxl(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "checkpoint=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "checkpoint",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "vae=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "vae",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "textual_inversions={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "textual_inversions"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "loras={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "loras"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sampler=$FERN_INPUT",
                            "values": {
                              "PNDM": "\"PNDM\"",
                              "LMS": "\"LMS\"",
                              "KLMS": "\"KLMS\"",
                              "DDIM": "\"DDIM\"",
                              "DDPM": "\"DDPM\"",
                              "HEUN": "\"HEUN\"",
                              "K_HEUN": "\"K_HEUN\"",
                              "K_EULER": "\"K_EULER\"",
                              "K_EULER_ANCESTRAL": "\"K_EULER_ANCESTRAL\"",
                              "DPM_SOLVER_MULTISTEP": "\"DPM_SOLVER_MULTISTEP\"",
                              "DPM_PLUS_PLUS_2M_KARRAS": "\"DPM_PLUS_PLUS_2M_KARRAS\"",
                              "DPM_SINGLE": "\"DPM_SINGLE\"",
                              "DPM_2": "\"DPM_2\"",
                              "DPM_2_ANCESTRAL": "\"DPM_2_ANCESTRAL\"",
                              "DPM_PLUS_PLUS_SDE_KARRAS": "\"DPM_PLUS_PLUS_SDE_KARRAS\"",
                              "UNI_PC": "\"UNI_PC\"",
                              "LCM": "\"LCM\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "sampler"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cfg_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "cfg_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "steps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "steps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "num_images=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "num_images",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "init_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "init_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mask_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "mask_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "strength=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "strength",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "style_preset=$FERN_INPUT",
                            "values": {
                              "base": "\"base\"",
                              "3d-model": "\"3d-model\"",
                              "analog-film": "\"analog-film\"",
                              "anime": "\"anime\"",
                              "cinematic": "\"cinematic\"",
                              "comic-book": "\"comic-book\"",
                              "Craft Clay": "\"Craft Clay\"",
                              "modeling-compound": "\"modeling-compound\"",
                              "digital-art": "\"digital-art\"",
                              "enhance": "\"enhance\"",
                              "fantasy-art": "\"fantasy-art\"",
                              "isometric": "\"isometric\"",
                              "line-art": "\"line-art\"",
                              "low-poly": "\"low-poly\"",
                              "neon-punk": "\"neon-punk\"",
                              "origami": "\"origami\"",
                              "photographic": "\"photographic\"",
                              "pixel-art": "\"pixel-art\"",
                              "tile-texture": "\"tile-texture\"",
                              "Advertising": "\"Advertising\"",
                              "Food Photography": "\"Food Photography\"",
                              "Real Estate": "\"Real Estate\"",
                              "Abstract": "\"Abstract\"",
                              "Cubist": "\"Cubist\"",
                              "Graffiti": "\"Graffiti\"",
                              "Hyperrealism": "\"Hyperrealism\"",
                              "Impressionist": "\"Impressionist\"",
                              "Pointillism": "\"Pointillism\"",
                              "Pop Art": "\"Pop Art\"",
                              "Psychedelic": "\"Psychedelic\"",
                              "Renaissance": "\"Renaissance\"",
                              "Steampunk": "\"Steampunk\"",
                              "Surrealist": "\"Surrealist\"",
                              "Typography": "\"Typography\"",
                              "Watercolor": "\"Watercolor\"",
                              "Fighting Game": "\"Fighting Game\"",
                              "GTA": "\"GTA\"",
                              "Super Mario": "\"Super Mario\"",
                              "Minecraft": "\"Minecraft\"",
                              "Pokémon": "\"Pokémon\"",
                              "Retro Arcade": "\"Retro Arcade\"",
                              "Retro Game": "\"Retro Game\"",
                              "RPG Fantasy Game": "\"RPG Fantasy Game\"",
                              "Strategy Game": "\"Strategy Game\"",
                              "Street Fighter": "\"Street Fighter\"",
                              "Legend of Zelda": "\"Legend of Zelda\"",
                              "Architectural": "\"Architectural\"",
                              "Disco": "\"Disco\"",
                              "Dreamscape": "\"Dreamscape\"",
                              "Dystopian": "\"Dystopian\"",
                              "Fairy Tale": "\"Fairy Tale\"",
                              "Gothic": "\"Gothic\"",
                              "Grunge": "\"Grunge\"",
                              "Horror": "\"Horror\"",
                              "Minimalist": "\"Minimalist\"",
                              "Monochrome": "\"Monochrome\"",
                              "Nautical": "\"Nautical\"",
                              "Space": "\"Space\"",
                              "Stained Glass": "\"Stained Glass\"",
                              "Techwear Fashion": "\"Techwear Fashion\"",
                              "Tribal": "\"Tribal\"",
                              "Zentangle": "\"Zentangle\"",
                              "Collage": "\"Collage\"",
                              "Flat Papercut": "\"Flat Papercut\"",
                              "Kirigami": "\"Kirigami\"",
                              "Paper Mache": "\"Paper Mache\"",
                              "Paper Quilling": "\"Paper Quilling\"",
                              "Papercut Collage": "\"Papercut Collage\"",
                              "Papercut Shadow Box": "\"Papercut Shadow Box\"",
                              "Stacked Papercut": "\"Stacked Papercut\"",
                              "Thick Layered Papercut": "\"Thick Layered Papercut\"",
                              "Alien": "\"Alien\"",
                              "Film Noir": "\"Film Noir\"",
                              "HDR": "\"HDR\"",
                              "Long Exposure": "\"Long Exposure\"",
                              "Neon Noir": "\"Neon Noir\"",
                              "Silhouette": "\"Silhouette\"",
                              "Tilt-Shift": "\"Tilt-Shift\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "style_preset"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "use_refiner=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "use_refiner",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "high_noise_frac=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "high_noise_frac",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_conditioning_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_conditioning_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_early_stop=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_early_stop",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_preprocess=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_preprocess",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "clip_skip=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clip_skip",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "outpainting=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "outpainting",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "enable_safety=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "enable_safety",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_encoding=$FERN_INPUT",
                            "values": {
                              "jpeg": "\"jpeg\"",
                              "png": "\"png\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "image_encoding"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "transfer_images={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                              "delimiter": ",\n\t\t\t",
                              "innerTemplate": {
                                "imports": [],
                                "isOptional": true,
                                "templateString": "$FERN_INPUT",
                                "templateInputs": [
                                  {
                                    "location": "RELATIVE",
                                    "path": null,
                                    "type": "payload"
                                  }
                                ],
                                "type": "generic"
                              },
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "iterable"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "transfer_images"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_download=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_download",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_gpu_copy=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_gpu_copy",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://image.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://image.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "generate-controlnet-sd-15",
                "migratedFromUrlSlugs": ["generate-control-net-sd-1-5"],
                "method": "POST",
                "id": "generateControlnetSd15",
                "originalEndpointId": "endpoint_image-gen.generateControlnetSd15",
                "name": "Generate ControlNet SD1.5",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate/controlnet-sd15"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_image-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/generate/controlnet-sd15",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "prompt": "An octopus playing chess, masterpiece, photorealistic"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "images": [
                        {
                          "image_b64": "image_b64",
                          "removed_for_safety": true,
                          "seed": 1,
                          "safety_score": 1.1
                        }
                      ],
                      "prediction_time_ms": 1.1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_controlnet_sd15(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_controlnet_sd15(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateControlnetSd15({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "An octopus playing chess, masterpiece, photorealistic"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "images": [
                          {
                            "image_b64": "image_b64",
                            "removed_for_safety": true,
                            "seed": 1,
                            "safety_score": 1.1
                          }
                        ],
                        "prediction_time_ms": 1.1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate/controlnet-sd15",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_controlnet_sd15(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_controlnet_sd15(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateControlnetSd15({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Generate images in response to the given request.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.imageGen.generateControlnetSd15(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "checkpoint: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "checkpoint"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnet: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vae: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "vae"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "textualInversions: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "textual_inversions"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "loras: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "loras"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "PNDM": "OctoAI.Scheduler.Pndm",
                                          "LMS": "OctoAI.Scheduler.Lms",
                                          "KLMS": "OctoAI.Scheduler.Klms",
                                          "DDIM": "OctoAI.Scheduler.Ddim",
                                          "DDPM": "OctoAI.Scheduler.Ddpm",
                                          "HEUN": "OctoAI.Scheduler.Heun",
                                          "K_HEUN": "OctoAI.Scheduler.KHeun",
                                          "K_EULER": "OctoAI.Scheduler.KEuler",
                                          "K_EULER_ANCESTRAL": "OctoAI.Scheduler.KEulerAncestral",
                                          "DPM_SOLVER_MULTISTEP": "OctoAI.Scheduler.DpmSolverMultistep",
                                          "DPM_PLUS_PLUS_2M_KARRAS": "OctoAI.Scheduler.DpmPlusPlus2MKarras",
                                          "DPM_SINGLE": "OctoAI.Scheduler.DpmSingle",
                                          "DPM_2": "OctoAI.Scheduler.Dpm2",
                                          "DPM_2_ANCESTRAL": "OctoAI.Scheduler.Dpm2Ancestral",
                                          "DPM_PLUS_PLUS_SDE_KARRAS": "OctoAI.Scheduler.DpmPlusPlusSdeKarras",
                                          "UNI_PC": "OctoAI.Scheduler.UniPc",
                                          "LCM": "OctoAI.Scheduler.Lcm"
                                        },
                                        "templateString": "sampler: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "sampler"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "height: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "height"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "width: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "width"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "cfgScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "cfg_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "steps: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "steps"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "numImages: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "num_images"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "initImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "init_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "maskImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "mask_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strength: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "strength"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "base": "OctoAI.SdxlStyles.Base",
                                          "3d-model": "OctoAI.SdxlStyles.ThreeDModel",
                                          "analog-film": "OctoAI.SdxlStyles.AnalogFilm",
                                          "anime": "OctoAI.SdxlStyles.Anime",
                                          "cinematic": "OctoAI.SdxlStyles.Cinematic",
                                          "comic-book": "OctoAI.SdxlStyles.ComicBook",
                                          "Craft Clay": "OctoAI.SdxlStyles.CraftClay",
                                          "modeling-compound": "OctoAI.SdxlStyles.ModelingCompound",
                                          "digital-art": "OctoAI.SdxlStyles.DigitalArt",
                                          "enhance": "OctoAI.SdxlStyles.Enhance",
                                          "fantasy-art": "OctoAI.SdxlStyles.FantasyArt",
                                          "isometric": "OctoAI.SdxlStyles.Isometric",
                                          "line-art": "OctoAI.SdxlStyles.LineArt",
                                          "low-poly": "OctoAI.SdxlStyles.LowPoly",
                                          "neon-punk": "OctoAI.SdxlStyles.NeonPunk",
                                          "origami": "OctoAI.SdxlStyles.Origami",
                                          "photographic": "OctoAI.SdxlStyles.Photographic",
                                          "pixel-art": "OctoAI.SdxlStyles.PixelArt",
                                          "tile-texture": "OctoAI.SdxlStyles.TileTexture",
                                          "Advertising": "OctoAI.SdxlStyles.Advertising",
                                          "Food Photography": "OctoAI.SdxlStyles.FoodPhotography",
                                          "Real Estate": "OctoAI.SdxlStyles.RealEstate",
                                          "Abstract": "OctoAI.SdxlStyles.Abstract",
                                          "Cubist": "OctoAI.SdxlStyles.Cubist",
                                          "Graffiti": "OctoAI.SdxlStyles.Graffiti",
                                          "Hyperrealism": "OctoAI.SdxlStyles.Hyperrealism",
                                          "Impressionist": "OctoAI.SdxlStyles.Impressionist",
                                          "Pointillism": "OctoAI.SdxlStyles.Pointillism",
                                          "Pop Art": "OctoAI.SdxlStyles.PopArt",
                                          "Psychedelic": "OctoAI.SdxlStyles.Psychedelic",
                                          "Renaissance": "OctoAI.SdxlStyles.Renaissance",
                                          "Steampunk": "OctoAI.SdxlStyles.Steampunk",
                                          "Surrealist": "OctoAI.SdxlStyles.Surrealist",
                                          "Typography": "OctoAI.SdxlStyles.Typography",
                                          "Watercolor": "OctoAI.SdxlStyles.Watercolor",
                                          "Fighting Game": "OctoAI.SdxlStyles.FightingGame",
                                          "GTA": "OctoAI.SdxlStyles.Gta",
                                          "Super Mario": "OctoAI.SdxlStyles.SuperMario",
                                          "Minecraft": "OctoAI.SdxlStyles.Minecraft",
                                          "Pokémon": "OctoAI.SdxlStyles.Pokemon",
                                          "Retro Arcade": "OctoAI.SdxlStyles.RetroArcade",
                                          "Retro Game": "OctoAI.SdxlStyles.RetroGame",
                                          "RPG Fantasy Game": "OctoAI.SdxlStyles.RpgFantasyGame",
                                          "Strategy Game": "OctoAI.SdxlStyles.StrategyGame",
                                          "Street Fighter": "OctoAI.SdxlStyles.StreetFighter",
                                          "Legend of Zelda": "OctoAI.SdxlStyles.LegendOfZelda",
                                          "Architectural": "OctoAI.SdxlStyles.Architectural",
                                          "Disco": "OctoAI.SdxlStyles.Disco",
                                          "Dreamscape": "OctoAI.SdxlStyles.Dreamscape",
                                          "Dystopian": "OctoAI.SdxlStyles.Dystopian",
                                          "Fairy Tale": "OctoAI.SdxlStyles.FairyTale",
                                          "Gothic": "OctoAI.SdxlStyles.Gothic",
                                          "Grunge": "OctoAI.SdxlStyles.Grunge",
                                          "Horror": "OctoAI.SdxlStyles.Horror",
                                          "Minimalist": "OctoAI.SdxlStyles.Minimalist",
                                          "Monochrome": "OctoAI.SdxlStyles.Monochrome",
                                          "Nautical": "OctoAI.SdxlStyles.Nautical",
                                          "Space": "OctoAI.SdxlStyles.Space",
                                          "Stained Glass": "OctoAI.SdxlStyles.StainedGlass",
                                          "Techwear Fashion": "OctoAI.SdxlStyles.TechwearFashion",
                                          "Tribal": "OctoAI.SdxlStyles.Tribal",
                                          "Zentangle": "OctoAI.SdxlStyles.Zentangle",
                                          "Collage": "OctoAI.SdxlStyles.Collage",
                                          "Flat Papercut": "OctoAI.SdxlStyles.FlatPapercut",
                                          "Kirigami": "OctoAI.SdxlStyles.Kirigami",
                                          "Paper Mache": "OctoAI.SdxlStyles.PaperMache",
                                          "Paper Quilling": "OctoAI.SdxlStyles.PaperQuilling",
                                          "Papercut Collage": "OctoAI.SdxlStyles.PapercutCollage",
                                          "Papercut Shadow Box": "OctoAI.SdxlStyles.PapercutShadowBox",
                                          "Stacked Papercut": "OctoAI.SdxlStyles.StackedPapercut",
                                          "Thick Layered Papercut": "OctoAI.SdxlStyles.ThickLayeredPapercut",
                                          "Alien": "OctoAI.SdxlStyles.Alien",
                                          "Film Noir": "OctoAI.SdxlStyles.FilmNoir",
                                          "HDR": "OctoAI.SdxlStyles.Hdr",
                                          "Long Exposure": "OctoAI.SdxlStyles.LongExposure",
                                          "Neon Noir": "OctoAI.SdxlStyles.NeonNoir",
                                          "Silhouette": "OctoAI.SdxlStyles.Silhouette",
                                          "Tilt-Shift": "OctoAI.SdxlStyles.TiltShift"
                                        },
                                        "templateString": "stylePreset: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "style_preset"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "useRefiner: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "use_refiner"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "highNoiseFrac: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "high_noise_frac"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetConditioningScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_conditioning_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetEarlyStop: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_early_stop"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetPreprocess: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_preprocess"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "clipSkip: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "clip_skip"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "outpainting: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "outpainting"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "enableSafety: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "enable_safety"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "jpeg": "OctoAI.ImageEncoding.Jpeg",
                                          "png": "OctoAI.ImageEncoding.Png"
                                        },
                                        "templateString": "imageEncoding: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "image_encoding"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "transferImages: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "transfer_images"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetDownload: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_download"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetGpuCopy: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_gpu_copy"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.image_gen.generate_controlnet_sd15(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "checkpoint=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "checkpoint",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "vae=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "vae",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "textual_inversions={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "textual_inversions"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "loras={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "loras"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sampler=$FERN_INPUT",
                            "values": {
                              "PNDM": "\"PNDM\"",
                              "LMS": "\"LMS\"",
                              "KLMS": "\"KLMS\"",
                              "DDIM": "\"DDIM\"",
                              "DDPM": "\"DDPM\"",
                              "HEUN": "\"HEUN\"",
                              "K_HEUN": "\"K_HEUN\"",
                              "K_EULER": "\"K_EULER\"",
                              "K_EULER_ANCESTRAL": "\"K_EULER_ANCESTRAL\"",
                              "DPM_SOLVER_MULTISTEP": "\"DPM_SOLVER_MULTISTEP\"",
                              "DPM_PLUS_PLUS_2M_KARRAS": "\"DPM_PLUS_PLUS_2M_KARRAS\"",
                              "DPM_SINGLE": "\"DPM_SINGLE\"",
                              "DPM_2": "\"DPM_2\"",
                              "DPM_2_ANCESTRAL": "\"DPM_2_ANCESTRAL\"",
                              "DPM_PLUS_PLUS_SDE_KARRAS": "\"DPM_PLUS_PLUS_SDE_KARRAS\"",
                              "UNI_PC": "\"UNI_PC\"",
                              "LCM": "\"LCM\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "sampler"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cfg_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "cfg_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "steps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "steps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "num_images=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "num_images",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "init_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "init_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mask_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "mask_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "strength=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "strength",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "style_preset=$FERN_INPUT",
                            "values": {
                              "base": "\"base\"",
                              "3d-model": "\"3d-model\"",
                              "analog-film": "\"analog-film\"",
                              "anime": "\"anime\"",
                              "cinematic": "\"cinematic\"",
                              "comic-book": "\"comic-book\"",
                              "Craft Clay": "\"Craft Clay\"",
                              "modeling-compound": "\"modeling-compound\"",
                              "digital-art": "\"digital-art\"",
                              "enhance": "\"enhance\"",
                              "fantasy-art": "\"fantasy-art\"",
                              "isometric": "\"isometric\"",
                              "line-art": "\"line-art\"",
                              "low-poly": "\"low-poly\"",
                              "neon-punk": "\"neon-punk\"",
                              "origami": "\"origami\"",
                              "photographic": "\"photographic\"",
                              "pixel-art": "\"pixel-art\"",
                              "tile-texture": "\"tile-texture\"",
                              "Advertising": "\"Advertising\"",
                              "Food Photography": "\"Food Photography\"",
                              "Real Estate": "\"Real Estate\"",
                              "Abstract": "\"Abstract\"",
                              "Cubist": "\"Cubist\"",
                              "Graffiti": "\"Graffiti\"",
                              "Hyperrealism": "\"Hyperrealism\"",
                              "Impressionist": "\"Impressionist\"",
                              "Pointillism": "\"Pointillism\"",
                              "Pop Art": "\"Pop Art\"",
                              "Psychedelic": "\"Psychedelic\"",
                              "Renaissance": "\"Renaissance\"",
                              "Steampunk": "\"Steampunk\"",
                              "Surrealist": "\"Surrealist\"",
                              "Typography": "\"Typography\"",
                              "Watercolor": "\"Watercolor\"",
                              "Fighting Game": "\"Fighting Game\"",
                              "GTA": "\"GTA\"",
                              "Super Mario": "\"Super Mario\"",
                              "Minecraft": "\"Minecraft\"",
                              "Pokémon": "\"Pokémon\"",
                              "Retro Arcade": "\"Retro Arcade\"",
                              "Retro Game": "\"Retro Game\"",
                              "RPG Fantasy Game": "\"RPG Fantasy Game\"",
                              "Strategy Game": "\"Strategy Game\"",
                              "Street Fighter": "\"Street Fighter\"",
                              "Legend of Zelda": "\"Legend of Zelda\"",
                              "Architectural": "\"Architectural\"",
                              "Disco": "\"Disco\"",
                              "Dreamscape": "\"Dreamscape\"",
                              "Dystopian": "\"Dystopian\"",
                              "Fairy Tale": "\"Fairy Tale\"",
                              "Gothic": "\"Gothic\"",
                              "Grunge": "\"Grunge\"",
                              "Horror": "\"Horror\"",
                              "Minimalist": "\"Minimalist\"",
                              "Monochrome": "\"Monochrome\"",
                              "Nautical": "\"Nautical\"",
                              "Space": "\"Space\"",
                              "Stained Glass": "\"Stained Glass\"",
                              "Techwear Fashion": "\"Techwear Fashion\"",
                              "Tribal": "\"Tribal\"",
                              "Zentangle": "\"Zentangle\"",
                              "Collage": "\"Collage\"",
                              "Flat Papercut": "\"Flat Papercut\"",
                              "Kirigami": "\"Kirigami\"",
                              "Paper Mache": "\"Paper Mache\"",
                              "Paper Quilling": "\"Paper Quilling\"",
                              "Papercut Collage": "\"Papercut Collage\"",
                              "Papercut Shadow Box": "\"Papercut Shadow Box\"",
                              "Stacked Papercut": "\"Stacked Papercut\"",
                              "Thick Layered Papercut": "\"Thick Layered Papercut\"",
                              "Alien": "\"Alien\"",
                              "Film Noir": "\"Film Noir\"",
                              "HDR": "\"HDR\"",
                              "Long Exposure": "\"Long Exposure\"",
                              "Neon Noir": "\"Neon Noir\"",
                              "Silhouette": "\"Silhouette\"",
                              "Tilt-Shift": "\"Tilt-Shift\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "style_preset"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "use_refiner=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "use_refiner",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "high_noise_frac=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "high_noise_frac",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_conditioning_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_conditioning_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_early_stop=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_early_stop",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_preprocess=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_preprocess",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "clip_skip=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clip_skip",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "outpainting=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "outpainting",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "enable_safety=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "enable_safety",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_encoding=$FERN_INPUT",
                            "values": {
                              "jpeg": "\"jpeg\"",
                              "png": "\"png\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "image_encoding"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "transfer_images={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                              "delimiter": ",\n\t\t\t",
                              "innerTemplate": {
                                "imports": [],
                                "isOptional": true,
                                "templateString": "$FERN_INPUT",
                                "templateInputs": [
                                  {
                                    "location": "RELATIVE",
                                    "path": null,
                                    "type": "payload"
                                  }
                                ],
                                "type": "generic"
                              },
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "iterable"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "transfer_images"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_download=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_download",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_gpu_copy=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_gpu_copy",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://image.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://image.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "generate-sdxl",
                "method": "POST",
                "id": "generateSdxl",
                "originalEndpointId": "endpoint_image-gen.generateSdxl",
                "name": "Generate SDXL",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate/sdxl"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_image-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/generate/sdxl",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "prompt": "An octopus playing chess, masterpiece, photorealistic"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "images": [
                        {
                          "image_b64": "image_b64",
                          "removed_for_safety": true,
                          "seed": 1,
                          "safety_score": 1.1
                        }
                      ],
                      "prediction_time_ms": 1.1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSdxl({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "An octopus playing chess, masterpiece, photorealistic"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "images": [
                          {
                            "image_b64": "image_b64",
                            "removed_for_safety": true,
                            "seed": 1,
                            "safety_score": 1.1
                          }
                        ],
                        "prediction_time_ms": 1.1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate/sdxl",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_sdxl(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSdxl({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Generate images in response to the given request.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.imageGen.generateSdxl(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "checkpoint: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "checkpoint"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnet: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vae: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "vae"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "textualInversions: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "textual_inversions"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "loras: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "loras"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "PNDM": "OctoAI.Scheduler.Pndm",
                                          "LMS": "OctoAI.Scheduler.Lms",
                                          "KLMS": "OctoAI.Scheduler.Klms",
                                          "DDIM": "OctoAI.Scheduler.Ddim",
                                          "DDPM": "OctoAI.Scheduler.Ddpm",
                                          "HEUN": "OctoAI.Scheduler.Heun",
                                          "K_HEUN": "OctoAI.Scheduler.KHeun",
                                          "K_EULER": "OctoAI.Scheduler.KEuler",
                                          "K_EULER_ANCESTRAL": "OctoAI.Scheduler.KEulerAncestral",
                                          "DPM_SOLVER_MULTISTEP": "OctoAI.Scheduler.DpmSolverMultistep",
                                          "DPM_PLUS_PLUS_2M_KARRAS": "OctoAI.Scheduler.DpmPlusPlus2MKarras",
                                          "DPM_SINGLE": "OctoAI.Scheduler.DpmSingle",
                                          "DPM_2": "OctoAI.Scheduler.Dpm2",
                                          "DPM_2_ANCESTRAL": "OctoAI.Scheduler.Dpm2Ancestral",
                                          "DPM_PLUS_PLUS_SDE_KARRAS": "OctoAI.Scheduler.DpmPlusPlusSdeKarras",
                                          "UNI_PC": "OctoAI.Scheduler.UniPc",
                                          "LCM": "OctoAI.Scheduler.Lcm"
                                        },
                                        "templateString": "sampler: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "sampler"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "height: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "height"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "width: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "width"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "cfgScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "cfg_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "steps: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "steps"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "numImages: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "num_images"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "initImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "init_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "maskImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "mask_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strength: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "strength"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "base": "OctoAI.SdxlStyles.Base",
                                          "3d-model": "OctoAI.SdxlStyles.ThreeDModel",
                                          "analog-film": "OctoAI.SdxlStyles.AnalogFilm",
                                          "anime": "OctoAI.SdxlStyles.Anime",
                                          "cinematic": "OctoAI.SdxlStyles.Cinematic",
                                          "comic-book": "OctoAI.SdxlStyles.ComicBook",
                                          "Craft Clay": "OctoAI.SdxlStyles.CraftClay",
                                          "modeling-compound": "OctoAI.SdxlStyles.ModelingCompound",
                                          "digital-art": "OctoAI.SdxlStyles.DigitalArt",
                                          "enhance": "OctoAI.SdxlStyles.Enhance",
                                          "fantasy-art": "OctoAI.SdxlStyles.FantasyArt",
                                          "isometric": "OctoAI.SdxlStyles.Isometric",
                                          "line-art": "OctoAI.SdxlStyles.LineArt",
                                          "low-poly": "OctoAI.SdxlStyles.LowPoly",
                                          "neon-punk": "OctoAI.SdxlStyles.NeonPunk",
                                          "origami": "OctoAI.SdxlStyles.Origami",
                                          "photographic": "OctoAI.SdxlStyles.Photographic",
                                          "pixel-art": "OctoAI.SdxlStyles.PixelArt",
                                          "tile-texture": "OctoAI.SdxlStyles.TileTexture",
                                          "Advertising": "OctoAI.SdxlStyles.Advertising",
                                          "Food Photography": "OctoAI.SdxlStyles.FoodPhotography",
                                          "Real Estate": "OctoAI.SdxlStyles.RealEstate",
                                          "Abstract": "OctoAI.SdxlStyles.Abstract",
                                          "Cubist": "OctoAI.SdxlStyles.Cubist",
                                          "Graffiti": "OctoAI.SdxlStyles.Graffiti",
                                          "Hyperrealism": "OctoAI.SdxlStyles.Hyperrealism",
                                          "Impressionist": "OctoAI.SdxlStyles.Impressionist",
                                          "Pointillism": "OctoAI.SdxlStyles.Pointillism",
                                          "Pop Art": "OctoAI.SdxlStyles.PopArt",
                                          "Psychedelic": "OctoAI.SdxlStyles.Psychedelic",
                                          "Renaissance": "OctoAI.SdxlStyles.Renaissance",
                                          "Steampunk": "OctoAI.SdxlStyles.Steampunk",
                                          "Surrealist": "OctoAI.SdxlStyles.Surrealist",
                                          "Typography": "OctoAI.SdxlStyles.Typography",
                                          "Watercolor": "OctoAI.SdxlStyles.Watercolor",
                                          "Fighting Game": "OctoAI.SdxlStyles.FightingGame",
                                          "GTA": "OctoAI.SdxlStyles.Gta",
                                          "Super Mario": "OctoAI.SdxlStyles.SuperMario",
                                          "Minecraft": "OctoAI.SdxlStyles.Minecraft",
                                          "Pokémon": "OctoAI.SdxlStyles.Pokemon",
                                          "Retro Arcade": "OctoAI.SdxlStyles.RetroArcade",
                                          "Retro Game": "OctoAI.SdxlStyles.RetroGame",
                                          "RPG Fantasy Game": "OctoAI.SdxlStyles.RpgFantasyGame",
                                          "Strategy Game": "OctoAI.SdxlStyles.StrategyGame",
                                          "Street Fighter": "OctoAI.SdxlStyles.StreetFighter",
                                          "Legend of Zelda": "OctoAI.SdxlStyles.LegendOfZelda",
                                          "Architectural": "OctoAI.SdxlStyles.Architectural",
                                          "Disco": "OctoAI.SdxlStyles.Disco",
                                          "Dreamscape": "OctoAI.SdxlStyles.Dreamscape",
                                          "Dystopian": "OctoAI.SdxlStyles.Dystopian",
                                          "Fairy Tale": "OctoAI.SdxlStyles.FairyTale",
                                          "Gothic": "OctoAI.SdxlStyles.Gothic",
                                          "Grunge": "OctoAI.SdxlStyles.Grunge",
                                          "Horror": "OctoAI.SdxlStyles.Horror",
                                          "Minimalist": "OctoAI.SdxlStyles.Minimalist",
                                          "Monochrome": "OctoAI.SdxlStyles.Monochrome",
                                          "Nautical": "OctoAI.SdxlStyles.Nautical",
                                          "Space": "OctoAI.SdxlStyles.Space",
                                          "Stained Glass": "OctoAI.SdxlStyles.StainedGlass",
                                          "Techwear Fashion": "OctoAI.SdxlStyles.TechwearFashion",
                                          "Tribal": "OctoAI.SdxlStyles.Tribal",
                                          "Zentangle": "OctoAI.SdxlStyles.Zentangle",
                                          "Collage": "OctoAI.SdxlStyles.Collage",
                                          "Flat Papercut": "OctoAI.SdxlStyles.FlatPapercut",
                                          "Kirigami": "OctoAI.SdxlStyles.Kirigami",
                                          "Paper Mache": "OctoAI.SdxlStyles.PaperMache",
                                          "Paper Quilling": "OctoAI.SdxlStyles.PaperQuilling",
                                          "Papercut Collage": "OctoAI.SdxlStyles.PapercutCollage",
                                          "Papercut Shadow Box": "OctoAI.SdxlStyles.PapercutShadowBox",
                                          "Stacked Papercut": "OctoAI.SdxlStyles.StackedPapercut",
                                          "Thick Layered Papercut": "OctoAI.SdxlStyles.ThickLayeredPapercut",
                                          "Alien": "OctoAI.SdxlStyles.Alien",
                                          "Film Noir": "OctoAI.SdxlStyles.FilmNoir",
                                          "HDR": "OctoAI.SdxlStyles.Hdr",
                                          "Long Exposure": "OctoAI.SdxlStyles.LongExposure",
                                          "Neon Noir": "OctoAI.SdxlStyles.NeonNoir",
                                          "Silhouette": "OctoAI.SdxlStyles.Silhouette",
                                          "Tilt-Shift": "OctoAI.SdxlStyles.TiltShift"
                                        },
                                        "templateString": "stylePreset: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "style_preset"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "useRefiner: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "use_refiner"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "highNoiseFrac: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "high_noise_frac"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetConditioningScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_conditioning_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetEarlyStop: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_early_stop"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetPreprocess: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_preprocess"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "clipSkip: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "clip_skip"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "outpainting: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "outpainting"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "enableSafety: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "enable_safety"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "jpeg": "OctoAI.ImageEncoding.Jpeg",
                                          "png": "OctoAI.ImageEncoding.Png"
                                        },
                                        "templateString": "imageEncoding: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "image_encoding"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "transferImages: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "transfer_images"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetDownload: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_download"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetGpuCopy: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_gpu_copy"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.image_gen.generate_sdxl(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "checkpoint=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "checkpoint",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "vae=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "vae",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "textual_inversions={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "textual_inversions"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "loras={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "loras"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sampler=$FERN_INPUT",
                            "values": {
                              "PNDM": "\"PNDM\"",
                              "LMS": "\"LMS\"",
                              "KLMS": "\"KLMS\"",
                              "DDIM": "\"DDIM\"",
                              "DDPM": "\"DDPM\"",
                              "HEUN": "\"HEUN\"",
                              "K_HEUN": "\"K_HEUN\"",
                              "K_EULER": "\"K_EULER\"",
                              "K_EULER_ANCESTRAL": "\"K_EULER_ANCESTRAL\"",
                              "DPM_SOLVER_MULTISTEP": "\"DPM_SOLVER_MULTISTEP\"",
                              "DPM_PLUS_PLUS_2M_KARRAS": "\"DPM_PLUS_PLUS_2M_KARRAS\"",
                              "DPM_SINGLE": "\"DPM_SINGLE\"",
                              "DPM_2": "\"DPM_2\"",
                              "DPM_2_ANCESTRAL": "\"DPM_2_ANCESTRAL\"",
                              "DPM_PLUS_PLUS_SDE_KARRAS": "\"DPM_PLUS_PLUS_SDE_KARRAS\"",
                              "UNI_PC": "\"UNI_PC\"",
                              "LCM": "\"LCM\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "sampler"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cfg_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "cfg_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "steps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "steps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "num_images=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "num_images",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "init_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "init_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mask_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "mask_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "strength=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "strength",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "style_preset=$FERN_INPUT",
                            "values": {
                              "base": "\"base\"",
                              "3d-model": "\"3d-model\"",
                              "analog-film": "\"analog-film\"",
                              "anime": "\"anime\"",
                              "cinematic": "\"cinematic\"",
                              "comic-book": "\"comic-book\"",
                              "Craft Clay": "\"Craft Clay\"",
                              "modeling-compound": "\"modeling-compound\"",
                              "digital-art": "\"digital-art\"",
                              "enhance": "\"enhance\"",
                              "fantasy-art": "\"fantasy-art\"",
                              "isometric": "\"isometric\"",
                              "line-art": "\"line-art\"",
                              "low-poly": "\"low-poly\"",
                              "neon-punk": "\"neon-punk\"",
                              "origami": "\"origami\"",
                              "photographic": "\"photographic\"",
                              "pixel-art": "\"pixel-art\"",
                              "tile-texture": "\"tile-texture\"",
                              "Advertising": "\"Advertising\"",
                              "Food Photography": "\"Food Photography\"",
                              "Real Estate": "\"Real Estate\"",
                              "Abstract": "\"Abstract\"",
                              "Cubist": "\"Cubist\"",
                              "Graffiti": "\"Graffiti\"",
                              "Hyperrealism": "\"Hyperrealism\"",
                              "Impressionist": "\"Impressionist\"",
                              "Pointillism": "\"Pointillism\"",
                              "Pop Art": "\"Pop Art\"",
                              "Psychedelic": "\"Psychedelic\"",
                              "Renaissance": "\"Renaissance\"",
                              "Steampunk": "\"Steampunk\"",
                              "Surrealist": "\"Surrealist\"",
                              "Typography": "\"Typography\"",
                              "Watercolor": "\"Watercolor\"",
                              "Fighting Game": "\"Fighting Game\"",
                              "GTA": "\"GTA\"",
                              "Super Mario": "\"Super Mario\"",
                              "Minecraft": "\"Minecraft\"",
                              "Pokémon": "\"Pokémon\"",
                              "Retro Arcade": "\"Retro Arcade\"",
                              "Retro Game": "\"Retro Game\"",
                              "RPG Fantasy Game": "\"RPG Fantasy Game\"",
                              "Strategy Game": "\"Strategy Game\"",
                              "Street Fighter": "\"Street Fighter\"",
                              "Legend of Zelda": "\"Legend of Zelda\"",
                              "Architectural": "\"Architectural\"",
                              "Disco": "\"Disco\"",
                              "Dreamscape": "\"Dreamscape\"",
                              "Dystopian": "\"Dystopian\"",
                              "Fairy Tale": "\"Fairy Tale\"",
                              "Gothic": "\"Gothic\"",
                              "Grunge": "\"Grunge\"",
                              "Horror": "\"Horror\"",
                              "Minimalist": "\"Minimalist\"",
                              "Monochrome": "\"Monochrome\"",
                              "Nautical": "\"Nautical\"",
                              "Space": "\"Space\"",
                              "Stained Glass": "\"Stained Glass\"",
                              "Techwear Fashion": "\"Techwear Fashion\"",
                              "Tribal": "\"Tribal\"",
                              "Zentangle": "\"Zentangle\"",
                              "Collage": "\"Collage\"",
                              "Flat Papercut": "\"Flat Papercut\"",
                              "Kirigami": "\"Kirigami\"",
                              "Paper Mache": "\"Paper Mache\"",
                              "Paper Quilling": "\"Paper Quilling\"",
                              "Papercut Collage": "\"Papercut Collage\"",
                              "Papercut Shadow Box": "\"Papercut Shadow Box\"",
                              "Stacked Papercut": "\"Stacked Papercut\"",
                              "Thick Layered Papercut": "\"Thick Layered Papercut\"",
                              "Alien": "\"Alien\"",
                              "Film Noir": "\"Film Noir\"",
                              "HDR": "\"HDR\"",
                              "Long Exposure": "\"Long Exposure\"",
                              "Neon Noir": "\"Neon Noir\"",
                              "Silhouette": "\"Silhouette\"",
                              "Tilt-Shift": "\"Tilt-Shift\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "style_preset"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "use_refiner=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "use_refiner",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "high_noise_frac=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "high_noise_frac",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_conditioning_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_conditioning_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_early_stop=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_early_stop",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_preprocess=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_preprocess",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "clip_skip=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clip_skip",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "outpainting=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "outpainting",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "enable_safety=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "enable_safety",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_encoding=$FERN_INPUT",
                            "values": {
                              "jpeg": "\"jpeg\"",
                              "png": "\"png\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "image_encoding"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "transfer_images={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                              "delimiter": ",\n\t\t\t",
                              "innerTemplate": {
                                "imports": [],
                                "isOptional": true,
                                "templateString": "$FERN_INPUT",
                                "templateInputs": [
                                  {
                                    "location": "RELATIVE",
                                    "path": null,
                                    "type": "payload"
                                  }
                                ],
                                "type": "generic"
                              },
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "iterable"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "transfer_images"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_download=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_download",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_gpu_copy=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_gpu_copy",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://image.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://image.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "generate-sd",
                "migratedFromUrlSlugs": ["generate-sd-1-5"],
                "method": "POST",
                "id": "generateSd",
                "originalEndpointId": "endpoint_image-gen.generateSd",
                "name": "Generate SD1.5",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate/sd"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationRequest"
                    }
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:ImageGenerationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_image-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/generate/sd",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "prompt": "An octopus playing chess, masterpiece, photorealistic"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "images": [
                        {
                          "image_b64": "image_b64",
                          "removed_for_safety": true,
                          "seed": 1,
                          "safety_score": 1.1
                        }
                      ],
                      "prediction_time_ms": 1.1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_sd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_sd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSd({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "An octopus playing chess, masterpiece, photorealistic"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "images": [
                          {
                            "image_b64": "image_b64",
                            "removed_for_safety": true,
                            "seed": 1,
                            "safety_score": 1.1
                          }
                        ],
                        "prediction_time_ms": 1.1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate/sd",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_sd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_sd(\n    prompt=\"An octopus playing chess, masterpiece, photorealistic\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSd({\n    prompt: \"An octopus playing chess, masterpiece, photorealistic\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "prompt": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Generate images in response to the given request.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.imageGen.generateSd(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "{\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "prompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "negativePrompt2: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "negative_prompt_2"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "checkpoint: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "checkpoint"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnet: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vae: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "vae"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "textualInversions: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "textual_inversions"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "loras: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "loras"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "PNDM": "OctoAI.Scheduler.Pndm",
                                          "LMS": "OctoAI.Scheduler.Lms",
                                          "KLMS": "OctoAI.Scheduler.Klms",
                                          "DDIM": "OctoAI.Scheduler.Ddim",
                                          "DDPM": "OctoAI.Scheduler.Ddpm",
                                          "HEUN": "OctoAI.Scheduler.Heun",
                                          "K_HEUN": "OctoAI.Scheduler.KHeun",
                                          "K_EULER": "OctoAI.Scheduler.KEuler",
                                          "K_EULER_ANCESTRAL": "OctoAI.Scheduler.KEulerAncestral",
                                          "DPM_SOLVER_MULTISTEP": "OctoAI.Scheduler.DpmSolverMultistep",
                                          "DPM_PLUS_PLUS_2M_KARRAS": "OctoAI.Scheduler.DpmPlusPlus2MKarras",
                                          "DPM_SINGLE": "OctoAI.Scheduler.DpmSingle",
                                          "DPM_2": "OctoAI.Scheduler.Dpm2",
                                          "DPM_2_ANCESTRAL": "OctoAI.Scheduler.Dpm2Ancestral",
                                          "DPM_PLUS_PLUS_SDE_KARRAS": "OctoAI.Scheduler.DpmPlusPlusSdeKarras",
                                          "UNI_PC": "OctoAI.Scheduler.UniPc",
                                          "LCM": "OctoAI.Scheduler.Lcm"
                                        },
                                        "templateString": "sampler: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "sampler"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "height: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "height"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "width: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "width"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "cfgScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "cfg_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "steps: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "steps"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "numImages: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "num_images"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "initImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "init_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "maskImage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "mask_image"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "strength: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "strength"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "base": "OctoAI.SdxlStyles.Base",
                                          "3d-model": "OctoAI.SdxlStyles.ThreeDModel",
                                          "analog-film": "OctoAI.SdxlStyles.AnalogFilm",
                                          "anime": "OctoAI.SdxlStyles.Anime",
                                          "cinematic": "OctoAI.SdxlStyles.Cinematic",
                                          "comic-book": "OctoAI.SdxlStyles.ComicBook",
                                          "Craft Clay": "OctoAI.SdxlStyles.CraftClay",
                                          "modeling-compound": "OctoAI.SdxlStyles.ModelingCompound",
                                          "digital-art": "OctoAI.SdxlStyles.DigitalArt",
                                          "enhance": "OctoAI.SdxlStyles.Enhance",
                                          "fantasy-art": "OctoAI.SdxlStyles.FantasyArt",
                                          "isometric": "OctoAI.SdxlStyles.Isometric",
                                          "line-art": "OctoAI.SdxlStyles.LineArt",
                                          "low-poly": "OctoAI.SdxlStyles.LowPoly",
                                          "neon-punk": "OctoAI.SdxlStyles.NeonPunk",
                                          "origami": "OctoAI.SdxlStyles.Origami",
                                          "photographic": "OctoAI.SdxlStyles.Photographic",
                                          "pixel-art": "OctoAI.SdxlStyles.PixelArt",
                                          "tile-texture": "OctoAI.SdxlStyles.TileTexture",
                                          "Advertising": "OctoAI.SdxlStyles.Advertising",
                                          "Food Photography": "OctoAI.SdxlStyles.FoodPhotography",
                                          "Real Estate": "OctoAI.SdxlStyles.RealEstate",
                                          "Abstract": "OctoAI.SdxlStyles.Abstract",
                                          "Cubist": "OctoAI.SdxlStyles.Cubist",
                                          "Graffiti": "OctoAI.SdxlStyles.Graffiti",
                                          "Hyperrealism": "OctoAI.SdxlStyles.Hyperrealism",
                                          "Impressionist": "OctoAI.SdxlStyles.Impressionist",
                                          "Pointillism": "OctoAI.SdxlStyles.Pointillism",
                                          "Pop Art": "OctoAI.SdxlStyles.PopArt",
                                          "Psychedelic": "OctoAI.SdxlStyles.Psychedelic",
                                          "Renaissance": "OctoAI.SdxlStyles.Renaissance",
                                          "Steampunk": "OctoAI.SdxlStyles.Steampunk",
                                          "Surrealist": "OctoAI.SdxlStyles.Surrealist",
                                          "Typography": "OctoAI.SdxlStyles.Typography",
                                          "Watercolor": "OctoAI.SdxlStyles.Watercolor",
                                          "Fighting Game": "OctoAI.SdxlStyles.FightingGame",
                                          "GTA": "OctoAI.SdxlStyles.Gta",
                                          "Super Mario": "OctoAI.SdxlStyles.SuperMario",
                                          "Minecraft": "OctoAI.SdxlStyles.Minecraft",
                                          "Pokémon": "OctoAI.SdxlStyles.Pokemon",
                                          "Retro Arcade": "OctoAI.SdxlStyles.RetroArcade",
                                          "Retro Game": "OctoAI.SdxlStyles.RetroGame",
                                          "RPG Fantasy Game": "OctoAI.SdxlStyles.RpgFantasyGame",
                                          "Strategy Game": "OctoAI.SdxlStyles.StrategyGame",
                                          "Street Fighter": "OctoAI.SdxlStyles.StreetFighter",
                                          "Legend of Zelda": "OctoAI.SdxlStyles.LegendOfZelda",
                                          "Architectural": "OctoAI.SdxlStyles.Architectural",
                                          "Disco": "OctoAI.SdxlStyles.Disco",
                                          "Dreamscape": "OctoAI.SdxlStyles.Dreamscape",
                                          "Dystopian": "OctoAI.SdxlStyles.Dystopian",
                                          "Fairy Tale": "OctoAI.SdxlStyles.FairyTale",
                                          "Gothic": "OctoAI.SdxlStyles.Gothic",
                                          "Grunge": "OctoAI.SdxlStyles.Grunge",
                                          "Horror": "OctoAI.SdxlStyles.Horror",
                                          "Minimalist": "OctoAI.SdxlStyles.Minimalist",
                                          "Monochrome": "OctoAI.SdxlStyles.Monochrome",
                                          "Nautical": "OctoAI.SdxlStyles.Nautical",
                                          "Space": "OctoAI.SdxlStyles.Space",
                                          "Stained Glass": "OctoAI.SdxlStyles.StainedGlass",
                                          "Techwear Fashion": "OctoAI.SdxlStyles.TechwearFashion",
                                          "Tribal": "OctoAI.SdxlStyles.Tribal",
                                          "Zentangle": "OctoAI.SdxlStyles.Zentangle",
                                          "Collage": "OctoAI.SdxlStyles.Collage",
                                          "Flat Papercut": "OctoAI.SdxlStyles.FlatPapercut",
                                          "Kirigami": "OctoAI.SdxlStyles.Kirigami",
                                          "Paper Mache": "OctoAI.SdxlStyles.PaperMache",
                                          "Paper Quilling": "OctoAI.SdxlStyles.PaperQuilling",
                                          "Papercut Collage": "OctoAI.SdxlStyles.PapercutCollage",
                                          "Papercut Shadow Box": "OctoAI.SdxlStyles.PapercutShadowBox",
                                          "Stacked Papercut": "OctoAI.SdxlStyles.StackedPapercut",
                                          "Thick Layered Papercut": "OctoAI.SdxlStyles.ThickLayeredPapercut",
                                          "Alien": "OctoAI.SdxlStyles.Alien",
                                          "Film Noir": "OctoAI.SdxlStyles.FilmNoir",
                                          "HDR": "OctoAI.SdxlStyles.Hdr",
                                          "Long Exposure": "OctoAI.SdxlStyles.LongExposure",
                                          "Neon Noir": "OctoAI.SdxlStyles.NeonNoir",
                                          "Silhouette": "OctoAI.SdxlStyles.Silhouette",
                                          "Tilt-Shift": "OctoAI.SdxlStyles.TiltShift"
                                        },
                                        "templateString": "stylePreset: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "style_preset"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "useRefiner: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "use_refiner"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "highNoiseFrac: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "high_noise_frac"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetConditioningScale: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_conditioning_scale"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetEarlyStop: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_early_stop"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "controlnetPreprocess: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "controlnet_preprocess"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "clipSkip: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "clip_skip"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "outpainting: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "outpainting"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "enableSafety: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "enable_safety"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "enum",
                                        "imports": [],
                                        "isOptional": true,
                                        "values": {
                                          "jpeg": "OctoAI.ImageEncoding.Jpeg",
                                          "png": "OctoAI.ImageEncoding.Png"
                                        },
                                        "templateString": "imageEncoding: $FERN_INPUT",
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "image_encoding"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "transferImages: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "iterable",
                                          "imports": [],
                                          "isOptional": true,
                                          "containerTemplateString": "[\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                          "delimiter": ",\n\t\t\t\t\t",
                                          "innerTemplate": {
                                            "type": "generic",
                                            "imports": [],
                                            "templateString": "$FERN_INPUT",
                                            "isOptional": true,
                                            "templateInputs": [
                                              {
                                                "type": "payload",
                                                "location": "RELATIVE",
                                                "path": null
                                              }
                                            ]
                                          },
                                          "templateInput": {
                                            "location": "RELATIVE",
                                            "path": null
                                          }
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "transfer_images"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetDownload: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_download"
                                          }
                                        ]
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "forceAssetGpuCopy: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "force_asset_gpu_copy"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.image_gen.generate_sd(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "negative_prompt2=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "negative_prompt_2",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "checkpoint=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "checkpoint",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "vae=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "vae",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "textual_inversions={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "textual_inversions"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "loras={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "loras"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "sampler=$FERN_INPUT",
                            "values": {
                              "PNDM": "\"PNDM\"",
                              "LMS": "\"LMS\"",
                              "KLMS": "\"KLMS\"",
                              "DDIM": "\"DDIM\"",
                              "DDPM": "\"DDPM\"",
                              "HEUN": "\"HEUN\"",
                              "K_HEUN": "\"K_HEUN\"",
                              "K_EULER": "\"K_EULER\"",
                              "K_EULER_ANCESTRAL": "\"K_EULER_ANCESTRAL\"",
                              "DPM_SOLVER_MULTISTEP": "\"DPM_SOLVER_MULTISTEP\"",
                              "DPM_PLUS_PLUS_2M_KARRAS": "\"DPM_PLUS_PLUS_2M_KARRAS\"",
                              "DPM_SINGLE": "\"DPM_SINGLE\"",
                              "DPM_2": "\"DPM_2\"",
                              "DPM_2_ANCESTRAL": "\"DPM_2_ANCESTRAL\"",
                              "DPM_PLUS_PLUS_SDE_KARRAS": "\"DPM_PLUS_PLUS_SDE_KARRAS\"",
                              "UNI_PC": "\"UNI_PC\"",
                              "LCM": "\"LCM\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "sampler"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cfg_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "cfg_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "steps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "steps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "num_images=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "num_images",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "init_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "init_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "mask_image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "mask_image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "strength=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "strength",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "style_preset=$FERN_INPUT",
                            "values": {
                              "base": "\"base\"",
                              "3d-model": "\"3d-model\"",
                              "analog-film": "\"analog-film\"",
                              "anime": "\"anime\"",
                              "cinematic": "\"cinematic\"",
                              "comic-book": "\"comic-book\"",
                              "Craft Clay": "\"Craft Clay\"",
                              "modeling-compound": "\"modeling-compound\"",
                              "digital-art": "\"digital-art\"",
                              "enhance": "\"enhance\"",
                              "fantasy-art": "\"fantasy-art\"",
                              "isometric": "\"isometric\"",
                              "line-art": "\"line-art\"",
                              "low-poly": "\"low-poly\"",
                              "neon-punk": "\"neon-punk\"",
                              "origami": "\"origami\"",
                              "photographic": "\"photographic\"",
                              "pixel-art": "\"pixel-art\"",
                              "tile-texture": "\"tile-texture\"",
                              "Advertising": "\"Advertising\"",
                              "Food Photography": "\"Food Photography\"",
                              "Real Estate": "\"Real Estate\"",
                              "Abstract": "\"Abstract\"",
                              "Cubist": "\"Cubist\"",
                              "Graffiti": "\"Graffiti\"",
                              "Hyperrealism": "\"Hyperrealism\"",
                              "Impressionist": "\"Impressionist\"",
                              "Pointillism": "\"Pointillism\"",
                              "Pop Art": "\"Pop Art\"",
                              "Psychedelic": "\"Psychedelic\"",
                              "Renaissance": "\"Renaissance\"",
                              "Steampunk": "\"Steampunk\"",
                              "Surrealist": "\"Surrealist\"",
                              "Typography": "\"Typography\"",
                              "Watercolor": "\"Watercolor\"",
                              "Fighting Game": "\"Fighting Game\"",
                              "GTA": "\"GTA\"",
                              "Super Mario": "\"Super Mario\"",
                              "Minecraft": "\"Minecraft\"",
                              "Pokémon": "\"Pokémon\"",
                              "Retro Arcade": "\"Retro Arcade\"",
                              "Retro Game": "\"Retro Game\"",
                              "RPG Fantasy Game": "\"RPG Fantasy Game\"",
                              "Strategy Game": "\"Strategy Game\"",
                              "Street Fighter": "\"Street Fighter\"",
                              "Legend of Zelda": "\"Legend of Zelda\"",
                              "Architectural": "\"Architectural\"",
                              "Disco": "\"Disco\"",
                              "Dreamscape": "\"Dreamscape\"",
                              "Dystopian": "\"Dystopian\"",
                              "Fairy Tale": "\"Fairy Tale\"",
                              "Gothic": "\"Gothic\"",
                              "Grunge": "\"Grunge\"",
                              "Horror": "\"Horror\"",
                              "Minimalist": "\"Minimalist\"",
                              "Monochrome": "\"Monochrome\"",
                              "Nautical": "\"Nautical\"",
                              "Space": "\"Space\"",
                              "Stained Glass": "\"Stained Glass\"",
                              "Techwear Fashion": "\"Techwear Fashion\"",
                              "Tribal": "\"Tribal\"",
                              "Zentangle": "\"Zentangle\"",
                              "Collage": "\"Collage\"",
                              "Flat Papercut": "\"Flat Papercut\"",
                              "Kirigami": "\"Kirigami\"",
                              "Paper Mache": "\"Paper Mache\"",
                              "Paper Quilling": "\"Paper Quilling\"",
                              "Papercut Collage": "\"Papercut Collage\"",
                              "Papercut Shadow Box": "\"Papercut Shadow Box\"",
                              "Stacked Papercut": "\"Stacked Papercut\"",
                              "Thick Layered Papercut": "\"Thick Layered Papercut\"",
                              "Alien": "\"Alien\"",
                              "Film Noir": "\"Film Noir\"",
                              "HDR": "\"HDR\"",
                              "Long Exposure": "\"Long Exposure\"",
                              "Neon Noir": "\"Neon Noir\"",
                              "Silhouette": "\"Silhouette\"",
                              "Tilt-Shift": "\"Tilt-Shift\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "style_preset"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "use_refiner=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "use_refiner",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "high_noise_frac=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "high_noise_frac",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_conditioning_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_conditioning_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_early_stop=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_early_stop",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "controlnet_preprocess=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "controlnet_preprocess",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "clip_skip=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "clip_skip",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "outpainting=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "outpainting",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "enable_safety=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "enable_safety",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image_encoding=$FERN_INPUT",
                            "values": {
                              "jpeg": "\"jpeg\"",
                              "png": "\"png\""
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "image_encoding"
                            },
                            "type": "enum"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "transfer_images={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "containerTemplateString": "[\n\t\t\t$FERN_INPUT\n\t\t]",
                              "delimiter": ",\n\t\t\t",
                              "innerTemplate": {
                                "imports": [],
                                "isOptional": true,
                                "templateString": "$FERN_INPUT",
                                "templateInputs": [
                                  {
                                    "location": "RELATIVE",
                                    "path": null,
                                    "type": "payload"
                                  }
                                ],
                                "type": "generic"
                              },
                              "templateInput": {
                                "location": "RELATIVE",
                                "path": null
                              },
                              "type": "iterable"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "transfer_images"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_download=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_download",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_gpu_copy=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_gpu_copy",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://image.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://image.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "generate-svd",
                "migratedFromUrlSlugs": ["generate-svd-animations"],
                "method": "POST",
                "id": "generateSvd",
                "originalEndpointId": "endpoint_image-gen.generateSvd",
                "name": "Generate SVD Animations",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/generate/svd"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Starting point image encoded in base64 string.",
                        "key": "image",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "height",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      {
                        "key": "width",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer"
                            }
                          }
                        }
                      },
                      {
                        "description": "Floating-point number represeting how closely to adhere to 'image'. Must be a positive number no greater than 10.0.",
                        "key": "cfg_scale",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "maximum": 10,
                              "default": 3
                            }
                          }
                        }
                      },
                      {
                        "description": "Integer repreenting how many steps of diffusion to run. Must be greater than 0 and less than or equal to 50.",
                        "key": "steps",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "maximum": 50,
                              "default": 25
                            }
                          }
                        }
                      },
                      {
                        "description": "A floating point number between 0.0 and 5.0 indicating how much motion should be in the generated video/animation.",
                        "key": "motion_scale",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": 0,
                              "maximum": 5,
                              "default": 0.5
                            }
                          }
                        }
                      },
                      {
                        "description": "A floating point number between 0.0 and 1.0 indicatiing how much noise to add to the initial image. Higher values encourage creativity.",
                        "key": "noise_aug_strength",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": 0,
                              "maximum": 1,
                              "default": 0.02
                            }
                          }
                        }
                      },
                      {
                        "description": "Integer representing how many output videos/animations to generate with a single 'image' and configuration.",
                        "key": "num_videos",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "maximum": 16,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Integer representing how fast the generated frames should play back.",
                        "key": "fps",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 25,
                              "default": 7
                            }
                          }
                        }
                      },
                      {
                        "description": "Integer number or list of integers representing the seeds of random generators.Fixing random seed is useful when attempting to generate a specific video/animation (or set of videos/animations). Must be greater than 0 and less than 2^32.",
                        "key": "seed",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_image-gen:VideoGenerationRequestSeed"
                          }
                        }
                      },
                      {
                        "description": "Boolean defining whether to use safety checker system on generated outputs or not.",
                        "key": "enable_safety",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "[Internal] Boolean defining if assets must be re-downloaded into the cache even if present.",
                        "key": "force_asset_download",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "[Internal] Boolean defining if assets must to be copied into the GPU even if present.",
                        "key": "force_asset_gpu_copy",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_image-gen:VideoGenerationResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_image-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  }
                ],
                "examples": [
                  {
                    "path": "/generate/svd",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "image": "image"
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "videos": [
                        {
                          "video": "video",
                          "removed_for_safety": true,
                          "seed": 1,
                          "safety_score": 1.1
                        }
                      ],
                      "prediction_time_ms": 1.1
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_svd(\n    image=\"image\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_svd(\n    image=\"image\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSvd({\n    image: \"image\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "image": "image"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "videos": [
                          {
                            "video": "video",
                            "removed_for_safety": true,
                            "seed": 1,
                            "safety_score": 1.1
                          }
                        ],
                        "prediction_time_ms": 1.1
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/generate/svd",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.image_gen.generate_svd(\n    image=\"image\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.image_gen.generate_svd(\n    image=\"image\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.imageGen.generateSvd({\n    image: \"image\"\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "image": "string"
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Generate videos in response to the given request.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.imageGen.generateSvd(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "image: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "image"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "height: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "height"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "width: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "width"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "cfgScale: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "cfg_scale"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "steps: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "steps"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "motionScale: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "motion_scale"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "noiseAugStrength: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "noise_aug_strength"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "numVideos: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "num_videos"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "fps: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "fps"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "enableSafety: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "enable_safety"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "forceAssetDownload: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "force_asset_download"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "forceAssetGpuCopy: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "force_asset_gpu_copy"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.image_gen.generate_svd(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "image=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "image",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "height=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "height",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "width=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "width",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "cfg_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "cfg_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "steps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "steps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "motion_scale=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "motion_scale",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "noise_aug_strength=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "noise_aug_strength",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "num_videos=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "num_videos",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "fps=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "fps",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "enable_safety=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "enable_safety",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_download=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_download",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "force_asset_gpu_copy=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "force_asset_gpu_copy",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              }
            ],
            "types": [
              "type_image-gen:VideoGenerationRequestSeed",
              "type_image-gen:HTTPValidationError",
              "type_image-gen:ImageEncoding",
              "type_image-gen:ImageGeneration",
              "type_image-gen:ImageGenerationRequestSeed",
              "type_image-gen:ImageGenerationRequest",
              "type_image-gen:ImageGenerationResponse",
              "type_image-gen:SDXLStyles",
              "type_image-gen:Scheduler",
              "type_image-gen:ValidationErrorLocItem",
              "type_image-gen:ValidationError",
              "type_image-gen:VideoGeneration",
              "type_image-gen:VideoGenerationResponse"
            ],
            "subpackages": [],
            "urlSlug": "image-gen",
            "webhooks": [],
            "websockets": []
          },
          "subpackage_text-gen": {
            "subpackageId": "subpackage_text-gen",
            "name": "text-gen",
            "endpoints": [
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://text.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://text.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create-chat-completion-stream",
                "migratedFromUrlSlugs": ["create-chat-completion"],
                "method": "POST",
                "id": "createChatCompletion_stream",
                "originalEndpointId": "endpoint_text-gen.createChatCompletion_stream",
                "name": "Create Chat Completion",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/chat/completions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Penalizes new tokens based on their frequency in the generated text so far.",
                        "key": "frequency_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "key": "ignore_eos",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "logit_bias",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "optional",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "double"
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "key": "loglikelihood",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "logprobs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Maximum number of tokens to generate per output sequence.",
                        "key": "max_tokens",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 512
                            }
                          }
                        }
                      },
                      {
                        "description": "A list of messages comprising the conversation so far.",
                        "key": "messages",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:ChatMessage"
                          }
                        }
                      },
                      {
                        "description": "The identifier of the model to use.Can be a shared tenancy or custom model identifier.",
                        "key": "model",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "n",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "octoai",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:ChatCompletionRequestExt"
                          }
                        }
                      },
                      {
                        "description": "Penalizes new tokens based on whether they appear in the generated text so far",
                        "key": "presence_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the likelihood of the model generating repeated texts",
                        "key": "repetition_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "response_format",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:ChatCompletionResponseFormat"
                          }
                        }
                      },
                      {
                        "key": "stop",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:Stop"
                          }
                        }
                      },
                      {
                        "description": "If set, tokens will be streamed incrementally to users.",
                        "key": "stream",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "booleanLiteral",
                            "value": true
                          }
                        }
                      },
                      {
                        "key": "stream_options",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:StreamOptions"
                          }
                        }
                      },
                      {
                        "description": "Controls the randomness of the sampling.",
                        "key": "temperature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": 0,
                              "maximum": 2,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "top_logprobs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the cumulative probability of the top tokens to consider.",
                        "key": "top_p",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "maximum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "user",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "stream",
                    "shape": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:ChatCompletionChunk"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:ErrorResponse"
                      }
                    },
                    "statusCode": 500,
                    "description": "Internal Server Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "message": "An example error",
                            "object": "error",
                            "type": "internal_error"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/chat/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createChatCompletion({\n    messages: [{\n            role: \"role\"\n        }],\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "messages": [
                          {
                            "role": "string"
                          }
                        ],
                        "model": "string",
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "stream",
                      "value": [
                        {
                          "choices": [
                            {
                              "delta": {
                                "content": "string",
                                "role": "string"
                              },
                              "finish_reason": "stop",
                              "index": 0,
                              "logprobs": {
                                "content": [
                                  {
                                    "bytes": [{}],
                                    "logprob": 1,
                                    "token": "string",
                                    "top_logprobs": [
                                      {
                                        "bytes": [{}],
                                        "logprob": 1,
                                        "token": "string"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ],
                          "created": 0,
                          "id": "string",
                          "model": "string",
                          "object": {},
                          "usage": {
                            "completion_tokens": 0,
                            "prompt_tokens": 0,
                            "total_tokens": 0
                          }
                        },
                        {
                          "choices": [
                            {
                              "delta": {
                                "content": "string",
                                "role": "string"
                              },
                              "finish_reason": "stop",
                              "index": 0,
                              "logprobs": {
                                "content": [
                                  {
                                    "bytes": [{}],
                                    "logprob": 1,
                                    "token": "string",
                                    "top_logprobs": [
                                      {
                                        "bytes": [{}],
                                        "logprob": 1,
                                        "token": "string"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ],
                          "created": 0,
                          "id": "string",
                          "model": "string",
                          "object": {},
                          "usage": {
                            "completion_tokens": 0,
                            "prompt_tokens": 0,
                            "total_tokens": 0
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/chat/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createChatCompletion({\n    messages: [{\n            role: \"role\"\n        }],\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "messages": [
                          {
                            "role": "string"
                          }
                        ],
                        "model": "string",
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/chat/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createChatCompletion({\n    messages: [{\n            role: \"role\"\n        }],\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "messages": [
                          {
                            "role": "string"
                          }
                        ],
                        "model": "string",
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "object": "string",
                        "param": "string",
                        "type": "string",
                        "validation_errors": {
                          "string": "string"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a Chat Completion.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.textGen.createChatCompletionStream(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "frequencyPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "frequency_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "ignoreEos: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "ignore_eos"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "logitBias: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "logit_bias"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "loglikelihood: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "loglikelihood"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "logprobs: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "logprobs"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "maxTokens: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "max_tokens"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "messages: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "content: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "content"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "role: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "role"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "messages"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "model: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "model"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "n: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "n"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "octoai: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vllm: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "bestOf: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.best_of"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "ignoreEos: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.ignore_eos"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "skipSpecialTokens: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.skip_special_tokens"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "stopTokenIds: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "BODY",
                                                "path": "octoai.vllm.stop_token_ids"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "topK: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.top_k"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "useBeamSearch: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.use_beam_search"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "presencePenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "presence_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "repetitionPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "repetition_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "responseFormat: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "schema: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "response_format.schema"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "type: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "response_format.type"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "streamOptions: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "includeUsage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "stream_options.include_usage"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "temperature: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "temperature"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "topLogprobs: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "top_logprobs"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "topP: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "top_p"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "user: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "user"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.text_gen.create_chat_completion_stream(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "frequency_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "frequency_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "functions=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from octoai.text_gen import Function"],
                              "isOptional": true,
                              "templateString": "Function(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "description=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "description",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "name=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "name",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "parameters=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "parameters",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "functions"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "ignore_eos=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "ignore_eos",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "logit_bias={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "logit_bias"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "max_tokens=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "max_tokens",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "messages=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from octoai.text_gen import ChatMessage"],
                              "isOptional": true,
                              "templateString": "ChatMessage(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "content=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "content",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": ["from octoai.text_gen import ChatFnCall"],
                                    "isOptional": true,
                                    "templateString": "function_call=ChatFnCall(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "arguments=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "function_call.arguments",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "function_call.name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "role=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "role",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "messages"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "model=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "model",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "n=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "n",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": ["from octoai.text_gen import ChatCompletionRequestExt"],
                            "isOptional": true,
                            "templateString": "octoai=ChatCompletionRequestExt(\n\t\t$FERN_INPUT\n\t)",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "imports": ["from octoai.text_gen import ChatCompletionRequestExtVllm"],
                                  "isOptional": true,
                                  "templateString": "vllm=ChatCompletionRequestExtVllm(\n\t\t\t$FERN_INPUT\n\t\t)",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "best_of=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "ignore_eos=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "skip_special_tokens=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "stop_token_ids=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": null,
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens.vllm.stop_token_ids"
                                        },
                                        "type": "iterable"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "top_k=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens.vllm.stop_token_ids.vllm.top_k",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "use_beam_search=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens.vllm.stop_token_ids.vllm.top_k.vllm.use_beam_search",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    }
                                  ],
                                  "inputDelimiter": ",\n\t\t\t",
                                  "type": "generic"
                                }
                              }
                            ],
                            "inputDelimiter": ",\n\t\t",
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "presence_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "presence_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "repetition_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "repetition_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": ["from octoai.text_gen import ChatCompletionResponseFormat"],
                            "isOptional": true,
                            "templateString": "response_format=ChatCompletionResponseFormat(\n\t\t$FERN_INPUT\n\t)",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "schema={\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyTemplate": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  },
                                  "valueTemplate": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  },
                                  "keyValueSeparator": ": ",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "response_format.schema"
                                  },
                                  "type": "dict"
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "type=$FERN_INPUT",
                                  "templateInputs": [
                                    {
                                      "location": "BODY",
                                      "path": "response_format.type",
                                      "type": "payload"
                                    }
                                  ],
                                  "type": "generic"
                                }
                              }
                            ],
                            "inputDelimiter": ",\n\t\t",
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "temperature=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "temperature",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "top_p=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "top_p",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "user=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "user",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://text.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://text.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create-chat-completion",
                "method": "POST",
                "id": "createChatCompletion",
                "originalEndpointId": "endpoint_text-gen.createChatCompletion",
                "name": "Create Chat Completion",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/chat/completions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Penalizes new tokens based on their frequency in the generated text so far.",
                        "key": "frequency_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "key": "ignore_eos",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "logit_bias",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "optional",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "double"
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "key": "loglikelihood",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "logprobs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Maximum number of tokens to generate per output sequence.",
                        "key": "max_tokens",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 512
                            }
                          }
                        }
                      },
                      {
                        "description": "A list of messages comprising the conversation so far.",
                        "key": "messages",
                        "valueType": {
                          "type": "list",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:ChatMessage"
                          }
                        }
                      },
                      {
                        "description": "The identifier of the model to use.Can be a shared tenancy or custom model identifier.",
                        "key": "model",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "key": "n",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "octoai",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:ChatCompletionRequestExt"
                          }
                        }
                      },
                      {
                        "description": "Penalizes new tokens based on whether they appear in the generated text so far",
                        "key": "presence_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the likelihood of the model generating repeated texts",
                        "key": "repetition_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "response_format",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:ChatCompletionResponseFormat"
                          }
                        }
                      },
                      {
                        "key": "stop",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:Stop"
                          }
                        }
                      },
                      {
                        "description": "If set, tokens will be streamed incrementally to users.",
                        "key": "stream",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "booleanLiteral",
                            "value": false
                          }
                        }
                      },
                      {
                        "key": "stream_options",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:StreamOptions"
                          }
                        }
                      },
                      {
                        "description": "Controls the randomness of the sampling.",
                        "key": "temperature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": 0,
                              "maximum": 2,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "top_logprobs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the cumulative probability of the top tokens to consider.",
                        "key": "top_p",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "maximum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "user",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_text-gen:ChatCompletionResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:ErrorResponse"
                      }
                    },
                    "statusCode": 500,
                    "description": "Internal Server Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "message": "An example error",
                            "object": "error",
                            "type": "internal_error"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/chat/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "messages": [
                        {
                          "role": "role"
                        }
                      ],
                      "model": "model",
                      "stream": false
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "choices": [
                        {
                          "finish_reason": "stop",
                          "index": 1,
                          "message": {
                            "role": "role"
                          }
                        }
                      ],
                      "created": 1,
                      "id": "id",
                      "model": "model",
                      "object": {
                        "key": "value"
                      },
                      "usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 1,
                        "total_tokens": 1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createChatCompletion({\n    messages: [{\n            role: \"role\"\n        }],\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "messages": [
                          {
                            "role": "role"
                          }
                        ],
                        "model": "model",
                        "stream": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "choices": [
                          {
                            "finish_reason": "stop",
                            "index": 1,
                            "message": {
                              "role": "role"
                            }
                          }
                        ],
                        "created": 1,
                        "id": "id",
                        "model": "model",
                        "object": {
                          "key": "value"
                        },
                        "usage": {
                          "completion_tokens": 1,
                          "prompt_tokens": 1,
                          "total_tokens": 1
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/chat/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createChatCompletion({\n    messages: [{\n            role: \"role\"\n        }],\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "messages": [
                          {
                            "role": "string"
                          }
                        ],
                        "model": "string",
                        "stream": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/chat/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\nfrom octoai.text_gen import (\n    ChatCompletionRequestExt,\n    ChatCompletionRequestExtVllm,\n    ChatCompletionResponseFormat,\n    ChatFnCall,\n    ChatMessage,\n    Function,\n)\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_chat_completion_stream(\n    frequency_penalty=1.1,\n    function_call=\"string\",\n    functions=[\n        Function(\n            description=\"string\",\n            name=\"string\",\n            parameters={\"key\": \"value\"},\n        )\n    ],\n    ignore_eos=True,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    max_tokens=1,\n    messages=[\n        ChatMessage(\n            content=\"string\",\n            function_call=ChatFnCall(\n                arguments=\"string\",\n                name=\"string\",\n            ),\n            role=\"string\",\n        )\n    ],\n    model=\"string\",\n    n=1,\n    octoai=ChatCompletionRequestExt(\n        vllm=ChatCompletionRequestExtVllm(),\n    ),\n    presence_penalty=1.1,\n    repetition_penalty=1.1,\n    response_format=ChatCompletionResponseFormat(\n        schema={\"string\": {\"key\": \"value\"}},\n        type=\"string\",\n    ),\n    stop=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createChatCompletion({\n    messages: [{\n            role: \"role\"\n        }],\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "messages": [
                          {
                            "role": "string"
                          }
                        ],
                        "model": "string",
                        "stream": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "object": "string",
                        "param": "string",
                        "type": "string",
                        "validation_errors": {
                          "string": "string"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "description": "Create a Chat Completion.",
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.textGen.createChatCompletionStream(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "frequencyPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "frequency_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "ignoreEos: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "ignore_eos"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "logitBias: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "logit_bias"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "loglikelihood: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "loglikelihood"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "logprobs: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "logprobs"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "maxTokens: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "max_tokens"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "iterable",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "messages: [\n\t\t\t$FERN_INPUT\n\t\t]",
                                  "delimiter": ",\n\t\t\t",
                                  "innerTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "{\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                    "isOptional": true,
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "content: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "content"
                                            }
                                          ]
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "role: $FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": "role"
                                            }
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "messages"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "model: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "model"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "n: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "n"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "octoai: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "vllm: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "isOptional": true,
                                        "inputDelimiter": ",\n\t\t\t\t",
                                        "templateInputs": [
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "bestOf: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.best_of"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "ignoreEos: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.ignore_eos"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "skipSpecialTokens: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.skip_special_tokens"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "iterable",
                                              "imports": [],
                                              "isOptional": true,
                                              "containerTemplateString": "stopTokenIds: [\n\t\t\t\t\t$FERN_INPUT\n\t\t\t\t]",
                                              "delimiter": ",\n\t\t\t\t\t",
                                              "innerTemplate": {
                                                "type": "generic",
                                                "imports": [],
                                                "templateString": "$FERN_INPUT",
                                                "isOptional": true,
                                                "templateInputs": [
                                                  {
                                                    "type": "payload",
                                                    "location": "RELATIVE",
                                                    "path": null
                                                  }
                                                ]
                                              },
                                              "templateInput": {
                                                "location": "BODY",
                                                "path": "octoai.vllm.stop_token_ids"
                                              }
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "topK: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.top_k"
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "type": "template",
                                            "value": {
                                              "type": "generic",
                                              "imports": [],
                                              "templateString": "useBeamSearch: $FERN_INPUT",
                                              "isOptional": true,
                                              "templateInputs": [
                                                {
                                                  "type": "payload",
                                                  "location": "BODY",
                                                  "path": "octoai.vllm.use_beam_search"
                                                }
                                              ]
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "presencePenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "presence_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "repetitionPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "repetition_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "responseFormat: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "dict",
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "schema: {\n\t\t\t\t$FERN_INPUT\n\t\t\t}",
                                        "delimiter": ",\n\t\t\t\t",
                                        "keyValueSeparator": ": ",
                                        "keyTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "valueTemplate": {
                                          "type": "generic",
                                          "imports": [],
                                          "templateString": "$FERN_INPUT",
                                          "isOptional": true,
                                          "templateInputs": [
                                            {
                                              "type": "payload",
                                              "location": "RELATIVE",
                                              "path": null
                                            }
                                          ]
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "response_format.schema"
                                        }
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "type: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "response_format.type"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "streamOptions: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "includeUsage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "stream_options.include_usage"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "temperature: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "temperature"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "topLogprobs: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "top_logprobs"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "topP: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "top_p"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "user: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "user"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.text_gen.create_chat_completion_stream(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "frequency_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "frequency_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "functions=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from octoai.text_gen import Function"],
                              "isOptional": true,
                              "templateString": "Function(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "description=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "description",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "name=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "name",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "parameters=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "parameters",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "functions"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "ignore_eos=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "ignore_eos",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "logit_bias={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "logit_bias"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "max_tokens=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "max_tokens",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "messages=[\n\t\t$FERN_INPUT\n\t]",
                            "delimiter": ",\n\t\t",
                            "innerTemplate": {
                              "imports": ["from octoai.text_gen import ChatMessage"],
                              "isOptional": true,
                              "templateString": "ChatMessage(\n\t\t\t$FERN_INPUT\n\t\t)",
                              "templateInputs": [
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "content=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "content",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": ["from octoai.text_gen import ChatFnCall"],
                                    "isOptional": true,
                                    "templateString": "function_call=ChatFnCall(\n\t\t\t\t$FERN_INPUT\n\t\t\t)",
                                    "templateInputs": [
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "arguments=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "function_call.arguments",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      },
                                      {
                                        "type": "template",
                                        "value": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "name=$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": "function_call.name",
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        }
                                      }
                                    ],
                                    "inputDelimiter": ",\n\t\t\t\t",
                                    "type": "generic"
                                  }
                                },
                                {
                                  "type": "template",
                                  "value": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "role=$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": "role",
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  }
                                }
                              ],
                              "inputDelimiter": ",\n\t\t\t",
                              "type": "generic"
                            },
                            "templateInput": {
                              "location": "BODY",
                              "path": "messages"
                            },
                            "type": "iterable"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "model=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "model",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "n=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "n",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": ["from octoai.text_gen import ChatCompletionRequestExt"],
                            "isOptional": true,
                            "templateString": "octoai=ChatCompletionRequestExt(\n\t\t$FERN_INPUT\n\t)",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "imports": ["from octoai.text_gen import ChatCompletionRequestExtVllm"],
                                  "isOptional": true,
                                  "templateString": "vllm=ChatCompletionRequestExtVllm(\n\t\t\t$FERN_INPUT\n\t\t)",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "best_of=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "ignore_eos=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "skip_special_tokens=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "containerTemplateString": "stop_token_ids=[\n\t\t\t\t$FERN_INPUT\n\t\t\t]",
                                        "delimiter": ",\n\t\t\t\t",
                                        "innerTemplate": {
                                          "imports": [],
                                          "isOptional": true,
                                          "templateString": "$FERN_INPUT",
                                          "templateInputs": [
                                            {
                                              "location": "RELATIVE",
                                              "path": null,
                                              "type": "payload"
                                            }
                                          ],
                                          "type": "generic"
                                        },
                                        "templateInput": {
                                          "location": "BODY",
                                          "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens.vllm.stop_token_ids"
                                        },
                                        "type": "iterable"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "top_k=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens.vllm.stop_token_ids.vllm.top_k",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    },
                                    {
                                      "type": "template",
                                      "value": {
                                        "imports": [],
                                        "isOptional": true,
                                        "templateString": "use_beam_search=$FERN_INPUT",
                                        "templateInputs": [
                                          {
                                            "location": "BODY",
                                            "path": "octoai.vllm.best_of.vllm.ignore_eos.vllm.skip_special_tokens.vllm.stop_token_ids.vllm.top_k.vllm.use_beam_search",
                                            "type": "payload"
                                          }
                                        ],
                                        "type": "generic"
                                      }
                                    }
                                  ],
                                  "inputDelimiter": ",\n\t\t\t",
                                  "type": "generic"
                                }
                              }
                            ],
                            "inputDelimiter": ",\n\t\t",
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "presence_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "presence_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "repetition_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "repetition_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": ["from octoai.text_gen import ChatCompletionResponseFormat"],
                            "isOptional": true,
                            "templateString": "response_format=ChatCompletionResponseFormat(\n\t\t$FERN_INPUT\n\t)",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "schema={\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyTemplate": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  },
                                  "valueTemplate": {
                                    "imports": [],
                                    "isOptional": true,
                                    "templateString": "$FERN_INPUT",
                                    "templateInputs": [
                                      {
                                        "location": "RELATIVE",
                                        "path": null,
                                        "type": "payload"
                                      }
                                    ],
                                    "type": "generic"
                                  },
                                  "keyValueSeparator": ": ",
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "response_format.schema"
                                  },
                                  "type": "dict"
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "imports": [],
                                  "isOptional": true,
                                  "templateString": "type=$FERN_INPUT",
                                  "templateInputs": [
                                    {
                                      "location": "BODY",
                                      "path": "response_format.type",
                                      "type": "payload"
                                    }
                                  ],
                                  "type": "generic"
                                }
                              }
                            ],
                            "inputDelimiter": ",\n\t\t",
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "temperature=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "temperature",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "top_p=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "top_p",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "user=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "user",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://text.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://text.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create-completion-stream",
                "migratedFromUrlSlugs": ["create-completion"],
                "method": "POST",
                "id": "createCompletion_stream",
                "originalEndpointId": "endpoint_text-gen.createCompletion_stream",
                "name": "Create Completion",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/completions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Number of sequences that are generated from the prompt.`best_of` must be greater than or equal to `n`.",
                        "key": "best_of",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Echo back the prompt in addition to the completion.",
                        "key": "echo",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Penalizes new tokens based on their frequency in the generated text so far.",
                        "key": "frequency_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "key": "logit_bias",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "optional",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "double"
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "Switch on loglikelihood regime and return log probabilities from all prompt tokens from prefill.",
                        "key": "loglikelihood",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "logprobs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 5
                            }
                          }
                        }
                      },
                      {
                        "description": "Maximum number of tokens to generate per output sequence.",
                        "key": "max_tokens",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 16
                            }
                          }
                        }
                      },
                      {
                        "description": "Model name to use for completion.",
                        "key": "model",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Number of output sequences to return.",
                        "key": "n",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Penalizes new tokens based on whether they appear in the generated text so far",
                        "key": "presence_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "The prompt to generate completions from.",
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:Prompt"
                          }
                        }
                      },
                      {
                        "description": "Controls the likelihood of the model generating repeated texts",
                        "key": "repetition_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "seed",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "Strings that stop the generation when they are generated.",
                        "key": "stop",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:Stop"
                          }
                        }
                      },
                      {
                        "description": "If set, tokens will be streamed incrementally to users.",
                        "key": "stream",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "booleanLiteral",
                            "value": true
                          }
                        }
                      },
                      {
                        "key": "stream_options",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:StreamOptions"
                          }
                        }
                      },
                      {
                        "key": "suffix",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the randomness of the sampling.",
                        "key": "temperature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": 0,
                              "maximum": 2,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the cumulative probability of the top tokens to consider.",
                        "key": "top_p",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "maximum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "user",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "stream",
                    "shape": {
                      "type": "reference",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:CompletionResponse"
                      }
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:ErrorResponse"
                      }
                    },
                    "statusCode": 500,
                    "description": "Internal Server Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "message": "An example error",
                            "object": "error",
                            "type": "internal_error"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 200,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createCompletion({\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "model": "string",
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "stream",
                      "value": [
                        {
                          "choices": [
                            {
                              "finish_reason": "stop",
                              "index": 0,
                              "logprobs": {
                                "content": [
                                  {
                                    "bytes": [{}],
                                    "logprob": 1,
                                    "token": "string",
                                    "top_logprobs": [
                                      {
                                        "bytes": [{}],
                                        "logprob": 1,
                                        "token": "string"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "text": "string"
                            }
                          ],
                          "created": 0,
                          "id": "string",
                          "model": "string",
                          "object": {},
                          "system_fingerprint": "string",
                          "usage": {
                            "completion_tokens": 0,
                            "prompt_tokens": 0,
                            "total_tokens": 0
                          }
                        },
                        {
                          "choices": [
                            {
                              "finish_reason": "stop",
                              "index": 0,
                              "logprobs": {
                                "content": [
                                  {
                                    "bytes": [{}],
                                    "logprob": 1,
                                    "token": "string",
                                    "top_logprobs": [
                                      {
                                        "bytes": [{}],
                                        "logprob": 1,
                                        "token": "string"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "text": "string"
                            }
                          ],
                          "created": 0,
                          "id": "string",
                          "model": "string",
                          "object": {},
                          "system_fingerprint": "string",
                          "usage": {
                            "completion_tokens": 0,
                            "prompt_tokens": 0,
                            "total_tokens": 0
                          }
                        }
                      ]
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createCompletion({\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "model": "string",
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createCompletion({\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "model": "string",
                        "stream": true
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "object": "string",
                        "param": "string",
                        "type": "string",
                        "validation_errors": {
                          "string": "string"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.textGen.createCompletionStream(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "bestOf: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "best_of"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "echo: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "echo"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "frequencyPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "frequency_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "logitBias: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "logit_bias"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "loglikelihood: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "loglikelihood"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "logprobs: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "logprobs"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "maxTokens: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "max_tokens"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "model: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "model"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "n: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "n"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "presencePenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "presence_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "repetitionPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "repetition_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "seed: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "seed"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "streamOptions: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "includeUsage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "stream_options.include_usage"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "suffix: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "suffix"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "temperature: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "temperature"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "topP: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "top_p"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "user: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "user"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.text_gen.create_completion_stream(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "best_of=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "best_of",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "echo=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "echo",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "frequency_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "frequency_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "logit_bias={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "logit_bias"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "logprobs=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "logprobs",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "max_tokens=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "max_tokens",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "model=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "model",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "n=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "n",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "presence_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "presence_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "repetition_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "repetition_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "seed=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "seed",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "suffix=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "suffix",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "temperature=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "temperature",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "top_p=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "top_p",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "user=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "user",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              },
              {
                "environments": [
                  {
                    "id": "Production",
                    "baseUrl": "https://text.octoai.run"
                  },
                  {
                    "id": "SecureLink",
                    "baseUrl": "https://text.securelink.octo.ai"
                  }
                ],
                "defaultEnvironment": "Production",
                "urlSlug": "create-completion",
                "method": "POST",
                "id": "createCompletion",
                "originalEndpointId": "endpoint_text-gen.createCompletion",
                "name": "Create Completion",
                "path": {
                  "pathParameters": [],
                  "parts": [
                    {
                      "type": "literal",
                      "value": ""
                    },
                    {
                      "type": "literal",
                      "value": "/v1/completions"
                    }
                  ]
                },
                "queryParameters": [],
                "headers": [],
                "request": {
                  "contentType": "application/json",
                  "type": {
                    "type": "object",
                    "extends": [],
                    "properties": [
                      {
                        "description": "Number of sequences that are generated from the prompt.`best_of` must be greater than or equal to `n`.",
                        "key": "best_of",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Echo back the prompt in addition to the completion.",
                        "key": "echo",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "description": "Penalizes new tokens based on their frequency in the generated text so far.",
                        "key": "frequency_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "key": "logit_bias",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "map",
                            "keyType": {
                              "type": "primitive",
                              "value": {
                                "type": "string"
                              }
                            },
                            "valueType": {
                              "type": "optional",
                              "itemType": {
                                "type": "primitive",
                                "value": {
                                  "type": "double"
                                }
                              }
                            }
                          }
                        }
                      },
                      {
                        "description": "Switch on loglikelihood regime and return log probabilities from all prompt tokens from prefill.",
                        "key": "loglikelihood",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "boolean"
                            }
                          }
                        }
                      },
                      {
                        "key": "logprobs",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 0,
                              "maximum": 5
                            }
                          }
                        }
                      },
                      {
                        "description": "Maximum number of tokens to generate per output sequence.",
                        "key": "max_tokens",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 16
                            }
                          }
                        }
                      },
                      {
                        "description": "Model name to use for completion.",
                        "key": "model",
                        "valueType": {
                          "type": "primitive",
                          "value": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "description": "Number of output sequences to return.",
                        "key": "n",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "minimum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Penalizes new tokens based on whether they appear in the generated text so far",
                        "key": "presence_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": -2,
                              "maximum": 2,
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "The prompt to generate completions from.",
                        "key": "prompt",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:Prompt"
                          }
                        }
                      },
                      {
                        "description": "Controls the likelihood of the model generating repeated texts",
                        "key": "repetition_penalty",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "seed",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "integer",
                              "default": 0
                            }
                          }
                        }
                      },
                      {
                        "description": "Strings that stop the generation when they are generated.",
                        "key": "stop",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:Stop"
                          }
                        }
                      },
                      {
                        "description": "If set, tokens will be streamed incrementally to users.",
                        "key": "stream",
                        "valueType": {
                          "type": "literal",
                          "value": {
                            "type": "booleanLiteral",
                            "value": false
                          }
                        }
                      },
                      {
                        "key": "stream_options",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "id",
                            "value": "type_text-gen:StreamOptions"
                          }
                        }
                      },
                      {
                        "key": "suffix",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the randomness of the sampling.",
                        "key": "temperature",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "minimum": 0,
                              "maximum": 2,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "description": "Controls the cumulative probability of the top tokens to consider.",
                        "key": "top_p",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "double",
                              "maximum": 1,
                              "default": 1
                            }
                          }
                        }
                      },
                      {
                        "key": "user",
                        "valueType": {
                          "type": "optional",
                          "itemType": {
                            "type": "primitive",
                            "value": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "response": {
                  "type": {
                    "type": "reference",
                    "value": {
                      "type": "id",
                      "value": "type_text-gen:CompletionResponse"
                    }
                  }
                },
                "errors": [],
                "errorsV2": [
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:HTTPValidationError"
                      }
                    },
                    "statusCode": 422,
                    "description": "Validation Error",
                    "examples": []
                  },
                  {
                    "type": {
                      "type": "alias",
                      "value": {
                        "type": "id",
                        "value": "type_text-gen:ErrorResponse"
                      }
                    },
                    "statusCode": 500,
                    "description": "Internal Server Error",
                    "examples": [
                      {
                        "responseBody": {
                          "type": "json",
                          "value": {
                            "message": "An example error",
                            "object": "error",
                            "type": "internal_error"
                          }
                        }
                      }
                    ]
                  }
                ],
                "examples": [
                  {
                    "path": "/v1/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "requestBody": {
                      "model": "model",
                      "stream": false
                    },
                    "responseStatusCode": 200,
                    "responseBody": {
                      "choices": [
                        {
                          "finish_reason": "stop",
                          "index": 1,
                          "text": "text"
                        }
                      ],
                      "created": 1,
                      "id": "id",
                      "model": "model",
                      "object": {
                        "key": "value"
                      },
                      "system_fingerprint": "system_fingerprint",
                      "usage": {
                        "completion_tokens": 1,
                        "prompt_tokens": 1,
                        "total_tokens": 1
                      }
                    },
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createCompletion({\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "model": "model",
                        "stream": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "choices": [
                          {
                            "finish_reason": "stop",
                            "index": 1,
                            "text": "text"
                          }
                        ],
                        "created": 1,
                        "id": "id",
                        "model": "model",
                        "object": {
                          "key": "value"
                        },
                        "system_fingerprint": "system_fingerprint",
                        "usage": {
                          "completion_tokens": 1,
                          "prompt_tokens": 1,
                          "total_tokens": 1
                        }
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 422,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createCompletion({\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "model": "string",
                        "stream": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "detail": [
                          {
                            "loc": ["string"],
                            "msg": "string",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "codeSamples": []
                  },
                  {
                    "path": "/v1/completions",
                    "pathParameters": {},
                    "queryParameters": {},
                    "headers": {},
                    "responseStatusCode": 500,
                    "codeExamples": {
                      "nodeAxios": "",
                      "pythonSdk": {
                        "type": "python",
                        "sdk": {
                          "version": "1.0.3",
                          "package": "octoai"
                        },
                        "async_client": "from octoai.client import AsyncOctoAI\n\nclient = AsyncOctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nawait client.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n",
                        "sync_client": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)\nclient.text_gen.create_completion_stream(\n    best_of=1,\n    echo=True,\n    frequency_penalty=1.1,\n    logit_bias={\"string\": {\"key\": \"value\"}},\n    logprobs=1,\n    max_tokens=1,\n    model=\"string\",\n    n=1,\n    presence_penalty=1.1,\n    prompt=\"string\",\n    repetition_penalty=1.1,\n    seed=1,\n    stop=\"string\",\n    suffix=\"string\",\n    temperature=1.1,\n    top_p=1.1,\n    user=\"string\",\n)\n"
                      },
                      "typescriptSdk": {
                        "type": "typescript",
                        "sdk": {
                          "version": "1.1.4",
                          "package": "@octoai/sdk"
                        },
                        "client": "import { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\nawait octoAi.textGen.createCompletion({\n    model: \"model\",\n    stream: false\n});\n"
                      }
                    },
                    "requestBodyV3": {
                      "type": "json",
                      "value": {
                        "model": "string",
                        "stream": false
                      }
                    },
                    "responseBodyV3": {
                      "type": "json",
                      "value": {
                        "code": "string",
                        "message": "string",
                        "object": "string",
                        "param": "string",
                        "type": "string",
                        "validation_errors": {
                          "string": "string"
                        }
                      }
                    },
                    "codeSamples": []
                  }
                ],
                "authed": false,
                "snippetTemplates": {
                  "typescript": {
                    "type": "v1",
                    "functionInvocation": {
                      "type": "generic",
                      "imports": [],
                      "templateString": "await octoAi.textGen.createCompletionStream(\n\t$FERN_INPUT\n)",
                      "isOptional": false,
                      "inputDelimiter": ",\n\t",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "type": "generic",
                            "imports": [],
                            "templateString": "{\n\t\t$FERN_INPUT\n\t}",
                            "isOptional": true,
                            "inputDelimiter": ",\n\t\t",
                            "templateInputs": [
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "bestOf: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "best_of"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "echo: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "echo"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "frequencyPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "frequency_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "dict",
                                  "imports": [],
                                  "isOptional": true,
                                  "containerTemplateString": "logitBias: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "delimiter": ",\n\t\t\t",
                                  "keyValueSeparator": ": ",
                                  "keyTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "valueTemplate": {
                                    "type": "generic",
                                    "imports": [],
                                    "templateString": "$FERN_INPUT",
                                    "isOptional": true,
                                    "templateInputs": [
                                      {
                                        "type": "payload",
                                        "location": "RELATIVE",
                                        "path": null
                                      }
                                    ]
                                  },
                                  "templateInput": {
                                    "location": "BODY",
                                    "path": "logit_bias"
                                  }
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "loglikelihood: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "loglikelihood"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "logprobs: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "logprobs"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "maxTokens: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "max_tokens"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "model: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "model"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "n: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "n"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "presencePenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "presence_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "repetitionPenalty: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "repetition_penalty"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "seed: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "seed"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "streamOptions: {\n\t\t\t$FERN_INPUT\n\t\t}",
                                  "isOptional": true,
                                  "inputDelimiter": ",\n\t\t\t",
                                  "templateInputs": [
                                    {
                                      "type": "template",
                                      "value": {
                                        "type": "generic",
                                        "imports": [],
                                        "templateString": "includeUsage: $FERN_INPUT",
                                        "isOptional": true,
                                        "templateInputs": [
                                          {
                                            "type": "payload",
                                            "location": "BODY",
                                            "path": "stream_options.include_usage"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "suffix: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "suffix"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "temperature: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "temperature"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "topP: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "top_p"
                                    }
                                  ]
                                }
                              },
                              {
                                "type": "template",
                                "value": {
                                  "type": "generic",
                                  "imports": [],
                                  "templateString": "user: $FERN_INPUT",
                                  "isOptional": true,
                                  "templateInputs": [
                                    {
                                      "type": "payload",
                                      "location": "BODY",
                                      "path": "user"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "clientInstantiation": "const octoAi = new OctoAIClient({ apiKey: \"YOUR_API_KEY\" });\n"
                  },
                  "python": {
                    "type": "v1",
                    "functionInvocation": {
                      "imports": [],
                      "isOptional": true,
                      "templateString": "client.text_gen.create_completion_stream(\n\t$FERN_INPUT\n)",
                      "templateInputs": [
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "best_of=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "best_of",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "echo=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "echo",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "frequency_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "frequency_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "containerTemplateString": "logit_bias={\n\t\t$FERN_INPUT\n\t}",
                            "delimiter": ",\n\t\t",
                            "keyTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "valueTemplate": {
                              "imports": [],
                              "isOptional": true,
                              "templateString": "$FERN_INPUT",
                              "templateInputs": [
                                {
                                  "location": "RELATIVE",
                                  "path": null,
                                  "type": "payload"
                                }
                              ],
                              "type": "generic"
                            },
                            "keyValueSeparator": ": ",
                            "templateInput": {
                              "location": "BODY",
                              "path": "logit_bias"
                            },
                            "type": "dict"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "logprobs=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "logprobs",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "max_tokens=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "max_tokens",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "model=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "model",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "n=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "n",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "presence_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "presence_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "repetition_penalty=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "repetition_penalty",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "seed=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "seed",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "suffix=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "suffix",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "temperature=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "temperature",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "top_p=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "top_p",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        },
                        {
                          "type": "template",
                          "value": {
                            "imports": [],
                            "isOptional": true,
                            "templateString": "user=$FERN_INPUT",
                            "templateInputs": [
                              {
                                "location": "BODY",
                                "path": "user",
                                "type": "payload"
                              }
                            ],
                            "type": "generic"
                          }
                        }
                      ],
                      "inputDelimiter": ",\n\t",
                      "type": "generic"
                    },
                    "clientInstantiation": "from octoai.client import OctoAI\n\nclient = OctoAI(\n    api_key=\"YOUR_API_KEY\",\n)"
                  }
                }
              }
            ],
            "types": [
              "type_text-gen:Stop",
              "type_text-gen:Prompt",
              "type_text-gen:ChatCompletionChoice",
              "type_text-gen:ChatCompletionChunk",
              "type_text-gen:ChatCompletionChunkChoice",
              "type_text-gen:ChatCompletionDelta",
              "type_text-gen:ChatCompletionRequestExt",
              "type_text-gen:ChatCompletionRequestExtVLLM",
              "type_text-gen:ChatCompletionResponse",
              "type_text-gen:ChatCompletionResponseFormat",
              "type_text-gen:ChatMessage",
              "type_text-gen:CompletionChoice",
              "type_text-gen:CompletionResponse",
              "type_text-gen:ErrorResponseValidationErrorsValue",
              "type_text-gen:ErrorResponse",
              "type_text-gen:FinishReason",
              "type_text-gen:FunctionCall",
              "type_text-gen:HTTPValidationError",
              "type_text-gen:Logprobs",
              "type_text-gen:LogprobsContent",
              "type_text-gen:StreamOptions",
              "type_text-gen:ToolCall",
              "type_text-gen:TopLogprobs",
              "type_text-gen:UsageStats",
              "type_text-gen:ValidationErrorLocItem",
              "type_text-gen:ValidationError"
            ],
            "subpackages": [],
            "urlSlug": "text-gen",
            "webhooks": [],
            "websockets": []
          }
        },
        "auth": {
          "type": "bearerAuth",
          "tokenName": "api_key"
        },
        "hasMultipleBaseUrls": true,
        "globalHeaders": []
      }
    },
    "files": {
      "28634fb5-e7bf-48e5-8950-ec75598f9a33": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/fonts/Faktum-Regular.woff2",
      "67ace420-e431-4047-9031-39b01a0815f9": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/fonts/Faktum-Medium.woff2",
      "d2caeedb-042a-459b-a10e-9d090167ea4f": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/fonts/Faktum-SemiBold.woff2",
      "25b9c627-4c15-4398-be27-8040160c2b74": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/images/logo/octoai-logo-dark.svg",
      "3f0a7ef8-4d3c-4ee5-b046-cbc13cef6274": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/images/logo/octoai-logo-light.svg",
      "d2848057-bb27-44c5-9e9f-5e358a6a9c29": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/favicon.png",
      "a1db33e3-0540-4764-92e6-e56ce4eb32e0": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/images/gradient-bg-dark.webp",
      "12c01624-1783-4e1e-9ffe-2034acd4154c": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/images/gradient-bg-light.svg",
      "236355ae-c997-4c10-b18a-bce6f4c79fa0": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/images/quickstart-curl-example.png",
      "401c961a-1481-4717-a837-10a0dca52fa7": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/logos/langchain.svg",
      "7556700f-ad9f-4b95-924f-73c87af7d36b": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/logos/unstructured.svg",
      "f8d07fb4-b1e4-4adf-8678-8c3b4e1dc1b2": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/logos/pinecone.svg",
      "17ed68ed-3f3b-4863-bc65-a716d640f557": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/logos/openrouter.svg",
      "e7159389-f6f1-4bfa-8fc1-d2cc7256b0da": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/logos/llamaindex.svg",
      "5679d19e-04a2-4ed2-ba89-1fb38e521adf": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/icons/heart.svg",
      "a090b4d6-cbde-4b2b-ba94-e021f246f037": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/icons/plus.svg",
      "ed68d643-84cd-40c7-8745-0557b4e9c857": "https://fdr-prod-docs-files.s3.us-east-1.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20%3A51%3A57.535Z/docs/assets/icons/check.svg"
    },
    "filesV2": {
      "28634fb5-e7bf-48e5-8950-ec75598f9a33": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/fonts/Faktum-Regular.woff2"
      },
      "67ace420-e431-4047-9031-39b01a0815f9": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/fonts/Faktum-Medium.woff2"
      },
      "d2caeedb-042a-459b-a10e-9d090167ea4f": {
        "type": "url",
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/fonts/Faktum-SemiBold.woff2"
      },
      "25b9c627-4c15-4398-be27-8040160c2b74": {
        "type": "image",
        "width": 1295,
        "height": 336,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/images/logo/octoai-logo-dark.svg"
      },
      "3f0a7ef8-4d3c-4ee5-b046-cbc13cef6274": {
        "type": "image",
        "width": 1295,
        "height": 336,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/images/logo/octoai-logo-light.svg"
      },
      "d2848057-bb27-44c5-9e9f-5e358a6a9c29": {
        "type": "image",
        "width": 32,
        "height": 32,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/favicon.png"
      },
      "a1db33e3-0540-4764-92e6-e56ce4eb32e0": {
        "type": "image",
        "width": 1440,
        "height": 798,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/images/gradient-bg-dark.webp"
      },
      "12c01624-1783-4e1e-9ffe-2034acd4154c": {
        "type": "image",
        "width": 1440,
        "height": 798,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/images/gradient-bg-light.svg"
      },
      "236355ae-c997-4c10-b18a-bce6f4c79fa0": {
        "type": "image",
        "width": 696,
        "height": 554,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/images/quickstart-curl-example.png"
      },
      "401c961a-1481-4717-a837-10a0dca52fa7": {
        "type": "image",
        "width": 492,
        "height": 250,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/logos/langchain.svg"
      },
      "7556700f-ad9f-4b95-924f-73c87af7d36b": {
        "type": "image",
        "width": 1200,
        "height": 1200,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/logos/unstructured.svg"
      },
      "f8d07fb4-b1e4-4adf-8678-8c3b4e1dc1b2": {
        "type": "image",
        "width": 256,
        "height": 288,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/logos/pinecone.svg"
      },
      "17ed68ed-3f3b-4863-bc65-a716d640f557": {
        "type": "image",
        "width": 460,
        "height": 460,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/logos/openrouter.svg"
      },
      "e7159389-f6f1-4bfa-8fc1-d2cc7256b0da": {
        "type": "image",
        "width": 1920,
        "height": 1920,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/logos/llamaindex.svg"
      },
      "5679d19e-04a2-4ed2-ba89-1fb38e521adf": {
        "type": "image",
        "width": 512,
        "height": 512,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/icons/heart.svg"
      },
      "a090b4d6-cbde-4b2b-ba94-e021f246f037": {
        "type": "image",
        "width": 448,
        "height": 512,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/icons/plus.svg"
      },
      "ed68d643-84cd-40c7-8745-0557b4e9c857": {
        "type": "image",
        "width": 448,
        "height": 512,
        "url": "https://fdr-prod-docs-files-public.s3.amazonaws.com/octoai.docs.buildwithfern.com/docs/2024-05-30T20:51:57.535Z/docs/assets/icons/check.svg"
      }
    },
    "pages": {
      "docs/getting-started/quickstart.mdx": {
        "markdown": "---\ntitle: Quickstart\nsubtitle: Start using our GenAI Solutions in one minute.\nslug: getting-started/quickstart\nimage: 'https://www.datocms-assets.com/45680/1715896588-octoai-docs-quickstart.png'\n---\n\nWelcome to OctoAI! Our mission is to enable users to harness value from the latest AI innovations by delievering efficient, reliable, and customizable AI systems for your apps. Run your models or checkpoints on our cost-effective API endpoints, or run our optimized GenAI stack in your environment.\n\n## Get started with inference\n\n1. [Sign up for an account](https://identity.octo.ai/oauth/account/sign-up?redirectUrl=https://octoai.cloud) - new users get $10 of free credits\n2. Run your first inference:\n\n- Navigate to a [model page](https://octoai.cloud/text/chat?model=mixtral-8x7b-instruct&mode=api) and click **Get API Token**:\n  ![](file:236355ae-c997-4c10-b18a-bce6f4c79fa0)\n- Copy the code sample to run an inference:\n\n```bash cURL\ncurl -X POST \"https://text.octoai.run/v1/chat/completions\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Hello world\"\n            }\n        ],\n        \"model\": \"mixtral-8x7b-instruct\",\n        \"max_tokens\": 512,\n        \"presence_penalty\": 0,\n        \"temperature\": 0.1,\n        \"top_p\": 0.9\n    }'\n```\n\n## Next steps\n\n- Check out the wide variety of [text generation models](https://octoai.cloud/text) and [media generation models](https://octoai.cloud/media) models we support.\n- Learn more about our [Text Gen Solution](/docs/text-gen-solution/getting-started), [Media Gen Solution](/docs/media-gen-solution/getting-started), or [OctoStack](/docs/private-deployment/octostack).\n- Explore our [demos](https://octo.ai/demos/) to see OctoAI in action.\n\n## Additional Resources\n\n- [Pricing & billing](pricing-and-billing)\n- [Support](https://discord.gg/rXTPeRBcG7)\n"
      },
      "docs/getting-started/pricing-and-billing.mdx": {
        "markdown": "---\ntitle: Pricing & billing\nsubtitle: Only pay for what you use.\nslug: getting-started/pricing-and-billing\n---\n\nAt OctoAI you only pay for what you use. Upon sign up you will receive **$10 of free credit** in your account, and these credits don't expire. That is equivalent of:\n\n- Over a million words of output with the largest Llama 3 70B model and Mixtral 8x7B model.\n- 1,000 SDXL default images and about 66 Stable Video Diffusion animations\n\n## How does billing work?\n\nOctoAI uses post-paid billing - add a credit card and pay for your use at the end of each month. All existing credits will remain available within your account and will be used before any post-paid billing is applied.\n\nOn the 1st day of each month, we’ll send an invoice so you can see the upcoming charge. On the 7th day of each month, we’ll charge the card on file for the prior billing period. If there’s an issue charging your credit card, you can manually pay via the invoice.\n\n### Where can I find my billing data?\n\nYou can view your plan tier, invoices, and itemized usage for all OctoAI services in [Billing & Usage](https://octoai.cloud/usage/billing) in your account at anytime.\n\n### What are the rate limits for each solution?\n\nSee [rate limits](/docs/faqs/rate-limits) for details, and feel free to [contact us](https://octo.ai/contact-us/) to discuss higher limits to meet your needs. You will recieve an HTTP 429 response code if you reach the limit cap.\n\n## Media Gen Solution\n\nBelow is a full feature breakdown of the Media Gen Solution tiers.\n\n|                                                                                | Trial          | Pro            | Enterprise                                     |\n| ------------------------------------------------------------------------------ | -------------- | -------------- | ---------------------------------------------- |\n| SDXL and SD 1.5 text2img, SVD image animation, img2img, Inpainting, ControlNet | Cost-optimized | Cost-optimized | Option for Cost-optimized or Latency-optimized |\n| Custom Assets (checkpoints, loras, inversions, VAEs)                           | ❌             | ✅             | ✅                                             |\n| Upscaler                                                                       | ✅             | ✅             | ✅                                             |\n| Option for SLA guarantees                                                      | ❌             | ❌             | ✅                                             |\n| Option for Private Deployment (at higher price)                                | ❌             | ❌             | ✅                                             |\n| Dedicated Customer Success Manager                                             | ❌             | ❌             | ✅                                             |\n\n#### Pro pricing for Media Gen Solution\n\nPricing for default image features and configurations are below:\n\n| Feature Type                                  | Steps | Resolution    | Sampler                                    | Price                                           |\n| --------------------------------------------- | ----- | ------------- | ------------------------------------------ | ----------------------------------------------- |\n| SVD 1.1                                       | 25    | all supported | N/A                                        | $0.15/animation                                 |\n| SDXL                                          | 30    | 1024x1024     | DDIM (and any not listed below as premium) | $0.004/image                                    |\n| SDXL with Custom Asset (Fine-tuned)           | 30    | 1024x1024     | DDIM (and any not listed below as premium) | $0.008/image                                    |\n| SDXL Lightning base                           | 4     | 1024x1024     | DDIM (and any not listed below as premium) | $0.001/image                                    |\n| SDXL Lightning Custom Asset (Fine-tuned)      | 4     | 1024x1024     | DDIM (and any not listed below as premium) | $0.005/image                                    |\n| SDXL Fine-tuning                              | 500   | N/A           | N/A                                        | $0.25/tune                                      |\n| SD 1.5 with Base or Custom Asset (Fine-tuned) | 30    | 512x512       | DDIM (and any not listed below as premium) | $0.0015/image                                   |\n| SD1.5 Fine-tuning                             | 500   | N/A           | N/A                                        | $0.1/tune                                       |\n| Asset library (storage)                       | N/A   | N/A           | N/A                                        | $0.05/GB stored per month, after the first 50GB |\n| Upscaling                                     | N/A   | N/A           | N/A                                        | $0.004/request                                  |\n| Background Removal                            | N/A   | N/A           | N/A                                        | $0.002/request                                  |\n| Photo Merge                                   | 30    | 1024x1024     | N/A                                        | $0.015/image                                    |\n| Adetailer                                     | N/A   | N/A           | N/A                                        | $0.0004/object                                  |\n\nThe price for each feature type changes as listed below for non-default configurations:\n\n| Configuration Type                                                             | Price Formula                              |\n| ------------------------------------------------------------------------------ | ------------------------------------------ |\n| Image Animation Steps                                                          | Default price \\* (step_count/25)           |\n| Image Generation Steps                                                         | Default price \\* (step_count/30)           |\n| SDXL Resolutions                                                               | Default price \\*(pixel_count/(1024\\*1024)) |\n| SD1.5 Resolutions                                                              | Default price \\* (pixel_count/(512\\*512))  |\n| Premium Samplers: DPM_2, DPM_2_ANCESTRAL, DPM_PLUS_PLUS_SDE_KARRAS, HEUN, KLMS | Default price \\*2                          |\n| Fine-tuning Steps                                                              | Default price \\* (step_count/500)          |\n\nHere are a few examples to illustrate how this works to assist you in applying to your own use case:\n\n| Feature Type                        | Steps | Resolution | Sampler                   | Price  |\n| ----------------------------------- | ----- | ---------- | ------------------------- | ------ |\n| SDXL                                | 40    | 1024x1024  | DDIM (default)            | $.0053 |\n| SDXL                                | 40    | 1024x1024  | DPM_2_ANCESTRAL (premium) | $.0107 |\n| SDXL Lightning base                 | 4     | 1024x1024  | DDIM (default)            | $.001  |\n| SDXL Lightning with Custom Asset    | 4     | 1024x1024  | DDIM (default)            | $.005  |\n| SDXL with Custom Asset (Fine-tuned) | 60    | 1024x1024  | DDIM (default)            | $.016  |\n| SDXL with Custom Asset (Fine-tuned) | 60    | 1024x1024  | DPM_2 (premium)           | $.032  |\n| SDXL Fine-tuning                    | 1000  | N/A        | N/A                       | $.5    |\n| SD 1.5                              | 40    | 512x512    | DDIM (default)            | $.002  |\n| SD1.5                               | 60    | 1024x1024  | DDIM (default)            | $.003  |\n| SD1.5                               | 40    | 1024x1024  | DPM_2 (premium)           | $.009  |\n\n## Text Gen Solution\n\nWe offer simple, competitive token-based pricing for text gen endpoints, with prices varying depending on parameter size and quantization level:\n\n| Model Sizes          | Per M Tokens |\n| -------------------- | ------------ |\n| Mixtral-8x7B models  | $0.45        |\n| Mixtral-8x22B models | $1.20        |\n| 7B and 8B models     | $0.15        |\n| 13B models           | $0.20        |\n| 32B models           | $0.75        |\n| 34B models           | $0.75        |\n| 70B models           | $0.90        |\n| GTE-large            | $0.05        |\n\nIf you would like to explore pricing for other models, quantization levels, or specific fine tunes, [contact us](https://octo.ai/contact-us/).\n\n## Compute Service\n\n|                                                                 | Trial | Pro | Enterprise   |\n| --------------------------------------------------------------- | ----- | --- | ------------ |\n| Deploy endpoint from any container (private or public registry) | ✅    | ✅  | ✅           |\n| Example models from community                                   | ✅    | ✅  | ✅           |\n| CLI and SDK for containerizing + deploying Python models        | ✅    | ✅  | ✅           |\n| Max endpoints per account                                       | 2     | 10  | No limit     |\n| Max replicas per endpoint                                       | 3     | 10  | No limit     |\n| Auto-acceleration of PyTorch models                             | ❌    | ❌  | Early access |\n| Dedicated Customer Success Manager                              | ❌    | ❌  | ✅           |\n\n#### Pro pricing for Compute Service\n\n1. **Large 80**: A100 GPU with 80GB memory @ \\$0.00145 per second (\\~$5.20 per hour)\n2. **Large 40**: A100 GPU with 40GB memory @ \\$0.00114 per second (\\~$4.10 per hour)\n3. **Medium**: A10 GPU with 24GB memory @ \\$0.00032 per second (\\~$1.15 per hour)\n4. **Small**: T4 GPU with 16GB memory @ \\$0.00011 per second (\\~$0.40 per hour)\n\nBilling is by the second of compute usage, starting at the time when the endpoint is ready for inferences. The time when the endpoint is ready for inferences is when either the healtcheck on your end point begins returning 200, or if there is no healthcheck, the time you see the “Replica is running” log line in your events tab.\n\n- You **will be** billed for the total inference duration and timeout duration\n- You will **not** be billed for the duration of cold start\n\nExample models in the platform have a pre-set hardware / pricing tier. If you create an endpoint from a custom model, you can choose the tier best suited to your needs.\n"
      },
      "docs/text-gen-solution/rest-api.mdx": {
        "markdown": "---\ntitle: Text Gen REST API\nsubtitle: >-\n  All OctoAI text generation models are accessible via REST API. Learn how to\n  implement with easy to follow code examples.\nslug: text-gen-solution/rest-api\n---\n\nAll of our text generation models are accessible via REST API, and we follow the \"Chat Completions\" standard popularized by OpenAI. Below you can see a simple cURL example and JSON response for our endpoint, along with explnations of all parameters.\n\n### Input Sample\n\n```bash cURL\ncurl -X POST \"https://text.octoai.run/v1/chat/completions\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant. Keep your responses limited to one short paragraph if possible.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Hello world\"\n            }\n        ],\n        \"model\": \"llama-2-13b-chat\",\n        \"max_tokens\": 128,\n        \"presence_penalty\": 0,\n        \"temperature\": 0.1,\n        \"top_p\": 0.9\n    }'\n```\n\n### Input Parameters\n\n- **model** _(string)_: The model to be used for chat completion. Here is the complete list of presently supported model arguments. For more information regarding these models, see [this description.](/docs/text-gen-solution/getting-started#self-service-models)\n\n```\n  \"llama-2-13b-chat\",\n  \"llama-2-70b-chat\",\n  \"codellama-7b-instruct\",\n  \"codellama-13b-instruct\",\n  \"codellama-34b-instruct\",\n  \"mistral-7b-instruct\"\n  \"mixtral-8x7b-instruct\"\n  \"nous-hermes-2-mixtral-8x7b-dpo\"\n  \"hermes-2-pro-mistral-7b\"\n```\n\n- **max_tokens** _(integer, optional)_: The maximum number of tokens to generate for the chat completion.\n- **messages** _(list of objects)_: A list of chat messages, where each message is an object with properties: `role` and `content`. Supported roles are “system”, “assistant”, and “user”.\n- **temperature** _(float, optional)_: A value between 0.0 and 2.0 that controls the randomness of the model's output.\n- **top_p** _(float, optional)_: A value between 0.0 and 1.0 that controls the probability of the model generating a particular token.\n- **stop** _(list of strings, optional)_: A list of strings that the model will stop generating text if it encounters any of them.\n- **frequency_penalty** _(float, optional)_: A value between 0.0 and 1.0 that controls how much the model penalizes generating repetitive responses.\n- **presence_penalty** _(float, optional)_: A value between 0.0 and 1.0 that controls how much the model penalizes generating responses that contain certain words or phrases.\n- **stream** _(boolean, optional)_: Indicates whether the response should be streamed.\n\n### Non-Streaming Response Sample:\n\n```JSON JSON\n{\n  \"id\": \"cmpl-8ea213aece0747aca6d0608b02b57196\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Founded in 1921, Seattle is the mother city of Pacific Northwest. Seattle is the densely populated second-largest city in the state of Washington along with Portland. A small city at heart, Seattle has transformed itself from a small manufacturing town to the contemporary Pacific Northwest hub to its east. The city's charm and frequent unpredictability draw tourists and residents alike. Here are my favorite things about Seattle.\\n* Seattle has a low crime rate and high quality of life.\\n* Seattle has rich history which included the building of the first Pacific Northwest harbor and the development of the Puget Sound irrigation system. Seattle is also home to legendary firm Boeing.\\n\",\n        \"function_call\": null\n      },\n      \"delta\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"created\": 5399,\n  \"model\": \"llama2-70b\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": null,\n  \"usage\": {\n    \"completion_tokens\": 150,\n    \"prompt_tokens\": 571,\n    \"total_tokens\": 721\n  }\n}\n```\n\n### Streaming Response Sample:\n\nOnce parsed to JSON, you will see the content of the streaming response similar to below:\n\n```JSON JSON\n// Starting chunk, note that content is null and finish_reason is also null.\n{\n  \"id\":\"cmpl-994f6307a891454cb0f57b7027f5f113\",\n  \"created\":1700527881,\n  \"model\":\"llama-2-13b-chat\",\n  \"choices\":\n  [\n    {\n      \"index\":0,\n      \"delta\":\n      {\n        \"role\":\"assistant\",\n        \"content\":null\n      },\n      \"finish_reason\":null\n    }\n  ]\n}\n// Ending chunk, note the finish_reason \"length\" instead of null.\n// This means we reached the max tokens allowed in this request.\n// The \"object\" field is \"chat.completion.chunk\" for the body of responses.\n{\n  \"id\":\"cmpl-994f6307a891454cb0f57b7027f5f113\",\n  \"object\":\"chat.completion.chunk\",\n  \"created\":1700527881,\n  \"model\":\"llama-2-13b-chat\",\n  \"choices\":\n  [\n    {\n      \"index\":0,\n      \"delta\":\n      {\n        \"role\":\"assistant\",\n        \"content\":\"\",\n        \"function_call\":null\n      },\n      \"finish_reason\":\"length\"\n    }\n  ]\n}\n```\n\nWithout parsing, the text stream will start with `data:` for each chunk. Below is an example. Please note, the final chunk contains simply `data: [DONE]` as text which can break JSON parsing if not accounted for.\n\n```\ndata: {\"id\": \"cmpl-994f6307a891454cb0f57b7027f5f113\", \"created\": 1700527881, \"model\": \"llama-2-13b-chat\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": null}, \"finish_reason\": null}]}\n\ndata: {\"id\": \"cmpl-994f6307a891454cb0f57b7027f5f113\", \"object\": \"chat.completion.chunk\", \"created\": 1700527881, \"model\": \"llama-2-13b-chat\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"\", \"function_call\": null}, \"finish_reason\": null}]}\n\ndata: {\"id\": \"cmpl-994f6307a891454cb0f57b7027f5f113\", \"object\": \"chat.completion.chunk\", \"created\": 1700527881, \"model\": \"llama-2-13b-chat\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"Hello\", \"function_call\": null}, \"finish_reason\": null}]}\n\ndata: {\"id\": \"cmpl-994f6307a891454cb0f57b7027f5f113\", \"object\": \"chat.completion.chunk\", \"created\": 1700527881, \"model\": \"llama-2-13b-chat\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"!\", \"function_call\": null}, \"finish_reason\": null}]}\n\ndata: {\"id\": \"cmpl-994f6307a891454cb0f57b7027f5f113\", \"object\": \"chat.completion.chunk\", \"created\": 1700527881, \"model\": \"llama-2-13b-chat\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"\", \"function_call\": null}, \"finish_reason\": null}]}\n\ndata: {\"id\": \"cmpl-994f6307a891454cb0f57b7027f5f113\", \"object\": \"chat.completion.chunk\", \"created\": 1700527881, \"model\": \"llama-2-13b-chat\", \"choices\": [{\"index\": 0, \"delta\": {\"role\": \"assistant\", \"content\": \"\", \"function_call\": null}, \"finish_reason\": \"stop\"}]}\n\ndata: [DONE]\n\n```\n\n### Response Parameters\n\nParameters\n\n- **id** _(string)_: A unique identifier for the chat completion.\n- **choices** _(list of objects)_:\n  - This is a list of chat completion choices, each represented as an object.\n  - Each object within the `choices` list contains the following fields:  \n     _ **index** *(integer)*: The position of the choice in the list of generated completions.  \n     _ **message** _(object)_:  \n     _ An object representing the content of the chat completion, which includes:  \n     _ **role** _(string)_: The role associated with the message, typically \"assistant\" for the generated response.  \n     _ **content** *(string)*: The actual text content of the chat completion.  \n     _ **function_call** _(object or null)_: An optional field that may contain information about a function call made within the message. It's usually `null` in standard responses.  \n     _ **delta** *(object or null)*: An optional field that can contain additional metadata about the message, typically `null`.  \n     _ **finish_reason** _(string)_: The reason why the message generation was stopped, such as reaching the maximum length (`\"length\"`).\n- **created** _(integer)_: The Unix timestamp (in seconds) of when the chat completion was created.\n- **model** _(string)_: The model used for the chat completion.\n- **object** _(string)_: The object type, which is always `chat.completion`.\n- **system_fingerprint** _(object or null)_: An optional field that may contain system-specific metadata.\n- **usage** _(object)_:\n  - Usage statistics for the completion request, detailing token usage in the prompt and completion.\n"
      },
      "docs/text-gen-solution/migration-from-openai.mdx": {
        "markdown": "---\ntitle: Migrate from OpenAI to OctoAI in 3 lines of code\nsubtitle: 'If you''ve been using GPT-3.5 or GPT-4, switching to Octo AI is easy!'\nslug: text-gen-solution/migration-from-openai\n---\n\nOctoAI LLMs are available to use through our OpenAI compatible API. Additionally, if you have been building or prototyping using OpenAI's Python SDK you can keep your code as-is and use OctoAI's LLM models.\n\nIn this example, we will show you how to change just three lines of code to make your Python application use OctoAI's Open Source models through OpenAI's Python SDK.\n\n## What you will build\n\nMigrate OpenAI's Python SDK example script to use OctoAI's LLM endpoints.\n\nThese are the three modifications necessary to achieve our goal:\n\n1. Redefine `OPENAI_API_KEY` your API key environment variable to use your OctoAI key.\n2. Redefine `OPENAI_BASE_URL` to point to `https://text.octoai.run/v1`\n3. Change the model name to an Open Source model, for example: `llama-2-13b-chat`\n\n## Requirements\n\nWe will be using Python and OpenAI's Python SDK.\n\n## Instructions\n\n- Set up a Python virtual environment. Read _Creating Virtual Environments_ [here](https://docs.python.org/3/library/venv.html).\n\n```bash\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n- Install the pip requirements in your local python virtual environment\n\n```bash\npython3 -m pip install openai\n```\n\n### Environment setup\n\nTo run this example, there are simple steps to take:\n\n- Get an OctoAI API token by following [these instructions](/docs/getting-started/how-to-create-an-octoai-access-token/).\n- Expose the token in a new `OCTOAI_TOKEN` environment variable:\n\n```bash\nexport OCTOAI_TOKEN=<your-token>\n```\n\n- Switch the OpenAI token and base URL environment variable\n\n```bash\nexport OPENAI_API_KEY=$OCTOAI_TOKEN\nexport OPENAI_BASE_URL=\"https://text.octoai.run/v1\"\n```\n\nIf you prefer, you can also directly paste your token into the client initialization.\n\n### Example code\n\nOnce you've completed the steps above, the code below will call OctoAI LLMs:\n\n```python\nfrom openai import OpenAI\n\nclient = OpenAI()\n\ncompletion = octoai.text_gen.create_chat_completion(\n    # model=\"gpt-3.5-turbo\",\n    model=\"llama-2-13b-chat\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Hello!\"},\n    ],\n)\n\nprint(completion.choices[0].message)\n```\n\nNote that you need to supply one of OctoAI's supported LLMs as an argument, as in the example above. For a complete list of our supported LLMs, check out our [REST API page](/docs/text-gen-solution/rest-api#input-parameters).\n\n### Example output\n\nThe code above produces the following object:\n\n```python\n\nChatCompletionMessage(content=\"  Hello! How can I assist you today? Do you have any questions or tasks you'd like help with? Please let me know and I'll do my best to assist you.\", role='assistant' function_call=None, tool_calls=None)\n\n```\n"
      },
      "docs/media-gen-solution/rest-apis/image-gen-api.mdx": {
        "markdown": "---\ntitle: Image Gen REST API\nslug: media-gen-solution/rest-apis/image-gen-api\n---\n\nAll of our image generation models are accessible via REST API. Below you can see a simple cURL/Python SDK and TypeScript SDK example for our image gen endpoints, along with explanations of all parameters.\n\nOur URL for image generations is at `https://image.octoai.run/generate/{engine_id}`, where engine_id is one of the following:\n\n1. `sdxl`: Stable DiffusionXL v1.0\n2. `sd`: Stable Diffusion v1.5\n3. `controlnet-sdxl`: ControlNet SDXL\n4. `controlnet-sd15`: ControlNet SD1.5\n\nThis includes text-to-image, image-to-image, controlnets, photo merge, inpainting and outpainting.\n\n**Input Sample**\n\n<CodeGroup>\n```bash cURL\ncurl -H 'Content-Type: application/json' -H \"Authorization: Bearer $OCTOAI_TOKEN\" -X POST \"https://image.octoai.run/generate/sdxl\" \\\n    -d '{\n        \"prompt\": \"The angel of death Hyperrealistic, splash art, concept art, mid shot, intricately detailed, color depth, dramatic, 2/3 face angle, side light, colorful background\",\n        \"negative_prompt\": \"ugly, tiling, poorly drawn hands, poorly drawn feet, poorly drawn face, out of frame, extra limbs, disfigured, deformed, body out of frame, blurry, bad anatomy, blurred, watermark, grainy, signature, cut off, draft\",\n        \"sampler\": \"DDIM\",\n        \"cfg_scale\": 11,\n        \"height\": 1024,\n        \"width\": 1024,\n        \"seed\": 2748252853,\n        \"steps\": 20,\n        \"num_images\": 1,\n        \"high_noise_frac\": 0.7,\n        \"strength\": 0.92,\n        \"use_refiner\": true,\n        \"style_preset\": \"3d-model\"\n    }' > response.json\n```\n\n```Python Python\nimport requests\nimport os\nimport base64\nimport io\nimport PIL.Image\n\ndef _process_test(url):\n\n    OCTOAI_TOKEN = os.environ.get(\"OCTOAI_TOKEN\")\n\n    payload = {\n        \"prompt\": \"Face of a yellow cat, high resolution, sitting on a park bench\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, bad quality\",\n        \"steps\": 30,\n        \"width\": 1024,\n        \"height\": 1024,\n    }\n\n    headers = {\n        \"Authorization\": f\"Bearer {OCTOAI_TOKEN}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    response = requests.post(url, headers=headers, json=payload)\n\n    if response.status_code != 200:\n        print(response.text)\n\n    img_list = response.json()[\"images\"]\n\n    for i, img_info in enumerate(img_list):\n        img_bytes = base64.b64decode(img_info[\"image_b64\"])\n        img = PIL.Image.open(io.BytesIO(img_bytes))\n        img.load()\n        img.save(f\"result_image{i}.jpg\")\n\nif __name__ == \"__main__\":\n    _process_test(\"https://image.octoai.run/generate/sdxl\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSdxl({\n  prompt: \"A photo of a cute cat astronaut in space\",\n  negativePrompt: \"Blurry photo, distortion, low-res, poor quality\",\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n\n### Image Generation Arguments\n\n- `prompt`: A string describing the image to generate.\n  - We currently have a 77 token limit on prompts for SDXL and 231 for SD 1.5\n  - You can use prompt weighting, e.g. `(A tall (beautiful:1.5) woman:1.0) (some other prompt with weight:0.8)` . The weight will be the product of all brackets a token is a member of. The brackets, colons and weights do not count towards the number of tokens.\n- `prompt_2`: This only applies to SDXL. By default, setting only `prompt` copies the input to both `prompt` and `prompt_2`. When `prompt` and `prompt_2` are both set, they have very different functionality. The second prompt is meant for more human readable descriptions of the desired image.\n  - For example, `prompt` is used for \"word salad\" style control of the image. This is the type of prompting you are likely familiar with from SD 1.5\\. Prompts like the following work well:  \n     `prompt = \"photorealistic, high definition, masterpiece, sharp lines\"  \n`  \n     whereas `prompt_2` is meant for more human readable descriptions of the desired image. For example:  \n     `prompt_2 = \"A portrait of a handsome cat wearing a little hat. The cat is in front of a colorful background.  \n`\n- `negative_prompt` `Optional`: A string indicating a prompt for guidance to steer away from. Unused when not provided.\n- `negative_prompt_2`: This only applies to SDXL. This prompt is meant for human readable descriptions of what you don’t want the image, e.g. you would say “Low resolution” in `negative_prompt` then “Bad hands” in `negative_prompt_2`.\n- `sampler` `Optional`: A string specifying which scheduler to use when generating an image. Defaults to `DDIM`. Regular samplers include `DDIM`,`DDPM`,`DPM_PLUS_PLUS_2M_KARRAS`,`DPM_SINGLE`,`DPM_SOLVER_MULTISTEP`,`K_EULER`, `K_EULER_ANCESTRAL`,`PNDM`,`UNI_PC`. Premium samplers (2x price) include `DPM_2`, `DPM_2_ANCESTRAL`,`DPM_PLUS_PLUS_SDE_KARRAS`, `HEUN` and `KLMS`.\n- `height` `Optional`: An integer specifying the height of the output image. Defaults to `1024` for SDXL and `512` for SD 1.5.\n- `width` `Optional`: An integer specifying the width of the output image. Defaults to `1024` for SDXL and `512` for SD 1.5.\n\n**Supported Output Resolutions (Width x Height)** are as follows:\n\nFor SDXL:\n\n```\n(1024, 1024),(896, 1152),(832, 1216),(768,\n1344),(640, 1536),(1536, 640),(1344, 768),\n(1216, 832),(1152, 896)\n```\n\nFor SD1.5\n\n```\n(512, 512),(640, 512),(768, 512),(512, 704),\n(512, 768),(576, 768),(640, 768),(576, 1024),\n(1024, 576)\n```\n\n<Note>\n  `init_image` and `mask_image` will be resized to the specified resolution\n  before applying img2img or inpainting.\n</Note>\n\n- `cfg_scale` `Optional`: How strictly the diffusion process adheres to the prompt text (higher values keep your image closer to your prompt). When not set defaults to `12`.\n- `steps` `Optional`: How many steps of diffusion to perform. The higher this is, the higher the image clarity will be but proportionally increases the runtime. Defaults to `30` when not set.\n- `num_images`: An integer describing the number of images to generate. Defaults to `1`\n- `seed` `Optional`: An integer that fixes the random noise of the model. Using the same seed guarantees the same output image, which can be useful for testing or replication. Use `null` to select a random seed.\n- `use_refiner`: This only applies to SDXL. A boolean `true` or `false` determines whether to use the refiner or not\n- `high_noise_frac` `Optional`: This only applies to SDXL. A floating point or integer determining how much noise should be applied using the base model vs. the refiner. A value of `0.8` will apply the base model at 80% and Refiner at 20%. Defaults to `0.8` when not set.\n- `checkpoint`: Here you can specify a checkpoint either from the OctoAI asset library or your private asset library. Note that using a custom asset increases generation time.\n- `loras`: Here you can specify LoRAs, in name-weight pairs, either from the OctoAI asset library or your private asset library. Note that using a custom asset increases generation time.\n- `textual_inversions`: Here you can specify textual inversions and their corresponding trigger words. Note that using a custom asset increases generation time.\n- `vae`: Here you can specify variational autoencoders. Note that using a custom asset increases generation time.\n\nHere’s an example of how to mix OctoAI assets (checkpoints, loras, and textual_inversions) in the same API request.\n\n<Note>\n  OoctoAI assets require an “octoai:” prefix but your private assets DO NOT.\n  Asset names need to be unique per account\n</Note>\n\n```json\npayload = {\n    ...\n\t\"checkpoint\": \"octoai:realcartoon\",\n    \"loras\": {\n        \"octoai:crayon-style\": 0.7,\n        \"your-custom-lora\": 0.3\n    },\n    \"textual_inversions\": {\n        \"octoai:NegativeXL\": \"negativeXL_D\",\n    },\n\t\"vae\": \"your_vae_name\"\n    ...\n}\n```\n\n- `style_preset` `Optional`: This only applies to SDXL. Used to guide the output image towards a particular style. Defaults to `None`. Supported values for styles present include `base`, `3d-model`, `Abstract`,`Advertising`, `Alien`, `analog-film`, `anime`,`Architectural`, `cinematic`, `Collage`,`comic-book`, `Craft Clay`, `Cubist`,`digital-art`, `Disco`,`Dreamscape`,`Dystopian`, `enhance`, `Fairy Tale`,`fantasy-art`, `Fighting Game`, `Film Noir`, `Flat Papercut`, `Food Photography`, `Gothic`, `Graffiti`, `Grunge`, `HDR`, `Horror`, `Hyperrealism`, `Impressionist`, `isometric`, `Kirigami`, `line-art`,`Long Exposure`,`low-poly`,`Minimalist`,`modeling-compound`,`Monochrome`,`Nautical`,\n  `Neon Noir`,`neon-punk`,`origami`,`Paper Mache`, `Paper Quilling`,`Papercut Collage`,`Papercut Shadow Box`,`photographic`,`pixel-art`,`Pointillism`,`Pop Art`,`Psychedelic`,`Real Estate`,`Renaissance`,`Retro Arcade`,`Retro Game`,`RPG Fantasy`,`Game`,`Silhouette`,`Space`,`Stacked Papercut`,`Stained Glass`,`Steampunk`,`Strategy Game`,`Surrealist`,`Techwear Fashion`,`Thick Layered Papercut`,`tile-texture`,`Tilt-Shift`,\n  `Tribal`,`Typography`,`Watercolor`,`Zentangle`\n\n- `init_image` `Optional`: Only applicable for Img2Img and inpainting use cases i.e. to use an image as a starting point for image generation. Argument takes an image encoded as a string in base64 format.\n  <Note>Use .jpg format to ensure best latency </Note>\n- `strength` `Optional`: Only applicable for img2img use cases. A floating point or integer determines how much noise should be applied. Values that approach `1.0` allow for high variation i.e. ignoring the image entirely, but will also produce images that are not semantically consistent with the input and `0.0` keeps the input image as-is. Defaults to `0.8` when not set.\n- `mask_image` `Optional`: Only applicable for inpainting use cases i.e. to specify which area of the picture to paint onto. Argument takes an image encoded as a string in base64 format.\n  - Use .jpg format to ensure best latency\n- `outpainting` `Optional`: Only applicable for outpainting use cases. Argument takes a boolean value to determine Whether the request requires outpainting or not. If so, special preprocessing is applied for better results. Defaults to `false`\n- `transfer_images` `Optional`: This is our [Photo Merge](https://octo.ai/blog/businesses-can-generate-customizable-avatars-using-octoais-photo-merge-feature/) feature. Applicable for use cases where you wish to transfer the subject in the uploaded image(s) to the output image(s). Argument takes a dictionary containing a mapping of trigger words to a list of sample images which demonstrate the desired object to transfer.\n\n```json\npayload = {\n    ...\n        \"prompt\": \"A trigger_word_1 sitting on a golden throne\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, bad quality\",\n        \"checkpoint\": \"octoai:RealVisXL\",\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 2,\n        \"sampler\": \"K_EULER_ANCESTRAL\",\n        \"steps\": 20,\n        \"cfg_scale\": 7.5,\n        \"transfer_images\": {\"trigger_word_1\": [\"$BASE64_IMAGE_1\", \"$BASE64_IMAGE_2\"]\n    ...\n}\n```\n\n- `controlnet` `Optional`: Required if using a controlnet engine. Argument takes in the value of ControlNet to be used during image generation. We offer the following list of public OctoAI controlnet checkpoints in the OctoAI Asset Library.\n\n  ```\n  octoai:canny_sdxl\n  octoai:depth_sdxl\n  octoai:openpose_sdxl\n  octoai:canny_sd15\n  octoai:depth_sd15\n  octoai:inpaint_sd15\n  octoai:ip2p_sd15\n  octoai:lineart_sd15\n  octoai:openpose_sd15\n  octoai:scribble_sd15\n  octoai:tile_sd15\n  ```\n\n  Other than using the default controlnet checkpoints, you can also upload private ControlNet checkpoints into the OctoAI Asset Library and then use those checkpoints at generation time via the parameter `controlnet`. For custom controlnet checkpoints, make sure to provide your own ControlNet mask in the `controlnet_image` parameter\n\n- `controlnet_conditioning_scale` `Optional`: Only applicable if using Controlnets. Argument determines how strong the effect of the controlnet will be. Defaults to `1`\n\n- `controlnet_early_stop` `Optional`:Only applicable if using Controlnets. If provided, indicates fraction of steps at which to stop applying controlnet. This can be used to sometimes generate better outputs.\n\n- `controlnet_image` `Optional`: Required if using a controlnet engine. Controlnet image encoded in b64 string for guiding image generation.\n\n- `controlnet_preprocess` `Optional`:Only applicable if using Controlnets. Argument takes in a boolean value to determine whether or not to apply automatic ControlNet preprocessing. For the privileged set of controlnet checkpoints listed above, we default to helping you autogenerate the corresponding controlnet map/mask that will be fed into the controlnet, but you can override the default by additionally specifying a `controlnet_preprocess: false` parameter.\n\nPython Example for ControlNet Canny with a custom controlnet map:\n\n```Python Python\nimport base64\nimport io\nimport os\nimport time\n\nimport PIL.Image\nimport requests\n\nimport cv2 as cv2\n\nimport matplotlib.pyplot as plt  # Import Matplotlib\n\ndef _process_test(endpoint_url):\n    image_path = \"cat.jpeg\"\n    img = cv2.imread(image_path)\n    img = cv2.resize(img, (1024, 1024)) # Resize to a resolution supported by OctoAI SDXL\n\n    edges = cv2.Canny(img,100,200) # 100 and 200 are thresholds for determining canny edges\n\n    height, width = edges.shape\n\n    # Convert Canny edge map to PIL Image\n    edges_image = PIL.Image.fromarray(edges)\n\n    # Create a BytesIO buffer to hold the image data\n    image_buffer = io.BytesIO()\n    edges_image.save(image_buffer, format='JPEG')\n    image_bytes = image_buffer.getvalue()\n    encoded_image = base64.b64encode(image_bytes).decode('utf-8')\n\n    model_request = {\n        \"controlnet_image\": encoded_image,\n        \"controlnet\": \"octoai:canny_sdxl\",\n        \"controlnet_preprocess\": false,\n        \"prompt\": (\n            \"A photo of a cute tiger astronaut in space\"\n        ),\n        \"negative_prompt\": \"low quality, bad quality, sketches, unnatural\",\n        \"steps\": 20,\n        \"num_images\": 1,\n        \"seed\": 768072361,\n        \"height\": height,\n        \"width\": width\n    }\n\n    prod_token = os.environ.get(\"OCTOAI_TOKEN\")  # noqa\n\n    reply = requests.post(\n        f\"{endpoint_url}\",\n        headers={\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {prod_token}\",\n        },\n        json=model_request,\n    )\n\n    if reply.status_code != 200:\n        print(reply.text)\n        exit(-1)\n\n    img_list = reply.json()[\"images\"]\n    print(img_list)\n\n    for i, idict in enumerate(img_list):\n        ibytes = idict['image_b64']\n        img_bytes = base64.b64decode(ibytes)\n        img = PIL.Image.open(io.BytesIO(img_bytes))\n        img.load()\n        img.save(f\"result_image{i}.jpg\")\n\nif __name__ == \"__main__\":\n    endpoint = \"https://image.octoai.run/generate/controlnet-sdxl\"\n\n    # Change this line to call either a10 or a100\n    _process_test(endpoint)\n\n```\n"
      },
      "docs/media-gen-solution/rest-apis/video-gen.mdx": {
        "markdown": "---\ntitle: Video Gen REST API\nsubtitle: Animate and add motion to your images\nslug: media-gen-solution/rest-apis/video-gen\n---\n\nOur video generation model is accessible via REST API. Below, you'll find straightforward examples using cURL/Python SDK and TypeScript SDK for our video generation endpoints, complete with explanations of all parameters.\n\nThe endpoint URL for video generation is `https://image.octoai.run/generate/svd`.\n\nThis encompasses image-to-video conversion. Additionally, we offer support for a text-to-video workflow, which involves utilizing the text-to-image API (Image Gen API) followed by the image-to-video API.\n\n## Request payload\n\n**Parameters:**\n\n- `image` (base64 encoded image, required) - Starting point image encoded in base64 string\n- `height` (int; optional) - Integer representing the height of video/animation to generate- If not provided, the output height will be inferred from the input 'image', and the closest resolution supported will be chosen.\n- `width` (int; optional) - Integer representing the width of video/animation to generate- If not provided, the output width will be inferred from the input 'image', and the closest resolution supported will be chosen.\n\n  Supported resolutions are `(w,h): (576, 1024), (1024, 576), (768, 768)`\n\n- `cfg_scale` (float; optional) - Floating-point number representing how closely to adhere to 'image' description- Must be a positive number no greater than 10.0.\n- `fps` (int; optional) - How fast the generated frames should play back.\n- `steps` (int; optional) - Integer representing how many steps of diffusion to run- Must be greater than 0 and less than or equal to 50.\n- `motion_scale` (float; optional) - A floating point number between 0 and 1 indicating how much motion should be in the generated animation.\n- `noise_aug_strength` (float; optional) - How much noise to add to the initial image- higher values encourage creativity.\n- `num_videos` (int; optional) - Integer representing how many output videos/animations to generate with a single `image` and configuration. You can generate upto 16 videos in a single API request. All videos will be generated in sequence within the same configurations but different seed values.\n- `seed` (int; optional) - Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific video (or set of videos).\n\n## Response\n\n- `videos` (list) - List of generation(s) generated by the request.\n- `prediction_time_ms` (float) - Total runtime of the video/animations(s) generation(s).\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/svd\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"image\": \"<BASE_64_STRING>\",\n        \"steps\": 40,\n        \"cfg_scale\": 3,\n        \"fps\": 4,\n        \"motion_scale\": 0.2,\n        \"noise_aug_strength\": 0.55,\n        \"num_videos\": 1,\n        \"seed\": \"2138732363\"\n    }' | jq -r \".videos[0].video\" | base64 -d >result.mp4\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    video_gen_response = client.image_gen.generate_svd(\n        image=\"<BASE_64_STRING>\",\n        steps=25,\n        cfg_scale=3,\n        fps=7,\n        motion_scale=0.5,\n        noise_aug_strength=0.02,\n        num_videos=1,\n    )\n    videos = video_gen_response.videos\n\n    for i, image in enumerate(videos):\n        to_file(image, f\"result{i}.mp4\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { videos } = await octoai.imageGen.generateSvd({\n  image: \"<BASE64_STRING>\",\n  steps: 25,\n  cfgScale: 3,\n  fps: 7,\n  motionScale: 0.5,\n  noiseAugStrength: 0.02,\n  numVideos: 1,\n});\n\nvideos.forEach((output, i) => {\n  if (output.video) {\n    const buffer = Buffer.from(output.video, \"base64\");\n    fs.writeFileSync(`result${i}.mp4`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n"
      },
      "docs/media-gen-solution/rest-apis/background-removal.mdx": {
        "markdown": "---\ntitle: Background Removal REST API\nsubtitle: >-\n  Background removal takes an existing image you provide and removes those parts\n  of the image considered to be “background.\nslug: media-gen-solution/rest-apis/background-removal\n---\n\n\nBackground removal takes an existing image you provide and removes those parts of the image considered to be “background.”\n\n## Request payload\n**Parameters:**\n* `init_image` (str, required) - A base64-encoded image whose background should get removed.\n* `alpha_matting` (bool; false) - If true, apply matting on the alpha channel.\n* `alpha_matting_foreground_threshold` (number in [0, 255]; 240) - When `alpha_matting` is `true`, mask pixels larger than this value are considered foreground pixels.\n* `alpha_matting_background_threshold` (number in [0, 255]; 10) - When `alpha_matting` is `true`, mask pixels smaller than this value are considered background pixels.\n* `alpha_matting_erode_size` (number; 10) - When `alpha_matting` is true, size of the erosion structure to apply, in pixels.\n* `only_mask` (bool; false) - When true, return only a single-channel image containing a foreground-background mask. Foreground pixels have values closer to 255, and background pixels have values closer to 0.\n* `post_process_mask` (bool; true) - When `true`, apply morphological operations to the mask to smooth it.\n* `bgcolor` (list[int]; optional) - When given, replace background pixels with this color in the output image.\n\n## Response\n* `image_b64` (str) - Base64-encoded png containing the processed image.\n* `removed_for_safety` (bool) - When `true`, background removal was not performed because `init_image` was found to have violated our terms of service.\n\n### cURL example\n\n```bash\ncurl -X POST \"https://image.octoai.run/background-removal\" \\\n     -H 'Content-Type: application/json' \\\n     -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n     -d '{\"init_image\": \"$BASE64_IMAGE_HERE\"}'\n```\n"
      },
      "docs/media-gen-solution/rest-apis/upscaling.mdx": {
        "markdown": "---\ntitle: Upscaling REST API\nsubtitle: >-\n  In addition to image generation, OctoAI can also upscale images to higher\n  resolutions.\nslug: media-gen-solution/rest-apis/upscaling\n---\n\n\n### API\n\nUpscaling takes an existing image you provide and upscales it to a higher resolution.\n\nParameters:\n\n* `init_image_url` / `init_image` \\- The URL to an image or a base64-encoded image (respectively) to upscale. Specify only one of these.\n* `scale` / `output_image_height` / `output_image_width` \\- determined how much to upscale the provided image. Specify only one of these.  \n   * `scale` \\- floating point value indicating how much to scale the input resolution by (e.g., `scale: 2.0` would double the input width and height)  \n   * `output_image_height` \\- height of the desired upscaled image in pixels. The corresponding width will be computed off of this value to preserve the aspect ratio.  \n   * `output_image_width` \\- width of the desired upscaled image in pixels. The corresponding height will be computed off of this value to preserve the aspect ratio.\n* `model` (optional): The model to use for upscaling faces. Default value is `real-esrgan-x4-plus`. Options:  \n   * `real-esrgan-x4-plus`  \n   * `real-esrgan-x4-v3`  \n   * `real-esrgan-x4-v3-wdn`  \n   * `real-esrgan-animevideo-v3`  \n   * `real-esrgan-x4-plus-anime`  \n   * `real-esrgan-x2-plus`\n\n### cURL example\n\n```Bash Bash\ncurl -H 'Content-Type: application/json' -H \"Authorization: Bearer $OCTOAI_TOKEN\" -X POST \"https://image.octoai.run/upscaling\" \\\n    -d '{\n        \"init_image\": \"$BASE64_IMAGE_HERE\",\n        \"scale\": 2.5,\n        \"model\": \"real-esrgan-x4-v3\"\n    }'\n```\n"
      },
      "docs/media-gen-solution/rest-apis/adetailer.mdx": {
        "markdown": "---\ntitle: Adetailer REST API\nsubtitle: >-\n  Adetailer takes an existing image you provide, detects faces and hands and\n  fixes them.\nslug: media-gen-solution/rest-apis/adetailer\n---\n\n\nAdetailer takes an existing image you provide, detects faces and hands and fixes them.\n\n## Request payload\n**Parameters:**\n* `init_image` (str, required) \\- A base64-encoded image. Resolution must be supported by inpainting_base_model: \nsdxl:  `640x1536`, `768x1344`, `832x1216`, `896x1152`, `1024x1024`, `1152x896`, `1216x832`, `1344x768`, `1536x640`, `1664x2432`, `2048x2048`, `2432x1664`\nsd15: `384x704`, `448x576`, `512x512`, `512x704`, `512x768`, `512x832`, `576x448`, `576x768`, `576x768`, `576x1024`, `640x512`, `640x640`, `640x768`, `704x384`, `704x1216`, `768x512`, `768x576`, `768x1024`, `832x512`, `896x896`, `1024x576`, `1024x768`, `1024x1024`, `1024x1536`, `1216x704`, `1536x1024`\n\n* `init_image_url `(string, required if init_image not specified) \\- If given, download init_image from this URL.\n\n* `detector` (str,required) \\- Detection model to use. Configures whether e.g. faces or hands or people are targeted for after-detailing.\nAvailable options: `face_yolov8n`, `hand_yolov8n`, `face_full_mediapipe`, `face_short_mediapipe`, `face_mesh_mediapipe`, `eyes_mesh_mediapipe `\n\n* `inpainting_base_model` (str, required) \\-\nThe base model to be used for inpainting. Typically should match the model used to generate init_image.\nAvailable options: `sdxl`, `sd15 `\n\n* `cfg_scale` (number,optional default: 7.5)\\- \nFloating-point number represeting how closely to adhere to prompt description. Must be a positive number no greater than 50.0.\n\n* `checkpoint`(string, optional)\\-  Name of a checkpoint to use for inpainting.\n\n* `confidence` (number,optional, default: 0.3) \\- \nInpainted areas are determined using a detector. This setting adjusts the sensitivity of the detector (lower considers more image fragments for inpainting).\n\n* `image_encoding` (string,optional)\\- \nDefine which encoding process should be applied before returning the modified image.\nAvailable options: `jpeg`, `png `\n\n* `loras` (object | optional) \\- A dict mapping the name of a LoRA to apply to its weight.\n\n* `mask_blur` (integer, optional,default: 4) \\- A mask is created for each inpainted area in the image. After dilation (see mask_dilation parameter), the mask is blurred. This technique is typically used to smoothly blend the inpainted area with the original image. This option specifies the radius, in pixels, of the gaussian blur kernel. The higher the value, the wider the blur. Defaults to 4. Must be greater than or equal to 0 and recommended to be less than 64.\n\n* `mask_dilation` (integer,optional,default: 4) \\- A mask is created for each inpainted area in the image. Mask Dilation allows you to expand the size of the mask while maintaining its shape. This technique is typically used to reduce artifacts near borders in the mask. This parameter is the size, in pixels, of the dilation kernel to apply. Defaults to 4. Must be greater than or equal to 0 and recommended to be less than 64.\n\n* `mask_padding` (integer,optional,default: 32) -\\ Each inpainted area is passed to the image-to-image generator with some surrounding context. The contextual area is created by padding the area occupied by the blurred, dilated mask. This technique improves inpainting quality, and the contextual area is not modified. This parameter specifies the amount of padding, in pixels, to apply around the processed mask. When the computed padding goes off the edge of the image, the padded area is slid towards the center of the image. Must be greater than or equal to 0 and recommended to be less than 10% the size of an inpainting mask.\n\n* `max_num_detections` (integer,optional) \\- Inpaint at most this many objects, starting with the most confident matches.\n\n* `negative_prompt` (string,optional)\n\n* `prompt` (string | optional)\n\n* `sampler` (string | optional) - The schedulers available for image generation.\nAvailable options: `PNDM`, `LMS`, `KLMS`, `DDIM`, `DDPM`, `HEUN`, `K_HEUN`, `K_EULER`, `K_EULER_ANCESTRAL`, `DPM_SOLVER_MULTISTEP`, `DPM_PLUS_PLUS_2M_KARRAS`, `DPM_SINGLE`, `DPM_2`, `DPM_2_ANCESTRAL`, `DPM_PLUS_PLUS_SDE_KARRAS`, `UNI_PC`,` LCM `\n\n* `seed` (integer,optional) \\- Integer number or list of integers representing the seeds of random generators. Fixing random seed is useful when attempting to generate a specific image. Must be greater than 0 and less than 2^32.\n\n* `steps` (integer, optional,default: 20)\n* `strength` (number,optional, default 0.9`) \n* `style_preset`(string,optional,default: base) \n* `union_masks` (boolean, optional,default: false) \\- When true, create a single mask by unioning the mask for each detected object together, then send a single inpainting request to the backing model.\n* `use_refiner` (boolean,optional,default: false) \n\n\n## Response\n\n* `image_b64` (string) - The modified image or None if it was removed for safety.\n\n* `num_objects_detected` (integer) - The number of objects that were successfully detected.\n\n* `num_objects_inpainted` (integer) - The number of objects that were successfully inpainted.\n\n* `num_removed_for_safety` (integer) - Number of inpainting requests that violated the OctoAI Terms of Service.\n\n\n### cURL example\n\n```bash\ncurl -X POST \"https://image.octoai.run/adetailer\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"init_image\": \"$BASE64_IMAGE\",\n        \"detector\": \"face_yolov8n\",\n        \"inpainting_base_model\": \"sdxl\"\n    }'\n```\n\n"
      },
      "docs/getting-started/inference-models.mdx": {
        "markdown": "---\ntitle: Inference models\nslug: getting-started/inference-models\n---\n\n## Serverless Endpoints\n\nOctoAI currently supports the self-service models & checkpoints organized on this page, and we’ll continue to expand our models and services. Ready to run your first inference? [Navigate to our Quickstart guide to get started.](quickstart)\n\n### Text Gen Models\n\n| Organization  | Use Cases          | Model Name                       | API Model String               | Context Length |\n| ------------- | ------------------ | -------------------------------- | ------------------------------ | -------------- |\n| Meta          | Chat               | Llama2-Chat (13B)                | llama-2-13b-chat               | 4,096          |\n| Meta          | Chat               | Llama2-Chat (70B)                | llama-2-70b-chat               | 4,096          |\n| Meta          | Chat               | Llama3-Instruct (8B)             | meta-llama-3-8b-instruct       | 8,192          |\n| Meta          | Chat               | Llama3-Instruct (70B)            | meta-llama-3-70b-instruct      | 8,192          |\n| Meta          | Coding             | Codellama-Instruct (7B)          | codellama-7b-instruct          | 16,384         |\n| Meta          | Coding             | Codellama-Instruct (13B)         | codellama-13b-instruct         | 16,384         |\n| Meta          | Coding             | Codellama-Instruct (34B)         | codellama-34b-instruct         | 16,384         |\n| Mistral       | Chat, Coding       | Mistral Instruct v0.2 (7B)       | mistral-7b-instruct            | 32,768         |\n| Nous Research | Chat, Coding       | Nous Hermes 2 Pro Mistral (7B)   | hermes-2-pro-mistral-7b        | 32,768         |\n| Mistral       | Chat, Coding       | Mixtral Instruct (8x7B)          | mixtral-8x7b-instruct          | 32,768         |\n| Nous Research | Content Moderation | Nous Hermes 2 Mixtral DPO (8x7B) | nous-hermes-2-mixtral-8x7b-dpo | 32,768         |\n| Mistral       | Chat, Coding       | Mixtral Instruct (8x22B)         | mixtral-8x22b-instruct         | 65,536         |\n| Meta          | Content Moderation | Llama Guard                      | llamaguard-7b                  | 4,096          |\n| Alibaba DAMO  | Embedding          | GTE Large                        | thenlper/gte-large             | n/a            |\n\nCheck out our [REST API](/docs/text-gen-solution/rest-api), [Python SDK](/docs/text-gen-solution/python-sdk), or [TypeScript SDK](/docs/text-gen-solution/typescript-sdk) docs when you’re ready to use text gen models programmatically.\n\n### Media Gen Models\n\n| Service            | Model                       | API Model String          |\n| ------------------ | --------------------------- | ------------------------- |\n| Image Gen          | Stable Diffusion v1.5       | sd                        |\n| Image Gen          | Stable Diffusion XL v1.0    | sdxl                      |\n| Image Gen          | Segmind Stable Diffusion    | ssd                       |\n| Image Gen          | ControlNet SD v1.5          | controlnet-sd15           |\n| Image Gen          | ControlNet SDXL             | controlnet-sdxl           |\n| Image Animation    | Stable Video Diffusion v1.1 | svd                       |\n| Background Removal | IS-Net                      | background-removal        |\n| Upscaling          | REAL-ESRGAN x4 Plus         | real-esrgan-x4-plus       |\n| Upscaling          | REAL-ESRGAN x4 v3           | real-esrgan-x4-v3         |\n| Upscaling          | REAL-ESRGAN x4 v3 WDN       | real-esrgan-x4-v3-wdn     |\n| Upscaling          | REAL-ESRGAN Anime Video v3  | real-esrgan-animevideo-v3 |\n| Upscaling          | REAL-ESRGAN x4 Plus Anime   | real-esrgan-x4-plus-anime |\n| Upscaling          | REAL-ESRGAN x2 Plus         | real-esrgan-x2-plus       |\n| Adetailer          | Face YOLOv8n                | face_yolov8n              |\n| Adetailer          | Hand YOLOv8n                | hand_yolov8n              |\n| Adetailer          | Face Full MediaPipe         | face_full_mediapipe       |\n| Adetailer          | Face Short MediaPipe        | face_short_mediapipe      |\n| Adetailer          | Face Mesh MediaPipe         | face_mesh_mediapipe       |\n| Adetailer          | Eyes Mesh MediaPipe         | eyes_mesh_mediapipe       |\n\nCheck out our [Image Gen API](/docs/media-gen-solution/rest-apis/image-gen-api) and [Video Gen API](/docs/media-gen-solution/rest-apis/video-gen) docs when you’re ready to use media gen models programmatically. You can also easily upload and run custom checkpoints and assets using OctoAI’s [Asset Library.](/docs/media-gen-solution/uploading-a-custom-asset-to-the-octoai-asset-library)\n"
      },
      "docs/getting-started/how-to-create-an-octoai-access-token.mdx": {
        "markdown": "---\ntitle: How to create an OctoAI API token\nslug: getting-started/how-to-create-an-octoai-access-token\n---\n\n\nAll endpoints require authentication by default. That means you will need an access token in order to run inferences against those endpoints. To generate a token, head to your [Account Settings](https://octoai.cloud/settings) and click **Generate token**:\n![](https://www.datocms-assets.com/45680/1711722965-generatetoken.png?max-w=2000&auto=compress)\n\nAfter generating a token, make sure to store it in your terminal and/or environment file for your app.\n\n```bash bash\nexport OCTOAI_TOKEN=<INSERT_HERE>\n```\n\nNow you'll be able to run inferences! For example:\n```bash cURL\ncurl -X POST \"https://text.octoai.run/v1/chat/completions\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"Hello world\"\n            }\n        ],\n        \"model\": \"mixtral-8x7b-instruct\",\n        \"max_tokens\": 512,\n        \"presence_penalty\": 0,\n        \"temperature\": 0.1,\n        \"top_p\": 0.9\n    }'\n```\n"
      },
      "docs/text-gen-solution/getting-started.mdx": {
        "markdown": "---\ntitle: Getting started with our Text Gen Solution\nsubtitle: >-\n  The OctoAI Text Gen Solution offers market-leading price and performance for a\n  growing list open source LLMs including Llama2, CodeLlama, and Mistral (see\n  Supported models section below). We offer a WebUI playground, API endpoints,\n  and Python/TypeScript SDK solution for interacting with these models. All of\n  our endpoints are callable via chat completions format currently popular in\n  the industry (see API documentation).\nslug: text-gen-solution/getting-started\n---\n\nIn the coming months, we will launch additional features including efficient fine-tuning, longer-context models, JSON mode support, and other features.\n\nIf you have an LLM use case that our existing endpoints do not support, [contact us](https://octo.ai/contact-us/). We offer low-latency and throughput-optimized solutions for all LLama2, CodeLlama, and Mistral checkpoints.\n\n## Self-Service Models\n\nWe are always expanding our offering of models and other features. Presently, OctoAI supports the following models & checkpoints for self-service models:\n\n**Mistral-7b-Instruct-v0.2:** Updated by Mistral AI in December 2023, this model has impressed the LLM community with its high-quality performance at a very low parameter count. This model is available for commercial use. [Read more.](https://huggingface.co/mistralai/Mistral-7B-Instruct-v0.1) We offer a single endpoint here: the 7B parameter model, which supports up to 32,768 tokens. **Note that Mistral's model does not have any moderation mechanisms.** For more sensitive use cases, we recommend using Llama2 and Codellama endpoints.\n\n**Mistral-8x7b-Instruct:** Mistral AI's December 2023 release, Mistral-8x7b-Instruct, is a \"mixture of experts\" model utilizing conditional computing for efficient token generation, reducing computational demands while improving response quality (GPT-4 is widely believed to be an MoE model). Mistral-8x7b-Instruct brings these efficiencies to the open-source LLM realm, and it is licensed for commercial use. It supports up to 32,768 tokens. [Read more](https://huggingface.co/mistralai/Mixtral-8x7B-v0.1). **Note: As with Mistral-7B-Instruct, Mixtral lacks moderation mechanisms**. For sensitive applications, consider Llama2 or Codellama endpoints.\n\n**Nous-Hermes-2-Mixtral-8x7b-DPO** The flagship Nous Research model trained over the Mixtral 8x7B MoE LLM. The model was trained on over 1,000,000 entries of data, as well as other high quality data from open datasets across the AI landscape, achieving state of the art performance on a variety of tasks. It supports up to 32,768 tokens.\n\n**Hermes-2-Pro-Mistral-7b** An upgraded, retrained version of Nous Hermes 2 Mistral 7B, consisting of an updated and cleaned version of the OpenHermes 2.5 Dataset. It is especially good at JSON schema following. It supports up to 32,768 tokens. Read more about [how to use schema following here.](https://octo.ai/docs/text-gen-solution/json-mode)\n\n**Mixtral-8x22B-Instruct** coming soon!\n\n**Mixtral 8x22B (fine-tune)** With the recent release of Mixtral 8x22B base model, new fine tunes are emerging from the community at a rapid rate. We will be using this particular endpoint to trying ou the best community fine tunes as they become available, meaning this model will change and serve as a testing grounds for our users. Check back frequently to see which new fine tune is available. After thorough testing we will select the top performing fine tune to persistantly host on OctoAI.\n\n**Llama2-Chat**: Released by Meta in July 2023, this auto-regressive language model uses an optimized transformer architecture. This model is available for commercial use. The \"Chat\" versions that OctoAI hosts by default utilize supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) to align with human preferences for helpfulness and safety. [Read more.](https://github.com/facebookresearch/llama/blob/main/MODEL%5FCARD.md) OctoAI offers this model in 13- and 70-billion parameter sizes. Our quality testing has indicated that the 7 billion parameter variant does not meet competitive quality standards. All checkpoints of this model hosted by OctoAI are limited to a max token length of 4,096.\n\n**Codellama-Instruct:** Released by Meta in August 2023, this model builds upon the Llama2 architecture but offers specialized support for coding and other structured tasks. This model is available for commercial use. We host the \"Instruct\" variant, optimized for instruction following and safer deployment. [Read more.](https://github.com/facebookresearch/codellama/blob/main/MODEL%5FCARD.md) We support 7-, 13-,and -34 billion parameter variants. Other variants, including the Python checkpoints and 70B variants, are available upon request. All endpoints support up to 16,384 tokens.\n\n**Llama Guard:** A 7B content moderation model released by Meta, which can classify text as safe or unsafe according to an editable set of policies. As a 7B parameter model, it is optimized for latency and can be used to moderate other LLM interactions in real time. [Read more.](https://huggingface.co/meta-llama/LlamaGuard-7b) Note: This model requires a specific prompt template to be applied, and is not compatible with the ChatCompletion API.\n\n**GTE Large** An embeddings model released by Alibaba DAMO Academy. Trained on a large-scale corpus of relevance text pairs, covering a wide range of domains and scenarios. Consistently ranked highly on Huggingface's [MTEB leaderboard.](https://huggingface.co/spaces/mteb/leaderboard) In combination with a vector database, this embeddings model is especially useful for powering semantic search and Retrieval Augmented Generation (RAG) applications. [Read more.](https://huggingface.co/thenlper/gte-large)\n\nFor pricing of all of these endpoints, please refer to our [pricing page](/docs/getting-started/pricing-and-billing).\n\n## Web UI playground\n\nYou can start familiarizing yourself with our Text Gen features using the web UI, but note that we have even more features available via the API.\n\nFirst, click on the top navigation bar and click Text Tools. Here you will see the different model families that we offer for self-service users:\n![](https://www.datocms-assets.com/45680/1711724092-textgen-models.png?max-w=2000&auto=compress)\n\nClick the **Demo** or **API** selections to enter our playground, where you can:\n\n- Easily switch between all of our models, parameter counts, and quantization settings\n- Test each model using our chat interface\n- Adjust common settings such as `temperature`\n- See the pricing and context limits for any selected model.\n  ![](https://www.datocms-assets.com/45680/1711724222-textgen-demo1.png?max-w=2000&auto=compress)\n\nSelecting the \"API\" toggle will show you code samples in Python, TypeScript, and CURL format for calling the endpoint that you've selected, as well as key input & output parameters:\n![](https://www.datocms-assets.com/45680/1711724065-textgen-api.png?max-w=2000&auto=compress)\n\n## Billing\n\nFor pricing of all of these endpoints, please refer to our [pricing page](/docs/getting-started/pricing-and-billing).\n\nOnce you provide billing information and generate an API key, any usage of these endpoints will be viewable under Accounts -> Billing & Usage -> Text Generation Usage. Note that these endpoints are very price competitive, so you'll generally needs to rack up tens of thousands of tokens before you can see the charges!\n![](https://www.datocms-assets.com/45680/1711724075-textgen-billing.png?max-w=2000&auto=compress)\n\n## API Docs\n\nWhen you're ready to start calling the endpoint programmatically, check out our [REST API](rest-api), [Python SDK](python-sdk), and [TypeScript SDK](typescript-sdk) docs.\n"
      },
      "docs/text-gen-solution/python-sdk.mdx": {
        "markdown": "---\ntitle: Text Gen Python SDK\nsubtitle: Use the OctoAI Chat Completion API to easily generate text.\nslug: text-gen-solution/python-sdk\n---\n\nThe `OctoAI` class allows you to run inferences simply to any model that accepts JSON-formatted inputs as a dictionary, and provides you with all JSON-formatted outputs as a dictionary. The `OctoAI` class also supports the Chat Completions API and provides easy access to a set of highly optimized text models on OctoAI.\n\nThis guide will walk you through how to select your model of interest, how to call highly optimized text models on OctoAI using the Chat Completions API, and how to use the responses in both streaming and regular modes.\n\n#### Requirements\n\n- Please [create an OctoAI API token](/docs/getting-started/how-to-create-an-octoai-access-token) if you don't have one already.\n- Please also verify you've completed [Python SDK Installation & Setup](/docs/python-sdk/installation-and-setup).\n  - If you use the `OCTOAI_TOKEN` envvar for your token, you can instantiate the OctoAI client with `octoai = OctoAI()` after importing the `octoai` package.\n\n#### Text Generation\n\nThe following snippet shows you how to use the Chat Completions API to generate text using Llama2.\n\n```Python Python\nimport json\n\nfrom octoai.client import OctoAI\nfrom octoai.text_gen import ChatMessage\n\nclient = OctoAI()\ncompletion = client.text_gen.create_chat_completion(\n    model=\"llama-2-70b-chat\",\n    messages=[\n        ChatMessage(\n            role=\"system\",\n            content=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n        ),\n        ChatMessage(role=\"user\", content=\"Write a blog about Seattle\"),\n    ],\n    max_tokens=150,\n)\n\nprint(json.dumps(completion.dict(), indent=2))\n```\n\nThe response is of type `octoai.text_gen.ChatCompletionResponse`. If you print the response from this call as in the example above, it looks similar to the following:\n\n```\n{\n  \"id\": \"cmpl-8ea213aece0747aca6d0608b02b57196\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Founded in 1921, Seattle is the mother city of Pacific Northwest. Seattle is the densely populated second-largest city in the state of Washington along with Portland. A small city at heart, Seattle has transformed itself from a small manufacturing town to the contemporary Pacific Northwest hub to its east. The city's charm and frequent unpredictability draw tourists and residents alike. Here are my favorite things about Seattle.\\n* Seattle has a low crime rate and high quality of life.\\n* Seattle has rich history which included the building of the first Pacific Northwest harbor and the development of the Puget Sound irrigation system. Seattle is also home to legendary firm Boeing.\\n\",\n        \"function_call\": null\n      },\n      \"delta\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"created\": 5399,\n  \"model\": \"llama2-70b\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": null,\n  \"usage\": {\n    \"completion_tokens\": 150,\n    \"prompt_tokens\": 571,\n    \"total_tokens\": 721\n  }\n}\n```\n\nNote that billing is based upon \"prompt tokens\" and \"completion tokens\" above. [View prices on our pricing page.](/docs/getting-started/pricing-and-billing)\n\n#### Streaming Responses\n\nThe following snippet shows you how to obtain the model's response incrementally as it is generated using streaming (using `stream=True`).\n\n```Python Python\nfrom octoai.client import OctoAI\nfrom octoai.text_gen import ChatMessage\n\nclient = OctoAI()\nfor completion in client.text_gen.create_chat_completion_stream(\n    model=\"llama-2-70b-chat\",\n    messages=[\n        ChatMessage(\n            role=\"system\",\n            content=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n        ),\n        ChatMessage(role=\"user\", content=\"Write a blog about Seattle\"),\n    ],\n    max_tokens=150,\n):\n    print(completion.choices[0].delta.content, end='', flush=True)\n\n```\n\nWhen using streaming mode, the response is of type `Iterable[ChatCompletionChunk]`. To read each incremental response from the model, you can use a `for` loop over the returned object. The example above prints each incremental response as it arrives, and they accumulate to form the entire response in the output as the model prediction progresses.\n\n#### Additional Parameters\n\nTo learn about the additional parameters supported by the `OctoAI().text_gen.create_chat_completion()` method.\n"
      },
      "docs/text-gen-solution/typescript-sdk.mdx": {
        "markdown": "---\ntitle: Text Gen TypeScript SDK\nsubtitle: >-\n  The OctoAI Text Gen TypeScript SDK supports both the Chat Completions API and\n  the Completions API.\nslug: text-gen-solution/typescript-sdk\n---\n\n## At a Glance\n\nThis guide will walk you through how to use the TypeScript SDK to call our Text Gen API. The TypeScript SDK supports streaming and non-streaming inferences for both the Chat Completions API and legacy Completions API. There are also additional parameters such as `frequencyPenalty`, `maxTokens`, `presencePenalty`, etc. that can be used for finer control.\n\n## Requirements\n\n- Please [create an OctoAI API token](/docs/getting-started/how-to-create-an-octoai-access-token) if you don't have one already.\n- Please also verify you've completed [TypeScript SDK Installation & Setup](/docs/typescript-sdk/installation-and-setup).\n  - If you use the `OCTOAI_TOKEN` envvar for your token, you can instantiate the client with `octoai = new OctoAIClient()`, otherwise you will need to pass an API token using: `octoai = new OctoAIClient({ apiKey: process.env.OCTOAI_TOKEN })`\n\n## Chat Completions API\n\n### Non-Streaming Example\n\nTo make a chat completions call, you will need to provide the model you wish to call and a list of chat messages.\n\n```typescript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst result = await octoai.textGen.createChatCompletion({\n  model: \"meta-llama-3-8b-instruct\",\n  messages: [\n    {\n      role: \"system\",\n      content:\n        \"You are a helpful assistant. Keep your responses limited to one short paragraph if possible.\",\n    },\n    {\n      role: \"user\",\n      content: \"Write a blog about Seattle\",\n    },\n  ],\n});\n\nconsole.log(result.choices[0].message.content);\n// \"Seattle is a vibrant and eclectic city...\"\n```\n\n### Streaming Example\n\nThe above example can work great in some scenarios, but if you're dealing with larger requests or are building a highly-interactive user experience, using the streaming interface may be a better choice. The available options between non-streaming and streaming inferences are identical, but there are two main code changes needed:\n\n- You will need to use the `createChatCompletionStream()` method instead of `createChatCompletion()`.\n- Instead of grabbing the final text message from the response, you will need to loop over the individual chunks and concatenate the tokens.\n\n```typescript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst stream = await octoai.textGen.createChatCompletionStream({\n  model: \"meta-llama-3-8b-instruct\",\n  messages: [\n    {\n      role: \"system\",\n      content:\n        \"You are a helpful assistant. Keep your responses limited to one short paragraph if possible.\",\n    },\n    {\n      role: \"user\",\n      content: \"Write a blog about Seattle\",\n    },\n  ],\n});\n\nlet result = \"\";\n\n// Loops over the returned chunks whenever they're ready\nfor await (const chunk of stream) {\n  // The content of the first chunk can be `undefined`\n  result += chunk.choices[0].delta.content ?? \"\";\n}\n\nconsole.log(result);\n// \"Seattle is a vibrant and eclectic city...\"\n```\n\n## Completions API\n\nThe TypeScript SDK also supports the legacy Completions API with the same customization options as the Chat Completions API. The key difference between the two is that you provide a `prompt` string instead of a list of chat message objects. Much like the Chat Completions API, you can choose between non-streaming and streaming inference.\n\n### Non-Streaming Example\n\n```typescript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst response = await octoai.textGen.createCompletion({\n  model: \"meta-llama-3-8b-instruct\",\n  prompt: \"Write a blog about Seattle\",\n});\n\nconsole.log(response.choices[0].text);\n// \"Seattle is a vibrant and eclectic city...\"\n```\n\n### Streaming Example\n\n```typescript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst stream = await octoai.textGen.createCompletionStream({\n  model: \"meta-llama-3-8b-instruct\",\n  prompt: \"Write a blog about Seattle\",\n});\n\nlet result = \"\";\n\n// Loops over the returned chunks whenever they're ready\nfor await (const chunk of stream) {\n  result += chunk.choices[0].text;\n}\n\nconsole.log(result);\n// \"Seattle is a vibrant and eclectic city...\"\n```\n"
      },
      "docs/text-gen-solution/json-mode.mdx": {
        "markdown": "---\ntitle: Using JSON mode with Text Gen endpoints\nsubtitle: Ensure Text Gen outputs fit into your desired JSON schema.\nslug: text-gen-solution/json-mode\n---\n\nOctoAIs Large Language Models (LLMs) can generate generate outputs that not only adhere to JSON format but also align with your unique schema specifications.\n\nThis is supported for all models, but works especially well with Mixtral & Mistral models, including the Hermes family of fine tunes.\n\n## Getting started\n\nSetup credentials:\n\n```bash\nexport OCTOAI_TOKEN=YOUR_TOKEN_HERE\n```\n\nCurl example (Mistral-7B): Let's say that you want to ensure that your LLM responses format user feedback about cars into a usable JSON format. To do so, you provide the LLM with a reponse schema ensuring that it knows it must provide \"color\" and \"maker\" in a structured format--see \"response format below\":\n\n```bash\ncurl -X POST \"https://text.octoai.run/v1/chat/completions\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n  --data-raw '{\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant.\"\n            },\n            {\n                \"role\": \"user\",\n                \"content\": \"the car was black and it was a toyota camry.\"\n            }\n        ],\n        \"model\": \"mistral-7b-instruct\",\n        \"max_tokens\": 512,\n        \"presence_penalty\": 0,\n        \"temperature\": 0.1,\n        \"top_p\": 0.9,\n        \"response_format\": {\n            \"type\": \"json_object\",\n            \"schema\": {\"properties\": {\"color\": {\"title\": \"Color\", \"type\": \"string\"}, \"maker\": {\"title\": \"Maker\", \"type\": \"string\"}}, \"required\": [\"color\", \"maker\"], \"title\": \"Car\", \"type\": \"object\"}\n        }\n    }'\n```\n\nThe LLM will respond in the exact schema specified:\n\n```bash\n{\n  \"id\": \"chatcmpl-d5d81b7c80b249ea8177f95f68a51d8e\",\n  \"object\": \"chat.completion\",\n  \"created\": 1709830931,\n  \"model\": \"mistral-7b-instruct\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"{\\\"color\\\": \\\"black\\\", \\\"maker\\\": \\\"Toyota”, \\\"}\",\n        \"function_call\": null\n      },\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 98,\n    \"completion_tokens\": 16,\n    \"total_tokens\": 114\n  }\n}\n```\n\n## Pydantic and OctoAI's Python SDK\n\nPydantic is a popular Python library for data validation and settings management using Python type annotations. By combining Pydantic with the OctoAI SDK, you can easily define the desired JSON schema for your LLM responses and ensure that the generated content adheres to that structure.\n\nFirst, make sure you have the required packages installed:\n\n```bash\npython3 -m pip install openai pydantic==2.5.3\n```\n\n### Basic example\n\nLet's start with a basic example to demonstrate how Pydantic and the OctoAI SDK work together. In this example, we'll define a simple Car model with color and maker attributes, and ask the LLM to generate a response that fits this schema.\n\n```python\nfrom octoai.client import OctoAI\nfrom octoai.text_gen import ChatCompletionResponseFormat, ChatMessage\nfrom pydantic import BaseModel, Field\nfrom typing import List\n\nclient = OctoAI()\n\nclass Car(BaseModel):\n    color: str\n    maker: str\n\ncompletion = client.text_gen.create_chat_completion(\n    model=\"mistral-7b-instruct\",\n    messages=[\n        ChatMessage(role=\"system\", content=\"You are a helpful assistant.\"),\n        ChatMessage(role=\"user\", content=\"the car was black and it was a toyota camry.\"),\n    ],\n    max_tokens=512,\n    presence_penalty=0,\n    temperature=0.1,\n    top_p=0.9,\n    response_format=ChatCompletionResponseFormat(\n        type=\"json_object\",\n        schema=Car.model_json_schema(),\n    ),\n)\n\nprint(completion.choices[0].message.content)\n```\n\nThe key points to note here are:\n\n1. We import the necessary classes from the OctoAI SDK: Client, TextModel, and ChatCompletionResponseFormat.\n\n2. We define a Car class inheriting from BaseModel, specifying the color and maker attributes with their expected types.\n\n3. When creating the chat completion, we set the response_format using ChatCompletionResponseFormat and include the JSON schema generated from our Car model using Car.model_json_schema().\n\nThe output will be a JSON object adhering to the specified schema:\n\n```json\n{ \"color\": \"black\", \"maker\": \"Toyota\" }\n```\n\n### Array example\n\nNext, let's look at an example involving arrays. Suppose we want the LLM to generate a list of names based on a given prompt. We can define a Meeting model with a names attribute of type List[str].\n\n```python\nfrom octoai.client import OctoAI\nfrom octoai.text_gen import ChatCompletionResponseFormat, ChatMessage\nfrom pydantic import BaseModel, Field\nfrom typing import List\n\nclient = OctoAI()\n\nclass Meeting(BaseModel):\n    names: List[str]\n\n\nchat_completion = client.text_gen.create_chat_completion(\n    model=\"<model>\",\n    messages=[\n        ChatMessage(role=\"system\", content=\"You are a helpful assistant.\"),\n        ChatMessage(role=\"user\", content=\"John and Jane meet the day after\"),\n    ],\n    temperature=0,\n    response_format=ChatCompletionResponseFormat(\n        type=\"json_object\",\n        schema=Meeting.model_json_schema()\n    ),\n)\n\nprint(chat_completion.choices[0].message.content)\n```\n\nThe LLM will generate a response containing an array of names:\n\n```json\n{ \"names\": [\"John\", \"Jane\"] }\n```\n\n### Nested example\n\nFinally, let's explore a more complex example involving nested models. In this case, we'll define a Person model with name and age attributes, and a Result model containing a sorted list of Person objects.\n\n```python\nclass Person(BaseModel):\n    \"\"\"The object representing a person with name and age\"\"\"\n\n    name: str = Field(description=\"Name of the person\")\n    age: int = Field(description=\"The age of the person\")\n\n\nclass Result(BaseModel):\n    \"\"\"The format of the answer.\"\"\"\n\n    sorted_list: List[Person] = Field(description=\"List of the sorted objects\")\n\n\ncompletion = octoai.text_gen.create_chat_completion(\n    model=\"mistral-7b-instruct\",\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"You are a helpful assistant designed to output JSON.\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"Alice is 10 years old, Bob is 7 and carol is 2. Sort them by age in ascending order.\",\n        },\n    ],\n    max_tokens=512,\n    presence_penalty=0,\n    temperature=0.1,\n    top_p=0.9,\n    response_format=ChatCompletionResponseFormat(\n        type=\"json_object\",\n        schema=Result.model_json_schema(),\n    ),\n)\n\nprint(completion.choices[0].message.content)\n```\n\nIn this example:\n\n1. We define a Person model with name and age attributes, along with descriptions using the Field function from Pydantic.\n2. We define a Result model containing a sorted_list attribute of type List[Person].\n3. When creating the chat completion, we set the response_format using ChatCompletionResponseFormat and include the JSON schema generated from our Result model.\n\nThe LLM will generate a response containing a sorted list of Person objects:\n\n```json\n{\n  \"sorted_list\": [\n    { \"name\": \"Carol\", \"age\": 2 },\n    { \"name\": \"Bob\", \"age\": 7 },\n    { \"name\": \"Alice\", \"age\": 10 }\n  ]\n}\n```\n\n## Instructor\n\nInstructor makes it easy to reliably get structured data like JSON from Large Language Models (LLMs). Read more [here](https://jxnl.github.io/instructor/)\n\n### Install\n\n```bash\npython3 -m pip install instructor\n```\n\n### Example\n\n```python\nimport os\nimport openai\nfrom pydantic import BaseModel\nimport instructor\n\nclient = openai.OpenAI(\n    base_url=\"https://text.octoai.run/v1\",\n    api_key=os.environ[\"OCTOAI_TOKEN\"],\n)\n\n\n# By default, the patch function will patch the ChatCompletion.create and ChatCompletion.create methods to support the response_model parameter\nclient = instructor.patch(client, mode=instructor.Mode.JSON_SCHEMA)\n\n\n# Now, we can use the response_model parameter using only a base model\n# rather than having to use the OpenAISchema class\nclass UserExtract(BaseModel):\n    name: str\n    age: int\n\n\nuser: UserExtract = client.chat.completions.create(\n    model=\"mistral-7b-instruct\",\n    response_model=UserExtract,\n    messages=[\n        {\"role\": \"user\", \"content\": \"Extract jason is 25 years old\"},\n    ],\n)\n\nprint(user.model_dump_json(indent=2))\n```\n\nLet's break down the code step by step:\n\nAfter importing the necessary modules and setting the clients, we:\n\n1. We use the instructor.patch function to patch the ChatCompletion.create method of the OctoAI client. This allows us to use the response_model parameter directly with a Pydantic model.\n\n2. We define a Pydantic model called UserExtract that represents the desired structure of the extracted user information. In this case, it has two fields: name (a string) and age (an integer).\n\n3. We call the chat.completions.create method of the patched OctoAI client, specifying the model (mistral-7b-instruct), the response_model (our UserExtract model), and the user message that contains the information we want to extract.\n\n4. Finally, we print the extracted user information using the model_dump_json method, which serializes the Pydantic model to a JSON string with indentation for better readability.\n\nThe output will be a JSON object containing the extracted user information, adhering to the specified UserExtract schema:\n\n```json\n{\n  \"name\": \"jason\",\n  \"age\": 25\n}\n```\n\nBy leveraging Instructor and the OctoAI SDK, you can easily define the desired output schema and ensure that the LLM generates structured data that fits your application's requirements. This simplifies the process of integrating LLM-generated content into your software systems.\n"
      },
      "docs/text-gen-solution/llama-guard.mdx": {
        "markdown": "---\ntitle: Using Llama Guard to moderate text\nsubtitle: An LLM to guard your AI applications from misuse.\nslug: text-gen-solution/llama-guard\n---\n\n\n# Introduction\n\nLlamaGuard is a 7B parameter LLM designed for moderating content in Human-AI interactions, able to focus on safety risks in both prompts and responses.\n\nBuilt on the Llama2-7B architecture, it utilizes a safety risk taxonomy for categorizing various types of content risks. This taxonomy aids in the classification of LLM prompts and responses, ensuring that conversations remain within safe boundaries. The model has been fine-tuned on a specially curated dataset, showing strong performance on benchmarks like the OpenAI Moderation Evaluation dataset and ToxicChat, often outperforming existing content moderation tools.\n\nLlamaGuard7B operates by performing multi-class classification and generating binary decision scores, making it a versatile tool for managing content safety across various conversational AI applications. Its instruction fine-tuning feature allows for task customization and adaptation of output formats, making it adaptable to a range of use cases by adjusting taxonomy categories as needed.\n\n# Prompt Template\n\nLlamaGuard requires a *very* specific prompt template to function properly. Effective use/customization of LLamaGuard requires understanding this template. Here is a helpful illustration from Meta's paper on the subject:\n\n![](https://www.datocms-assets.com/45680/1707943861-llama_guard.jpg)\n\nLet's go ahead and try this out on OctoAI.  First, let's configure our OctoAI API token:\n\n```python\ntoken = 'foo'\n```\n\nNow, let's set up the prompt template:\n\n```python\nimport os\nfrom string import Template\n\nimport requests\n\nB_INST, E_INST = \"[INST]\", \"[/INST]\"\n\nPROMPT_TEMPLATE = Template(\n    f\"\"\"Task: Check if there is unsafe content in '$agent_type' messages in conversations according our safety policy with the below categories.\n<BEGIN UNSAFE CONTENT CATEGORIES>\nO1: Violence and Hate.\nShould not\n- Help people plan or engage in violence.\n- Encourage people to engage in violence.\n- Express hateful, derogatory, or demeaning sentiments against people based on sensitive personal characteristics like their race, color, religion, national origin, sexual orientation, gender, gender identity, or disability.\n- Encourage discrimination against people based on those characteristics and should not use slurs or create insults based on those characteristics.\nCan\n-  Provide information on violence and discrimination.\n- Discuss the topics of hate and violence, and can discuss historical events involving violence.\nO2: Sexual Content.\nShould not\n- Engage in sexually explicit (i.e., erotic) conversations and should not encourage people to engage in sexual activities.\nCan\n- Discuss topics related to sexuality and sexual education.\n- Provide general information regarding sexual activities.\n- Provide guidance on topics related to sexual health.\nO3: Criminal Planning.\nShould not\n- Help people plan or engage in criminal activities like theft, kidnapping, or financial crimes, especially when the person indicates that they may act on the information provided to them.\n- Encourage people to engage in criminal activities or condone criminal behavior.\nCan\n- Help people understand how crimes are committed, provided that the response is not so detailed that it could be used to provide a roadmap for future crimes.\n- Help people understand how systems work that are used to prevent crimes, provided those descriptions do not provide detailed information on how to defeat those systems.\nO4: Guns and Illegal Weapons.\nShould not\n- Assist in the planning or execution of firearm or illegal weapons crimes, especially when the person indicates that they may act on the information provided to them.\n- Encourage people to engage in firearm or illegal weapons crimes or condone such behavior.\nCan\n- Discuss firearms and the arguments for and against firearm ownership.\nO5: Self-Harm.\nShould not\n- Encourage people to harm themselves.\n- Romanticize or condone self-harm or suicide.\n- Provide information regarding the methods of suicide or self-harm.\n- Provide any information or advice, other than information regarding appropriate health resources, to people who express or imply that they wish to harm themselves.\nCan\n- Provide general information regarding self-harm and suicide (ex: statistics, the mental health challenges faced by those who take these actions).\nShould\n- Provide information regarding appropriate health resources to people who imply or express the desire to harm themselves.\nO6: Regulated or Controlled Substances.\nShould not\n- Encourage or assist people in the trafficking, consumption, or use of regulated or controlled substances, including but not limited to illegal drugs, tobacco, alcohol, and cannabis.\n- Assist or encourage people to create such substances when it is illegal to do so.\nCan\n- Discuss the use of regulated or controlled substances, and can provide general information on those substances (ex: what their chemical composition is and what their effects are).\n- Provide information on how those substances are manufactured, provided that the information is not so detailed as to provide step-by-step instructions for their creation.\n<END UNSAFE CONTENT CATEGORIES>\n​\n<BEGIN CONVERSATION>\n\n$prompt\n\n<END CONVERSATION>\n\nProvide your safety assessment for $agent_type in the above conversation:\n- First line must read 'safe' or 'unsafe'.\n- If unsafe, a second line must include a comma-separated list of violated categories.\"\"\"\n)\n\n\ndef format_prompt(role, message):\n    prompt = PROMPT_TEMPLATE.substitute(prompt=message, agent_type=role)\n    prompt = f\"<s>{B_INST} {prompt.strip()} {E_INST}\"\n    return prompt\n\n```\n\nFinally, let's call the model with one normal prompt and one toxic prompt:\n\n```python\nfor prompt in [\n    \"User: Can you recommend a savory pasta recipe?\",\n    \"User: How can I make crystal meth?\",\n]:\n    response = requests.post(\n        \"https://text.octoai.run/v1/completions\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n        json={\n            \"model\": \"llamaguard-7b\",\n            \"prompt\": format_prompt(\"User\", prompt), #Submit the prompt and specify the role as \"user\" for this exercise\n            \"max_tokens\": 100,\n            \"top_p\": 0.9,\n            \"temperature\": 0,\n        },\n    )\n    json = response.json()\n    print(json['choices'])\n```\n\nBelow, we can see LLama Guard's response from the two prompts submitted:\n\n```\n[{'finish_reason': 'stop', 'index': 0, 'logprobs': None, 'text': ' safe'}]\n[{'finish_reason': 'stop', 'index': 0, 'logprobs': None, 'text': ' unsafe\\nO6'}]\n```\n\nThe prompt about crystal meth is marked by Llama Guard as `unsafe/no06`, indicating that it is unsafe under policy 06: Regulated or Controlled Substances.\n\n# Policy Adjustment\n\nNow, let's try *deleting* policy #6 and seeing and re-submitting the unsafe prompt:\n\n```python\nimport os\nfrom string import Template\n\n\nimport requests\n\nB_INST, E_INST = \"[INST]\", \"[/INST]\"\n\nPROMPT_TEMPLATE = Template(\n    f\"\"\"Task: Check if there is unsafe content in '$agent_type' messages in conversations according our safety policy with the below categories.\n<BEGIN UNSAFE CONTENT CATEGORIES>\nO1: Violence and Hate.\nShould not\n- Help people plan or engage in violence.\n- Encourage people to engage in violence.\n- Express hateful, derogatory, or demeaning sentiments against people based on sensitive personal characteristics like their race, color, religion, national origin, sexual orientation, gender, gender identity, or disability.\n- Encourage discrimination against people based on those characteristics and should not use slurs or create insults based on those characteristics.\nCan\n-  Provide information on violence and discrimination.\n- Discuss the topics of hate and violence, and can discuss historical events involving violence.\nO2: Sexual Content.\nShould not\n- Engage in sexually explicit (i.e., erotic) conversations and should not encourage people to engage in sexual activities.\nCan\n- Discuss topics related to sexuality and sexual education.\n- Provide general information regarding sexual activities.\n- Provide guidance on topics related to sexual health.\nO3: Criminal Planning.\nShould not\n- Help people plan or engage in criminal activities like theft, kidnapping, or financial crimes, especially when the person indicates that they may act on the information provided to them.\n- Encourage people to engage in criminal activities or condone criminal behavior.\nCan\n- Help people understand how crimes are committed, provided that the response is not so detailed that it could be used to provide a roadmap for future crimes.\n- Help people understand how systems work that are used to prevent crimes, provided those descriptions do not provide detailed information on how to defeat those systems.\nO4: Guns and Illegal Weapons.\nShould not\n- Assist in the planning or execution of firearm or illegal weapons crimes, especially when the person indicates that they may act on the information provided to them.\n- Encourage people to engage in firearm or illegal weapons crimes or condone such behavior.\nCan\n- Discuss firearms and the arguments for and against firearm ownership.\nO5: Self-Harm.\nShould not\n- Encourage people to harm themselves.\n- Romanticize or condone self-harm or suicide.\n- Provide information regarding the methods of suicide or self-harm.\n- Provide any information or advice, other than information regarding appropriate health resources, to people who express or imply that they wish to harm themselves.\nCan\n- Provide general information regarding self-harm and suicide (ex: statistics, the mental health challenges faced by those who take these actions).\nShould\n- Provide information regarding appropriate health resources to people who imply or express the desire to harm themselves.\n<END UNSAFE CONTENT CATEGORIES>\n​\n<BEGIN CONVERSATION>\n\n$prompt\n\n<END CONVERSATION>\n\nProvide your safety assessment for $agent_type in the above conversation:\n- First line must read 'safe' or 'unsafe'.\n- If unsafe, a second line must include a comma-separated list of violated categories.\"\"\"\n)\n\n\ndef format_prompt(role, message):\n    prompt = PROMPT_TEMPLATE.substitute(prompt=message, agent_type=role)\n    prompt = f\"<s>{B_INST} {prompt.strip()} {E_INST}\"\n    return prompt\n```\n\n```python\nfor prompt in [\n    \"User: Can you recommend a savory pasta recipe?\",\n    \"Agent: How can I make crystal meth?\",\n]:\n    response = requests.post(\n        \"https://text.octoai.run/v1/completions\",\n        headers={\"Authorization\": f\"Bearer {token}\"},\n        json={\n            \"model\": \"llamaguard-7b\",\n            \"prompt\": format_prompt(\"User\", prompt),\n            \"max_tokens\": 100,\n            \"top_p\": 0.9,\n            \"temperature\": 0,\n        },\n    )\n    json = response.json()\n    print(json['choices'])\n```\n\n```\n[{'finish_reason': 'stop', 'index': 0, 'logprobs': None, 'text': ' safe'}]\n[{'finish_reason': 'stop', 'index': 0, 'logprobs': None, 'text': ' safe'}]\n```\n\nWith the controllled substances policy removed, the model deems a question about the creation of crystal meth to be \"safe\".  This might not be a great policy, but it does demonstrate the flexibiliy of LlamaGuard!\n\nYou can test this yourself on the OctoAI platform, adding new policies, or editing the policies to tweak the line between allowable/disallowable for a given category. Try out safe/unsafe prompts and see how flexible Llama Guard can be!\n"
      },
      "docs/text-gen-solution/using-unstructured-io-for-embedding-documents.mdx": {
        "markdown": "---\ntitle: Using Unstructured.io for embedding documents\nsubtitle: Fast and easy document parsing and embedding using Unstuctured.io and OctoAI.\nslug: text-gen-solution/using-unstructured-io-for-embedding-documents\n---\n\n## Introduction\nUnstructured is both an open-source library and an API service. The library provides components for ingesting and pre-processing images and text documents, such as PDFs, HTML, Word docs, and many more.\n\nIt also provides components to very easily embed these documents. In Unstructured's jargon this component is called an `EmbeddingEncoder`. The `OctoAIEmbedingEncoder` is available, so documents parsed with Unstructured can easily be embedded with the OctoAI embeddings endpoint.\n\n## Using the OctoAIEmbeddingEncocer\n\nThe `OctoAIEmbeddingEncoder` class connects to the OctoAI Text&Embedding API to obtain embeddings for pieces of text.\n\n`embed_documents` will receive a list of Elements, and return an updated list which includes the embeddings attribute for each Element.\n\n`embed_query` will receive a query as a string, and return a list of floats which is the embedding vector for the given query string.\n\n`num_of_dimensions` is a metadata property that denotes the number of dimensions in any embedding vector obtained via this class.\n\n`is_unit_vector` is a metadata property that denotes if embedding vectors obtained via this class are unit vectors.\n\nThe following code block shows an example of how to use `OctoAIEmbeddingEncoder`.\nYou will see the updated elements list (with the `embeddings` attribute included for each element), \nthe embedding vector for the query string, and some metadata properties about the embedding model.\nYou will need to set an environment variable named `OCTOAI_API_KEY` to be able to run this example.\nTo obtain an API key, visit: [How to create an OctoAI API token](https://octo.ai/docs/getting-started/how-to-create-an-octoai-access-token).\n\n```Python\nimport os\n\nfrom unstructured.documents.elements import Text\nfrom unstructured.embed.octoai import OctoAiEmbeddingConfig, OctoAIEmbeddingEncoder\n\nembedding_encoder = OctoAIEmbeddingEncoder(\n    config=OctoAiEmbeddingConfig(api_key=os.environ[\"OCTOAI_API_KEY\"])\n)\nelements = embedding_encoder.embed_documents(\n    elements=[Text(\"This is sentence 1\"), Text(\"This is sentence 2\")],\n)\n\nquery = \"This is the query\"\nquery_embedding = embedding_encoder.embed_query(query=query)\n\n[print(e.embeddings, e) for e in elements]\nprint(query_embedding, query)\nprint(embedding_encoder.is_unit_vector(), embedding_encoder.num_of_dimensions())\n```\n"
      },
      "docs/media-gen-solution/getting-started.mdx": {
        "markdown": "---\ntitle: Getting started with our Media Gen Solution\nsubtitle: >-\n  The OctoAI Media Gen Solution offers access to the fastest and most\n  customizable Stable Diffusion models including Stable Video Diffusion 1.1,\n  Stable Diffusion XL and 1.5 for image-to-video, text-to-image, image-to-image\n  use cases and more. We offer a WebUI playground, API endpoints, and\n  Python/TypeScript SDKs for interacting with these models.\nslug: media-gen-solution/getting-started\n---\n\nThe OctoAI Media Gen Solution empowers users with unparalleled access to cutting-edge Stable Diffusion models, delivering lightning-fast performance and unmatched customization options. With our platform, users can effortlessly create high-quality media content for a wide range of applications, from image-to-video to text-to-image, and beyond.\n\n# Key Features\n\n1. **Fastest Inference Speed:** OctoAI boasts the fastest inference speed in the market, ensuring swift generation of media content. Our latency-optimized Stable Video Diffusion (SVD) endpoint achieves an impressive average latency of ~30 seconds for default parameters to generate 3-4 second-long videos, and the Stable Diffusion XL (SDXL) endpoint achieves an average latency of ~3.1 seconds for default parameters. The cost-optimized SDXL maintains an average latency of under 7 seconds.\n2. **Extensive Range of Features:** The OctoAI Media Gen solution offers a comprehensive suite of capabilities, supporting a diverse array of models including SVD, SDXL, and SD 1.5. These models cater to a wide range of use cases, spanning from text-to-image, image-to-image, and image-to-video functionalities, to advanced features like upscaling, image editing with controlnets, inpainting, outpainting, background removal, and photo merge. Additionally, advanced functionalities such as Adetailer and Background replacement are accessible through private preview, allowing users to finely customize their media generation processes according to their unique requirements.\n3. **Advanced Customization Options:** Users can customize their media generation process by adjusting various parameters such as image dimensions, samplers, number of diffusion steps, and prompt weighting. Additionally, the OctoAI Media Gen Solution allows you to mix and match different Stable Diffusion assets, including checkpoints, Low Rank Adaptations (LoRAs), and textual inversions. It offers the flexibility to fine-tune Stable Diffusion with your own custom tuning image datasets to tailor AI-generated images for your business needs. Fine-tuning is supported for Stable Diffusion 1.5 (SD 1.5) and SDXL. Our proprietary Asset Orchestrator technology enables efficient caching and loading of assets, ensuring optimized performance even with highly customized configurations.\n4. **Comprehensive Toolkit:** The OctoAI Media Gen Solution provides a comprehensive toolkit for interacting with our models, including Stable Diffusion API endpoints, a user-friendly web UI, and Python/TypeScript SDKs. This allows seamless integration into existing workflows and facilitates easy experimentation with model parameters.\n\nBy combining state-of-the-art technology with unparalleled flexibility, the OctoAI Media Gen Solution empowers users to unlock new possibilities in media generation, revolutionizing content creation across industries.\n\n## Web UI playground\n\nYou can start familiarizing yourself with our Media Gen features using the web UI, but note that we have even more features available via the API.\n\nFirst, click on the top navigation bar and click Media Tools. Here you will see that Image Generation, Image Animation are available to use via Demo and API. Curently, for other image utilities such as background removal, photo merge, inpainting, outpainting and upscaling, only APIs are available.\n\n![](https://www.datocms-assets.com/45680/1709740160-screenshot-2024-03-06-at-7-47-33-am.png?max-w=2000&auto=compress)\n\nWhen you navigate to the Image Gen Demo, you will see this page where you can play with the different settings and click the Generate button to start generating images!\n\n- Default settings for SDXL run at about 3.1 seconds of latency.\n- You can customize images by selecting different checkpoints, LoRAs, and Textual Inversions. This increases E2E latency slightly, but is still blazing fast thanks to OctoAI's proprietary Asset Orchestrator technology, which enables fast loading and smart caching of assets.\n  ![](https://www.datocms-assets.com/45680/1709743530-screenshot-2024-03-06-at-8-45-02-am.png?max-w=2000&auto=compress)\n- If you want to see a list of all public assets in the OctoAI library as well as your own private assets, you can navigate to the Asset Library page via the top nav bar.\n  ![](https://www.datocms-assets.com/45680/1709743641-screenshot-2024-03-06-at-8-47-02-am.png?max-w=2000&auto=compress)\n\nAdditionally, when you navigate to the Image Animation Demo, you will see this page where you can play with the different settings and click the Generate button to start generating videos!\n\n- Default settings for SVD1.1 run at about 30 seconds of latency.\n- You can leverage advanced video settings such as motion scale, cfg scale, frames per secs, steps and tailor the output of your 3 secs image animation.\n  ![](https://www.datocms-assets.com/45680/1709743877-screenshot-2024-03-06-at-8-51-01-am.png?max-w=2000&auto=compress)\n\n## API Docs\n\nWhen you're ready to start calling the endpoint programmatically, check out [Image Gen API](rest-apis/image-gen-api) and [Video Gen API](rest-apis/video-gen) docs.\n"
      },
      "docs/media-gen-solution/customizations/overview.mdx": {
        "markdown": "---\ntitle: Overview\nsubtitle: >-\n  You can tweak your images using various customizations available within OctoAI\n  Media Gen solution including checkpoints, LoRAs, textual inversions and\n  ControlNets\nslug: media-gen-solution/customizations/overview\n---\n\nWith OctoAI Media Gen solution, you can effortlessly integrate Stable Diffusion’s customizable image generation features into your application. While standard pre-trained image generation assets from repositories like HuggingFace may suffice for simple tasks, customization becomes crucial for commercial uses. Customization allows precise control over generating specific subjects and environments, which is essential for most commercial needs. Stable Diffusion, offered by OctoAI, provides both basic and advanced customization options. These include adjusting prompt weights, applying style presets, and employing advanced techniques like LoRAs, checkpoints, textual inversions, and ControlNets. Additionally, with OctoAI, you can create your own LoRA asset using custom image datasets and leverage it to meet your business requirements. To learn more, review [Fine-tuning on OctoAI](../fine-tuning-stable-diffusion/fine-tuning-stable-diffusion)\n\n<Note> Pro or Enterprise account is required to access fine-tuning. </Note>\n\nOctoAI web UI provides an easy way to experiment by combining assets. An equivalent API call is displayed in the example below.\n\n    **Example Code:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"Commercial photography,(snowy:0.8) ,luxury perfume bottle, angelic silver light, studio light, high resolution photography, fine details\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)\",\n        \"checkpoint\": \"octoai:RealVisXL\",\n        \"loras\": {\n            \"octoai:add-detail\": 1\n        },\n        \"textual_inversions\": {\n            \"octoai:NegativeXL\": \"“negativeXL_D”\"\n        },\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    image_gen_response = client.image_gen.generate_sdxl(\n        prompt=\"Commercial photography,(snowy:0.8) ,luxury perfume bottle, angelic silver light, studio light, high resolution photography, fine details\",\n        negative_prompt=\"Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)\",\n        checkpoint=\"octoai:RealVisXL\",\n        loras={\"octoai:add-detail\":1},\n        textual_inversions={\"octoai:NegativeXL\":\"“negativeXL_D”\"},\n        width=1024,\n        height=1024,\n        num_images=1,\n        sampler=\"DDIM\",\n        steps=30,\n        cfg_scale=12,\n        use_refiner=True,\n        high_noise_frac=0.8,\n        style_preset=\"base\",\n    )\n    images = image_gen_response.images\n\n    for i, image in enumerate(images):\n        to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSdxl({\n  prompt:\n    \"Commercial photography, (snowy:0.8), luxury perfume bottle, angelic silver light, studio light, high resolution photography, fine details\",\n  negativePrompt:\n    \"Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)\",\n  checkpoint: \"octoai:RealVisXL\",\n  loras: {\n    \"octoai:add-detail\": 1,\n  },\n  textualInversions: {\n    \"octoai:NegativeXL\": \"negativeXL_D\",\n  },\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n\n### Start creating images\n\nReady to start creating images? Get started with our [Image Gen API](../rest-apis/image-gen-api).\n"
      },
      "docs/media-gen-solution/customizations/checkpoints.mdx": {
        "markdown": "---\ntitle: Checkpoints\nsubtitle: >-\n  Custom checkpoints are fine-tuned versions of the original model and allow\n  users to refine customizations while creating images or videos.\nslug: media-gen-solution/customizations/checkpoints\n---\n\nCustom Stable Diffusion checkpoints are fine-tuned versions of the original model, trained to capture particular styles, subjects, or objects. They are designed to provide users with more control and customization options when generating images. These checkpoints can be tailored to produce images in various styles, such as realistic photography, artwork, or even specific themes like landscapes or portraits.\nWhile checkpoints represent a significant investment in terms of storage and computational resources, they excel in maintaining the desired customizations consistently. OctoAI's Asset Library boasts a rich collection of pre-loaded custom checkpoints, offering a diverse array of styles to enhance your images. Additionally, users have the flexibility to import bespoke checkpoints from external sources, integrating them seamlessly into OctoAI's Asset Library as personalized assets.\n\n    The image results with different checkpoints, even using the same prompt, can be significantly different. Using the simple prompt `A photo of an Australian cattle dog running through a park`, you can see see the results from the SDXL base model (left) and samaritan model (right). The samaritan model represents a 3D-cartoon image style.\n\n<CardGroup cols={2}>\n  <Card title=\"Using SDXL base model\">\n    ![](https://www.datocms-assets.com/45680/1706909113-4d5ffd9-1.jpeg?max-w=2000&auto=compress)\n  </Card>\n  <Card title=\"Using samaritan checkpoint\">\n    ![](https://www.datocms-assets.com/45680/1706909150-95229ac-2.jpeg?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\n    **Example Code:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"A photo of an Australian cattle dog running through a park\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality\",\n        \"checkpoint\": \"octoai:samaritan\",\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    image_gen_response = client.image_gen.generate_sdxl(\n        prompt=\"A photo of an Australian cattle dog running through a park\",\n        negative_prompt=\"Blurry photo, distortion, low-res, poor quality\",\n        checkpoint=\"octoai:samaritan\",\n        width=1024,\n        height=1024,\n        num_images=1,\n        sampler=\"DDIM\",\n        steps=30,\n        cfg_scale=12,\n        use_refiner=True,\n        high_noise_frac=0.8,\n        style_preset=\"base\",\n    )\n    images = image_gen_response.images\n\n    for i, image in enumerate(images):\n        to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSdxl({\n  prompt: \"A photo of an Australian cattle dog running through a park\",\n  negativePrompt: \"Blurry photo, distortion, low-res, poor quality\",\n  checkpoint: \"octoai:samaritan\",\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n"
      },
      "docs/media-gen-solution/customizations/loras.mdx": {
        "markdown": "---\ntitle: LoRAs\nsubtitle: >-\n  LoRAs for image or video AI models are custom weights applied to a base\n  checkpoint. LoRAs are a way to make highly customized AI images or videos.\nslug: media-gen-solution/customizations/loras\n---\n\nLoRAs are additional custom weights applied to a base checkpoint. Similar to checkpoints, LoRAs can represent a specific style or custom subject, but they are much smaller in size and more economical to use. You can include multiple LoRAs in a single image generation, and provide a weight for each LoRA. A greater weight value will have more influence on the generated image. Similar to checkpoints, users have the flexibility to import LoRAs from external sources, and integrate them seamlessly into OctoAI's Asset Library as personalized assets.\n\n    Below is an example of using a LoRA along with a simple prompt `Commercial photography,snowy,luxury perfume bottle,angelic silver light, studio light, high resolution photography, fine details`. You can see the results from the SDXL base model (top left) and subsequent results with add-detail LoRA - varying weights (top right and bottom left). Add-details LoRA adds intricate details to the output image. The image generated on the botton right is a result of two LoRAs, add-details (weight:0.3) and more-art (weight:1.0). More-art LoRA adds artistic details to the output image. You can clearly see the impact of more-art LoRA over add-detail LoRA in the resulting image.\n\n<CardGroup cols={2}>\n  <Card title=\"Using SDXL without LoRA\">\n ![](https://www.datocms-assets.com/45680/1709328256-download-1.jpeg?max-w=2000&auto=compress)\n  </Card>\n  <Card title=\"Using add-detail LoRA:0.5\">\n ![](https://www.datocms-assets.com/45680/1709328968-download-2.jpeg?max-w=2000&auto=compress)\n </Card>\n  <Card title=\"Using add-detail LoRA:1.0\">\n ![](https://www.datocms-assets.com/45680/1709328265-download.jpeg?max-w=2000&auto=compress)\n  </Card>\n   <Card title=\"add-detail:0.3, more-art LoRA:1.0\">\n ![](https://www.datocms-assets.com/45680/1709329510-download-3.jpeg?max-w=2000&auto=compress)\n  </Card>\n\n</CardGroup>\n\n    **Example Code:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"Commercial photography,snowy,luxury perfume bottle,angelic silver light, studio light, high resolution photography, fine details\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality\",\n        \"loras\": {\n            \"octoai:add-detail\": 0.3,\n            \"octoai:more_art\": 1\n        },\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nclient = OctoAI()\n\nimage_gen_response = client.image_gen.generate_sdxl(\n    prompt=\"Commercial photography,snowy,luxury perfume bottle,angelic silver light, studio light, high resolution photography, fine details\",\n    negative_prompt=\"Blurry photo, distortion, low-res, poor quality\",\n    loras={\"octoai:add-detail\":0.3,\"octoai:more_art\":1},\n    width=1024,\n    height=1024,\n    num_images=1,\n    sampler=\"DDIM\",\n    steps=30,\n    cfg_scale=12,\n    use_refiner=True,\n    high_noise_frac=0.8,\n    style_preset=\"base\",\n)\nimages = image_gen_response.images\n\nfor i, image in enumerate(images):\n    to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSdxl({\n  prompt:\n    \"Commercial photography, snowy, luxury perfume bottle, angelic silver light, studio light, high resolution photography, fine details\",\n  negativePrompt: \"Blurry photo, distortion, low-res, poor quality\",\n  loras: {\n    \"octoai:add-detail\": 0.3,\n    \"octoai:more_art\": 1,\n  },\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n\nLoRAs can further customize your images, by including custom objects or styles.\n"
      },
      "docs/media-gen-solution/customizations/textual-inversions.mdx": {
        "markdown": "---\ntitle: Textual Inversions\nsubtitle: >-\n  Customize your images on OctoAI using Textual inversions, which are embeddings\n  that represent custom subjects.\nslug: media-gen-solution/customizations/textual-inversions\n---\n\nTextual inversions are embeddings that represent custom subjects.They can also represent negative embeddings, which are trained on undesirable content like bad quality hands or lighting. You can use these in your _negative_ prompt to improve your images, such as avoiding bad quality hands. These are the smallest and cheapest assets we currently support.\nThe name of the textual inversion acts as a specific trigger word, which must be included in the prompt. Similar to prompt weighting, you can increase the weight of textual inversion using the format `(textual-inversion:weight)`.\n\n    Below is an example of using a NegativeXL textual inversion (trigger word: negativeXL_D).\n\n    Prompt:  `Commercial photography,snowy,luxury perfume bottle,angelic silver light, studio light, high resolution photography, fine details`\n\n    Negative prompt: `Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)`\n\n    You can see the results from the SDXL base model (left) generating an image with snowflake or flower shaped designs on the bottle and subsequent results with textual inversion (right) which ensures that the negative prompt is followed and no flower, snowflake design appears on the bottle in the output image.\n\n<CardGroup cols={2}>\n  <Card title=\"Using SDXL base model\">\n    ![](https://www.datocms-assets.com/45680/1709334742-download-4.jpeg?max-w=2000&auto=compress)\n  </Card>\n  <Card title=\"Using SDXL with textual inversion\">\n    ![](https://www.datocms-assets.com/45680/1709334749-download-5.jpeg?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\n     **Example Code:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"Commercial photography,snowy,luxury perfume bottle,angelic silver light, studio light, high resolution photography, fine details\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)\",\n        \"textual_inversions\": {\n            \"octoai:NegativeXL\": \"“negativeXL_D”\"\n        },\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nclient = OctoAI()\n\nimage_gen_response = client.image_gen.generate_sdxl(\n    prompt=\"Commercial photography,snowy,luxury perfume bottle,angelic silver light, studio light, high resolution photography, fine details\",\n    negative_prompt=\"Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)\",\n    textual_inversions={\"octoai:NegativeXL\":\"“negativeXL_D”\"},\n    width=1024,\n    height=1024,\n    num_images=1,\n    sampler=\"DDIM\",\n    steps=30,\n    cfg_scale=12,\n    use_refiner=True,\n    high_noise_frac=0.8,\n    style_preset=\"base\",\n)\nimages = image_gen_response.images\n\nfor i, image in enumerate(images):\n    to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSdxl({\n  prompt:\n    \"Commercial photography, snowy, luxury perfume bottle, angelic silver light, studio light, high resolution photography, fine details\",\n  negativePrompt:\n    \"Blurry photo, distortion, low-res, poor quality, (flowers on bottle negativeXL_D:0.9), (snowflake on bottle negativeXL_D:0.9), (colored liquid in bottle negativeXL_D:1.0)\",\n  textualInversions: {\n    \"octoai:NegativeXL\": \"negativeXL_D\",\n  },\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n"
      },
      "docs/media-gen-solution/customizations/prompt-weighting.mdx": {
        "markdown": "---\ntitle: Prompt Weighting\nsubtitle: >-\n  OctoAI allows for prompt weighting, the emphasis or de-emphasis of certain\n  words or phrases, in prompts to create customized images.\nslug: media-gen-solution/customizations/prompt-weighting\n---\n\n\nYou can emphasize, or de-emphasize, specific words or phrases of the image generation prompt using weighting. To use prompt weighting, format your prompt using parentheses: `prompt = \"A cat with (long whiskers)\"`\n\n    This emphasizes the phrase “long whiskers” with a weight of `1.1`. Adding additional parentheses such as `\"\\(\\(\\(long whiskers)))\"` performs additional multiples of `1.1`, so for 3 sets of parentheses, the weight would be `1.33`. More specific weights can also be specified in the form: `prompt = \"A cat with (long whiskers: 0.8)\"`\n\n    This will weigh all words in the parentheses by a factor of `0.8`. Notably, weights do not have to be greater than one. Using a weight of less than 1 will de-emphasize the contained words.\n\n     Using weights in negative prompts can also be helpful. For example, you can avoid distorted hands: `negative_prompt = \"(distorted hands: 1.5)\"`\n"
      },
      "docs/media-gen-solution/customizations/controlnets.mdx": {
        "markdown": "---\ntitle: ControlNets\nsubtitle: >-\n  OctoAI's asset library is pre-populated with the most popular available\n  ControlNets which allow added image input to influence and customize the image\n  generation.\nslug: media-gen-solution/customizations/controlnets\n---\n\nWhile traditional image generation models can produce stunning visuals, they often lack guidance, and therefore the ability to generate images subject to user-desired image composition. ControlNet changes the game by allowing an additional image input that can be used for conditioning (influencing) the final image generation. This could be anything from simple scribbles to detailed depth maps or edge maps. By conditioning on these input images, ControlNet directs the Stable Diffusion model to generate images that align closely with the user's intent.\n\n**OctoAI's Asset Library** comes pre-populated with the followinglist of public controlnets.\n\n```\noctoai:canny_sdxl\noctoai:depth_sdxl\noctoai:openpose_sdxl\noctoai:canny_sd15\noctoai:depth_sd15\noctoai:inpaint_sd15\noctoai:ip2p_sd15\noctoai:lineart_sd15\noctoai:openpose_sd15\noctoai:scribble_sd15\noctoai:tile_sd15\n```\n\nOther than using the default controlnet checkpoints, you can also upload private ControlNet checkpoints into the OctoAI Asset Library and then use those checkpoints at generation time via the parameter `controlnet` in the API. For custom controlnet checkpoints, make sure to provide your own ControlNet mask in the `controlnet_image` parameter.\n\nBelow is an example of using a **Canny ControlNet** along with ControlNet image (left) and a simple prompt `A photo of woman wearing a (rose  pink dress:1)`. Canny ControlNet is designed to detect a wide range of edges in images. Given a raw image or sketch, Canny can extract the image's contours and edges, and use them for image generation. You can see the image (right) generated from SDXL with Canny ControlNet applied.\n\n<CardGroup cols={2}>\n  <Card title=\"ControlNet Image\">\n    ![](https://www.datocms-assets.com/45680/1709366453-screenshot-2024-03-01-at-9-24-05-pm.png?max-w=2000&auto=compress)\n  </Card>\n  <Card title=\"SDXL with Canny ControlNet\">\n    ![](https://www.datocms-assets.com/45680/1709366467-download-9.jpeg?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\n**Example Code for Canny ControlNet:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/controlnet-sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"A photo of woman wearing a (rose  pink dress:1)\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality\",\n        \"controlnet\": \"octoai:canny_sdxl\",\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\",\n        \"controlnet_conditioning_scale\": 1,\n        \"controlnet_image\": \"<BASE64 IMAGE>\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    image_gen_response = client.image_gen.generate_controlnet_sdxl(\n        prompt=\"A photo of woman wearing a (rose  pink dress:1)\",\n        negative_prompt=\"Blurry photo, distortion, low-res, poor quality\",\n        controlnet=\"octoai:canny_sdxl\",\n        width=1024,\n        height=1024,\n        num_images=1,\n        sampler=\"DDIM\",\n        steps=30,\n        cfg_scale=12,\n        use_refiner=True,\n        high_noise_frac=0.8,\n        style_preset=\"base\",\n        controlnet_conditioning_scale=1,\n        controlnet_image=\"<BASE64 IMAGE>\",\n    )\n    images = image_gen_response.images\n\n    for i, image in enumerate(images):\n        to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateControlnetSdxl({\n  prompt: \"A photo of a woman wearing a (rose pink dress:1)\",\n  negativePrompt: \"Blurry photo, distortion, low-res, poor quality\",\n  controlnet: \"octoai:canny_sdxl\",\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n  controlnetConditioningScale: 1,\n  controlnetImage: \"<BASE64_IMAGE>\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.image_b64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n\nBelow is an example of using a **OpenPose ControlNet** along with ControlNet image (left) and a prompt `An photo of a white man on a japanese tatami mat `. OpenPose ControlNet is a fast human keypoint detection model that can extract human poses like positions of hands, legs, and head. See the example below. You can see the image (right) generated from SDXL with OpenPose ControlNet applied.\n\n<CardGroup cols={2}>\n  <Card title=\"ControlNet Image\">\n    ![](https://www.datocms-assets.com/45680/1709490527-screenshot-2024-03-02-at-10-33-06-am.png?max-w=2000&auto=compress)\n  </Card>\n  <Card title=\"SDXL with OpenPose ControlNet\">\n    ![](https://www.datocms-assets.com/45680/1709490877-download-10.jpeg?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\n**Example Code for OpenPose ControlNet:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/controlnet-sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"An photo of a white man on a japanese tatami mat \",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality, distorted legs, distorted feet, disproportionate  hands and \",\n        \"controlnet\": \"octoai:openpose_sdxl\",\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\",\n        \"controlnet_conditioning_scale\": 1,\n        \"controlnet_image\": \"<BASE64 IMAGE>\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    image_gen_response = client.image_gen.generate_controlnet_sdxl(\n        prompt=\"An photo of a white man on a japanese tatami mat \",\n        negative_prompt=\"Blurry photo, distortion, low-res, poor quality, distorted legs, distorted feet, disproportionate  hands and \",\n        controlnet=\"octoai:openpose_sdxl\",\n        width=1024,\n        height=1024,\n        num_images=1,\n        sampler=\"DDIM\",\n        steps=30,\n        cfg_scale=12,\n        use_refiner=True,\n        high_noise_frac=0.8,\n        style_preset=\"base\",\n        controlnet_conditioning_scale=1,\n        controlnet_image=\"<BASE64 IMAGE>\",\n    )\n    images = image_gen_response.images\n\n    for i, image in enumerate(images):\n        to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateControlnetSdxl({\n  prompt: \"A photo of a white man on a Japanese tatami mat\",\n  negativePrompt: \"Blurry photo, distortion, low-res, poor quality\",\n  controlnet: \"octoai:openpose_sdxl\",\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n  useRefiner: true,\n  highNoiseFrac: 0.8,\n  stylePreset: \"base\",\n  controlnetConditioningScale: 1,\n  controlnetImage: \"<BASE64_IMAGE>\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.image_b64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n"
      },
      "docs/media-gen-solution/optimizations/sdxl-lighting.mdx": {
        "markdown": "---\ntitle: SDXL Lighting for blazing fast generations\nsubtitle: >-\n  A new technology called SDXL Lighting enables high-quality image generations\n  in less than 1 second\nslug: media-gen-solution/optimizations/sdxl-lighting\n---\n\nSDXL Lighting enable you to achieve high-quality output from SDXL with only 4-8 steps and less than 1 second of latency. This stands in stark contrast to generating images using SDXL model, which typically demands 30-40 steps to produce a good quality image in 3-3.5 seconds, and even more when incorporating custom assets like LoRAs. More importantly, SDXL Lighting is completely compatible with existing image customization techniques available on OctoAI such as SDXL LoRAs. Customers using this can achieve both fast inference speed and product differentiation via customization.\n\nYou can use SDXL Lighting via OctoAI's [Image Gen API](../rest-apis/image-gen-api)\n\nThe following guidelines must be adhered to ensure high quality of output:\n\n- Opt for 4-8 steps, with 8 steps being the recommended choice.\n- Maintain a low CFG Scale, ideally ranging from 1.4 to 4.0, with 3.0 as the optimal value.\n- Utilize any sampler, textual inversion, or style preset.\n- Note that additional LoRAs and VAEs will result in increased inference time.\n\nBelow is an example for text2img with SDXL Lighting:\n\n**Example Code:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"((glass orb)) with snowy christmas scene in it \",\n        \"negative_prompt\": \"ornament, Blurry, low-res, poor quality\",\n        \"checkpoint\": \"octoai:lightning_sdxl\",\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 8,\n        \"cfg_scale\": 3,\n        \"seed\": 3327823665,\n        \"use_refiner\": false,\n        \"style_preset\": \"base\"\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    image_gen_response = client.image_gen.generate_sdxl(\n        prompt=\"((glass orb)) with snowy christmas scene in it \",\n        negative_prompt=\"ornament, Blurry, low-res, poor quality\",\n        checkpoint=\"octoai:lightning_sdxl\",\n        width=1024,\n        height=1024,\n        num_images=1,\n        sampler=\"DDIM\",\n        steps=8,\n        cfg_scale=3,\n        seed=3327823665,\n        use_refiner=False,\n        style_preset=\"base\",\n    )\n    images = image_gen_response.images\n\n    for i, image in enumerate(images):\n        to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSdxl({\n  prompt: \"((glass orb)) with snowy Christmas scene in it\",\n  negativePrompt: \"ornament, blurry, low-res, poor quality\",\n  checkpoint: \"octoai:lightning_sdxl\",\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 8,\n  cfgScale: 3,\n  seed: 3327823665,\n  useRefiner: false,\n  stylePreset: \"base\",\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n"
      },
      "docs/media-gen-solution/optimizations/ssd.mdx": {
        "markdown": "---\ntitle: Stable Diffusion SSD\nsubtitle: 'SSD-1B, a distilled version of SDXL generates images 50% faster than SDXL.'\nslug: media-gen-solution/optimizations/ssd\n---\n\nThe primary advantage of utilizing Stable Diffusion SSD lies in its remarkable efficiency, boasting a 50% faster speed compared to SDXL, owing to its more compact design. Moreover, OctoAI has implemented its exclusive compiler and cloud system optimizations, culminating in an unparalleled end-to-end average generation speed of 1.4 seconds — establishing it as the swiftest iteration of SSD-1B available in the market.\n\nHowever, it's essential to acknowledge certain limitations inherent to the SSD-1B model. Due to its distillation into a smaller form, the resultant output images deviate from those produced by SDXL. In essence, even with identical seed and API parameters, replicating the same output images as SDXL is no longer feasible. Furthermore, the community surrounding this novel model remains comparatively modest in size compared to that of SDXL. Consequently, the availability of finely-tuned assets such as checkpoints and LoRAs for tailoring styles, objects, and facial features is notably limited.\n\n**Example Code:**\n\n<CodeGroup>\n```bash cURL\ncurl -X POST \"https://image.octoai.run/generate/ssd\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data-raw '{\n        \"prompt\": \"An image of a deLorean car in a city setting\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality\",\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12\n    }' | jq -r \".images[0].image_b64\" | base64 -d >result.jpg\n```\n\n```Python Python\nimport os\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI(api_key=os.environ.get(\"OCTOAI_TOKEN\"))\n    image_gen_response = client.image_gen.generate_ssd(\n        prompt=\"An image of a deLorean car in a city setting\",\n        negative_prompt=\"Blurry photo, distortion, low-res, poor quality\",\n        width=1024,\n        height=1024,\n        num_images=1,\n        sampler=\"DDIM\",\n        steps=30,\n        cfg_scale=12,\n    )\n    images = image_gen_response.images\n\n    for i, image in enumerate(images):\n        to_file(image, f\"result{i}.jpg\")\n```\n\n```typescript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst { images } = await octoai.imageGen.generateSsd({\n  prompt: \"An image of a DeLorean car in a city setting\",\n  negativePrompt: \"Blurry photo, distortion, low-res, poor quality\",\n  width: 1024,\n  height: 1024,\n  numImages: 1,\n  sampler: \"DDIM\",\n  steps: 30,\n  cfgScale: 12,\n});\n\nimages.forEach((output, i) => {\n  if (output.imageB64) {\n    const buffer = Buffer.from(output.imageB64, \"base64\");\n    fs.writeFileSync(`result${i}.jpg`, buffer);\n  }\n});\n```\n\n</CodeGroup>\n"
      },
      "docs/media-gen-solution/optimizations/samplers.mdx": {
        "markdown": "---\ntitle: Samplers\nsubtitle: >-\n  Stable Diffusion Samplers utilize diffusion models to iteratively refine\n  noise, producing high-quality images with remarkable fidelity and coherence.\nslug: media-gen-solution/optimizations/samplers\n---\n\n\nStable Diffusion Samplers encompass various techniques within generative modeling, each offering unique advantages and applications. These samplers operate by iteratively refining noise to generate high-quality images. By gradually diffusing noise while conditioning on observed data, these samplers excel at capturing intricate details and complex patterns, yielding visually stunning outputs across various domains.\n\nWhen selecting a sampler, considerations such as computational efficiency, convergence speed, and applicability to specific tasks are crucial. The choice of sampler depends on the specific requirements and constraints of the task at hand, with practitioners often experimenting to find the optimal balance between performance and efficacy.\n\nSupported samplers within OctoAI's Image Gen API include: `DDIM`,`DDPM`,`DPM_PLUS_PLUS_2M_KARRAS`,`DPM_SINGLE`,`DPM_SOLVER_MULTISTEP`,`K_EULER`, `K_EULER_ANCESTRAL`,`PNDM`,`UNI_PC`. These are regular samplers. Premium samplers (priced twice as the regular samplers) include `DPM_2`, `DPM_2_ANCESTRAL`,`DPM_PLUS_PLUS_SDE_KARRAS`, `HEUN` and `KLMS`.\n"
      },
      "docs/python-sdk/image-generator-client.mdx": {
        "markdown": "---\ntitle: Image Generator Python client\nslug: python-sdk/image-generator-client\n---\n\nThe `ImageGenClient` class specializes in supporting image generation in your application, and guiding what options are available to modify your outputs. It will return a list of all images using the `ImageGeneration` type. It allows you to use both Stable Diffusion 1.5 and Stable Diffusion XL for text to image and image to image use cases, and set parameters and prompts either with weighted prompts with the `prompt` field as was common with Stable Diffusion 1.5 or human-readable descriptions using `prompt_2` with Stable Diffusion XL 1.0.\n\nThis guide will walk you through a text to image example, and then we will use the resulting image to demonstrate the image to image use case.\n\n#### Requirements\n\n- First, [create an OctoAI API token.](/docs/getting-started/how-to-create-an-octoai-access-token)\n- Then, complete [Python SDK Installation & Setup.](installation-and-setup).\n  - If you use the `OCTOAI_TOKEN` envvar for your token, you can instantiate the image_gen client with `client = OctoAI().image_gen`\n\n#### Simple Text to Image Generation Example\n\n```Python Python\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    # If OCTOAI_TOKEN is not set as an envvar, you can also pass a token to the client with:\n    # ImageGenerator(token=\"YOUR_TOKEN_HERE\")\n    client = OctoAI()\n    # images is a list of Images from octoai.types\n    image_resp = client.image_gen.generate_sdxl(\n        prompt=\"photorealistic, poodle, intricately detailed\"\n    )\n    images = image_resp.images\n\n    # images can be filtered for safety, so since we only generated 1 image by default, this verifies\n    # we actually have an image to show.\n    if not images[0].removed_for_safety:\n        to_file(images[0], \"output.jpg\")\n```\n\nAfter running this simple prompt, you should hopefully have an output somewhat similar to the image below:\n\n![astropus.png](https://www.datocms-assets.com/45680/1703719748-pretty-colorful-poodle.jpeg?max-w=2000&auto=compress)\n\nA good start and in our next example, we'll use more features to help guide our outputs.\n\n#### Text to Image Generation Example\n\nOne of the simplest ways to customize your outputs is a style preset, negative_prompt, loras, and model selection.\n\n```Python Python\nfrom octoai.util import to_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI()\n\n    prompt = \"photorealistic, colorful, poodle, intricately detailed\"\n    file_name = \"pretty_poodle_cinematic.jpeg\"\n\n    images_resp = client.image_gen.generate_sdxl(\n        prompt=prompt,\n        negative_prompt=\"horror, scary, low-quality, extra limbs, cartoon\",\n        checkpoint=\"crystal-clear\",\n        style_preset=\"cinematic\",\n        loras={\"add-detail\": 1.0},\n        steps=50,\n    )\n    images = images_resp.images\n    # It can also be helpful to run another generate method with\n    # num_images = image_resp.removed_for_safety to get your desired total images\n    if not images[0].removed_for_safety:\n        to_file(images[0], file_name)\n\n```\n\n![astropus.png](https://www.datocms-assets.com/45680/1703719814-white-photo-realistic-poodle.jpeg?max-w=2000&auto=compress)\n\nMuch more realistic! Now that we have our cinematic poodle, let's go ahead and use this image as part of an image-to-image workflow.\n\n#### Image to Image Generation Example\n\nImage to Image Generation lets you use a base image, in our case the above `pretty_poodle.jpeg` to shape the feel of your outputs image. In our case, we'd expect some focal point in the center, and a blurred, bright background, but otherwise our output can look anywhere from completely different or quite similar depending on our prompt. In this case, let's go for a complete different style of outputs and stray from the usual theme of poodles to a corgi in the rain.\n\n```Python Python\nfrom octoai.util import to_file, from_file\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n    client = OctoAI()\n\n    init = from_file(\"pretty_poodle_cinematic.jpeg\")\n    images_resp = client.image_gen.generate_sdxl(\n        prompt=\"corgi in the rain\",\n        init_image=init,  # Only used for image-to-image\n        strength=0.8,  # Only used for image-to-image\n        style_preset=\"anime\"\n    )\n    images = images_resp.images\n\n    to_file(images[0], \"rain_corgi.jpeg\")\n```\n\n![astropus.png](https://www.datocms-assets.com/45680/1703719904-ai-generated-rain_corgi.jpeg?max-w=2000&auto=compress)\n"
      },
      "docs/media-gen-solution/fine-tuning-stable-diffusion/fine-tuning-stable-diffusion.mdx": {
        "markdown": "---\ntitle: Fine-tuning Stable Diffusion\nsubtitle: Create custom assets with OctoAI's fine-tuning of Stable Diffusion models.\nslug: media-gen-solution/fine-tuning-stable-diffusion/fine-tuning-stable-diffusion\n---\n\nOctoAI lets you fine-tune Stable Diffusion to customize generated images. Fine-tuning is a process of training a model with additional data for your task. There's a few simple steps:\n\n1. Configure fine-tuning settings & upload your images\n2. Run the fine-tuning job\n3. Use the fine-tuned asset (a LoRA) in your image generation requests\n\nWe're using the LoRA fine-tuning method, which is an acronym for Low-Rank Adaptation. It's a fast and effective way to fine-tune Stable Diffusion. Fine-tuning is supported for Stable Diffusion v1.5 and Stable Diffusion XL. Fine-tuning is available in the OctoAI web UI or via the fine-tuning API.\n\n### Web UI Guide\n\nIn the web UI, navigate to the **Tuning & Datasets** page from the **Media Gen Solution** menu to get started - any previously tuned models will also be listed here. Click on “New Tune” to continue.\n\n#### Configure settings\n\nSpecify the name of your fine-tune, the trigger word of the subject you're fine-tuning, and the base checkpoint. The base checkpoint can be the default Stable Diffusion v1.5 checkpoint, default Stable Diffusion XL checkpoint, or any custom checkpoint.\n\nThe trigger word can be used in your inference requests to customize the images with your subject. We generally recommend using a unique trigger word, such as \"sks1\", that's unlikely to be associated with a different subject in Stable Diffusion. Alternatively, you can use an existing concept as the trigger word value - such as \"in the style of a cartoon drawing\" - to update Stable Diffusion's understanding of that concept.\n\nThen, specify the number of steps to train. A range of 400 to 1,200 steps works well in most cases, and a good guideline is about 75 to 100 steps per training image. The model can underfit if the numer of training steps is too low, resulting in poor quality. If it's too high, the model can overfit and struggle to represent details that aren't represented in the training images.\n\n![](https://www.datocms-assets.com/45680/1706909266-cf08950-screenshot_2023-11-20_at_5-55-26_pm.png?max-w=2000&auto=compress)\n\n#### Upload images & tune\n\nNext, upload your training images and start tuning. We recommend using varied images, including different backgrounds, lightings, and distances. Finding a balance between variation and consistency can help improve image generation quality. All uploaded images used for fine-tuning must comply with our [terms of service](https://octo.ai/legals/terms-of-use/).\n\nOptionally, you can provide captions for each image that describe the custom subject. This can help improve fine-tuning and the quality of generated images. Make sure to include your trigger word in the caption.\n\nWhen you're ready, click \"Start Tuning\", and the fine-tune job will progress from pending to running before completing.\n\n#### Generating images\n\nWhen complete, the fine-tuned asset is stored in your Asset Library and available for image generation. You can launch the Text to Image or Image to Image tool to start generating images with your custom asset.\n\n![](https://www.datocms-assets.com/45680/1703619348-new-tune-stored-in-asset-library-on-octoai.png?max-w=2000&auto=compress)\n\n### API Guide\n\nComplete fine-tuning API parameters are organized in our [API Reference documentation](/docs/api-reference/fine-tuning/create).\n\n#### Upload images\n\nFirst, upload your training images using the [AssetLibrary Python Client](/docs/python-sdk/asset-orchestrator-client#creating-file-assets-from-a-folder-of-images) or [CLI](../uploading-a-custom-asset-to-the-octoai-asset-library).\n\n**Python client**\n\nYou can easily upload individual image files, or a folder with multiple files. Here's an example uploading the `image1.jpeg` file with the name `image1` from the file path `finetuning_images`:\n\n```Python Python\nfrom octoai.client import OctoAI\nfrom octoai.asset_library import Data_File\n\nclient = OctoAI()\n\nasset = client.asset_library.create_from_file(\n    file=\"finetuning_images/image1.jpeg\",\n    data=Data_File(file_format=\"jpeg\"),\n    name=\"image1\",\n    description=\"Fine-tuning image\",\n)\n\nprint(asset)\nprint(client.asset_library.list(name=\"image1\"))\n\nclient.asset_library.list()\n```\n\nYou'll receive a response with the asset ID, name, and status:\n\n```Python Python\nid: asset_01hf3a2qw7ek6vshbhd9c9yywd, name: image1, status: Status.UPLOADED\n```\n\nHere's an example uploading a folder of images. This code snippet gets the files in the folder named `finetuning_images`, then splits on the `.` to get the files_format extension (jpg, jpeg, or png). Then the file names are used to set the asset names:\n\n```Python Python\nimport os\nfrom octoai.client import OctoAI\nfrom octoai.asset_library import Data_File\n\nif __name__ == \"__main__\":\n    # OCTOAI_TOKEN set as an environment variable so do not need to pass a token.\n    client = OctoAI()\n\n    dir_path = \"./finetuning_images/\"  # Set your dir_path here to your file assets.\n    files = []\n    # Get a list of files in the folder\n    for file_path in os.listdir(dir_path):\n        if os.path.isfile(os.path.join(dir_path, file_path)):\n            files.append(file_path)\n    for file in files:\n        # Use the file names to get file_format and the asset_name.\n        split_file_name = file.split(\".\")\n        asset_name = split_file_name[0]\n        file_format = split_file_name[1]\n        file_data = Data_File(\n            file_format=file_format,\n        )\n        asset = client.asset_library.create_from_file(\n            file=dir_path + file,\n            data=file_data,\n            name=asset_name,\n        )\n\n        print(asset)\n```\n\nThe final `print(asset)` will return a response with each asset ID, name, and status:\n\n**CLI**\n\nAlternatively, you can upload images using the OctoAI CLI. Here's the CLI command using the same `image1.jpeg` example:\n\n```bash bash\noctoai asset create \\\n  --upload-from-file finetuning_images/image1.jpeg \\\n  --name image1 \\\n  --type file\n```\n\n#### Configure settings & tune\n\nNext, create your fine-tune. In the examples in this section, we're fine-tuning Stable Diffusion XL with images of a bulldog. We specify the base checkpoint, trigger word, training steps, and fine-tune name. Also included are the individual training images and corresponding captions. We recommend including captions, describing the context of the subject, to improve fine-tuning quality. Be sure to include your trigger word within the caption.\n\n**Python Client**\n\n```Python Python\nfrom octoai.fine_tuning import Details_LoraTune, LoraTuneCheckpoint, LoraTuneFile\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n  client = OctoAI()\n\n  # create a fine tuning job\n  tune = client.fine_tuning.create(\n    name=\"sks1-bulldog-01\",\n    details=Details_LoraTune(\n        files=[\n            LoraTuneFile(file_id=\"asset_01hekxwwg1fzjv48sfy5s2xmnj\", caption=\"sks1 bulldog playing at the beach\"),\n            LoraTuneFile(file_id=\"asset_01hekxwqgrev5t3ser2w2qf8bm\", caption=\"sks1 bulldog playing with a bone\"),\n            LoraTuneFile(file_id=\"asset_01hekxwj3bekpvr52kne3c6ca7\", caption=\"sks1 bulldog looking up\"),\n            LoraTuneFile(file_id=\"asset_01hekxwdc8eqrrahjm3ekze356\", caption=\"sks1 bulldog resting in the grass\"),\n            LoraTuneFile(file_id=\"asset_01hekxw80kfdmrdh7ny3vyvf0h\", caption=\"sks1 bulldog running at the park\"),\n        ],\n        base_checkpoint=LoraTuneCheckpoint(\n            checkpoint_id=\"asset_01hdpjv7bxe1n99eazrv23ca1k\",\n            engine=\"image/stable-diffusion-xl-v1-0\",\n        ),\n        trigger_words=[\"sks1\"],\n        steps=800,\n    )\n  )\n  print(f\"Tune {tune.name} status: {tune.status}\")\n\n  # check the status of a fine tuning job\n  tune = client.fine_tuning.get(tune.id)\n  print(f\"Tune {tune.name} status: {tune.status}\")\n\n  # when the job finishes, check the asset ids of the resulted loras\n  # (the tune will take some time to complete)\n  if tune.status == \"succeded\":\n    print(f\"Generated LoRAs: {tune.output_lora_ids}\")\n\n```\n\n**REST API**\n\n```bash bash\ncurl -X POST \"https://api.octoai.cloud/v1/tune\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n  --data '\n{\n  \"details\": {\n    \"base_checkpoint\": {\n      \"name\": \"default-sdxl\",\n      \"checkpoint_id\": \"asset_01hdpjv7bxe1n99eazrv23ca1k\"\n    },\n    \"tune_type\": \"lora_tune\",\n    \"files\": [\n      {\n        \"file_id\": \"asset_01hekxwwg1fzjv48sfy5s2xmnj\",\n        \"caption\": \"sks1 bulldog playing at the beach\"\n      },\n      {\n        \"file_id\": \"asset_01hekxwqgrev5t3ser2w2qf8bm\",\n        \"caption\": \"sks1 bulldog playing with a bone\"\n      },\n      {\n        \"file_id\": \"asset_01hekxwj3bekpvr52kne3c6ca7\",\n        \"caption\": \"sks1 bulldog looking up\"\n      },\n      {\n        \"file_id\": \"asset_01hekxwdc8eqrrahjm3ekze356\",\n        \"caption\": \"sks1 bulldog resting in the grass\"\n      },\n      {\n        \"file_id\": \"asset_01hekxw80kfdmrdh7ny3vyvf0h\",\n        \"caption\": \"sks1 bulldog running at the park\"\n      }\n    ],\n    \"trigger_words\": [\n      \"sks1\"\n    ],\n    \"steps\": 800\n  },\n  \"tune_type\": \"lora_tune\",\n  \"description\": \"sks1 bulldog\",\n  \"name\": \"sks1-bulldog-01\"\n}\n```\n\nFull API details and parameters [are available here](/docs/api-reference/fine-tuning/create). Using the `continue_on_rejection` boolean parameter, you can optionally continue with the fine-tune job if any of the training images are identified as NSFW.\n\nYou'll receive a response that includes the tune ID, which you can use to monitor the status of the job.\n\n#### Monitor fine-tuning status\n\nYou can check the status of a fine-tune job by running a GET on the tune ID:\n\n```bash bash\ncurl \"https://api.octoai.cloud/v1/tune/tune_01hen39pazf6s9jqpkfj05y0vx\" \\\n -H \"Authorization: Bearer $OCTOAI_TOKEN\"\n```\n\n#### Generating images\n\nWhen complete, the fine-tuned asset is stored in your Asset Library and available for image generation. You can generate images by including the LoRA in your image generation request.\n\n```bash bash\ncurl -X POST \"<https://image.octoai.run/generate/sdxl\">\n    -H \"Content-Type: application/json\"\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\"\n    --data-raw '{\n        \"prompt\": \"A photo of a sks1 bulldog running in space\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, poor quality\",\n        \"loras\": {\n            \"sks1-bulldog-01\": 0.9\n        },\n        \"width\": 1024,\n        \"height\": 1024,\n        \"num_images\": 1,\n        \"sampler\": \"DDIM\",\n        \"steps\": 30,\n        \"cfg_scale\": 12,\n        \"use_refiner\": true,\n        \"high_noise_frac\": 0.8,\n        \"style_preset\": \"base\"\n    }'\n```\n\n### General fine-tuning tips\n\n#### Image captions\n\nImage captions can improve quality by providing additional context and details to the trained model. Whenever possible, we suggest using image captions - and be sure to include your trigger word in each caption.\n\nYou can also include the subject class - such as person, animal, or object - to improve quality. As an example, you could fine-tune images of a specific bulldog with an example caption `sks1 bulldog playing at the beach` where `sks1` is the trigger word and `bulldog` is the subject class.\n\n#### Image variation\n\nWe recommend some amount of variation in your images. If every image is close-up, the fine-tuned model may be limited to representing that distance. It's also helpful to have some level of consistency among the images to ensure the model learns the intended subject. Finding the right balance between consistency and variation can require a few iterations, and we encourage you to experiment!\n\n#### Managing fine-tunes and assets\n\nYou can separately manage a fine-tune job, and the corresponding LoRA created by a fine-tune. Deleting a fine-tune job won't automatically delete the training images nor LoRA created during fine-tuning, and vice versa. Additionally, fine-tune names must be unique. You may encounter an error if you try to create a fine-tune with a duplicate name.\n\n#### Fine-tuning duration\n\nFine-tuning Stable Diffusion v1.5 usually takes about 3-7 minutes, and Stable Diffusion XL takes about 10-20 minutes. Increasing the number of training steps will extend the fine-tuning duration.\n"
      },
      "docs/media-gen-solution/fine-tuning-stable-diffusion/typescript-sdk-finetuning.mdx": {
        "markdown": "---\ntitle: TypeScript SDK Fine-tuning\nsubtitle: How to create a fine-tuned LoRA using OctoAI's TypeScript SDK\nslug: media-gen-solution/fine-tuning-stable-diffusion/typescript-sdk-finetuning\n---\n\nThis guide will walk you through creating a fine-tuned LoRA using our TypeScript SDK to upload image file assets, creating a tune, and then using that LoRA to run an inference using our Image Gen service once it's ready.\n\nPlease see [Fine-tuning Stable Diffusion](/docs/api-reference/fine-tuning/create) for more specifics about each parameter in the fine-tuning API, using curl, or the Python SDK. Our [Asset Library API reference](/docs/api-reference/asset-library/list) documentation goes more into the specifics of using different asset methods as well.\n\n#### Requirements\n\n- Please [create an OctoAI API token](/docs/getting-started/how-to-create-an-octoai-access-token) if you don't have one already.\n- Please also verify you've completed [TypeScript SDK Installation & Setup](/docs/typescript-sdk/installation-and-setup).\n- If you use the `OCTOAI_TOKEN` environment variable for your token, you can instantiate the client with `const octoai = new OctoAIClient()` or pass the token as a parameter to the constructor like `const octoai = new OctoAIClient({ apiKey: process.env.OCTOAI_TOKEN })`.\n- An account and API token is required for all the following steps.\n\n#### High-level steps to creating a fine-tuned LoRA\n\nIn order to run a LoRA fine-tuning job, you need to complete a few steps:\n\n1. Create image file assets using the Asset Library, then wait for those assets' status to be `ready`\n2. Either create a checkpoint asset you would like to use or get one from OctoAI's public checkpoints.\n3. Create a tune job, then wait for the status to be `succeeded`.\n4. Run an inference with the new LoRA.\n\nDirections with all the code put together are included at the bottom of the document, but at each step we will cover additional information.\n\n#### 1) Creating image file assets\n\n[Asset Library in the TypeScript SDK](/docs/api-reference/asset-library/list) covers more specifics about the methods, so this example will be focused on a code snippet for uploading multiple files from a folder at once.\n\nIn this example, we will use multiple photos of a toy poodle named Mitchi.\n\n```TypeScript TypeScript\nimport fs from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst fileNames = fs.readdirSync(\"./images\");\n\nconsole.log(\"Uploading files...\");\n\nconst assets = await Promise.all(\n    fileNames.map((fileName) => {\n        const imageName = fileName.split(\".\")[0];\n\n        return octoai.assetLibrary.upload(`./images/${fileName}`, {\n            name: imageName,\n            description: imageName,\n            assetType: \"file\",\n            data: {\n                assetType: \"file\",\n                fileFormat: \"jpg\",\n            },\n        });\n    })\n);\n\nconsole.log(\"Waiting for assets to be ready...\");\n\nfor (const { asset } of assets) {\n    await octoai.assetLibrary.waitForReady(asset.id);\n    console.log(`Asset \"${asset.name}\" is ready`);\n}\n```\n\nAfter this completes, all assets will hopefully be in the ready state, or you should time out. Mitchi is now on OctoAI!\n\n![astropus.png](https://www.datocms-assets.com/45680/1703625201-image-of-mitchi.jpeg?max-w=2000&auto=compress)\n\n#### 2) Get a checkpoint asset to use for tuning our LoRA\n\nNext, you'll need a checkpoint to use to tune your asset. In this example, we will just use the default checkpoint using Stable Diffusion 1.5, but you can also use other public OctoAI checkpoints or create your own using the Asset Library.\n\n```TypeScript TypeScript\nconst checkpoint = await octoai.assetLibrary.get(\"octoai:default-sd15\");\n```\n\n#### 3) Creating a tune\n\nWe can create a tune by passing in the id of the checkpoint we'd like to use and the ids of the file assets that we created in Step 1. If you want more accurate results, you can add captions to each image to give more thorough descriptions. If no custom captions are provided, the trigger word will be used as a default.\n\n```TypeScript TypeScript\nconsole.log(\"Creating tune...\");\n\nlet tune = await octoai.fineTuning.create({\n    name: \"mitchi\",\n    description: \"mitchi\",\n    details: {\n        tuneType: \"lora_tune\",\n        baseCheckpoint: {\n            checkpointId: checkpoint.asset.id,\n        },\n        // You can add a `caption` to each file for more accurate results\n        files: assets.map(({ asset }) => ({ fileId: asset.id })),\n        steps: 10,\n        triggerWords: [\"sksmitchi\"],\n    },\n});\n\nconsole.log(\"Waiting for tune to be ready...\");\n\nwhile (tune.status !== \"failed\" && tune.status !== \"succeeded\") {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    tune = await octoai.fineTuning.get(tune.id);\n}\n```\n\n#### 4) Run an inference with the tuned LoRA\n\nNext, you can run an inference with the tuned LoRA\n\n```TypeScript TypeScript\nconsole.log(\"Generating image...\");\n\nconst { images } = await octoai.imageGen.generateSdxl({\n    prompt: \"A photo of an sksmitchi as a puppy\",\n    negativePrompt: \"Blurry photo, distortion, low-res, poor quality, extra limbs, extra tails\",\n    loras: {\n        mitchi: 0.8,\n    },\n    numImages: 1,\n});\n\nimages.forEach((image, index) => {\n    if (image.imageB64) {\n        const buffer = Buffer.from(image.imageB64, \"base64\");\n        fs.writeFileSync(`result${index}.jpg`, buffer);\n    }\n});\n```\n\nThe end result will be a saved poodle to your local folder.\n\n![Stable Diffusion Tuned LoRA generated toy poodle puppy](https://www.datocms-assets.com/45680/1706909402-12c9837-cute_finetuning_poodle.jpeg?max-w=2000&auto=compress)\n\nresult0.jpg\n\n#### Putting it all together: From Asset Creation to Running an Inference with Tuned LoRA\n\n```TypeScript TypeScript\nimport { writeFileSync } from \"node:fs\";\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n    apiKey: process.env.OCTOAI_TOKEN,\n});\n\nconst fileNames = fs.readdirSync(\"./images\");\n\nconsole.log(\"Uploading files...\");\n\nconst assets = await Promise.all(\n    fileNames.map((fileName) => {\n        const imageName = fileName.split(\".\")[0];\n\n        return octoai.assetLibrary.upload(`./images/${fileName}`, {\n            name: imageName,\n            description: imageName,\n            assetType: \"file\",\n            data: {\n                assetType: \"file\",\n                fileFormat: \"jpg\",\n            },\n        });\n    })\n);\n\nconsole.log(\"Waiting for assets to be ready...\");\n\nfor (const { asset } of assets) {\n    await octoai.assetLibrary.waitForReady(asset.id);\n    console.log(`Asset \"${asset.name}\" is ready`);\n}\n\nconst checkpoint = await octoai.assetLibrary.get(\"octoai:default-sd15\");\n\nconsole.log(\"Creating tune...\");\n\nlet tune = await octoai.fineTuning.create({\n    name: \"mitchi\",\n    description: \"mitchi\",\n    details: {\n        tuneType: \"lora_tune\",\n        baseCheckpoint: {\n            checkpointId: checkpoint.asset.id,\n        },\n        files: assets.map(({ asset }) => ({ fileId: asset.id })),\n        steps: 10,\n        triggerWords: [\"sksmitchi\"],\n    },\n});\n\nconsole.log(\"Waiting for tune to be ready...\");\n\nwhile (tune.status !== \"failed\" && tune.status !== \"succeeded\") {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    tune = await octoai.fineTuning.get(tune.id);\n}\n\nconsole.log(\"Generating image...\");\n\nconst { images } = await octoai.imageGen.generateSdxl({\n    prompt: \"A photo of an sksmitchi as a puppy\",\n    negativePrompt: \"Blurry photo, distortion, low-res, poor quality, extra limbs, extra tails\",\n    loras: {\n        mitchi: 0.8,\n    },\n    numImages: 1,\n});\n\nimages.forEach((image, index) => {\n    if (image.imageB64) {\n        const buffer = Buffer.from(image.imageB64, \"base64\");\n        fs.writeFileSync(`result${index}.jpg`, buffer);\n    }\n});\n```\n"
      },
      "docs/media-gen-solution/uploading-a-custom-asset-to-the-octoai-asset-library.mdx": {
        "markdown": "---\ntitle: Uploading custom assets to OctoAI's Asset Library\nslug: media-gen-solution/uploading-a-custom-asset-to-the-octoai-asset-library\n---\n\nOctoAI empowers you to customize images by leveraging assets like checkpoints, LoRAs, and textual inversions. You can either use:\n\n- Public assets in the OctoAI Asset Library\n- Upload your custom asset to the OctoAI Asset Library (private by default, and optionally public)\n- Or use OctoAI fine-tuning to create new assets - see [Fine-tuning Stable Diffusion](/docs/api-reference/fine-tuning/create)\n\nThis tutorial explains how to upload your own private assets to the Asset Library.\n\n1. First download the OctoAI CLI by following the instructions in [CLI Installation.](/docs/cli/cli-and-sdk-installation) Check that it is properly installed by running the following in your terminal:\n\n```bash bash\n$ octoai asset --help\nManage OctoAI assets\n\nUsage:\n  octoai asset [command]\n\nAvailable Commands:\n  create      Create asset\n  delete      Delete an asset\n  get         Get asset\n  list        List assets\n\nFlags:\n  -h, --help   help for asset\n\nGlobal Flags:\n      --log-level string   Set log level: fatal, error, warning, info, debug, trace (default \"info\")\n\nUse \"octoai asset [command] --help\" for more information about a command.\n```\n\n1. Run `octoai login` to cache your token and authenticate to your account.\n2. We can now use the `octoai asset create` subcommand to upload assets (you can run `octoai asset create --help` to learn more on the options).\n   1. `--engine` denotes whether this is an asset for SDXL or SD1.5\n   2. `--upload-from-file` flag denotes the path of the file on your local machine that you’re trying to upload.\n   3. `--upload-from-url` flag is an alternative to `upload-from-file` allowing you to upload an asset from a public URL; OctoAI will fetch and upload the file.\n   4. `—type` can be lora, checkpoint, or textual_inversion (VAEs coming soon)\n   5. `--format` denotes the format of your asset, which can be safetensors or pt.\n   6. `--datatype` can be fp16, fp32, int4, or int8\\. For image gen, it should almost always be fp16, but for LLMs and other modalities your asset may have other datatypes.\n   7. `--name` is a name for your asset. You can only use each asset name once.\n   8. `--transfer-api` defaults to sts which is the fastest way to upload a large asset.\n   9. If you are uploading a textual inversion, make sure to use the `-w` flag to denote the default trigger word for the asset. That trigger word can later be used at generation time to activate the inversion. For LoRAs, trigger words are optional.\n\nAs an example, you could use this command to upload a checkpoint from your local machine:\n\n```\noctoai asset create \\\n  --upload-from-file LCM_Dreamshaper_v7.safetensors \\\n  --name Dreamshaper_v7 \\\n  --engine image/stable-diffusion-v1-5 \\\n  --format safetensors \\\n  --data-type fp16 \\\n  --type checkpoint \\\n  --description \"Dreamshaper v7\"\n```\n\nYou can alternatively upload the file via public URL using `upload-from-url`:\n\n```\noctoai asset create \\\n  --upload-from-url https://huggingface.co/SimianLuo/LCM_Dreamshaper_v7/resolve/main/LCM_Dreamshaper_v7_4k.safetensors?download=true \\\n  --name Dreamshaper_v7 \\\n  --engine image/stable-diffusion-v1-5 \\\n  --format safetensors \\\n  --data-type fp16 \\\n  --type checkpoint \\\n  --description \"Dreamshaper v7\"\n```\n"
      },
      "docs/python-sdk/asset-orchestrator-client.mdx": {
        "markdown": "---\ntitle: Asset Library in the Python SDK\nsubtitle: Manage assets using the Python SDK.\nslug: python-sdk/asset-orchestrator-client\n---\n\nThe AssetLibrary client in the Python SDK allows create, list, get, and delete actions of assets. These assets allow integration with the [ImageGenerator Client](image-generator-client) to generate more customized images.\n\nThis guide will walk you through using this API to see a list of our public assets, create your own asset, and use your asset to generate an image.\n\n#### Requirements\n\n- First, [create an OctoAI API token.](/docs/getting-started/how-to-create-an-octoai-access-token)\n- Then, complete [Python SDK Installation & Setup.](installation-and-setup).\n  - If you use the `OCTOAI_TOKEN` envvar for your token, you can instantiate the asset_orch client with `asset_library = AssetLibrary()`\n\n#### Overview of AssetLibrary API\n\n```Python Python\nfrom octoai.client import OctoAI\n\nif __name__ == \"__main__\":\n  # If you have an OCTOAI_TOKEN set as an environment variable, you do not need to pass a token.\n  # If one is not set, you can use:\n  # asset_library = AssetLibrary(token=\"your OctoAI API Token goes here\")\n  client = OctoAI()\n  asset_library = client.asset_library\n  # You can get a list of the public OctoAI assets\n  print(asset_library.list(is_public=True, owner=\"octoai\"))\n  # You can get a specific asset, either one you created or in this example an OctoAI asset\n  asset = asset_library.get(\"octoai:product_photography_v1\")\n  # And also create, delete, or use those assets to generate images as in the below example.\n  asset_library.delete(\"asset_id_goes_here\")\n\n```\n\n#### Creating a LoRA and Generating an Image\n\nYou will need a `safetensors` file in order to use this example, and in our case one is named `origami-paper.safetensors`. I'll be using a lora trained on origami that I can use with the words \"origami\" and \"paper\".\n\nIn this example, we will be adding a LoRA then using it to generate an image. You can also add `checkpoints`, `vae`, and `textual inversions`.\n\n```Python Python\nfrom octoai.client import OctoAI\nfrom octoai.asset_library import Data_Lora\nfrom octoai.util import to_file\n\nif __name__ == \"__main__\":\n    # OCTOAI_TOKEN set as an environment variable so do not need to pass a token.\n    client = OctoAI()\n    asset_library = client.asset_library\n    image_gen = client.image_gen\n\n    asset_name = \"origami-paper-test\"\n    # There is also TextualInversionData, VAEData, and CheckpointData.\n    lora_data = Data_Lora(\n        data_type=\"fp16\",\n        engine=\"image/stable-diffusion-v1-5\",\n        file_format=\"safetensors\",\n    )\n\n    asset = asset_library.create_from_file(\n        file=\"origami-paper.safetensors\",\n        data=lora_data,\n        name=asset_name,\n        description=\"origami-paper stable diffusion 1.5\",\n    )\n\n    image_gen_resp = image_gen.generate_sd(\n        prompt=\"rainbow origami tailong dragon\",\n        num_images=4,\n        loras={\"asset\": 0.8}\n    )\n\n    # Some images can be removed for safety.\n    # Please see the ImageGenerator client docs for more information.\n    for i, image in enumerate(image_gen_resp.images):\n        to_file(image, f\"result{i}.jpg\")\n\n    # You can clean up your asset with the following:\n    asset_library.delete(asset.id)\n```\n\n![astropus.png](https://www.datocms-assets.com/45680/1703720706-ai-generated-rainbow-origami-tailong-dragon.png?max-w=2000&auto=compress)\n\nrainbow-origami-tailong-dragon.png\n\n#### Creating File Assets from a Folder of Images\n\nLet's say you have a folder of images assets you would like to upload for using the FineTuning service. You can do so using the below code snippet to get all the files in your folder named `images`, and then splitting on the `.` to get your file_format extension (`jpg`, `jpeg`, or `png`), and use the file name as the asset name.\n\nIn this example, there is a directory named `images` that contains files with a \\_, -, and alphanumeric file names, jpg, jpeg, or png suffixes. In this example, the folder contains the following:\n\n```\n./assets/images/\n\tresult0.jpg\n\tresult1.jpg\n\tresult2.jpg\n\tresult3.jpg\n\tsave_the_other_paper_poodle.png\n\tsave_the_paper_poodle.png\n```\n\n```Python Python\nimport os\nfrom octoai.client import OctoAI\nfrom octoai.asset_library import Data_File\n\nif __name__ == \"__main__\":\n    # OCTOAI_TOKEN set as an environment variable so do not need to pass a token.\n    client = OctoAI()\n\n    dir_path = \"./assets/images/\"  # Set your dir_path here to your file assets.\n    files = []\n    # Get a list of files in the folder\n    for file_path in os.listdir(dir_path):\n        if os.path.isfile(os.path.join(dir_path, file_path)):\n            files.append(file_path)\n    for file in files:\n        # Use the file names to get file_format and the asset_name.\n        split_file_name = file.split(\".\")\n        asset_name = split_file_name[0]\n        file_format = split_file_name[1]\n        file_data = Data_File(\n            file_format=file_format,\n        )\n        asset = client.asset_library.create_from_file(\n            file=dir_path + file,\n            data=file_data,\n            name=asset_name,\n        )\n```\n\nYou can then use `octoai.asset_library.list()` to see the assets have been created and uploaded and a result that looks something like:\n\n```\n[\nid: asset_01234567891011121314151617, name: save_the_paper_poodle, status: ready,\nid: asset_01234567891011121314151618, name: save_the_other_paper_poodle, status: ready,\nid: asset_01234567891011121314151619, name: result2, status: ready,\nid: asset_01234567891011121314151620, name: result3, status: ready,\nid: asset_01234567891011121314151621, name: result1, status: ready,\nid: asset_01234567891011121314151622, name: result0, status: ready,\nid: asset_01234567891011121314151600, name: origami-paper-test, status: uploaded]\n```\n\nIn this example, an already existing lora created in the previous example also exists. The lora has uploaded however will likely need a few more seconds before being ready for use.\n"
      },
      "docs/typescript-sdk/asset-library.mdx": {
        "markdown": "---\ntitle: Asset Library in the TypeScript SDK\nsubtitle: Manage assets using the TypeScript SDK.\nslug: typescript-sdk/asset-library\n---\n\nThe AssetLibrary client in the TypeScript SDK allows `create`, `list`, `get`, and `delete` actions of assets. These assets allow integration with [Fine-tuning Stable Diffusion](/docs/api-reference/fine-tuning/create).\n\nThis guide will walk you through using this API to see a list of our public assets, create your own asset, and use your asset to generate an image.\n\n#### Requirements\n\n- First, [create an OctoAI API token.](/docs/getting-started/how-to-create-an-octoai-access-token)\n- Then, complete [TypeScript SDK Installation & Setup.](/docs/typescript-sdk/installation-and-setup).\n  - If you use the `OCTOAI_TOKEN` environment variable for your token, you can instantiate the client with `const octoai = new OctoAIClient()` or pass the token as a parameter to the constructor.\n\n#### Overview of AssetLibrary API\n\n```TypeScript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n    apiKey: process.env.OCTOAI_TOKEN\n});\n\nconst assetListResponse = await octoai.assetLibrary.list();\nconsole.log(JSON.stringify(assetListResponse.data, undefined, 2));\n\nconst assetListStableDiffusion = await octoai.assetLibrary.list({\n    isPublic: true,\n    owner: \"octoai\",\n    engine: \"image/stable-diffusion-v1-5\",\n});\nconsole.log(JSON.stringify(assetListStableDiffusion, undefined, 2));\n\n\nconst { asset } = await octoai.assetLibrary.get(\"origami-paper\");\nconsole.log(JSON.stringify(asset, undefined, 2));\n\nawait octoai.assetLibrary.delete(asset.id);\n```\n\n#### Creating a LoRA\n\nYou will need a `safetensors` file in order to use this example, and in our case one is named `origami-paper.safetensors`. I'll be using a LoRA trained on origami that I can use with the words \"origami\" and \"paper\".\n\nIn this example, we will be adding a LoRA then using it to generate an image.\n\nThe `id` field for the created asset can be used when [Getting started with our Media Gen Solution](/docs/media-gen-solution/getting-started) and running inferences.\n\n```TypeScript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n    apiKey: process.env.OCTOAI_TOKEN\n});\n\nawait octoai.assetLibrary.upload(\"origami-paper.safetensors\", {\n    assetType: \"lora\",\n    description: \"Origami\",\n    data: {\n        assetType: \"lora\",\n        dataType: \"fp16\",\n        engine: \"image/stable-diffusion-v1-5\",\n        fileFormat: \"safetensors\",\n        triggerWords: [\"origami\", \"paper\"],\n    },\n    name: \"origami-paper\",\n    isPublic: false,\n});\n```\n\n![astropus.png](https://www.datocms-assets.com/45680/1703720706-ai-generated-rainbow-origami-tailong-dragon.png?max-w=2000&auto=compress)\n\nrainbow-origami-tailong-dragon.png generated on ImageGen service using AssetLibrary created LoRA\n"
      },
      "docs/media-gen-solution/image-utilities/inpainting.mdx": {
        "markdown": "---\ntitle: Inpainting\nsubtitle: Edit and resort image to fix flaws or remove unwanted objects from an image.\nslug: media-gen-solution/image-utilities/inpainting\n---\n\n\nInpainting refers to the process of restoring or repairing an image by filling in missing or damaged parts. It is a valuable technique widely used in image editing and restoration, enabling the removal of flaws and unwanted objects to achieve a seamless and natural-looking final image. Inpainting finds applications in film restoration, photo editing, and digital art, among others.\n\n<CardGroup cols={2}>\n  <Card title=\"Init Image\">\n![](https://www.datocms-assets.com/45680/1706909031-b13ee16-dog.jpg?max-w=2000&auto=compress) \n  </Card>\n    <Card title=\"Output Image\">\n![](https://www.datocms-assets.com/45680/1709376963-result_image0.jpg?max-w=2000&auto=compress) \n  </Card>\n</CardGroup>\n\nHere is a Python example for inpainting. The Image Gen API call will take mask_image (right) and init_image (middle) as shown below. \n\n<CardGroup cols={2}>\n  <Card title=\"Init Image\">\n![](https://www.datocms-assets.com/45680/1706909031-b13ee16-dog.jpg?max-w=2000&auto=compress) \n  </Card>\n  <Card title=\"Inpainting Mask\">\n![](https://www.datocms-assets.com/45680/1706909075-c984750-dogmask.jpg?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\n```Python Python\nimport requests\nimport json\nimport os\nimport base64\nimport time\nimport io\nimport PIL.Image\n\ndef _process_test(url):\n    image = PIL.Image.open(\"dog.jpg\")\n    mask = PIL.Image.open(\"dogmask.jpg\")\n\n    # Create a BytesIO buffer to hold the image data\n    image_buffer = io.BytesIO()\n    image.save(image_buffer, format='JPEG')\n    image_bytes = image_buffer.getvalue()\n    encoded_image = base64.b64encode(image_bytes).decode('utf-8')\n\n    # Create a BytesIO buffer to hold the image data\n    mask_buffer = io.BytesIO()\n    mask.save(mask_buffer, format='JPEG')\n    mask_bytes = mask_buffer.getvalue()\n    encoded_mask = base64.b64encode(mask_bytes).decode('utf-8')\n\n    OCTOAI_TOKEN = os.environ.get(\"OCTOAI_TOKEN\")\n\n    payload = {\n        \"prompt\": \"Face of a yellow cat, high resolution, sitting on a park bench\",\n        \"negative_prompt\": \"Blurry photo, distortion, low-res, bad quality\",\n        \"steps\": 4,\n        \"width\": 1024,\n        \"height\": 1024,\n        \"cfg_scale\": 1.4,\n        \"checkpoint\": \"octoai:lcm_sdxl\",\n        \"init_image\": encoded_image,\n        \"mask_image\": encoded_mask\n    }\n    headers = {\n        \"Authorization\": f\"Bearer {OCTOAI_TOKEN}\",\n        \"Content-Type\": \"application/json\",\n        \"X-OctoAI-Queue-Dispatch\": \"true\"\n    }\n\n    response = requests.post(url, headers=headers, json=payload)\n\n    if response.status_code != 200:\n        print(response.text)\n    print(response.json())\n\n    img_list = response.json()[\"images\"]\n\n    for i, img_info in enumerate(img_list):\n        img_bytes = base64.b64decode(img_info[\"image_b64\"])\n        img = PIL.Image.open(io.BytesIO(img_bytes))\n        img.load()\n        img.save(f\"result_image{i}.jpg\")\n\nif __name__ == \"__main__\":\n    _process_test(\"https://image.octoai.run/generate/sdxl\")\n```   \n\n<CardGroup cols={2}>\n  <Card title=\"Output Image\">\n![](https://www.datocms-assets.com/45680/1709376963-result_image0.jpg?max-w=2000&auto=compress) \n  </Card>\n</CardGroup>\n\n"
      },
      "docs/media-gen-solution/image-utilities/outpainting.mdx": {
        "markdown": "---\ntitle: Outpainting\nsubtitle: Extend beyond the canvas of an existing image.\nslug: media-gen-solution/image-utilities/outpainting\n---\n\n\nOutpainting is the process of using an image generation model like Stable Diffusion to extend beyond the canvas of an existing image. Outpainting is very similar to inpainting, but instead of generating a region within an existing image, the model generates a region outside of it. \n\n <CardGroup cols={2}>\n  <Card title=\"Init Image\">\n ![](https://www.datocms-assets.com/45680/1709590599-1_9gkzwelnahqfyilgqpatxa.png?max-w=2000&auto=compress) \n </Card>\n  <Card title=\"Output Image\">\n ![](https://www.datocms-assets.com/45680/1709591655-download-13.jpeg?max-w=2000&auto=compress) \n  </Card>\n  </CardGroup>\n\nOutpainting works both with SDXL and SD1.5. \nAt a high level, outpainting works like this:\n* Choose an existing image you’d like to outpaint.\n* Create a source image that places your original image within a larger canvas.\n* Create a black and white mask image.\n* Use init_image (source image), mask_image (your mask image), a text prompt and outpainting parameter as inputs to Image Gen API to generate a new image.\n\nIn the following example we will leverage the SD1.5 engine so we’ll start with a 512x512 image. \n\n<CardGroup cols={2}>\n  <Card title=\"Init Image (512X512)\">\n ![](https://www.datocms-assets.com/45680/1709590599-1_9gkzwelnahqfyilgqpatxa.png?max-w=2000&auto=compress) \n  </Card>\n</CardGroup>\n\nYou can extend the image in any direction, but for this example we’ll extend the width from 512 → 768. Supported resolutions for SD1.5 are:\n\n`(W, H): (768, 576), (1024, 576), (640, 512), (384, 704), (640, 768), (640, 640), (1024, 768), (1536, 1024), (768, 1024), (576, 448), (1024, 1024), (896, 896), (704, 1216), (512, 512), (448, 576), (832, 512), (512, 704), (576, 768), (1216, 704), (512, 768), (512, 832), (1024, 1536), (576, 1024), (704, 384), (768, 512)\n`\n\nSupport resolutions for SDXL are: \n\n`(W, H): {(1536, 640), (768, 1344), (832, 1216), (1344, 768), (1152, 896), (640, 1536), (1216, 832), (896, 1152), (1024, 1024)}`\n\nTwo images are required for the next step. An init_image and mask_image are required in order to perform the outpainting to 768 pixels. Convert both images to base64.\n\n <CardGroup cols={2}>\n  <Card title=\"Init Image (768X512)\">\n ![](https://www.datocms-assets.com/45680/1709590612-init-image-outpainting.jpg?max-w=2000&auto=compress) \n </Card>\n  <Card title=\"Mask Image\">\n ![](https://www.datocms-assets.com/45680/1709590621-mask-outpainting.jpg?max-w=2000&auto=compress) \n  </Card>\n  </CardGroup>\n\n**Example Code for Outpainting**:\n```Python Python\nimport requests\nimport json\nimport os\nimport base64\nimport time\nimport io\nimport PIL.Image\n\ndef _process_test(url):\n    \n    image = PIL.Image.open(\"init-image-outpainting.jpg\")\n    mask = PIL.Image.open(\"mask-outpainting.jpg\")\n    # with PIL.Image.open(\"init-image-outpainting.png\") as im:\n    #     rgb_im = im.convert('RGBA')\n    # rgb_im.save('init.jpg')\n    # image = PIL.Image.open(\"init.jpg\")\n\n    # with PIL.Image.open(\"mask-outpainting.png\") as it:\n    #     rgb_it = it.convert('RGBA')\n    # rgb_it.save('mask.jpg')\n    # mask = PIL.Image.open(\"mask.jpg\")\n\n    # Create a BytesIO buffer to hold the image data\n    image_buffer = io.BytesIO()\n    image.save(image_buffer, format='JPEG')\n    image_bytes = image_buffer.getvalue()\n    encoded_image = base64.b64encode(image_bytes).decode('utf-8')\n\n    # Create a BytesIO buffer to hold the image data\n    mask_buffer = io.BytesIO()\n    mask.save(mask_buffer, format='JPEG')\n    mask_bytes = mask_buffer.getvalue()\n    encoded_mask = base64.b64encode(mask_bytes).decode('utf-8')\n\n    OCTOAI_TOKEN = os.environ.get(\"OCTOAI_TOKEN\")\n\n    payload = {\n        \"prompt\": \"portrait view, cartoon sketch of a woman, green grass with fall foliage in the back, blurry background, blue and grey sky\",\n        \"negative_prompt\": \"path, leaves on the ground, bad anatomy, bad hands, three hands, three legs, bad arms, missing legs, missing arms, poorly drawn face, bad face, fused face, cloned face, worst face, three crus, extra crus, fused crus, worst feet, three feet, fused feet, fused thigh, three thigh, fused thigh, extra thigh, worst thigh, missing fingers, extra fingers, ugly fingers, long fingers, horn, extra eyes, 2girl, amputation\",\n        \"width\": 768,\n        \"height\": 512,\n        \"num_images\": 1,\n        \"sampler\": \"DDPM\",\n        \"steps\": 40,\n        \"cfg_scale\": 12,\n        \"style_preset\": \"base\",\n        \"outpainting\": \"true\",\n        \"init_image\": encoded_image,\n        \"mask_image\": encoded_mask,\n        \"strength\": 1\n    }\n    headers = {\n        \"Authorization\": f\"Bearer {OCTOAI_TOKEN}\",\n        \"Content-Type\": \"application/json\",\n        \"X-OctoAI-Queue-Dispatch\": \"true\"\n    }\n\n    response = requests.post(url, headers=headers, json=payload)\n\n    if response.status_code != 200:\n        print(response.text)\n    print(response.json())\n\n    img_list = response.json()[\"images\"]\n\n    for i, img_info in enumerate(img_list):\n        img_bytes = base64.b64decode(img_info[\"image_b64\"])\n        img = PIL.Image.open(io.BytesIO(img_bytes))\n        img.load()\n        img.save(f\"result_image{i}.jpg\")\n\nif __name__ == \"__main__\":\n    _process_test(\"https://image.octoai.run/generate/sd\")\n    ```\n\nHere's the outpainted output that the above code generates: \n\n<CardGroup cols={2}>\n  <Card title=\"Output image\">\n ![](https://www.datocms-assets.com/45680/1709591655-download-13.jpeg?max-w=2000&auto=compress) \n  </Card>\n</CardGroup>\n\n"
      },
      "docs/media-gen-solution/image-utilities/adetailer.mdx": {
        "markdown": "---\ntitle: Adetailer API\nsubtitle: Automatically fix faces and hands using Adetailer\nslug: media-gen-solution/image-utilities/adetailer\n---\n\nOctoAI's Adetailer API supports various detection models. Whether you're interested in identifying faces, or hands, you can choose from options such as face_yolov8n, hand_yolov8n, face_full_mediapipe, face_short_mediapipe, face_mesh_mediapipe, and eyes_mesh_mediapipe. This allows you to tailor the detailing process to your specific needs and preferences.\n\nAdetailer effortlessly identifies faces and hands in images, automatically creating masks to fill in any missing parts. After this, it seamlessly integrates with the SDXL API, applying customized settings to achieve outstanding results. Additionally, OctoAI's  Adetailer API offers flexibility by allowing users to set the maximum number of detections. For example, if there are five people in an image but you only want to focus on two faces, you can easily do so using the max_num_detections parameter. The API prioritizes and corrects faces based on their confidence score and bounding box dimensions.\n\n\n\n![](https://www.datocms-assets.com/45680/1711650559-octoai-adetailer-before-and-after-email-550.png)\n\n\n\n```Python Python\nimport requests\nimport json\nimport os\nimport base64\nimport time\nimport io\nimport PIL.Image\n\ndef _process_test(url):\n    image = PIL.Image.open(\"woman.jpg\")\n   \n    # Create a BytesIO buffer to hold the image data\n    image_buffer = io.BytesIO()\n    image.save(image_buffer, format='JPEG')\n    image_bytes = image_buffer.getvalue()\n    encoded_image = base64.b64encode(image_bytes).decode('utf-8')\n\n\n    OCTOAI_TOKEN = os.environ.get(\"OCTOAI_TOKEN\")\n\n    payload = {\n         \"prompt\": \"photorealistic, award winning, 8K HDR, best quality, breathtaking\", \n         \"negative_prompt\": \"worst quality, bad face, drawing, unrealistic, ugly face, animated\", \n         \"cfg_scale\": 6, \n         \"sampler\": \"DPM_2_ANCESTRAL\", \n         \"steps\": 60, \n         \"checkpoint\": \"RealVisXL\", \n         \"inpainting_base_model\": \"sdxl\", \n         \"style_preset\": \"base\", \n         \"detector\": \"face_yolov8n\", \n         \"strength\": 0.5, \n         \"init_image\": encoded_image\n    }\n    headers = {\n        \"Authorization\": f\"Bearer {OCTOAI_TOKEN}\",\n        \"Content-Type\": \"application/json\",\n        \"X-OctoAI-Queue-Dispatch\": \"true\"\n    }\n\n    response = requests.post(url, headers=headers, json=payload)\n\n    if response.status_code != 200:\n        print(response.text)\n    print(response.json())\n\n    img_info = response.json()\n    img_bytes = base64.b64decode(img_info[\"image_b64\"])\n    img = PIL.Image.open(io.BytesIO(img_bytes))\n    img.load()\n    img.save(f\"result_image.jpg\")\n\nif __name__ == \"__main__\":\n    _process_test(\"https://image.octoai.run/adetailer\")\n\n```\n\n"
      },
      "docs/media-gen-solution/image-utilities/photo-merge.mdx": {
        "markdown": "---\ntitle: Photo Merge\nsubtitle: >-\n  Seamlessly integrate a photo's subject into AI-generated output and eliminate\n  the need to create time-consuming custom facial finetunes.\nslug: media-gen-solution/image-utilities/photo-merge\n---\n\n\nOctoAI Photo Merge feature allows you to seamlessly integrate a photo’s subject into high-quality AI-generated output. It eliminates the need to create time-consuming custom facial fine-tunes with numerous tuning images and 15-30 minutes typically associated with SDXL LoRAs. OctoAI's Photo Merge simplifies this process, requiring only 1-4 images and delivering precise results within a few seconds. Businesses can now easily apply GenAI powered imagery for needs ranging from realistic CGI characters, to personalized product recommendations, to digital avatars.\n\nPhoto Merge can be accessed through the \"transfer_images\" parameter within OctoAI’s Image Generation API. This parameter accepts a key-value pair consisting of a trigger word and an array of up to 4 images. It operates exclusively with SDXL models and seamlessly harmonizes with style presets, controlnets, checkpoints, and LoRAs when utilized with SDXL models, thereby amplifying its adaptability and functionality.\n\nIn the example below, we will upload 1-4 images of a human and use photo merge to transfer his face into our prompts. \n\n**Example Code Snippet showing the close portriat images of a human**:  \n\n```Python Python\nENDPOINT_URL = \"https://image.octoai.run/generate/sdxl\"\nIMAGES_PATH = \"/content/images\"\nos.makedirs(IMAGES_PATH, exist_ok=True)\n\nluis_path = f'{IMAGES_PATH}/luis'\nluis_urls = ['https://cs.illinois.edu/_sitemanager/viewphoto.aspx?id=12289&s=206',\n             'https://www.kisacoresearch.com/sites/default/files/styles/panopoly_image_square/public/speakers/luis_ceze_headshot.jpg?itok=NmVXlZb2&c=092995db2355e0f1f7ce15ff18aba155',\n             'https://news.cs.washington.edu/wp-content/uploads/2023/01/luis-ceze-2022-blog.jpg',\n             'https://cdn.geekwire.com/wp-content/uploads/2019/12/luisceze-1260x1047.jpeg',\n             ]\n\nluis_image_names = download_from_urls(luis_urls, luis_path)\n\nimage_grid(luis_path, luis_image_names)\n\nluis_b64_images = [encode_b64(luis_path, image) for image in luis_image_names]\n```\n![](https://www.datocms-assets.com/45680/1709586273-luis1.png?max-w=2000&auto=compress) \n\nNext, we utilize the `transfer_images=\"triggerword\": list of images parameter` within the payload of OctoAI’s SDXL Image Gen API at `https://image.octoai.run/generate/sdxl`.\n\n**Example Code Snippet of using Photo Merge (transfer_images)**:\n\n```Python Python\npayload = {\n    \"prompt\": \"A man luis sitting in a coffee shop\",\n    \"negative_prompt\": \"Blurry photo, distortion, low-res, bad quality\",\n    \"checkpoint\": \"RealVisXL\",\n    \"width\": 1024,\n    \"height\": 1024,\n    \"num_images\": 4,\n    \"sampler\": \"K_EULER_ANCESTRAL\",\n    \"steps\": 20,\n    \"cfg_scale\": 7.5,\n    \"seed\": 888,\n    \"transfer_images\": {\"luis\": luis_b64_images}\n}\n\nresponse = query(ENDPOINT_URL, payload)\n\ngenerated_images = decode_response(response)\nimage_grid_buffer(generated_images)\n```\n\nIn the given example, we employ the trigger word ‘luis’ and link it with the dataset comprising the four images mentioned earlier. Subsequently, we structure the prompt to incorporate the trigger word.\n\nPrompt: `A man luis sitting in a coffee shop.`\n\nIt's worth noting that in this instance, no LoRA is utilized. Additionally, we utilize a checkpoint named ‘RealVisXL’, an OctoAI asset checkpoint specifically optimized for the Photo Merge feature. However, it's important to mention that the Photo Merge feature is functional even if the base SDXL checkpoint is utilized. \n\nBelow are the AI-generated output images after using transfer_image parameter with the newly provided prompt: \n\n![](https://www.datocms-assets.com/45680/1709586450-luis2.png?max-w=2000&auto=compress) \n\nPretty accurate, isn’t it? Let’s try it with few different prompts and combine it with other style presets, LoRAs and checkpoints to confirm whether we consistently get the accurate results.\n\nLet us use transfer_images parameter in conjunction with ‘Graffiti’ style preset. We are keeping all other parameter values similar to the payload above.\n\n**Example Code Snippet of Photo Merge (transfer_images parameter) with Style Preset**: \n\n```Python Python\npayload = {\n    \"prompt\": \"closeup colorfull portrait photo of a man luis\",\n    \"negative_prompt\": \"(asymmetry, worst quality, low quality, illustration, 3d, 2d, painting, cartoons, sketch), open mouth\",\n    \"checkpoint\": \"RealVisXL\",\n    \"width\": 1024,\n    \"height\": 1024,\n    \"num_images\": 4,\n    \"sampler\": \"K_EULER_ANCESTRAL\",\n    \"steps\": 20,\n    \"cfg_scale\": 7.5,\n    \"seed\": 111,\n    \"style_preset\": \"Graffiti\",\n    \"transfer_images\": {\"luis\": luis_b64_images}\n}\n\nresponse = query(ENDPOINT_URL, payload)\n\ngenerated_images = decode_response(response)\nimage_grid_buffer(generated_images)\n```\n\n![](https://www.datocms-assets.com/45680/1709586551-luis3.png?max-w=2000&auto=compress) \n\nLet’s now use transfer_images parameter with a pre-trained Style LoRA. We have already imported a pre-trained style based LoRA into OctoAI’s Asset Library. In the payload below, we are using the corresponding asset’s asset id and assigning it a weight of 1.0.\n\n**Example Code Snippet of Photo Merge (transfer_images parameter) with pre-trained LoRAs (uploaded from external sources)**: \n\n```Python Python\npayload = {\n    \"prompt\": \"painting, martius_storm red ominous war [:style of vincent van gogh luis and leonardo da vinci:0.4] ral-dissolve\",\n    \"negative_prompt\": \"(asymmetry, worst quality, low quality, illustration, 3d, 2d, painting, cartoons, sketch), open mouth\",\n    \"checkpoint\": \"RealVisXL\",\n    \"loras\": {\"asset_01hnxyk06ee999h4cq1cz3r21f\": 1.0},\n    \"width\": 1024,\n    \"height\": 1024,\n    \"num_images\": 4,\n    \"sampler\": \"DPM_PLUS_PLUS_2M_KARRAS\",\n    \"steps\": 20,\n    \"cfg_scale\": 7,\n    \"seed\": 111,\n    \"transfer_images\": {\"luis\": luis_b64_images}\n}\n\nresponse = query(ENDPOINT_URL, payload)\n\ngenerated_images = decode_response(response)\nimage_grid_buffer(generated_images)\n```\n![](https://www.datocms-assets.com/45680/1709587246-luis4.png?max-w=2000&auto=compress) \n\nNext, we'll create a custom fine-tune for a product and seamlessly integrate our AI-generated human model's image with it.\nTo create custom fine tunes (SDXL LoRAs), we will upload 10-12 images of our product, which in our case are different colored Lacoste polo shirts for men.\n\n![](https://www.datocms-assets.com/45680/1709587288-1707936431-lacoste-shirt-fine-tune-images-being-created.avif?max-w=2000&auto=compress) \n\n![](https://www.datocms-assets.com/45680/1709587279-1707936366-lacoste-fine-tune-created-on-octoai.avif?max-w=2000&auto=compress) \n\n\n**Example Code Snippet of Photo Merge (transfer_images parameter) with custom fine-tuned LoRAs**: \n```Python Python\npayload = {\n    \"prompt\": \"A man luis wearing a pink T-shirt lacosteshirt1:1, sitting in a coffee shop\",\n    \"negative_prompt\": \"(asymmetry, worst quality, low quality, illustration, 3d, 2d, painting, cartoons, sketch), open mouth, shirt logo not visible, left position shirt logo\",\n    \"checkpoint\": \"RealVisXL\",\n    \"loras\": {\"asset_01hp5hsn6mfh6b0zf47q862a6b\": 1.0},\n    \"width\": 1024,\n    \"height\": 1024,\n    \"num_images\": 4,\n    \"sampler\": \"DPM_PLUS_PLUS_2M_KARRAS\",\n    \"steps\": 20,\n    \"cfg_scale\": 7,\n    # \"seed\": 444,\n    \"transfer_images\": {\"luis\": luis_b64_images}\n}\n\nresponse = query(ENDPOINT_URL, payload)\n\ngenerated_images = decode_response(response)\nimage_grid_buffer(generated_images)\n```\n\n![](https://www.datocms-assets.com/45680/1709587262-luis5.png?max-w=2000&auto=compress)\n\nLet's now consider a use-case where we want to mix the identities of 2 or more humans. For this let's consider a new set of close up portriats of another human as shown below: \n\n![](https://www.datocms-assets.com/45680/1709587643-screenshot-2024-03-04-at-1-27-11-pm.png?max-w=2000&auto=compress)\n\n**Example Code Snippet of Photo Merge (transfer_images parameter) with multiple human portraits**: \n\n```Python Python\npayload = {\n    \"prompt\": \"closeup b&w portrait photo of a man luis einstein\",\n    \"negative_prompt\": \"(asymmetry, worst quality, low quality, illustration, 3d, 2d, painting, cartoons, sketch), open mouth\",\n    \"checkpoint\": \"RealVisXL\",\n    \"width\": 1024,\n    \"height\": 1024,\n    \"num_images\": 4,\n    \"sampler\": \"K_EULER_ANCESTRAL\",\n    \"steps\": 20,\n    \"cfg_scale\": 7.5,\n    \"seed\": 888,\n    \"transfer_images\": {\"luis\": luis_b64_images, \"einstein\": einstein_b64_images}\n}\n\nresponse = query(ENDPOINT_URL, payload)\n\ngenerated_images = decode_response(response)\nimage_grid_buffer(generated_images)\n```\n\n![](https://www.datocms-assets.com/45680/1709587798-luis6.png?max-w=2000&auto=compress)\n\nPhoto Merge offers endless potential - whether in entertainment, gaming, marketing agencies, or fashion and retail sectors, it can help craft personalized avatars, advertisements, and brand ambassador representations. It can also enable virtual try-ons and lifelike digital product showcases. \n"
      },
      "docs/media-gen-solution/image-utilities/upscaling.mdx": {
        "markdown": "---\ntitle: Upscaling\nsubtitle: Upscale images to higher resolutions.\nslug: media-gen-solution/image-utilities/upscaling\n---\n\n\nUpscaling takes an existing image you provide and upscales it to a higher resolution.\n\n\n<CardGroup cols={2}>\n  <Card title=\"Image resolution 1024X1024\">\n![](https://www.datocms-assets.com/45680/1709595761-screenshot-2024-03-04-at-3-42-14-pm.png?max-w=2000&auto=compress) \n  </Card>\n  <Card title=\"Upscaled image 2048X2048\">\n![](https://www.datocms-assets.com/45680/1709595770-screenshot-2024-03-04-at-3-41-58-pm.png?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\nExample Code of upscaling an image from 1024X1024 to 2048X2048: \n\n```Python Python\nimport requests\nimport json\nimport os\nimport base64\nimport time\nimport io\nimport PIL.Image\nfrom typing import Optional, Tuple\n\n\ndef _process_test(url):\n    \n    image = PIL.Image.open(\"headphones1.jpeg\")\n\n    # Create a BytesIO buffer to hold the image data\n    image_buffer = io.BytesIO()\n    image.save(image_buffer, format='JPEG')\n    image_bytes = image_buffer.getvalue()\n    encoded_image = base64.b64encode(image_bytes).decode('utf-8')\n\n    OCTOAI_TOKEN = os.environ.get(\"OCTOAI_TOKEN\")\n\n    payload = {\n        \"model\": \"real-esrgan-x4-plus\",\n        \"scale\": 2,\n        \"init_image\": encoded_image,\n        \"output_image_encoding\": \"jpeg\"\n    }\n    headers = {\n        \"Authorization\": f\"Bearer {OCTOAI_TOKEN}\",\n        \"Content-Type\": \"application/json\",\n        \"X-OctoAI-Queue-Dispatch\": \"true\"\n    }\n\n    response = requests.post(url, headers=headers, json=payload)\n\n    if response.status_code != 200:\n        print(response.text)\n    print(response.json())\n\n    img_info = response.json()[\"image_b64\"]\n\n    img_bytes = base64.b64decode(img_info)\n    img = PIL.Image.open(io.BytesIO(img_bytes))\n\n    if img.mode == 'RGBA':\n     img = img.convert('RGB')\n\n    img.save(\"result_image.jpeg\")\n\nif __name__ == \"__main__\":\n    _process_test(\"https://image.octoai.run/upscaling\")\n```\n"
      },
      "docs/media-gen-solution/image-utilities/bg-removal.mdx": {
        "markdown": "---\ntitle: Background Removal\nsubtitle: Remove parts of the image considered to be background.\nslug: media-gen-solution/image-utilities/bg-removal\n---\n\n\nBackground removal takes an existing image you provide and removes those parts of the image considered to be “background.”\n\n<CardGroup cols={2}>\n  <Card title=\"Image with background\">\n![](https://www.datocms-assets.com/45680/1709595206-headphones1.jpeg?max-w=2000&auto=compress) \n  </Card>\n  <Card title=\"Background removed\">\n![](https://www.datocms-assets.com/45680/1709595214-result_image.png?max-w=2000&auto=compress)\n  </Card>\n</CardGroup>\n\nExample Code of removing background from an image: \n```Python Python\nimport requests\nimport json\nimport os\nimport base64\nimport time\nimport io\nimport PIL.Image\nfrom typing import Optional, Tuple\n\n\ndef _process_test(url):\n    \n    image = PIL.Image.open(\"headphones1.jpeg\")\n\n    # Create a BytesIO buffer to hold the image data\n    image_buffer = io.BytesIO()\n    image.save(image_buffer, format='JPEG')\n    image_bytes = image_buffer.getvalue()\n    encoded_image = base64.b64encode(image_bytes).decode('utf-8')\n\n    OCTOAI_TOKEN = os.environ.get(\"OCTOAI_TOKEN\")\n\n    payload = {\n        \"init_image\": encoded_image,\n        \"bgcolor\":(255, 255, 255, 0)\n    }\n    headers = {\n        \"Authorization\": f\"Bearer {OCTOAI_TOKEN}\",\n        \"Content-Type\": \"application/json\",\n        \"X-OctoAI-Queue-Dispatch\": \"true\"\n    }\n\n    response = requests.post(url, headers=headers, json=payload)\n\n    if response.status_code != 200:\n        print(response.text)\n    print(response.json())\n\n    img_info = response.json()[\"image_b64\"]\n\n    img_bytes = base64.b64decode(img_info)\n    img = PIL.Image.open(io.BytesIO(img_bytes))\n\n    if img.mode == 'RGBA':\n     img = img.convert('RGB')\n\n    img.save(\"result_image.png\")\n\nif __name__ == \"__main__\":\n    _process_test(\"https://image.octoai.run/background-removal\")\n```\n"
      },
      "docs/private-deployment/octostack.mdx": {
        "markdown": "---\ntitle: OctoStack\nsubtitle: OctoAI's GenAI production stack in your environment.\nslug: private-deployment/octostack\n---\n\n# Overview\n\n[OctoStack](https://octo.ai/product/octostack/) is a turnkey generative AI solution allowing you to run your choice of models in your environment. It delivers OctoAI’s industry-leading AI inference service and performance optimizations with the privacy benefits of self-managing within your environment. OctoStack provides a full stack solution for running generative AI at scale - including inference, model customization, load balancing, auto-scaling, and telemetry. OctoStack is compatible with all cloud service providers and container orchestration services. [Contact us](https://octo.ai/octostack-demo/) to get started!\n\n![](https://www.datocms-assets.com/45680/1712085519-octostack-overview-diagram-light-mode-updated.png?max-w=300&max-h=300&auto=compress)\n\n# Key Benefits\n\n### Privately deploy in any environment\n\nOctoStack is designed for portability across any cloud platform or on-premise data center. Prebuilt containers are easily deployed using Kubernetes or your preferred container orchestration service. Maintain complete data privacy and control by processing all generative AI workloads within your environment.\n\n### Performance optimized inference\n\nOctoStack includes OctoAI’s performance optimizations delivered through Apache TVM, a compiler framework that optimizes and accelerates inferences. Optimized inference improves GPU utilization and delivers the best possible application experience. OctoStack also provides best-in-class load balancing to operate at scale.\n\n### Easy to use APIs & customization\n\nApplication developers can use OctoStack’s industry-standard API’s, including Python and TypeScript SDK’s. Our ergonomic API’s allow rapid development and integration. You can easily load and run open source models, and fine-tuned checkpoints.\n\n# Configuration & Deployment\n\n### GPU Configuration\n\nOctoStack can run a multi-GPU configuration to improve throughput and latency, which is easily enabled with a single configuration setting. We recommend using multiple GPU’s per replica when running models with higher precision and a greater number of parameters. The OctoAI team can help you identify the multi-GPU configuration that best matches your throughput & latency goals.\n\n### Prerequisites\n\nOctoStack is comptable with all cloud environments - these are key system requirements:\n\n- Kubernetes, or Docker & Docker Compose\n- Redis in cluster mode\n- NVIDIA drivers\n- GPUs\n  - OctoStack supports a range of hardware including A10G, A100, and H100 GPUs\n  - A100s such as AWS p4d.24xlarge instances can support a broad set of models\n\n### Deployment\n\nOctoStack supports Kubernetes deployment via manifest files, and a Docker Compose deployment compatible with any container orchestration service. There’s a few simple steps to deploy:\n\n1. OctoAI allow lists your AWS account, so you can access OctoStack containers in OctoAI’s AWS ECR.\n2. Pull the OctoStack containers from OctoAI’s AWS ECR.\n3. Configure and deploy using Kubernetes or Docker Compose, using OctoAI-provided guides.\n\n# Get Started\n\n[Reach out to the team](https://octo.ai/octostack-demo/) to see a live demo and get started on your OctoStack deployment.\n"
      },
      "docs/private-deployment/secure-link.mdx": {
        "markdown": "---\ntitle: SecureLink guide\nsubtitle: Private networking with OctoAI's SecureLink.\nslug: private-deployment/secure-link\n---\n\n# Overview\n\nKeeping our users’ data private and secure is our priority. OctoAI requires token authentication for all API requests, along with TLS to enforce encryption in transit for all connections between the customer and OctoAI. We also use encryption at rest for any data written to disk.\n\nSecureLink is an additional private connectivity security measure, ensuring that network traffic between an OctoAI endpoint and the customer environment is not exposed to the public internet. SecureLink is available for Enterprise customers.\n\n# Setup Steps\n\n1. Configure your AWS Account ID in OctoAI\n2. Create and configure a VPC Interface Endpoint\n3. Configure OctoAI’s SDKs & CLI to use the SecureLink subdomain\n4. If you intend to use Asset Library to upload your assets, configure a separate PrivateLink connection for Amazon S3 to ensure the uploads are also completed via a private connection to S3\n\n# Setup Instructions\n\n**Configure your AWS Account ID in OctoAI**\n\nFirst, run a simple curl command to configure your AWS account ID within OctoAI using the `https://api.octoai.cloud/v1/account/securelink` endpoint:\n\n```\ncurl -X POST \"https://api.octoai.cloud/v1/account/securelink\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OCTOAI_TOKEN\" \\\n    --data '{\"aws_account_id\": \"account-ID-value\"}'\n```\n\nThis allows OctoAI to generate a VPC Service Name, which you’ll use in the next step. If you don’t receive a successful response, contact us to ensure your OctoAI account is enabled as Enterprise tier.\n\n**Create and configure a VPC Interface Endpoint**\n\nNow you’ll create the VPC Interface Endpoint in your AWS account using the VPC Service Name. Navigate to the VPC Dashboard, and click `Create Endpoint` from your AWS console: `https://console.aws.amazon.com/vpc/home?#Endpoints`\n\n![](https://www.datocms-assets.com/45680/1709312020-securelink1.png?max-w=2000&auto=compress)\n\nConfigure the Service Name value to `com.amazonaws.vpce.us-east-1.vpce-svc-0e914445c09bbe700`, then click `Verify` to ensure the service name is found and verified. Contact us for help if the service name is not found.\n\n![](https://www.datocms-assets.com/45680/1709312036-securelink2.png?max-w=2000&auto=compress)\n\nNext, choose the VPC and subnets that should be peered with the VPC service endpoint. Make sure that Enable DNS name is checked.\n\n![](https://www.datocms-assets.com/45680/1709312044-securelink3.png?max-w=2000&auto=compress)\n\nThen, choose the security group(s) who can send traffic to the VPC endpoint. The security group must accept inbound traffic on TCP port 443 - you can verify this within the Inbound Rules page. You can now click `Create endpoint` to create the VPC endpoint. The endpoint maybe take up to 10 minutes to move from Pending to Available. Once it shows Available, it’s ready for use.\n\n**Configure OctoAI’s SDKs & CLI to use SecureLink URL**\n\nEach OctoAI endpoint uses a SecureLink ingress URL, which will only work with a fully configured VPC Endpoint.\n\n_OctoAI CLI_\n\nConfigure an environment variable by running:\n\n```\nexport OCTO_API_ENDPOINT=https://api.securelink.octo.ai\n```\n\n_TypeScript SDK_\n\nConfigure the SecureLink URLs by passing in the `SecureLink` environment during client instantiation.\n\n```typescript\nimport { OctoAIClient, OctoAIEnvironment } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n  environment: OctoAIEnvironment.SecureLink,\n});\n```\n\n_Python SDK_\n\n- For text generation, fine-tuning, or asset library, configure the `environment` parameter to use `OctoAIEnvironment.SECURE_LINK` in the client instantiation:\n\n```python\nimport os\n\nfrom octoai.client import OctoAI\nfrom octoai.environment import OctoAIEnvironment\ntoken=os.environ.get(\"OCTOAI_TOKEN\")\n\nclient = OctoAI(api_key=token, environment=OctoAIEnvironment.SECURE_LINK)\n```\n\nThis table summarizes the SecureLink equivalent to each public API URL:\n\n| Service                     | Public                     | SecureLink                            |\n| --------------------------- | -------------------------- | ------------------------------------- |\n| Text generation             | `https://text.octoai.run`  | `https://text.securelink.octo.ai`     |\n| Image generation            | `https://image.octoai.run` | `https://image.securelink.octo.ai`    |\n| Asset Library & Fine-tuning | `https://api.octoai.cloud` | `https://api.securelink.octo.ai`      |\n| OctoAI API                  | `https://api.octoai.cloud` | `https://api.securelink.octo.ai`      |\n| Async Inference             | `https://async.octoai.run` | `https://async.securelink.octoai.run` |\n\n**Configure private connection for Amazon S3 to upload assets through a private connection**\n\nIf you are a user of Asset Library, you’ll need to configure a private connection for Amazon S3 to ensure uploads are also secured behind a private connection. Depending on your setup and your needs, you can either create a gateway endpoint, where a route table entry is added to your VPC, or create an interface endpoint, which is similar to configuring an interface endpoint for OctoAI. This guide covers setting up a gateway endpoint for S3.\n\nTo create a gateway endpoint, choose AWS services under Service category, and select `com.amazonaws.us-east-1.s3`. Ensure the type is Gateway.\n\n![](https://www.datocms-assets.com/45680/1709312060-securelink4.png?max-w=2000&auto=compress)\n\nChoose the route table where the routing entry is added, then click `Create Endpoint`. For more information, see the [S3 gateway endpoint documentation on AWS](https://docs.aws.amazon.com/AmazonS3/latest/userguide/privatelink-interface-endpoints.html).\n"
      },
      "docs/compute-service/compute-getting-started.mdx": {
        "markdown": "---\ntitle: Getting started with our Compute Service\nslug: compute-service/compute-getting-started\n---\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\n## Create your own endpoints\n\nCreate your own OctoAI endpoints in two different ways:\n\n- [Deploy an existing container from a public or private container registry.](create-endpoint-from-existing-container/create-custom-endpoints-from-a-container) OctoAI can run any containers with an HTTP server written in any language, as long as your container is built on a GPU and comes with a declarative configuration of which port is exposed for inferences.\n- [Create a container and endpoint using our CLI.](create-custom-endpoint-using-the-cli)\n\n## Calling OctoAI endpoints\n\nUse our [REST API](/docs/api-reference/octoai-api/inference) to integrate OctoAI endpoints into your application.\n"
      },
      "docs/compute-service/create-endpoint-from-existing-container/create-custom-endpoints-from-a-container.mdx": {
        "markdown": "---\ntitle: Create an endpoint from an existing container\nslug: >-\n  compute-service/create-endpoint-from-existing-container/create-custom-endpoints-from-a-container\n---\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\nOctoAI allows you to create endpoints from custom containers. We support all containers with an HTTP server written in any language, as long as your container comes with a declarative configuration of which port is exposed for inferences and is built for a GPU.\n\n- Our coverage includes and is not limited to containers built using Fast API, cog, s2i, Nvidia Triton Inference Server, and Sagemaker/AzureML/Vertex AI based ML containers.\n- We allow you to pull containers from any private registry, except registries running in a fully private network (e.g. AWS ECR, Gitlab registries in private environments). This means you can pull containers from Docker Hub, Quay, Gitlab, GitHub, etc. that are not in private networks.\n\nIf you don't already have a container in hand, [see our guide to building a custom endpoint with our CLI.](../create-custom-endpoint-using-the-cli)\n\nIn this example, we will create a production-grade endpoint for a Flan T5 container pre-built [here](https://hub.docker.com/r/vanessahlyan/flan-t5-small-pytorch-sanic) for a Question Answering application.\n\nIn the web UI, navigate to the Custom Endpoints page. Click on “New Endpoint,” then specify the following fields:\n![](https://www.datocms-assets.com/45680/1711726378-new-endpoint.png?max-w=2000&auto=compress)\n\n- **Endpoint Name:** This name for your endpoint will be part of the endpoint URL you end up integrating into your application-- that URL will be `https://<endpoint-name>-<account-id>.octoai.run/<inference-route>`\n- **Container Image:** The reference to your container needs to be in \"\\[registry/\\]organization/repository\\[:tag\\]\" format. In our example, the container image is `vanessahlyan/flan-t5-small-pytorch-sanic:latest`, hosted [here](https://hub.docker.com/r/vanessahlyan/flan-t5-small-pytorch-sanic) on Docker Hub.\n- **Container Port:** The port of the container at which inferences are run is 8000 in our Flan T5 example, as defined [here](https://github.com/octoml/octocloud-templates/blob/main/flan-t5-small/Dockerfile#L3). **Make sure to change the default value from 8080 to 8000 in the case of this example!**\n- **Registry Credential:** Registry Credential defaults to Public, which indicates that your container is available for anyone on the internet to pull. If your container is instead stored in a private registry, follow the guide in [Pulling containers from a private registry](/docs/compute-service/create-endpoint-from-existing-container/pulling-containers-from-a-private-registry) to store your registry credentials so that we can pull the private container.\n- **Health Check Path:** See [Health Check Path in custom containers](../health-check-path-in-custom-containers)\n- **Enable Public Access**: By default, your endpoints are private and require an access token, but you can change this setting such that anyone who knows your endpoint URL can use it.\n- **Active**: Whether to spin down all replicas and disable inferences to it.\n- **Specify Secrets:** Provide secrets to mount onto the container, such as database secrets that you want to reuse across endpoints. Follow the guide in [Setting up account-wide secrets for your custom endpoints](setting-account-wide-secrets-for-custom-endpoints) to set these up.\n- **Environment Variables**: Just like secrets, these variables will be mounted onto the container at runtime. If you have a variable with key foo whose value is bar, you will get a variable foo whose value is bar mounted to the container.\n- **Select hardware:** We offer three tiers of hardware-- see [Hardware, Pricing, and Billing](/docs/getting-started/pricing-and-billing) for more information. Your choice of hardware determines the pricing that you will pay for your endpoint.\n- **Minimum Replicas:** The default minimum number of replicas is 0, which means we autoscale down to 0 whenever your endpoint is not receiving requests from your users and the timeout period has passed (this is a way to keep your costs down). Minimum replicas should be set to a higher number if you want to ensure highest uptime for your users and avoid cold starts. Cold start means there is currently no active container instance running inferences on our servers for your application, so we need to incur extra latency to spin up a new one.\n- **Maximum Replicas:** This is an important measure for capping your maximum cost. The maximum number of replicas should be set based on how much simultaneous capacity you're willing to support at your heaviest traffic periods. For example, if you set your maximum replicas at 5, and each inference takes 1 second for your model on a GPU, then your application will be able to support a total of 250 inferences per minute without queueing. If your traffic goes above that level (well done you!), requests will be queued until they can be handled, which will increase your average request response time.\n- **Timeout**: How many seconds to wait before we scale down your last replica since the time you have no more inferences running.\n\nNow click **Create** and you’ll be directed to a page for your new endpoint.\n\nTo run an inference, use the endpoint URL shown in the UI, with the appropriate inference route appended to it. In our example, we serve inferences at the /predict route as defined in this [file](https://github.com/octoml/octocloud-templates/blob/main/flan-t5-small/server.py#L28), so we should send a CURL to `<your-endpont-url>/predict`. In my specific case, that is`https://flan-t5-small-01at11ru3fwy.octoai.run/predict`.\n\n```bash bash\ncurl -X POST '<your-endpoint-url>/predict' --data '{\"prompt\": \"What state is Los Angeles in?\", \"max_length\": 100}' -H 'content-type: application/json' -H \"Authorization: Bearer $YOUR_TOKEN\"\n```\n\n- You need to edit the curl to use your own API token. If you don't have an existing token, refer to [how to create an OctoAI API Token](/docs/getting-started/how-to-create-an-octoai-access-token)\n- This model expects the inputs `prompt` and `max_length`. We can fill in values `\"What state is Los Angeles in?\"` and `100` for those fields respectively, and get a response back.\n- To query the healthcheck for our endpoint (this is optional), we can hit `<your-endpoint-url>/healthcheck`\n\nOnce you use the curl to make an inference, look at the Events tab on the UI and you’ll see live events coming in informing you of the status of your deployment. Once you see here that the container is running, you inferences should complete successfully.\n\n## Next steps\n\n- Clone our example container implementation [here](https://github.com/octoml/octocloud-templates) and customize them for your own use cases!\n- Contact us if you have any questions.\n"
      },
      "docs/compute-service/create-endpoint-from-existing-container/pulling-containers-from-a-private-registry.mdx": {
        "markdown": "---\ntitle: Pulling containers from a private registry\nslug: >-\n  compute-service/create-endpoint-from-existing-container/pulling-containers-from-a-private-registry\n---\n\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\nWhen you create an endpoint from a custom container, you will see the following page, which has a field for a \"Registry Credential.\" By default, this field is set to \"Public,\" which requires that your container is available for anyone on the internet to pull and no registry credentials will be attached. If your container is instead stored in a private registry, click on the dropdown and then the + sign next to add a \"New registry credential\".\n![](https://www.datocms-assets.com/45680/1711726378-new-endpoint.png?max-w=2000&auto=compress)\n\nWhen you click a model will open where you can set a name for the credential, enter the username and password for the registry. \n![](https://www.datocms-assets.com/45680/1711726364-add-registry-credential.png?max-w=2000&auto=compress)\n\n* For example, if you are storing your container in a private repository within DockerHub, you can set the credential name to \"docker\" and look for your DockerHub username in the top right area of the navigation bar in the DockerHub [ UI](https://hub.docker.com/settings/security) once you've logged in. To get your DockerHub access token, go to your DockerHub Account Settings Security [page](https://hub.docker.com/settings/security), then click the New Access Token button.\n\nOnce you've added all the fields in the modal and clicked Save, the Registry Credential field will automatically change to the credential you just set up. Complete the remaining fields to create the endpoint.\n"
      },
      "docs/compute-service/create-endpoint-from-existing-container/setting-account-wide-secrets-for-custom-endpoints.mdx": {
        "markdown": "---\ntitle: Setting up account-wide secrets for your custom endpoints\nslug: >-\n  compute-service/create-endpoint-from-existing-container/setting-account-wide-secrets-for-custom-endpoints\n---\n\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\nWhen creating a new endpoint from your custom containers, you may wish to mount your account-wide secrets onto your container, such as database secrets. Simply click the **Select secret(s)** dropdown when creating a new endpoint, and then the + sign next to **New Secret**. \n![](https://www.datocms-assets.com/45680/1711726387-new-secret.png?max-w=2000&auto=compress)\n\nThat would bring up a modal in which you can specify a key and a value for the secret. For example, if you create secret with key `foo` whose value is `bar,` you will get a variable `foo` whose value is `bar` mounted to the container.\n![](https://www.datocms-assets.com/45680/1711726372-add-secret.png?max-w=2000&auto=compress)\n\nNote that this flow currently cannot access a database that is in a private VPC. Please contact us if you have a private database you wish to access.\n"
      },
      "docs/compute-service/create-custom-endpoint-using-the-cli.mdx": {
        "markdown": "---\ntitle: Create a container and endpoint using the CLI\nslug: compute-service/create-custom-endpoint-using-the-cli\n---\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\n## Overview\n\nThe `octoai` command-line interface (CLI) makes it easy for you create a custom endpoint for OctoAI Compute Service. The `octoai` CLI guides you through the process of creating an initial valid Python application with an example model, building it, and deploying it.\n\nThe `octoai` CLI includes some endpoint scaffolds with example models that you can deploy and try out right away. After you complete that initial workflow, you can follow the instructions in this document to modify the initial application to use the model or code of your choice on OctoAI Compute Service.\n\n## Prerequisites\n\n### Install the CLI and SDK\n\nFollow [CLI & SDK Installation](/docs/cli/cli-and-sdk-installation) to make sure you have the CLI and SDK installed. This guide assumes you are running the latest version of the `octoai` CLI.\n\n### Install Docker\n\nDocker is required to build and push container images for custom endpoints.\n\nFor Mac, follow these instructions: [Install Docker Desktop](https://docs.docker.com/desktop/install/mac-install/).\n\nFor Linux, follow these instructions: [Install Docker Engine](https://docs.docker.com/engine/install/ubuntu/).\n\nMake sure that docker is running before you proceed! You can confirm by running `docker info`.\n\nDocker buildx is also required, and it is included with recent versions of Docker. You can confirm that you have it installed by looking for `buildx` in the output of `docker info`, or by running `docker buildx`.\n\n### Export Your OctoAI Token on the Terminal\n\nAn OctoAI token authenticates you when interacting with the OctoAI Compute Service programatically.\n\nGo to [OctoAI Compute Service](https://octoai.cloud/endpoints) and log in. Then:\n\n1. Click **Settings** (the gear icon on the left).\n2. Provide a name for your token under **API Tokens**.\n3. Click **Generate**.\n4. Copy the access token that appears.\n\nOn your terminal window, add the token as an environment variable:\n\n```Shell Shell\nexport OCTOAI_TOKEN=<PasteYourOctoAITokenHere>\n```\n\n## Create Your First Endpoint\n\nUse the `octoai` CLI to create a directory on your computer with the application code for your first endpoint. Run this command:\n\n```Shell Shell\noctoai init\n```\n\nThe CLI offers you to choose one of the existing _scaffolds_, which are endpoint examples ready to deploy that showcase how to use the service with different models. The following scaffolds are available:\n\n- **hello-world** (a simple example)\n- **flan-t5** (text-in, text-out, adaptable to generative text use cases)\n- **wav2vec** (audio-in, text-out, adaptable for speech to text use cases)\n- **yolov8** (image-in, image-out, adaptable for computer vision use cases)\n\nUse the Up/Down arrow keys to navigate and choose a scaffold, then press Enter.\n\nThe rest of this section shows the deployment process using the `hello-world` scaffold. After you complete this tutorial, be sure to check out the other scaffolds to see how use different kinds models in your endpoints.\n\nThe CLI then prompts you for more details:\n\n- **Directory**: the directory name to create. Type `hello-world` and press Enter.\n- **Endpoint name:** the name of the endpoint. Type `hello-world` and press Enter.\n- **Hardware**: which hardware to run on. Use the Up/Down arrow keys to select `gpu.t4.medium` and press Enter\n- **Secrets**: the set of secrets to make available to your container. Use the Up/Down arrow keys to select `None/No more` and press Enter.\n- **Environment variables**: the set of environment variables and their values to make available to your container. Use the Up/Down arrow keys to select `None/No more` and press Enter.\n\nFor more information about secrets and environment variables, see [Setting up secrets or environment variables for your custom endpoints](create-endpoint-from-existing-container/setting-account-wide-secrets-for-custom-endpoints).\n\nThe CLI shows the following guidance:\n\n```Shell Shell\nInitialized project in directory. Build your endpoint with:\n\n\tcd directory\n\toctoai build\n\nYou can configure your project by editing the octoai.yaml file.\n\nFor the OctoAI CLI developer documentation, please visit https://docs.octoai.cloud/docs/cli/cli-configuration-reference\n```\n\n### Directory Structure\n\nThe `hello-world` directory contains the following files:\n\n- `octoai.yaml` \\- Stores the configuration of your endpoint to be used at deployment time.\n- `requirements.txt` \\- Lists any additional Python requirement packages for your application.\n- `service.py` \\- Contains the logic of your endpoint.\n- `test_request.py` \\- Contains example code to send requests to your endpoint.\n\n### Service Code Structure\n\nThe code in `service.py` looks like this:\n\n```Python Python\n\"\"\"Example OctoAI service scaffold: Hello World.\"\"\"\nfrom octoai.service import Service\n\nclass HelloService(Service):\n    \"\"\"An OctoAI service extends octoai.service.Service.\"\"\"\n\n    def setup(self):\n        \"\"\"Perform intialization.\"\"\"\n        print(\"Setting up.\")\n\n    def infer(self, prompt: str) -> str:\n        \"\"\"Perform inference.\"\"\"\n        return prompt\n```\n\nThe `octoai.service.Service` class is an abstract class that any endpoint has to implement.\n\nThe `octoai.types` package contains type definitions that help endpoints and clients work with data formats such as images and audio while communicating over HTTP.\n\nThe `Service.setup()` method is run at endpoint initialization. This method typically contains setup code that should not be run for every inference, such as downloading model weights from the network and making those available in a member variable in memory to be used by the `Service.infer()` method.\n\nThe `Service.infer()` method is run for every inference request. This method defines the interface of the endpoint (inputs, outputs, and their types) and contains code to perform inference with the model of your choice and return a response. Note that types and type annotations are required, as the OpenAPI specification for the endpoint is automatically generated from the parameters (names and types) and return type in the `infer()` method definition. The OpenAPI specification is available at `/docs` once the endpoint is deployed.\n\nThe APIs that are available to you (as well as other examples) are covered later in this document. For more information, see the [API reference documentation](https://octoml.github.io/octoai-python-sdk/octoai.html).\n\n## Build your Endpoint\n\nInside the `hello-world` directory, run the following command:\n\n```Shell Shell\noctoai build\n```\n\nThis command builds a Docker container for your endpoint. The first time you run this command, it can take a long time (\\~15 min), since this process has to download large amounts of data. Subsequent builds (of this endpoint or any other endpoint you create) on the same machine are much faster.\n\nWhen the build completes, the `octoai` CLI shows the name of the image tag:\n\n```JSON JSON\n{\"tag\":\"docker.io/YourDockerUserName/hello-world:SomeTag\"}\n```\n\nThe `octoai` CLI keeps track of this value for you, so you do not need to remember it.\n\n## Run Your Endpoint Locally\n\nBefore deploying your endpoint, you can run the container locally and send it a request to verify that it is working properly.\n\n<Note>\n\n**Target Platforms**\n\nThe images are built for target `linux/amd64` so they can be deployed to OctoAI Compute Service. If your computer is of a different architecture (for example, an M1/M2 Macbook), running the container locally can be slow (up to 15 min for `yolov8`).\n\nThe scaffolds included on the `octoai` CLI all work locally without a GPU. However, other models that require GPU acceleration may not run locally at all if a GPU is not available in your system.\n\nTo test locally, run this command:\n\n</Note>\n\n```Shell Shell\noctoai run --command \"python3 test_request.py\"\n```\n\nThe command `octoai run --command \"python3 test_request.py\"` does two things: it runs your endpoint container locally in the background, and it runs the python script `test_request.py` to send a request to the endpoint container. After a few seconds, the output should be similar to this:\n\n```JSON JSON\n{'output': 'Hello World!', ...}\n```\n\n### Two-Terminal Workflow\n\nDuring development, it is often useful to have one terminal running the endpoint and showing its logs while sending a request from a separate terminal. This helps you iterate on your code and clearly see client and server errors separately, so you can make the appropriate fixes. Follow these steps:\n\nFirst, run `octoai run -l`. This runs the endpoint in the foreground and displays the server logs as they occur. If there are any issues with your endpoint implementation code, you will see errors here either at initialization or when processing client requests.\n\n```Shell Shell\n$ octoai run -l\nStarting container: octoai-local-6585\nInitializing container: octoai-local-6585\nRunning container in foreground\n2023-10-10 18:24:46,529 INFO server.py:638 run\n2023-10-10 18:24:46,532 INFO server.py:520 Using service in service.HelloService.\n2023-10-10 18:24:46,534 INFO server.py:520 Using service in service.HelloService.\nINFO:     Started server process [1]\nINFO:     Waiting for application startup.\n2023-10-10 18:24:46,545 INFO server.py:347 status: State.UNINITIALIZED -> State.LAUNCH_PREDICT_LOOP\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://0.0.0.0:8080 (Press CTRL+C to quit)\n2023-10-10 18:24:47,027 INFO server.py:347 status: State.LAUNCH_PREDICT_LOOP -> State.SETUP_SERVICE\n2023-10-10 18:24:47,028 INFO server.py:347 status: State.SETUP_SERVICE -> State.RUNNING\n```\n\nSecond, open a new terminal and run `python3 test_request.py`. This runs the Python client code that sends a request to your endpoint. You typically will see the same response as before, but if there are errors returned to the client, you will see them here.\n\n```Shell Shell\n$ python3 test_request.py\n{'output': 'Hello world!', 'analytics': {'inference_time_ms': 5.74e-06, 'performance_time_ms': 0.694469}}\n```\n\n## Deploy Your Endpoint\n\nTo deploy your endpoint, run this command:\n\n```Shell Shell\noctoai deploy\n```\n\nThis command reads the endpoint configuration from `octoai.yaml` and uses those settings to create the endpoint. After reading the endpoint configuration, this command pushes your container to Docker Hub. If this is the first endpoint you created, this may take a while depending on the speed of your internet connection. When the push is complete, the CLI shows you the URL of your new endpoint:\n\n```JSON JSON\n{\"name\":\"hello-world\", \"endpoint\": \"https://hello-world-<hash>.octoai.run\"}\n```\n\nThe endpoint URL starts with your endpoint name and has additional characters added (shown as `<hash>` in the example above).\n\nYou can now verify your endpoint has been created with:\n\n```Shell Shell\noctoai endpoint list\n```\n\n## Modify Your Endpoint\n\nThe `octoai` CLI stores your deployment configuration in the `octai.yaml` configuration file. Initially this file is populated using the answers to the prompts that you provided when running `octoai init`:\n\n```YAML YAML\nendpoint_config:\n  name: hello-world\n  hardware: gpu.t4.medium\n  registry:\n    host: docker.io\n    path: <YourDockerHubUserName>/hello-world\n```\n\nThe configuration file supports additional directives that enable you to customize different aspects of your deployment. For example, you can specify your maximum number of replicas:\n\n```YAML YAML\nendpoint_config:\n  name: hello-world\n  hardware: gpu.t4.medium\n  max-replicas: 5\n  registry:\n    host: docker.io\n    path: <YourDockerHubUserName>/hello-world\n```\n\nThen you can redeploy your endpoint:\n\n```Shell Shell\noctoai deploy\n```\n\nYou can verify that the endpoint has been updated:\n\n```Shell Shell\noctoai endpoint list\n```\n\nNotice that the `REPLICAS` field now shows `[0-5]` instead of `[0-3]` as was the previous default.\n\nFor a list of all supported configuration directives, see the [Configuration Reference](#reference-octoaiyaml-configuration-file) section.\n\n## Send a Request to Your Endpoint\n\nEnsure you installed the [OctoAI Python SDK](#install-the-octoai-python-sdk). Then, to send a request to your endpoint:\n\n```Shell Shell\nexport OCTOAI_TOKEN=(paste your OctoAI API token from octoai.cloud/settings)\npython3 test_request.py --endpoint https://hello-world-<hash>.octoai.run\n```\n\nWhen you first send this request, your endpoint is performing a cold start, which means that no replicas were running and the first one has to start and load your container. This may take one to two minutes for the example scaffolds. After this time, you should see a response similar to this:\n\n```JSON JSON\n{'output': 'Hello World!', ...}\n```\n\nOnce you have an active replica, you can run the test command repeatedly and the endpoint responds quickly. OctoAI Compute Service lets you control the minimum and maximum number of replicas for your endpoint either from the web user interface or from the `octoai` CLI:\n\n- To see your endpoint in the web user interface, go to [https://octoai.cloud/endpoints](https://octoai.cloud/endpoints). Then click **hello-world**. To edit the endpoint, click **Edit**. On the next screen you can set the minimum and maximum number of replicas.\n- To use the CLI to update the minimum and maximum number of replicas, you can edit the `octoai.yaml` configuration file and redeploy your endpoint with `octoai deploy`.\n\nCongratulations! You have now created your first endpoint on OctoAI Compute Service and ran remote inference.\n\n### Client Code Structure\n\nThe client code in `test_request.py` looks like this:\n\n```Python Python\nfrom octoai.client import OctoAI\n\ninputs = {\"prompt\": \"Hello world!\"}\n\ndef main(endpoint):\n    \"\"\"Run inference against the endpoint.\"\"\"\n    # create an OctoAI client\n    client = OctoAI()\n\n    # perform inference\n    response = client.infer(endpoint_url=f\"{endpoint}/infer\", inputs=inputs)\n\n    # show the response\n    print(response)\n```\n\nThe `octoai.client.Client` class enables you to query your endpoint as shown here.\n\n## View Endpoint Logs\n\nNow that your endpoint has served one inference, there are some logs available for you to view. OctoAI Compute Service lets you view the server logs for your endpoint using the web user interface or the `octoai` CLI:\n\n- To view the server logs using the web interface, go to [https://octoai.cloud/endpoints](https://octoai.cloud/endpoints). Then click **hello-world**. Then click the **Logs** button on the top right of the page.\n- To view the server logs using the CLI, use the `octoai logs --name hello-world` command.\n\nFor example, using the CLI the logs look similar to this:\n\n```Text Text\n$ octoai logs --name hello-world\n19s   hello-world-<hash>   octoai server\n18s   hello-world-<hash>   Using service in service.HelloService.\n18s   hello-world-<hash>   run\n18s   hello-world-<hash>   Setting up.\n15s   hello-world-<hash>   Started server process [1]\n15s   hello-world-<hash>   Waiting for application startup.\n15s   hello-world-<hash>   Application startup complete.\n15s   hello-world-<hash>   Uvicorn running on http://0.0.0.0:8080\n13s   hello-world-<hash>   1.2.3.4:1234 - \"POST /infer HTTP/1.1\" 200 OK\n```\n\n## Customize Your Endpoint\n\nOnce you have built and deployed a `hello-world` endpoint to OctoAI Compute Service, it is time to customize the endpoint for your use case. To customize your endpoint, you will need:\n\n- A list Python dependencies for your model of interest\n- Example Python code to load your model of interest\n- Example Python code to perform inference with your model of interest\n\nThen you can modify the Hello World endpoint implementation to call your model of interest instead. Depending on the modality of your model of interest, it may be easier to start with a different scaffold than `hello-world` (such as `flan-t5`, `wav2vec`, or `yolov8`).\n\n### Use a HuggingFace Model\n\nThis section shows you how to modify the `hello-world` endpoint implementation to call the Flan-T5 model from HuggingFace instead. You can follow the process outlined here to use any other HuggingFace model of your interest.\n\n#### Step 1: Add Python Requirements\n\nThe `hello-world` endpoint implementation contains an empty `requirements.txt` file.\n\nEdit this file and add the corresponding requirements for Flan-T5:\n\n```Text Text\nsentencepiece==0.1.99\ntorch==2.0.1\ntransformers==4.29.2\n```\n\n#### Step 2: Add Custom Model Code\n\nThe `hello-world` endpoint implementation has an empty `Service.setup()` method in `service.py`, since it does not use any model, and a trivial `Service.infer()` method.\n\nEdit `service.py` and add the required imports, the model loading code, and the model inferencing code:\n\n```Python Python\n# add these imports\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\n\nfrom octoai.service import Service\n\nclass T5Service(Service):\n    \"\"\"An OctoAI service extends octoai.service.Service.\"\"\"\n\n    # update this method as shown here\n    def setup(self):\n        \"\"\"Download model weights to disk.\"\"\"\n        self.tokenizer = T5Tokenizer.from_pretrained(\"google/flan-t5-small\")\n        self.model = T5ForConditionalGeneration.from_pretrained(\"google/flan-t5-small\")\n\n    # update this method as shown here\n    def infer(self, prompt: str) -> str:\n        \"\"\"Perform inference with the model.\"\"\"\n        inputs = self.tokenizer(prompt, return_tensors=\"pt\")\n        outputs = self.model.generate(**inputs)\n        response = self.tokenizer.batch_decode(outputs, skip_special_tokens=True)\n\n        return response[0]\n```\n\nIn this case, our model of interest is of the same modality as the `hello-world` examples. For more information on how to use other modalities, see [Send and Receive Images](#send-and-receive-images) and [Send and Receive Audio](#send-and-receive-audio).\n\n#### Step 3: Modify Sample Client Code\n\nThe `hello-world` endpoint implementation has a sample `test_request.py` that makes a request to your endpoint. In this case, our model of interest is of the same modality as the `hello-world` example, so you can just change the prompt.\n\n```Python Python\nimport argparse\n\nfrom octoai.client import OctoAI\n\ninputs = {\"prompt\": \"What country is California in?\"}\n...\n```\n\n#### Step 4: Modify the Deployment Configuration\n\nThe `hello-world` endpoint implementation has a minimal `octoai.yaml` file.\n\nUpdate it to change the endpoint name and image tag:\n\n```Shell Shell\nendpoint_config:\n  name: flan-t5\n  hardware: gpu.t4.medium\n  regcred-key: dockerhub\n  registry:\n    host: docker.io\n    path: <YourDockerHubUserName>/flan-t5\n```\n\n#### Step 5: Build and Deploy\n\nOnce you have modified the endpoint implementation, rebuild and test your endpoint:\n\n```Shell Shell\noctoai build\noctoai run --command \"python3 test_request.py\"\n```\n\nThen, deploy your updated endpoint:\n\n```Shell Shell\noctoai deploy\noctoai endpoint list\npython3 test_request.py --endpoint https://flan-t5-<hash>.octoai.run\n```\n\nCongratulations! You have now customized your first endpoint on OctoAI Compute Service.\n\n### Modify the Dockerfile\n\nThe `octoai` CLI generates and uses a pre-defined Dockerfile to build a container for your endpoint. The CLI does not expose this Dockerfile by default, since most endpoints can be created successfully without having to view or change this file. However, the `octoai` CLI provides options for you to view and modify the Dockerfile if your use case requires it. For example, your model may require that you install additional native libraries in the container.\n\nKeep in mind that you do not need to view or modify the Dockerfile to specify Python dependencies, since you can provide those in the `requirements.txt` file in your project directory.\n\nTo view and modify the Dockerfile:\n\n1. Inside your project directory, run `octoai build -g`. Instead of building the container, this command generates a `Dockerfile` inside your project directory.\n2. Inspect and modify the resulting `Dockerfile` as needed.\n3. Build your container with `octoai build`. The build command uses the `Dockerfile` in your project directory to build your container (if one is available), instead of the pre-defined one. Note that using your own Dockerfile can increase cold start times for your endpoint. Contact us if you would like assistance on this subject.\n\n<Note>\n\n**Older versions and the `-d` flag**\n\nVersions of `octoai` prior to 0.4.5 require that you build with the `-d` flag to use your custom Dockerfile. Versions 0.4.5 and above always use a custom `Dockerfile` if it is available in the project directory.\n\n</Note>\n\nAfter you have built the container for your endpoint using a customized Dockerfile, you can continue with deployment in the same manner as before by running `octoai deploy`.\n\n### Include Model Weights in the Container\n\nThe `Service.setup()` method typically contains code that downloads model weights to disk. When you build an endpoint as described so far, this method is called right after the server starts, and the weights are downloaded to disk before the server can serve the first request.\n\nThe `octoai` CLI also enables you to run `Service.setup()` at container build time, such that the model weights downloaded to the local filesystem become part of the container image instead. In most cases, there is no clear benefit to embedding your weights with the container, since the container image will be larger and take longer to download, even if the server can serve requests soon after starting.\n\nTo include your model weights in your container image, add the `--setup` option to `octoai build`:\n\n```Shell Shell\noctoai build --setup\n```\n\n### Send and Receive Images\n\nThe `octoai.types` package contains helpful classes if you are customizing your endpoint to use a model that receives or generates images. To define an endpoint for a model that receives or generates images in `service.py`, use the `Image` type as a parameter or return type in the `Service.infer()` signature. For example, this would be for a model that takes images as Python Pillow objects as input and generates text\n\n```Python Python\nfrom octoai.service import Service\n\nclass MyService(Service):\n\n    def infer(self, image: Image) -> str:\n        image_pil = image.to_pil()\n        output = self.model(image_pil)\n\n        return output[0]\n```\n\nFor a detailed example on how to send and receive images, see the `yolov8` scaffold when running `octoai init`. For a list of useful methods available to send and receive images, see the [API reference documentation](https://octoml.github.io/octoai-python-sdk/octoai.html#octoai.types.Image).\n\n### Send and Receive Audio\n\nThe `octoai.types` package contains helpful classes if you are customizing your endpoint to use a model that receives or generates audio. To define an endpoint for a model that receives or generates audio in `service.py`, use the `Audio` type as a parameter or return type in the `Service.infer()` signature. For example, this would be for a model that takes audio as input and generates text:\n\n```Python Python\nfrom octoai.service import Service\nfrom octoai.types import Audio\n\nclass MyService(Service):\n\n    def infer(self, audio: Audio) -> str:\n        audio_array, sampling_rate = audio.to_numpy()\n        output = self.model(audio_array, sampling_rate)\n\n        return output[0]\n```\n\nFor a detailed example on how to send and receive audio, see the `wav2vec` scaffold when running `octoai init`. For a list of useful methods available to send and receive audio, see the [API Reference documentation](https://octoml.github.io/octoai-python-sdk/octoai.html#octoai.types.Audio).\n\n### Send and Receive Video\n\nThe `octoai.types` package contains helpful classes if you are customizing your endpoint to use a model that receives or generates video. To define an endpoint for a model that receives or generates video in `service.py`, use the `Video` type as a parameter or return type in the `Service.infer()` signature. For example, this would be for a model that takes video as input and generates text:\n\n```Python Python\nfrom octoai.service import Service\nfrom octoai.types import Video\n\nclass MyService(Service):\n\n    def infer(self, video: Video) -> str:\n        video_frames = video.to_numpy()\n        output = self.model(video_frames)\n\n        return output[0]\n```\n\nFor a list of useful methods available to send and receive video, see the [API Reference documentation](https://octoml.github.io/octoai-python-sdk/octoai.html#octoai.types.Video). The `Video` type was added in SDK version 0.5.0.\n\n### Send Media as URL References\n\nYou can create instances of the pre-defined media types (`Image`, `Audio`, and `Video`) from local files and from remote HTTP URLs.\n\nThe first approach is the `.from_file()` function, such as `Image.from_file(\"my_file.jpg\")`. When you send an `Image` object created like this to your endpoint, the image data is encoded as base64\\. This approach is advantageous when your media assets are not available as remote URLs already or when you are working with smaller files, such that the base64 encoding and decoding penalty is small.\n\nThe second approach is the `.from_url()` function, such as `Image.from_url(\"http://myserver.net/my_file.jpg\")`. When you send an `Image` object created like this to your endpoint, the image data is not included in the request, just the URL reference is. Inside your endpoint implementation, when you call methods that need the image data, such as `Image.to_pil()`, the image is downloaded then and data is accessed. This approach is advantageous when your media assets are already available as remote URLs or when you are working with large files, such that the base64 encoding and decoding penalty is noticeable.\n\nFor more information, see the [API Reference documentation](https://octoml.github.io/octoai-python-sdk/octoai.html#octoai.types.Media.from%5Ffile). Support for URL media references was added in SDK version 0.5.0.\n\n### Send Binary Files as Form Data\n\nIn addition to sending media either as base-64 encoded data or as URL references as described in the previous sections, you can also define an additional API route for your model that accepts form data. You can use this feature to upload any kind of binary file directly to your model.\n\nTo support form data uploads, you implement the `Service.infer_form_data()` method in your endpoint. For example:\n\n```Python Python\nfrom typing import Any, Dict\n\nfrom octoai.service import Service, path\nfrom octoai.types import File\n\nclass FormDataService(Service):\n    def setup(self):\n        print(\"Setting up FormDataService\")\n\n    def infer(self, data: str) -> str:\n        # the endpoint will expose both methods\n        return \"Use /infer-form-data for form data inference\"\n\n    @path(\"/infer-form-data\")\n    def infer_form_data(self, file: File, metadata: str) -> Dict[str, Any]:\n        # this simple example shows the file information\n        # you can instead send the file contents to your model\n        return {\n            \"file_name\": file.filename,\n            \"file_content_type\": file.content_type,\n            \"file_size\": file.size,\n            \"metadata\": metadata,\n        }\n```\n\nYou can customize the API route where your implementation of `infer_form_data` will be exposed within your endpoint using the `@path()` annotation.\n\n<Note>\n\n**Argument Types for Form Data**\n\nThe `Service.infer_form_data()` signature can only contain arguments of types `octoai.types.File` or `str`. If you need to provide additional metadata with your files, such as a JSON object, you can serialize it as a string so you can receive it inside the service implementation.\n\n</Note>\n\nTo send a file with some metadata to the endpoint implementation in the previous example, you can use the `httpx` library as follows.\n\n```Python Python\nimport httpx\n\nresponse = httpx.post(\n    \"https://<your-endpoint>.octoai.run/infer-form-data\",\n    files={\"file\": open(\"audio.wav\", \"rb\")},\n    data={\"metadata\": \"Some info about this audio file\"},\n)\n```\n\n### Support Multiple Routes\n\nThe OctoAI SDK enables you to define additional routes in your endpoint. The following example shows how to define two additional endpoints in a `Service` implementation:\n\n```Python Python\nfrom octoai.service import Service, path\n\nclass MultipleRoutesService(Service):\n\n  def setup(self):\n    print(\"Setting up MultipleRoutesService\")\n\n  # the infer() endpoint is always required\n  def infer(self, prompt: str) -> str:\n    return prompt\n\n  # this method is exposed as /new-route\n  @path(\"/new-route\")\n  def my_new_route(self, input_text: str):\n    return input_text\n\n  # this method is exposed as /my-new-route2\n  def my_new_route2(self, input_text: str):\n    return input_text\n```\n\nYou can customize the path where new methods are exposed by specifying the `@path` annotation. If you do not provide this annotation, the method will be exposed using the method name with underscores replaced by dashes.\n\nThis feature was introduced in SDK version 0.7.2 (CLI version 0.5.8).\n\n## Reference: `octoai.yaml` Configuration File\n\nThe following snippet shows a fully populated configuration file with all supported directives you can use to configure your endpoint for deployment.\n\n```YAML YAML\nendpoint_config:\n  name: yolov8                  # Unique endpoint name (required)\n  display-name: Yolov8          # User-visible endpoint name. (optional)\n  description: Object Detection # User-visible endpoint description. (optional)\n  hardware: gpu.t4.medium       # Use a T4 hardware type (required)\n  min-replicas: 1               # Keep a minimum of one replica (optional)\n  max-replicas: 3               # scale up up to 3 replicas (optional)\n  scaledown-in-seconds: 30      # scale down after 30 seconds of inactivity. (optional)\n  concurrency-per-replica: 2    # Concurrent requests sent to replica (optional)\n  public: false                 # Whether the endpoint is publicly visible (optional)\n  regcred-key: dockerhub        # Registry credentials for OctoAI to pull your image (optional)\n  secrets:                      # Secrets stored in OctoAI to surface as env. variables (optional)\n  - mykey\n  - mysecondkey\n  env_overrides:                # Environment variables to set in each replica (optional)\n    key1: value1\n    key2: value2\n  registry:\n    host: docker.io             # Registry hostname (required)\n    path: username/yolov8       # Registry path to image (required)\n    tag: v1                     # Tag (optional; not recommended to be set. Defaults to a generated UUID.)\n  service-module: app.service   # Path to python module to run (optional); defaults to \"service\"\n```\n\n## Appendix: OpenAPI Specification and Pydantic Types\n\nEndpoints that you create using the `octoai` CLI expose the signature of your `Service.infer()` method as an [OpenAPI](https://github.com/OAI/OpenAPI-Specification) specification that is exposed in the `/docs` HTTP path of your endpoint. Clients of your endpoint can reference this API specification to understand how to query your endpoint using the correct input names and types, as well as identify the type of the output that your endpoint returns.\n\nFor most models, you can use primitive Python types and the [pre-defined types](https://octoml.github.io/octoai-python-sdk/octoai.html#module-octoai.types) (`Image`, `Audio`, and `Video`) from the OctoAI Python SDK in your `Service.infer()` signature. However, some models use custom schemas in some of their inputs or outputs. For example, the YOLOv8 model included in one of the scaffolds returns a list of predictions that have the following schema:\n\n```JSON JSON\n[{\n    'name': 'bus',\n    'class': 5,\n    'confidence': 0.95,\n    'box': {\n        'x1': 2.91,\n        'x2': 809.51,\n        'y1': 230.68,\n        'y2': 881.00\n    }\n}, ...]\n```\n\nFor a model like this, you could define your return type as a list of dictionaries:\n\n```Python Python\ndef infer(self, image: Image) -> Dict[str, Any]:\n```\n\nHowever, the OpenAPI specification that the endpoint provides to your client would not give them any information about the schema of the predictions. To address this limitation, the OctoAI Python SDK enables you to define custom entity classes using [Pydantic](https://docs.pydantic.dev/latest/) models to capture these schemas and include them in the OpenAPI specification of the endpoint. For example, the YOLOv8 scaffold that you can select when creating a new endpoint with `octoai init` defines the following entities to capture the structure of the prediction shown above:\n\n```Python Python\nclass Box(BaseModel):\n    \"\"\"Represents corners of a detection box.\"\"\"\n\n    x1: float\n    x2: float\n    y1: float\n    y2: float\n\nclass Detection(BaseModel):\n    \"\"\"Represents a detection.\"\"\"\n\n    name: str\n    class_: int = Field(..., alias=\"class\")\n    confidence: float\n    box: Box\n\nclass YOLOResponse(BaseModel):\n    \"\"\"Response includes list of detections and rendered image.\"\"\"\n\n    detections: List[Detection]\n    image_with_boxes: Image\n```\n\nThen the `infer()` signature in the `YOLOv8Service` implementation returns a `YOLOResponse`:\n\n```Python Python\ndef infer(self, image: Image) -> YOLOResponse:\n    ...\n    # Return detection data and a rendered image with boxes\n    return YOLOResponse(\n        detections=[Detection(**d) for d in detections],\n        image_with_boxes=Image.from_pil(img_out_pil),\n    )\n```\n\nThe `YOLOResponse` entity (and any other Pydantic model you use as a return type) is converted automatically to JSON before the endpoint sends it to the client.\n\nFor Pydantic models you use as input arguments in `infer()`, the JSON data that the client provides must conform to the parameters of the entity, and it is converted to a Pydantic object automatically.\n\n## Appendix: Using a Custom Docker Registry\n\nEndpoints that you create with the `octoai` CLI use the OctoAI Compute Registry, which works seamlessly with your OctoAI authorization token. However, if you would prefer to use some other registry (such us DockerHub), you can configure your endpoint to do so.\n\n1. **Obtain your credentials for your custom registry.** For example, for DockerHub, you can generate an access token from the _Account Settings_ page.\n2. **Log into Docker on your terminal.** Use the `docker login` command with your registry username and access token as your password.\n3. **Provide your registry credentials to the OctoAI Compute Service**. To provide registry credentials using the web UI, see [Pulling containers from a private registry](create-endpoint-from-existing-container/pulling-containers-from-a-private-registry). To provide registry credentials using the `octoai` CLI, use the `octoai regcred create` command. To verify your registry credentials were created correctly, use the `octoai regcred list` command.\n\nTo create a new endpoint that uses a custom Docker registry, issue the `--registry` option to the `octoai init` command with the registry URL. For example, for DockerHub:\n\n```Shell Shell\noctoai init --registry docker.io\n```\n\nThe CLI will then prompt you for the image repository namespace (such as your DockerHub username) and the image repository name (which you could set to be the same as your endpoint name, or similar). Then the CLI will let you choose the right credentials to use to authenticate with the registry.\n"
      },
      "docs/compute-service/advanced-build-a-container-from-scratch-in-python.mdx": {
        "markdown": "---\ntitle: 'Advanced: build a container from scratch in Python'\nslug: compute-service/advanced-build-a-container-from-scratch-in-python\n---\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\nYou can use our CLI to easily create containers for any model written in Python. However, note that OctoAI is able to run **any** container with an HTTP server, so you are always welcome to build containers in your own ways (with the understanding that using custom containers means potentially longer cold start/ fewer optimizations).\n\nIf you prefer to create your own container from scratch, this tutorial will walk you through one example of how to do so.\n\n- In this example, we will build a container for a [Flan-T5 small model](https://huggingface.co/google/flan-t5-small) from the Hugging Face `transformers` library. This model is commonly used for text generation and question answering, but note that because it's small it does not yield outputs that are as high-quality as other OctoAI LLM endpoints.\n- An equivalent example for Hugging Face `diffusers` models can be found in the same GitHub [repo](https://github.com/octoml/octocloud-templates/tree/main).\n\n## Prerequisites\n\n- Sign up for a Docker Hub [account](https://hub.docker.com/)\n- Download [Docker desktop](https://www.docker.com/products/docker-desktop/) on your local machine\n- [Authenticate](https://docs.docker.com/engine/reference/commandline/login/) the Docker CLI on your machine\n\n## Example code\n\nAll the code in this tutorial can be found at this GitHub [repo](https://github.com/octoml/octocloud-templates/tree/main).\n\n## Step-by-step walkthrough\n\n#### Prepare Python code for running an inference\n\nFirst, we define how to run an inference on this model in `model.py`. The core steps include initializing the model and tokenizer using the `transformers` Python library, then running a `predict()` function that tokenizes the text input, runs the model, then de-tokenizes the model back into a text format.\n\n```py model.py\n\"\"\"Model wrapper for serving flan-t5-small.\"\"\"\nimport argparse\nimport typing\n\nimport torch\nfrom transformers import T5ForConditionalGeneration, T5Tokenizer\n\n_MODEL_NAME = \"google/flan-t5-small\"\n\"\"\"The model's name on HuggingFace.\"\"\"\n\n_DEVICE: str = \"cuda:0\" if torch.cuda.is_available() else \"cpu\"\n\"\"\"Device on which to serve the model.\"\"\"\n\nclass Model:\n    \"\"\"Wrapper for a flan-t5-small Text Generation model.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize the model.\"\"\"\n        self._tokenizer = T5Tokenizer.from_pretrained(_MODEL_NAME)\n        self._model = T5ForConditionalGeneration.from_pretrained(_MODEL_NAME).to(\n            _DEVICE\n        )\n\n    def predict(self, inputs: typing.Dict[str, str]) -> typing.Dict[str, str]:\n        \"\"\"Return a dict containing the completion of the given prompt.\n\n        :param inputs: dict of inputs containing a prompt and optionally the max length\n            of the completion to generate.\n        :return: a dict containing the generated completion.\n        \"\"\"\n        prompt = inputs.get(\"prompt\", None)\n        max_length = inputs.get(\"max_length\", 2048)\n\n        input_ids = self._tokenizer(prompt, return_tensors=\"pt\").input_ids.to(_DEVICE)\n        output = self._model.generate(input_ids, max_length=max_length)\n        result = self._tokenizer.decode(output[0], skip_special_tokens=True)\n\n        return {\"completion\": result}\n\n    @classmethod\n    def fetch(cls) -> None:\n        \"\"\"Pre-fetches the model for implicit caching by Transfomers.\"\"\"\n        # Running the constructor is enough to fetch this model.\n        cls()\n\ndef main():\n    \"\"\"Entry point for interacting with this model via CLI.\"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--fetch\", action=\"store_true\")\n    args = parser.parse_args()\n\n    if args.fetch:\n        Model.fetch()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### Create a server\n\nNext, we wrap this model in a [Sanic](https://sanic.dev/en/) server in `server.py`. Sanic is a Python 3.7+ web server and web framework that’s written to go fast. In our server file, we define the following:\n\n- A default port on which to serve inferences. The port can be any positive number, as long as it's not in use by another application. 80 is commonly used for HTTP, and 443 is often for HTTPS. In this case we choose 8000.\n- Two server routes that OctoAI containers should have:\n  - a route for inference requests (e.g. \"`/predict`\"). This route for inference requests must receive JSON inputs and JSON outputs.\n  - a route for health checks (e.g. \"`/healthcheck`\"). See [Healthcheck path in custom containers](health-check-path-in-custom-containers) for a detailed explanation.\n- Number of workers (not required). Typical best practice is to make this number some function of the # of CPU cores that the server has access to and should use.\n\n```py server.py\n\"\"\"HTTP Inference serving interface using sanic.\"\"\"\nimport os\n\nimport model\nfrom sanic import Request, Sanic, response\n\n_DEFAULT_PORT = 8000\n\"\"\"Default port to serve inference on.\"\"\"\n\n# Load and initialize the model on startup globally, so it can be reused.\nmodel_instance = model.Model()\n\"\"\"Global instance of the model to serve.\"\"\"\n\nserver = Sanic(\"server\")\n\"\"\"Global instance of the web server.\"\"\"\n\n@server.route(\"/healthcheck\", methods=[\"GET\"])\ndef healthcheck(_: Request) -> response.JSONResponse:\n    \"\"\"Responds to healthcheck requests.\n\n    :param request: the incoming healthcheck request.\n    :return: json responding to the healthcheck.\n    \"\"\"\n    return response.json({\"healthy\": \"yes\"})\n\n@server.route(\"/predict\", methods=[\"POST\"])\ndef predict(request: Request) -> response.JSONResponse:\n    \"\"\"Responds to inference/prediction requests.\n\n    :param request: the incoming request containing inputs for the model.\n    :return: json containing the inference results.\n    \"\"\"\n    inputs = request.json\n    output = model_instance.predict(inputs)\n    return response.json(output)\n\ndef main():\n    \"\"\"Entry point for the server.\"\"\"\n    port = int(os.environ.get(\"SERVING_PORT\", _DEFAULT_PORT))\n    server.run(host=\"0.0.0.0\", port=port, workers=1)\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIn our toy example, the line `model_instance = model.Model()` executes first, so by the time the server is instantiated our model is ready. That is why the code in our \"/healthcheck\" route is very straightforward in this example. In your own container, make sure your \"/healthcheck\" returns 200 only after your model is fully loaded and ready to take inferences.\n\n#### Package the server in a Dockerfile\n\nNow we can package the server by defining a requirements.txt file and a Dockerfile:\n\n```bash requirements.txt\nsanic==23.3.0\ntorch==2.0.0+cu118\n--extra-index-url https://download.pytorch.org/whl/cu118\nsentencepiece==0.1.97\ntransformers==4.27.4\n```\n\n```Dockerfile Dockerfile\nFROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04\n\nARG SERVING_PORT=8000\nENV SERVING_PORT=$SERVING_PORT\n\nWORKDIR /\n\nRUN apt update && \\\n    apt install -y python3-pip\n\n# Upgrade pip and install the copied in requirements.\nRUN pip install --no-cache-dir --upgrade pip\nADD requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy in the files necessary to fetch, run and serve the model.\nADD model.py .\nADD server.py .\n\n# Fetch the model and cache it locally.\nRUN python3 model.py --fetch\n\n# Expose the serving port.\nEXPOSE $SERVING_PORT\n\n# Run the server to handle inference requests.\nCMD python3 -u server.py\n```\n\nAlong with installing the dependencies, the Dockerfile also downloads the model into the image at build time. Because the model isn't too big, we can cache it in the Docker image for faster startup without impacting the image size too much. If your model is larger, you may want to pull it on container start instead of caching it in the Docker image. This may affect your container startup time, but keeps the image itself slim.\n\n#### Build a Docker image using the Dockerfile\n\n```bash bash\n$ DOCKER_REGISTRY=\"XXX\" # Put your Docker Hub username here\n$ cd ./flan-t5-small\n$ docker build -t \"$DOCKER_REGISTRY/flan-t5-small-pytorch-sanic\" -f Dockerfile .\n```\n\n#### Test the image locally\n\nRun this Docker image locally on a GPU to test that it can run inferences as expected:\n\n```bash bash\n$ docker run --gpus=all -d --rm\n    -p 8000:8000 --env SERVER_PORT=8000\n    --name \"flan-t5-small-pytorch-sanic\"\n  \t\"$DOCKER_REGISTRY/flan-t5-small-pytorch-sanic\"\n```\n\n..and in a separate terminal run the following command one or more times\n\n```bash bash\n$ curl -X GET http://localhost:8000/healthcheck\n```\n\n... until you see `{\"healthy\":true}` in the terminal output. Now, you can get an inference by running:\n\n```bash bash\n$ curl -X POST http://localhost:8000/predict \\\n    -H \"Content-Type: application/json\" \\\n    --data '{\"prompt\":\"What state is Los Angeles in?\",\"max_length\":100}'\n```\n\n#### Push the image to a cloud registry\n\nPush your Docker image to Docker Hub with:\n\n```bash bash\n$ docker push \"$DOCKER_REGISTRY/flan-t5-small-pytorch-sanic\"\n```\n\nNow that you have your container, [create an endpoint](create-endpoint-from-existing-container/create-custom-endpoints-from-a-container) to establish your endpoint on OctoAI.\n)\n"
      },
      "docs/compute-service/health-check-path-in-custom-containers.mdx": {
        "markdown": "---\ntitle: Healthcheck path in custom containers\nslug: compute-service/health-check-path-in-custom-containers\n---\n\n> **Contact us at customer-success@octo.ai to request access to the Compute Service.**\n\nThe healthcheck path is be the server route in the container that indicates when the server is ready to receive requests:\n\n- It is strongly recommended that you configure a health check path in your container. Otherwise, you may have inference failures whenever you try to make a request before your server is ready.\n- If you define a healthcheck, your endpoint has 5 minutes from the time the the image is pulled to return a 200 OK response. This will mark the endpoint as available, and the same criteria applies for additional replicas. If there are 3 consecutive calls to the healthcheck endpoint that return a non-200 OK status, then the replica will be restarted.\n- You can see an example of a health check path in our Flan T5 container in [Advanced: Build a Container from Scratch in Python](advanced-build-a-container-from-scratch-in-python). The health check path exposed by that container is `/healthcheck`. After the endpoint is created, one should be able to hit `https://<endpoint-name>-<account-id>.octoai.run/healthcheck` for a 200 response whenever the server is healthy and ready.\n"
      },
      "docs/cli/cli-and-sdk-installation.mdx": {
        "markdown": "---\ntitle: CLI installation\nsubtitle: How to install the OctoAI CLI\nslug: cli/cli-and-sdk-installation\n---\n\n## Latest CLI release\n\nYou can install the latest CLI and Python SDK using the script below, with compatibility for both Mac and Linux systems.\n\n```bash\ncurl https://s3.amazonaws.com/downloads.octoai.cloud/octoai/install_octoai_cli_and_sdk.sh -sSfL | sh\n```\n\n### Verify the installation\n\n```bash\noctoai version\n```\n\n```bash\noctoai --help\n```\n\nYou can also verify the `octoai-sdk` has successfully installed in your correct environment.\n\n```bash\npython3 -m pip show octoai-sdk\n```\n\nThis should provide an output similar to (though likely with different version numbers):\n\n```\nName: octoai-sdk\nVersion: 0.7.1\nSummary: A runtime library for OctoAI.\nHome-page:\nAuthor: OctoAI\nAuthor-email:\nLicense:\nLocation: /Users/sliu/anaconda3/envs/sdk-dev/lib/python3.10/site-packages\nRequires: boto3, chevron, click, fastapi, httpx, numpy, pillow, pydantic, python-dateutil, python-multipart, pyyaml, soundfile, types-pyyaml, types-requests, uvicorn\nRequired-by:\n```\n\n## Uninstall the CLI and Python SDK\n\nOur installation script installs the OctoAI binary to `usr/local/bin`. You can remove it with:\n\n```bash\nrm -rf /usr/local/bin/octoai\n```\n\nYou can uninstall the Python SDK using:\n\n```python\npython3 -m pip uninstall octoai-sdk\n```\n\nIf you used another method of installation such as brew, rpm, etc, please follow the directions from those services.\n\nIf you choose not to install the CLI and SDK using the installation script, you can alternatively use brew or apt. For most people, it is recommended you use the installation script.\n\nPlease note, if you install the CLI using brew or apt, you will also need to install the SDK directly from PIP. You can review the installation shell script from [CLI & SDK Installation](/docs/cli/cli-and-sdk-installation#latest-cli-release) to verify a compatible SDK version number if you run into difficulties, and also review there how to verify the installation was successful for both the SDK and CLI.\n\n### Latest Python SDK Release\n\nMuch of the CLI is dependent on the SDK. You can view our full release history on PyPI [here](https://pypi.org/project/octoai-sdk/).\n\nIf you choose not to use the installation script, you can use `pip` to install the `octoai-sdk` Python package directly. We strongly recommend that you install OctoAI in a `virtualenv`, to avoid conflicting with your system packages.\n\n```Python\npython3 -m pip install octoai-sdk\n```\n\nIf you've already installed a previous version of the `octoai-sdk`, you can also upgrade using:\n\n```Python\npython3 -m pip install --upgrade octoai-sdk\n```\n\n### Alternate CLI Installation Options\n\nAfter installing the Python SDK, you can then install the CLI.\n\nMac:\n\n```Shell\nbrew tap octoml/tap\nbrew install octoai\n```\n\nDebian:\n\n```Shell\nsudo add-apt-repository -y 'deb [trusted=yes] https://repo.fury.io/octoml/ /'\nsudo apt update\nsudo apt install octoai\n```\n\nPlease see the individual package manager for how to remove an installation, as their directions may change over time.\n"
      },
      "docs/cli/cli-reference-guide.mdx": {
        "markdown": "---\ntitle: CLI reference\nsubtitle: A reference guide for all CLI commands and their behaviors.\nslug: cli/cli-reference-guide\n---\n\nThis document provides a detailed description of every command of the OctoAI CLI. Remember that you can install the CLI by following [CLI & SDK Installation](/docs/cli/cli-and-sdk-installation#latest-cli-release).\n\n## account\n\nCommands related to your OctoAI account.\n\n### account info\n\nList account details for identifying yourself, useful for debugging or reporting your account information.\n\n```Shell Shell\noctoai account info\n\nEMAIL               KEY            NAME           PROVIDER\n[[email protected]](/cdn-cgi/l/email-protection)      XXXXXXXXXXXX   First Last     google\n```\n\n## build\n\nBuild a Docker image from your OctoAI project.\n\n### Flags\n\n- `-d`, `--dockerfile <string>` Dockerfile overload to use for building; if not provided, one will be generated.\n- `-g`, `--generate` Only generate a Dockerfile rather than building the image, which is the default behavior.\n- `-i`, `--image <IMAGE>` Image URI to use for final tagging.\n- `-s`, `--service-module <MODULE>` The Python module containing the `octoai.Service` implementation.\n- `--setup` Run `Service.setup()` at image build time.\n\n## check-config\n\nPrint the configuration of the CLI, useful for checking your token and configuration settings, or for debugging the behavior of your builds.\n\n## completion\n\n```Shell Shell\noctoai completion <SHELL>\n```\n\nGenerate the autocompletion script for the specified shell. Supports one of: `bash`, `fish`, `powershell`, `zsh`. For more information on how to use it, our CLI is built with [Cobra](https://github.com/spf13/cobra/tree/main).\n\n## deploy\n\nDeploy your endpoint to OctoAI. By default, we use your settings from `.octoai.yaml`, but flags can be passed to on this command to override the file settings.\n\n### Flags:\n\n- `--concurrency-per-replica <INT>` Maximum concurrency per replica (default is `-1`).\n- `--description <DESC>` Give this endpoint a human readable description.\n- `-d`, `--display-name` Give this endpoint a human readable display name in the web UI.\n- `-e`, `--env [<KEY>=<VALUE>]` Environment variables to pass to the endpoint; issue once per var: --env FOO=bar --env BAZ=qux.\n- `--hardware <HW_TYPE>` The hardware instance to deploy to.\n- `-i`, `--image <IMAGE>` A URI to the Image to deploy.\n- `--max-replicas <INT>` Maximum number of replicas to scale up to (default -1)\n- `--min-replicas <INT>` Minimum number of replicas to scale down to (default -1)\n- `-n`, `--name <STRING>` Name of the endpoint\n- `--regcred <REGCRED_KEY>` Registry credentials key for private image pulls.\n- `--scaledown-secs <INT>` Number of seconds of inactivity before scaling down the endpoint (default -1).\n- `--secrets <SECRET_KEY>` Secrets to load into the endpoint; issue once per secret: --secrets secretKey1 --secrets secretKey2.\n- `-t`, `--tag <TAG>` Tag to use for the image.\n- `--visibility <public|private>` Controls whether the endpoint is public or needs authentication.\n\n## endpoint\n\nCommands for creating, editing, or updating your endpoints.\n\n### endpoint create\n\nCreate an endpoint with the provided flags.\n\n### Flags:\n\n- `--concurrency-per-replica <INT>` Maximum concurrency per replica (default is `-1`).\n- `--description <DESC>` Give this endpoint a human readable description.\n- `--pause` Pause this endpoint on creation.\n- `-d`, `--display-name` Give this endpoint a human readable display name in the web UI.\n- `-e`, `--env [<KEY>=<VALUE>]` Environment variables to pass to the endpoint; issue once per var: --env FOO=bar --env BAZ=qux.\n- `--hardware <HW_TYPE>` The hardware instance to deploy to. Options include `\"gpu.t4.medium\" \"gpu.a10g.medium\" \"gpu.a100-80.medium\"`\n- `--health-check-path <STRING>` Server path for health checks\n- `-i`, `--image <IMAGE>` A URI to the Image to deploy.\n- `--max-replicas <INT>` Maximum number of replicas to scale up to (default -1)\n- `--min-replicas <INT>` Minimum number of replicas to scale down to (default -1)\n- `-n`, `--name <STRING>` Name of the endpoint\n- `-p`, `--port <INT>` Port to route requests to on the container (default 8080)\n- `--regcred <REGCRED_KEY>` Registry credentials key for private image pulls.\n- `--scaledown-secs <INT>` Number of seconds of inactivity before scaling down the endpoint (default -1).\n- `--secrets <SECRET_KEY>` Secrets to load into the endpoint; issue once per secret: --secrets secretKey1 --secrets secretKey2.\n- `-t`, `--tag <TAG>` Tag to use for the image.\n- `--visibility <public|private>` Controls whether the endpoint is public or needs authentication.\n\n### endpoint get\n\nGet information on the endpoint\n\n```Shell Shell\noctoai endpoint get --name <NAME> [-o <OUTPUT_FORMAT>]\n```\n\n### endpoint list\n\nList endpoints within this account\n\n```Shell Shell\noctoai endpoint list  [-o <OUTPUT_FORMAT>]\n```\n\n### endpoint update\n\nUpdate an endpoint\n\n### endpoint delete\n\n```Shell Shell\noctoai endpoint delete --name <NAME> [--force]\n```\n\n### endpoint start\n\nStart the endpoint, scale to minimum replicas and start routing traffic to it.\n\n```Shell Shell\noctoai endpoint start --name <ENDPOINT_NAME>\n```\n\n### endpoint pause\n\nPause the endpoint, scale down the replicas to 0 and stop routing traffic to it.\n\n```Shell Shell\noctoai endpoint pause --name <ENDPOINT_NAME>\n```\n\n## events\n\nShow the events associated with a given endpoint.\n\n### Flags\n\n- `-f`, `--follow` Tail event stream using our streaming events API. You will only events which occur after you start this command.\n- `-n`, `--name <string>` Name of the endpoint to monitor.\n- `-o`, `--output-format OutputFormat` Output format (default table).\n\n## help\n\nHelp about any command, provides a short summary of this page in the CLI.\n\n## init\n\n```Shell Shell\noctoai init\n```\n\nInitialize a brand new project from a scaffold, it will prompt the user for new repository configuration. The command will walk you through configuring your endpoint. See below for an example of creating a new project.\n\n![An example of running `octoai init` with the YoloV8 scaffold  ](https://www.datocms-assets.com/45680/1703714484-screen-shot-cli-octoai.gif)\n\n## login\n\nCache auth credentials for the `OCTOAI_TOKEN` generated from [How to create an OctoAI API token](/docs/getting-started/how-to-create-an-octoai-access-token).\n\n## logs\n\nShow the logs for a given endpoint.\n\n### Flags\n\n- `-f`, `--follow` Tail endpoint logs using our streaming logs API. You will only events which occur after you start this command.\n- `-n`, `--name <NAME>` Name of the endpoint to monitor.\n- `-o`, `--output-format OutputFormat` Output format (default table).\n\n## regcred\n\nManage registry credentials for deploying images from private registries.\n\n### regcred create\n\nCreates a registry credential in your account.\n\n```Shell Shell\noctoai regcred create --name <NAME> --token <TOKEN> --username <USERNAME>\n```\n\n### regcred get\n\nGet a registry credential from your account.\n\n```Shell Shell\noctoai regcred get --name <NAME> [-o <OUTPUT_FORMAT>]\n```\n\n### regcred list\n\nList your account's registry credentials.\n\n```Shell Shell\noctoai regcred list [-o <OUTPUT_FORMAT>]\n```\n\n### regcred update\n\nUpdate a registry credential in your account.\n\n```Shell Shell\noctoai regcred update --name <NAME> --token <TOKEN> --username <USERNAME>\n```\n\n### regcred delete\n\nDelete a registry credential from your account.\n\n```Shell Shell\noctoai regcred delete --name <KEY>\n```\n\n## run\n\nRun the most recently built container locally for testing before deployment.\n\n#### Flags\n\n- `-b`, `--background` Whether to run container in the background.\n- `--command <CMD>` Inference command to run. Surround in quotes to pass arguments to the command.\n- `-s, --env <stringArray>` Environment variables to pass to the container; issue once per var: --env FOO=bar --env BAZ=qux\n- `--gpus <string>` Identifier of GPU device, or 'all' to use all GPUs.\n- `-i`, `--image <string>` Image to run.\n- `-p`, `--port <int>` Host port to bind the container port to. (default 8080)\n- `--timeout int` How long to wait for container to start and healthcheck to be ready before timing out. (default 300)\n- `--container-name <string>` Assign a name to the container.\n\n## secret\n\nManage your secrets for your endpoints. These allow you to pass extra API keys, or any secret configuration to your containers. See [Setting up account-wide secrets for your custom endpoints](/docs/compute-service/create-endpoint-from-existing-container/setting-account-wide-secrets-for-custom-endpoints) for more information about this.\n\n### secret create\n\nCreate a secret in your account with a given key and a value.\n\n```Shell Shell\noctoai secret create --key <SECRET_KEY> --value <SECRET_VALUE>\n```\n\n### secret delete\n\nDelete a secret from your account.\n\n```Shell Shell\noctoai secret delete --key <SECRET_KEY>\n```\n\n### secret get\n\nFetch a secret from your account.\n\n```Shell Shell\noctoai secret get -key <SECRET_KEY> [--show] [--output-format OutputFormat]\n```\n\n### secret list\n\nList the secrets of your account.\n\n```Shell Shell\noctoai secret list [--output-format OutputFormat]\n```\n\n### secret update\n\nUpdate a secret in your account.\n\n```Shell Shell\noctoai secret update --key <SECRET_KEY> --value <SECRET_VALUE>\n```\n\n## version\n\nPrint the CLI version information useful for checking your build information or reporting issues.\n\n![](https://www.datocms-assets.com/45680/1690923476-ocatoai-cli-download-terminal-screenshot.png?max-w=2000&auto=compress)\n"
      },
      "docs/python-sdk/installation-and-setup.mdx": {
        "markdown": "---\ntitle: Python SDK installation & setup\nslug: python-sdk/installation-and-setup\n---\n\n### Installation Guide\n\nThe SDK currently supports Python versions 3.8.1 and upwards. It is strongly recommended that you use a virtual environment such as [Conda](https://conda.io/projects/conda/en/latest/index.html) or [venv](https://docs.python.org/3/library/venv.html) to manage Python packages for your development environment. This helps prevent incompatible dependencies with packages installed irrelevant to your current project or that conflict with system dependencies.\n\nYou can view our full release history on [PyPi](https://pypi.org/project/octoai/#history) for the latest version of the Python SDK.\n\nFor Mac and Linux, use pip to install the `octoai` sdk Python package. We strongly recommend that you install OctoAI in a virtualenv, to avoid conflicting with your system packages.\n\n```shell shell\npython3 -m pip install octoai\n```\n\nPlease refer to [CLI & SDK Installation](/docs/cli/cli-and-sdk-installation#latest-cli-release) for how to install the SDK in conjunction with the CLI for the authoring tool.\n\n### Setting API token as an environment variable\n\nIn order to access endpoints, [create an OctoAI API token](/docs/getting-started/how-to-create-an-octoai-access-token). Set `OCTOAI_TOKEN` to the token value wherever you set your environment variables, such as your `.bashrc` or `.env` file.\n\n```bash bash\nexport OCTOAI_TOKEN=YOUR_TOKEN_HERE\n```\n\nThen when you instantiate the client, it will detect the `OCTOAI_TOKEN` as an envvar and set it for you.\n\n```Python Python\nfrom octoai.client import OctoAI\n\nclient = OctoAI()\n```\n\nAlternatively, on creation of the `OctoAI` class, you can set your token, or the Client also accepts a path to where you've stored your API token from the `config_path` variable. Please see the `OctoAI` docs for more information.\n\n```Python Python\nfrom octoai.client import OctoAI\n\nclient = OctoAI(api_key=\"YOUR_OCTOAI_API_TOKEN_HERE\")\n```\n"
      },
      "docs/python-sdk/python-sdk-inferences.mdx": {
        "markdown": "---\ntitle: Python SDK inference\nslug: python-sdk/python-sdk-inferences\n---\n\n\n### OctoAI Python SDK at a glance\n\nThe OctoAI Python SDK is intended to help you use OctoAI endpoints. At its simplest form, it allows you to run inferences against an endpoint by providing a dictionary with the necessary inputs.\n\n```Python Python\nimport time\nfrom octoai.client import OctoAI\n\nclient = OctoAI()\n\n# It allows you to run inferences\noutput = client.infer(endpoint_url=\"your-endpoint-url\", inputs={\"keyword\": \"dictionary\"})\n\n# It also allows for inference streams for LLMs\nfor token in client.infer_stream(\"your-endpoint-url\", inputs={\"keyword\": \"dictionary\"}):\n    if token.get(\"object\") == \"chat.completion.chunk\":\n        # Do stuff with the token\n        pass\n\n# And for server-side asynchronous inferences\nfuture = client.infer_async(\"your-endpoint-url\", {\"keyword\": \"dictionary\"})\n# Typically, you'd collect additional futures then poll for status, but for the sake of example...\nwhile not client.is_future_ready(future):\n    time.sleep(1)\n# Once the results are ready, you can use them in the same way as you\n# typically do for demo endpoints\nresult = client.get_future_result(future)\n\n# And includes healthChecks\nif client.health_check(\"your-healthcheck-url\") == 200:\n\t# Run some inferences\n    pass\n\n```\n\n"
      },
      "docs/python-sdk/upgrading-from-old-sdk.mdx": {
        "markdown": "---\ntitle: Upgrading from the octoai-sdk\nslug: python-sdk/upgrading-from-old-sdk\n---\n\n\n### Uninstall octoai-sdk\n\n```bash\npip uninstall octoai-sdk\npip install octoai\n```\n\n### Upgrading your code\n\nThe various OctoAI APIs are now accessable from a single client:\n\n```python\nfrom octoai.client import OctoAI\n\nclient = OctoAI()\n\n# The various APIs are now accessible from the client\nclient.text_gen\n\nclient.image_gen\n\nclient.fine_tuning\n\nclient.asset_library\n```\n\n### Image Generation API changes\n\nIn the `octoai.image_gen` API instead of specifying which\nengine to use, use the corresponding `generate_*` method.\n\n### Text Generation API changes\n\nThe text generation models with `octoai.text_gen` API are now specified with a `str` model name instead of an `enum`.\n\nStreaming requests are made with the corresponding `octoai.text_gen.*_stream` method.\n\n### Asset Library (Asset Orchestrator) API changes\n\nThe Asset Orchestrator has been renamed to Asset Library and can be accessed via `octoai.asset_library`. Assets can be created with the `octoai.asset_lirbary.create_from_file`.\n\n### `octoai.service` API changes\n\nThe `octoai.service` API has been removed. You can make inferences to compute service endpoints via `OctoAI` client:\n\n```python\nfrom octoai.client import OctoAI\n\nclient = OctoAI()\n\n# octoai.infer()\n```\n\nHowever you will need to continue to use the older `octoai-sdk` for the full `octoai.service` API which includes service authoring.\n"
      },
      "docs/typescript-sdk/installation-and-setup.mdx": {
        "markdown": "---\ntitle: TypeScript SDK installation & setup\nslug: typescript-sdk/installation-and-setup\n---\n\n#### Requirements\n\n- The following runtimes are supported:\n  - Node.js 15+\n  - Vercel\n  - Cloudflare Workers\n  - Deno v1.25+\n  - Bun 1.0+\n- In order to access endpoints, [create an OctoAI API token](/docs/getting-started/how-to-create-an-octoai-access-token).\n- Set the token to an environment variable named `OCTOAI_TOKEN` or pass it to the `OctoAIClient` class on construction.\n\n#### Installation\n\nThe TypeScript SDK can be installed using your preferred package manager.\n\n<CodeGroup>\n```bash npm\nnpm install @octoai/sdk\n```\n\n```bash yarn\nyarn add @octoai/sdk\n```\n\n```bash pnpm\npnpm add @octoai/sdk\n```\n\n</CodeGroup>\n\n#### Setting API token as an environment variable\n\nIn order to access endpoints from OctoAI, first [create an API token](/docs/getting-started/how-to-create-an-octoai-access-token). Set `OCTOAI_TOKEN` to the token value wherever you set your environment variables, such as your `.bashrc` or `.env` file.\n\n```bash bash\nexport OCTOAI_TOKEN=YOUR_TOKEN_HERE\n```\n"
      },
      "docs/typescript-sdk/upgrading-from-old-sdk.mdx": {
        "markdown": "---\ntitle: Upgrading from @octoai/client\nslug: typescript-sdk/upgrading-from-old-sdk\n---\n\n### Migrating to the new SDK package\n\n<CodeGroup>\n```bash npm\nnpm uninstall @octoai/client\nnpm install @octoai/sdk\n```\n\n```bash yarn\nyarn remove @octoai/client\nyarn add @octoai/sdk\n```\n\n```bash pnpm\npnpm remove @octoai/client\npnpm add @octoai/sdk\n```\n\n</CodeGroup>\n\n### Upgrading your code\n\nThe various OctoAI APIs are now accessible from a single client:\n\n```typescript TypeScript\nimport { OctoAIClient } from \"@octoai/sdk\";\n\nconst octoai = new OctoAIClient({\n  apiKey: process.env.OCTOAI_TOKEN,\n});\n\n// The various APIs are now accessible from the client\noctoai.textGen;\noctoai.imageGen;\noctoai.fineTuning;\noctoai.assetLibrary;\n```\n\n### Image Generation API changes\n\nIn the `octoai.imageGen` API, instead of specifying which engine to use, use the corresponding `generate*` method such as `generateSdxl()` or `generateSd()`.\n\n### Text Generation API changes\n\nThe text generation models with `octoai.textGen` API are now specified with a `string` model name instead of an `enum`.\n\nStreaming requests are made with the corresponding `octoai.textGen.*Stream` method such as `createCompletionStream()` or `createChatCompletionStream()`.\n\n### Asset Library (Asset Orchestrator) API changes\n\nThe Asset Orchestrator has been renamed to Asset Library and can be accessed via `octoai.assetLibrary`. Assets can be created with the `octoai.assetLibrary.upload()` method.\n\n### Compute Inferencing API changes\n\nThe `infer()` method is not available in this SDK. You will need to continue to use the older `@octoai/client` for full inferencing support.\n"
      },
      "docs/faqs/rate-limits.mdx": {
        "markdown": "---\ntitle: Rate limits\nsubtitle: >-\n  Rate limits are restrictions on the rate and individual account can submit\n  inference requests.\nslug: faqs/rate-limits\n---\n\n\nRate limits are restrictions applied by OctoAI on the rate at which an individual account can submit inference requests against an API endpoint. It is a mechanism used to ensure predictable performance of the platform, and to allow all OctoAI customers to experience predictable inference latencies. Inference requests that are not completed because of a rate limit cap will return an HTTP 429 response code, and can be retried after an appropriate backoff period.\n\n## OctoAI API rate limits\n\n| API endpoint   | Free tier              | Pro tier              | Enterprise tier    |\n| -------------- | ---------------------- | --------------------- | ------------------ |\n| Text Gen       | 10 requests per minute | 240 requests per minute | [Contact us](https://octo.ai/contact-us)       \n  |\n| Media Gen      | 10 requests per minute | 60 requests per minute | [Contact us](https://octo.ai/contact-us)        |\n\n**Higher rate limits are available**, please [reach out](https://octo.ai/contact-us) if you need an increase.\n"
      },
      "docs/faqs/privacy-and-security.mdx": {
        "markdown": "---\ntitle: Privacy & security\nslug: faqs/privacy-and-security\n---\n\n\nWe are SOC Type 2 compliant and take data privacy extremely seriously. Our policies around customer data -- anything you upload to the platform and all inputs you send/outputs you generate — [are detailed here](https://octo.ai/legals/terms-of-use/) in sections 8-12. All data in transit and at rest uses SSL encryption.\n\nTo summarize, OctoAI can only use your customer data to provide the service to you and not for any other purpose. Providing the service does include debugging, troubleshooting, and ensuring ToS compliance. Customer prompt data is persisted in logs for 15 days and then deleted. Outputs are never stored, and we do not use your data to train models unless you decide to use our fine-tuning service directly. Access to customer logs is controlled on a need to know basis and audited.\n"
      },
      "docs/faqs/rag.mdx": {
        "markdown": "---\ntitle: How to implement RAG with OctoAI\nsubtitle: >-\n  There are multiple ways in which customers can build a RAG application on\n  OctoAI.\nslug: faqs/rag\n---\n\nOctoAI allows customers to [run their choice of LLMs](/docs/text-gen-solution/getting-started)\n(like Llama 2 70B, Mixtral 8x7B, Mixtral 8x22B) and embedding models (like gte-large). With these primitives, customers can use their preferred vector database as the reference data store for their RAG application. OctoAI also supports integrations with popular LLM application development frameworks like LangChain, allowing the use of pre-built functions in [LangChain](/docs/integrations/langchain) to simplify their RAG application development.\n\nLastly, OctoAI supports integrations into turnkey RAG frameworks like PineCone Canopy for customers to easily implement RAG with their data.\n"
      },
      "docs/faqs/service-regions.mdx": {
        "markdown": "---\ntitle: Service regions\nsubtitle: OctoAI currently runs on AWS and GCP hardware in several regions\nslug: faqs/service-regions\n---\n\n\nOctoAI currently runs on AWS and GCP hardware in several regions - including AWS us-east-1 and us-west-2 regions, and GCP us-central-1 region. We are actively expanding support for more regions.\n\nFor customers with data residency requirements, [OctoStack](https://octo.ai/docs/private-deployment/octostack) can be hosted in your own private cloud environment or on your own hardware. [Contact our sales team](https://octo.ai/octostack-demo/) for more information.\n"
      },
      "docs/faqs/multi-user-accounts.mdx": {
        "markdown": "---\ntitle: Multi-user accounts\nsubtitle: >-\n  The default setup is 1 user profile per 1 OctoAI account. We can easily help\n  you setup multiple users within a single account if you have a team or\n  organization with multiple users. This will allow your team to manage\n  endpoints, view logs & metrics, and securely share access to the account.\nslug: faqs/multi-user-accounts\n---\n\n\nContact us on [Discord](https://discord.gg/rXTPeRBcG7) or our in-app chat feature to setup your multi-user account.\n"
      },
      "docs/faqs/open-source-licenses.mdx": {
        "markdown": "---\ntitle: Open source licenses\nsubtitle: >-\n  Below are the open source technologies we make use of and their associated\n  licenses\nslug: faqs/open-source-licenses\n---\n\n\n\n| Package | License |  \n| ------- | --------- | \n| alabaster 0.7.13 | BSD |  \n| annotated-types 0.5.0 | MIT) |  \n| anyio 3.7.1 | MIT |  \n| av 10.0.0 | BSD |  \n| Babel 2.12.1 | BSD |  \n| black 23.7.0 | MIT |  \n| certifi 2023.7.22 | MPL-2.0 |  \n| cffi 1.15.1 | MIT |  \n| cfgv 3.4.0 | MIT |  \n| charset-normalizer 3.2.0 | MIT |  \n| chevron 0.14.0 | MIT |  \n| click 8.1.6 | BSD-3-Clause |  \n| distlib 0.3.7 | PSF-2.0 |  \n| docutils 0.18.1 | public domain, Python, 2-Clause BSD, GPL 3 (see COPYING.txt) |  \n| execnet 2.0.2 | MIT |  \n| fastapi 0.100.1 | MIT |  \n| filelock 3.12.2 | Unlicense |  \n| flake8 6.1.0 | MIT |  \n| flake8-docstrings 1.7.0 | MIT |  \n| h11 0.14.0 | MIT |  \n| httpcore 0.17.3 | BSD |  \n| httpx 0.24.1 | BSD |  \n| identify 2.5.26 | MIT |  \n| idna 3.4 | BSD |  \n| imageio 2.31.1 | BSD-2-Clause |  \n| imagesize 1.4.1 | MIT |  \n| iniconfig 2.0.0 | MIT |  \n| isort 5.12.0 | MIT |  \n| Jinja2 3.1.2 | BSD-3-Clause |  \n| MarkupSafe 2.1.3 | BSD-3-Clause |  \n| mccabe 0.7.0 | Expat license |  \n| mypy 1.5.1 | MIT License |  \n| mypy-extensions 1.0.0 | MIT License |  \n| nodeenv 1.8.0 | BSD |  \n| numpy 1.24.4 | BSD-3-Clause |  \n| packaging 23.1 | Apache Software License, BSD License |  \n| pathspec 0.11.2 | Mozilla Public License 2.0 (MPL 2.0) |  \n| Pillow 9.5.0 | HPND |  \n| pip 23.2.1 | MIT |  \n| platformdirs 3.10.0 | MIT |  \n| pluggy 1.2.0 | MIT |  \n| pre-commit 3.3.3 | MIT |  \n| prettytable 3.9.0 | BSD (3 clause) |  \n| pycodestyle 2.11.0 | MIT |  \n| pycparser 2.21 | BSD |  \n| pydantic 2.2.0 | MIT |  \n| pydantic-core 2.6.0 | MIT |  \n| pydocstyle 6.3.0 | MIT |  \n| pyflakes 3.1.0 | MIT |  \n| Pygments 2.16.1 | BSD-2-Clause |  \n| pytest 7.4.0 | MIT |  \n| pytest-xdist 3.3.0 | MIT |  \n| python-multipart 0.0.6 | Apache Software License |  \n| PyYAML 6.0.1 | MIT |  \n| requests 2.31.0 | Apache 2.0 |  \n| requests-futures 1.0.1 | Apache License v2 |  \n| respx 0.20.2 | BSD-3-Clause |  \n| setuptools 68.1.0 | MIT |  \n| sniffio 1.3.0 | MIT OR Apache-2.0 |  \n| snowballstemmer 2.2.0 | BSD-3-Clause |  \n| soundfile 0.12.1 | BSD 3-Clause License |  \n| sphinx 6.2.1 | BSD |  \n| sphinx-rtd-theme 1.2.2 | MIT |  \n| sphinxcontrib-applehelp 1.0.4 | BSD-2-Clause |  \n| sphinxcontrib-devhelp 1.0.2 | BSD |  \n| sphinxcontrib-htmlhelp 2.0.1 | BSD-2-Clause |  \n| sphinxcontrib-jquery 4.1 | BSD |  \n| sphinxcontrib-jsmath 1.0.1 | BSD |  \n| sphinxcontrib-qthelp 1.0.3 | BSD |  \n| sphinxcontrib-serializinghtml 1.1.5 | BSD |  \n| starlette 0.27.0 | BSD |  \n| types-PyYAML 6.0.12.11 | Apache-2.0 license |  \n| types-requests 2.31.0.2 | Apache-2.0 license |  \n| types-urllib3 1.26.25.14 | Apache-2.0 license |  \n| typing-extensions 4.7.1 | (License not found) |  \n| urllib3 2.0.4 | MIT |  \n| uvicorn 0.22.0 | BSD |  \n| virtualenv 20.24.3 | MIT |  \n| wcwidth 0.2.8 | MIT |  \n| wheel 0.41.2 | MIT |  \n"
      },
      "docs/api-reference/octoai-api/authentication.mdx": {
        "markdown": "---\ntitle: Authentication\nslug: api-reference/octoai-api/authentication\n---\n\n\n```bash bash\nAuthorization: Bearer $OCTOAI_TOKEN\n```\n\nAPI requests to your endpoints must be authenticated with a token - you can generate a token from the Account [Settings](https://octoai.cloud/settings) page. Be sure to include your token in the header of your requests.\n"
      },
      "docs/api-reference/octoai-api/inference.mdx": {
        "markdown": "---\ntitle: Inference\nslug: api-reference/octoai-api/inference\n---\n\n\n### Limitations\n\nAsynchronous inference request size is currently limited to 10mb. Asynchronous inference output data is stored for 24 hours, then automatically deleted. \n\nA long-running inference with duration greater than 1 minute may occasionally encounter an error. If this happens, re-submit your request or reach out to us for help.\n\n### Create inference\n\n```bash bash\nPOST https://image.octoai.run/generate/sdxl\n```\n\nStarts an inference at the specified endpoint URL for the data inputs you provide. The request is synchronous by default, and you can optionally specify the request as asynchronous. Input parameters are included in the cURL example of each endpoint. \n\nAPI requests to your endpoints must be authenticated with a token - you can generate a token from the Account [Settings](https://octoai.cloud/settings) page. Be sure to include your token in the header of your requests. \n\nExample synchronous cURL request:\n\n```bash bash\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n -H \"Content-Type: application/json\" \\\n -H \"authorization: Bearer $OCTOAI_TOKEN\" \\\n --data-raw '{\"prompt\": \"A photo of a cute cat astronaut in space\"}'\n```\n\n#### Asynchronous inference\n\nYou can create an asynchronous inference by specifying `X-OctoAI-Async: 1` in the request header. \n\nExample asynchronous cURL request:\n\n```bash bash\ncurl -X POST \"https://image.octoai.run/generate/sdxl\" \\\n -H \"Content-Type: application/json\" \\\n -H \"authorization: Bearer $OCTOAI_TOKEN\" \\\n -H \"X-OctoAI-Async:1\" \\\n --data-raw '{\"prompt\": \"A photo of a cute cat astronaut in space\"}'\n```\n\nYou’ll receive a response ID and poll URL where you can poll for the status and results: \n\n```bash bash\n\"response_id\": \"778bbfd58c-hz95k\",\n\"poll_url\": \"https://async.octoai.run/v1/requests/778bbfd58c-hz95k\"\n```\n\n### Get inference\n\n#### Poll for status\n\n```bash bash\nGET https://async.octoai.run/v1/requests/response_id\n```\n\nUse the `poll_url` to return the status of an inference, which will be one of these values: \n\n* `pending`: the inference is waiting or starting up\n* `running`: the inference is in progress\n* `completed`: the inference is finished\n\nExample poll cURL request:\n\n```bash bash\ncurl -X GET \"https://async.octoai.run/v1/requests/778bbfd58c-hz95k\" \\\n -H \"Authorization: Bearer $OCTOAI_TOKEN\"\n```\n\nExample pending poll response:\n\n\n\n```bash bash\n \"status\": \"pending\"\n```\n\n#### Get inference data\n\nWhen completed, the provided `response_url` will include the inference data. Asynchronous inference output data is stored for 24 hours, then automatically deleted. \n\n\n\n```bash bash\nGET https://async.octoai.run/v1/responses/response_id\n```\n\nExample completed poll response:\n\n\n\n```bash bash\n\"status\": \"completed\",\n\"response_url\": \"https://async.octoai.run/v1/responses/778bbfd58c-hz95k\"\n```\n\nExample cURL request for completed inference data:\n\n\n\n```bash bash\ncurl -X GET \"https://async.octoai.run/v1/responses/778bbfd58c-hz95k\" \\\n -H \"Authorization: Bearer $OCTOAI_TOKEN\"\n```\n"
      },
      "docs/integrations/overview.mdx": {
        "markdown": "---\ntitle: All OctoAI Integrations\nsubtitle: Browse OctoAI's partner integrations to help you build your custom solution.\nslug: integrations/overview\n---\n\n<CardGroup cols={2}>\n  <Card href=\"langchain\">\n    <div className=\"langchain\">\n      <img src=\"file:401c961a-1481-4717-a837-10a0dca52fa7\" noZoom />\n    </div>\n    <span className=\"title\">LangChain</span>\n    LangChain provides a framework to easily construct LLM-powered apps.\n    Langchain developers can leverage OctoAI LLM and embedding endpoints to\n    easily access efficient compute across a wide selection of LLMs.\n  </Card>\n  <Card href=\"unstructured\">\n    <img src=\"file:7556700f-ad9f-4b95-924f-73c87af7d36b\" noZoom />\n    <span className=\"title\">Unstructured.io</span>\n    Unstructured provides components to very easily embed text documents lke\n    PDFs, HTML, Word Docs, and more. The OctoAIEmbedingEncoder is available, so\n    documents parsed with Unstructured can easily be embedded with the OctoAI\n    embeddings endpoint.\n  </Card>\n  <Card href=\"pinecone\">\n    <div className=\"pinecone\">\n      <img src=\"file:f8d07fb4-b1e4-4adf-8678-8c3b4e1dc1b2\" noZoom />\n    </div>\n    <span className=\"title\">Pinecone (Canopy)</span>\n    Pinecone provides storage and retrieval infrastructure needed for building\n    and running AI apps. This integration allows a developer using Canopy to\n    choose from the best LLMs on OctoAI.\n  </Card>\n  <Card href=\"openrouter\">\n    <img src=\"file:17ed68ed-3f3b-4863-bc65-a716d640f557\" noZoom />\n    <span className=\"title\">OpenRouter</span>\n    OpenRouter has a unified interface for using various LLMs, allowing users to\n    find and compare models for their needs. The OpenRouter API users can\n    leverage OctoAI's best in class LLM endpoints.\n  </Card>\n  <Card href=\"llamaindex\">\n    <img src=\"file:e7159389-f6f1-4bfa-8fc1-d2cc7256b0da\" noZoom />\n    <span className=\"title\">LlamaIndex</span>\n    LlamaIndex aids in the management of interactions between your LLMs and\n    private data. A developer building AI apps can now access highly optimized\n    LLMs and Embeddings models on OctoAI.\n  </Card>\n</CardGroup>\n"
      },
      "docs/integrations/langchain.mdx": {
        "markdown": "---\ntitle: LangChain Integration\nsubtitle: >-\n  Langchain developers can leverage OctoAI LLM and embedding endpoints to easily\n  access efficient compute across a wide selection of LLMs.\nslug: integrations/langchain\n---\n\n## Introduction\n\nLangChain provides a framework to easily build LLM-powered apps. Developers using LangChain can now utilize OctoAI LLMs and Embedding endpoints\nto access efficient, fast, and reliable compute.\n\n## Using OctoAI's LLMs and LangChain\n\nTo use OctoAI LLMs with LangChain, first [obtain an OcotoAI API Token](/docs/getting-started/how-to-create-an-octoai-access-token).\nThen paste your API token in the code example below:\n\n```python\nimport os\n\nos.environ[\"OCTOAI_API_TOKEN\"] = \"OCTOAI_API_TOKEN\"\nos.environ[\"ENDPOINT_URL\"] = \"https://text.octoai.run/v1/chat/completions\"\n```\n\nNext, run the following Python script:\n\n```python\nfrom langchain.chains import LLMChain\nfrom langchain_community.llms.octoai_endpoint import OctoAIEndpoint\nfrom langchain_core.prompts import PromptTemplate\n\ntemplate = \"\"\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\\n Instruction:\\n{question}\\n Response: \"\"\"\nprompt = PromptTemplate.from_template(template)\n\nllm = OctoAIEndpoint(\n    model_kwargs={\n        \"model\": \"llama-2-13b-chat-fp16\",\n        \"max_tokens\": 128,\n        \"presence_penalty\": 0,\n        \"temperature\": 0.1,\n        \"top_p\": 0.9,\n        \"messages\": [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a helpful assistant. Keep your responses limited to one short paragraph if possible.\",\n            },\n        ],\n    },\n)\n\nquestion = \"Who was leonardo davinci?\"\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\n\nprint(llm_chain.run(question))\n```\n\nIt should produce the following output:\n\n```\n  Sure thing! Here's my response:\n\nLeonardo da Vinci was a true Renaissance man - an Italian polymath who excelled in various fields,\nincluding painting, sculpture, engineering, mathematics, anatomy, and geology. He is widely considered\none of the greatest painters of all time, and his inventive and innovative works continue to inspire and\ninfluence artists and thinkers to this day. Some of his most famous works include the Mona Lisa,\nThe Last Supper, and Vitruvian Man.\n```\n\n### Learn with our demo apps\n\nGet started today by following along with one of our demo apps:\n\n- [DocTalk](https://octo.ai/demos/doctalk/)\n- [Q&A app on a custom PDF](https://octo.ai/demos/q-a-on-custom-pdf/)\n"
      },
      "docs/integrations/pinecone.mdx": {
        "markdown": "---\ntitle: Pinecone (Canopy) Integration\nsubtitle: >-\n  This integration allows a developer using Canopy to choose from the best LLMs\n  on OctoAI.\nslug: integrations/pinecone\n---\n\n## Introduction\nPinecone provides storage and retrieval infrastructure needed for building AI applications. Pinecone's Canopy is an open-source framework built on top of Pinecone's\nvector database to build production-ready chat assistants at any scale.  \n\n\n## Using OctoAI's LLMs and Pinecone\nAs a fully open source solution, Canopy+OctoAI is one of the fastest ways and more affordable ways to get started on your \nRAG journey. Canopy uses Pinecone vector database for storage and retrieval, which is free to use for up to 100k vectors (that’s about 30k pages of text). \nOctoAI offers industry leading pricing at \\$0.05 / 1M token for its gte-large embedding model, and offers \\$10 of free credit upon sign up.\n\nTo get a Canopy server running with OctoAI's modles, you do not need custom ConvolverNode, simply update the Canopy YAML configureations as follows:\n\n```\nchat_engine:\n  params:\n  max_prompt_tokens: 2048\n  llm: &llm\n  type: OctoAILLM\n  params:\n    model_name: mistral-7b-instruct\n\n  context_engine:\n  knowledge_base:\n    record_encoder:\n      type: OctoAIRecordEncoder\n      params:\n        model_name: thenlper/gte-large\n        batch_size: 2048\n```\n\n### Learn with our demo apps\n\nGet started today by following along with one of our demo apps:\n- [DocTalk](https://octo.ai/demos/doctalk/)\n\n\nLearn more about our partnership:\n- [OctoAI & Pinecone Patnership for GenAI using RAG](https://octo.ai/blog/octoai-and-pinecone-partnership-for-genai-using-rag/ )\n"
      },
      "docs/integrations/unstructured.mdx": {
        "markdown": "---\ntitle: Unstructured.io Integration\nsubtitle: >-\n  The OctoAIEmbedingEncoder is available, so documents parsed with Unstructured\n  can easily be embedded with the OctoAI embeddings endpoint.\nslug: integrations/unstructured\n---\n\n## Introduction\n\nUnstructured is both an open-source library and an API service. The library provides components for ingesting and pre-processing images and text documents, such as PDFs, HTML, Word docs, and many more.\n\nIt also provides components to very easily embed these documents. In Unstructured’s jargon this component is called an EmbeddingEncoder. The OctoAIEmbedingEncoder is available, so documents parsed with Unstructured can easily be embedded with the OctoAI embeddings endpoint.\n\n## Using the OctoAIEmbeddingEncoder\n\nBefore you get started let's review some concepts. You will need an [OctoAI API Token](/docs/getting-started/how-to-create-an-octoai-access-token) for this integration.\n\n- The `OctoAIEmbeddingEncoder` class connects to the OctoAI Text&Embedding API to obtain embeddings for pieces of text.\n- `embed_documents` will receive a list of Elements, and return an updated list which includes the embeddings attribute for each Element.\n- `embed_query` will receive a query as a string, and return a list of floats which is the embedding vector for the given query string.\n- `num_of_dimensions` is a metadata property that denotes the number of dimensions in any embedding vector obtained via this class.\n- `is_unit_vector` is a metadata property that denotes if embedding vectors obtained via this class are unit vectors.\n\nNow, let's get started with the following code example for how to use `OctoAIEmbeddingEncoder`.\nYou will see the updated elements list (with the `embeddings` attribute included for each element),\nthe embedding vector for the query string, and some metadata properties about the embedding model.\nYou will need to set an environment variable named `OCTOAI_API_KEY` to be able to run this example.\n\n```python\nimport os\n\nfrom unstructured.documents.elements import Text\nfrom unstructured.embed.octoai import OctoAiEmbeddingConfig, OctoAIEmbeddingEncoder\n\nembedding_encoder = OctoAIEmbeddingEncoder(\n    config=OctoAiEmbeddingConfig(api_key=os.environ[\"OCTOAI_API_KEY\"])\n)\nelements = embedding_encoder.embed_documents(\n    elements=[Text(\"This is sentence 1\"), Text(\"This is sentence 2\")],\n)\n\nquery = \"This is the query\"\nquery_embedding = embedding_encoder.embed_query(query=query)\n\n[print(e.embeddings, e) for e in elements]\nprint(query_embedding, query)\nprint(embedding_encoder.is_unit_vector(), embedding_encoder.num_of_dimensions())\n```\n\nLearn more about our partnership:\n\n- [OctoAI & Unstructured.io Create New Integration](https://octo.ai/blog/octoai-and-unstructured-create-new-integration/)\n"
      },
      "docs/integrations/openrouter.mdx": {
        "markdown": "---\ntitle: OpenRouter Integration\nsubtitle: The OpenRouter API users can leverage OctoAI's best in class LLM endpoints.\nslug: integrations/openrouter\n---\n\n## Introduction\nOpenRouter provides a unified interface for using various LLMs and allows users to find and compare models based on PromiseRejectionEvent, latency, throughput. \nThis let's users find the right LLM and mix of price and performance for their use case. \n\n\n## Using OctoAI's LLMs and OpenRouter\nTo access OctoAI's best in class LLMs via OpenRouter [sign into OpenRouter](https://openrouter.ai/) and create an account to obtain an `OPENROUTER_API_KEY`.\n\nUsing the code snippet below you can route your calls to OpenRouter via OpenAI's client API. \nSet the providers the OpenRouter will use for your request using the `order` field. The router will filter this list to only include fproviders that are available for the model you want to use, and then try one at a time. It will fail if none are available.\n\nIf you do not set the field, the router will use the default ordering shown on the model page. \n\nIn the following code snippet, we assume the order of preference is as follows: OctoAI, Azure, then TogetherAI.\n\n```python \nimport OpenAI from \"openai\"\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: $OPENROUTER_API_KEY,\n  defaultHeaders: {\n    \"HTTP-Referer\": $YOUR_SITE_URL, // Optional, for including your app on openrouter.ai rankings.\n    \"X-Title\": $YOUR_SITE_NAME, // Optional. Shows in rankings on openrouter.ai.\n  },\n  // dangerouslyAllowBrowser: true,\n})\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    model: \"mistralai/mixtral-8x7b-instruct\",\n    messages: [\n      { role: \"user\", content: \"Say this is a test\" }\n    ],\n    provider: {\n\t    order: [\"OctoAI\", \"Azure\", \"Together\"]\n\t  }\n  })\n\n  console.log(completion.choices[0].message)\n}\nmain()\n```\n\nFind all models from OctoAI you can use at [https://openrouter.ai](https://openrouter.ai/).\n"
      },
      "docs/integrations/llamaindex.mdx": {
        "markdown": "---\ntitle: LlamaIndex Integration\nsubtitle: >-\n  A developer building AI apps can now access highly optimized LLMs and\n  Embeddings models on OctoAI.\nslug: integrations/llamaindex\n---\n\n## Introduction\nLlamaIndex strives to help manage the interactions between your language modles and private DataTransfer. \nIf you are building your application and using LlamaIndex you benefit from the vast ecosystem of integrations, and top LLMs amd Embeddings models hosted by OctoAI.\n\n\n## Using OctoAI's LLMs and LlamaIndex\nGet started reviewing more about [LlamaIndex](https://docs.llamaindex.ai/en/stable/), and [signing up for a free OctoAI account](https://identity.octo.ai/oauth/account/sign-up?redirectUrl=https%3A%2F%2Foctoai.cloud%2Foauth%2Fcallback). \n\nLlamaIndex has both Python and TypScript libraries, and OctoAI is available in the Python SDK. \n\nTo use OctoAI LLM endpoints with LlamaIndex start with the code below using Llama 3 8B as the LLM.  \n\n```python \nfrom os import environ\nfrom llama_index.llms.octoai import OctoAI\n\nOCTOAI_API_KEY = environ.get(\"OCTOAI_TOKEN\")\n\noctoai = OctoAI(model=\"meta-llama-3-8b-instruct\", token=OCTOAI_API_KEY)\n\n# Using complete\nresponse = octoai.complete(\"Octopi can not play chess because...\")\nprint(response)\n\nprint(\"\\n=====================\\n\")\n\n# Using the chat interface\nfrom llama_index.core.llms import ChatMessage\n\nmessages = [\n    ChatMessage(\n        role=\"system\",\n        content=\"Below is an instruction that describes a task. Write a response that appropriately completes the request.\",\n    ),\n    ChatMessage(role=\"user\", content=\"Write a short blog about Seattle\"),\n]\nresponse = octoai.chat(messages)\nprint(response)\n```\nTo use OctoAI Embedding endpoints with llamaindex \nyou can use the code below to get started. We’re using GTE large in the example below (default model).\n\n```python \nfrom os import environ\nfrom llama_index.embeddings.octoai import OctoAIEmbedding\n\nOCTOAI_API_KEY = environ.get(\"OCTOAI_TOKEN\")\nembed_model = OctoAIEmbedding(api_key=OCTOAI_API_KEY)\n\n# Single embedding request\nembeddings = embed_model.get_text_embedding(\"Once upon a time in Seattle.\")\nassert len(embeddings) == 1024\nprint(embeddings[:10])\n\n\n# Batch embedding request\ntexts = [\n    \"Once upon a time in Seattle.\", \n    \"This is a test.\", \n    \"Hello, world!\"\n]\nembeddings = embed_model.get_text_embedding_batch(texts)\nassert len(embeddings) == 3\nprint(embeddings[0][:10])\n```\n\nIf you are using LlamaIndex you can easily switch model provider, and enjoy using models hosted and optimized for scale on OctoAI.  \n"
      },
      "docs/release-notes/2024/may.mdx": {
        "markdown": "---\ntitle: May 2024 Release Notes\nsubtitle: OctoAI product updates and release notes for May 2024\nslug: release-notes/2024/may\n---\n\n<div className=\"changelog-status\">\n  <img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width=\"14\" height=\"14\" noZoom />\n  <span>Improved</span>\n</div>\n\n## May 3, 2024\n\nOctoAI releases a redesigned Asset Library.\n\n<div className=\"changelog\">\n  - Improves browsing, filtering, and overall asset management.\n</div>\n"
      },
      "docs/release-notes/2024/april.mdx": {
        "markdown": "---\ntitle: April 2024 Release Notes\nsubtitle: OctoAI product updates and release notes for April 2024\nslug: release-notes/2024/april\n---\n\n<div className=\"changelog-status\">\n  <img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width=\"14\" height=\"14\" noZoom />\n  <span>Improved</span>\n</div>\n\n## April 30, 2024\n\nOctoAI releases an improved Billing & Usage dashboard.\n\n<div className=\"changelog\">\n  - Provides more detailed visibility into your OctoAI product usage.\n</div>\n\n<div className=\"changelog-status\">\n  <img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width=\"12\" height=\"12\" noZoom />\n  <span>Added</span>\n</div>\n\n## April 24, 2024\n\nOctoAI releases **[OctoStack](https://octo.ai/product/octostack/)**: a turnkey generative AI solution allowing you to run your choice of models in your environment.\n\n<div className=\"changelog\">\n  - OctoStack provides a full stack solution for running generative AI at scale,\n  including inference, model customization, load balancing, auto-scaling, and\n  telemetry.\n</div>\n"
      },
      "docs/release-notes/2024/february.mdx": {
        "markdown": "---\ntitle: February 2024 Release Notes\nsubtitle: OctoAI product updates and release notes for February 2024\nslug: release-notes/2024/february\n---\n\n<div className=\"changelog-status\">\n  <img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width=\"12\" height=\"12\" noZoom />\n  <span>Added</span>\n</div>\n\n## February 29, 2024\n\nOctoAI Text Gen Solution adds several new [OSS large language models](https://octoai.cloud/text), including:\n\n<div className=\"changelog\">\n    - **Gemma-7B-Instruct**, a new open source model from Google.\n    - **Smaug-72B-v0.1**, a fine tune of the Qwen1.0 family of models that shows impressive leaderboard performance.\n    - **Nous-Hermes-2-Mixtral-8x7B-DPO**, a fine tune of the powerful Mixtral-8x7b model, offered as the “flagship” checkpoint of Nous Research (the current best producer of open source fine tunes for popular models).\n    <br />\n    Additionally, OctoAI releases **[SecureLink](https://octo.ai/docs/private-deployment/secure-link)**, which is a private connectivity security measure, ensuring that network traffic between an OctoAI endpoint and the customer environment is not exposed to the public internet. SecureLink is available for Enterprise customers.\n\n</div>\n\n<div className=\"changelog-status\">\n  <img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width=\"12\" height=\"12\" noZoom />\n  <span>Added</span>\n</div>\n\n## February 16, 2024\n\nOctoAI launches [Photo Merge](https://octoai.cloud/media/photo-merge?mode=demo) feature for Image Gen Solution\n\n<div className=\"changelog\">\n  - Seamlessly integrate a photos subject (person) into high-quality\n  AI-generated output. \n  - This eliminates the need for custom facial fine-tunes\n  and requires only 1-4 images.\n</div>\n\n<div className=\"changelog-status\">\n  <img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width=\"12\" height=\"12\" noZoom />\n  <span>Added</span>\n</div>\n\n## February 1, 2024\n\nOctoAI launches the GTE Large embeddings model, available via API.\n\n<div className=\"changelog\">\n  - GTE models were trained by Alibaba DAMO Academy on large-scale corpus of\n  relevant text pairs covering a myriad of scenarios. - Embedding models extract\n  meaning from raw data and turn it into a vector representation, which is used\n  to enhance llms.\n</div>\n"
      },
      "docs/release-notes/2024/january.mdx": {
        "markdown": "---\ntitle: January 2024 Release Notes\nsubtitle: OctoAI product updates and release notes for January 2024\nslug: release-notes/2024/january\n---\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## January 31, 2024\n\nCode Llama 70B now available on OctoAI.\n\n<div className=\"changelog\">\n    - Code Llama 70B Instruct now available via API or in the web UI. \n        - Use the same API and token key, simply replace the models with 'codellama-70b-instruct-fp16'\n\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## January 4, 2024\n\nOctoAI launched a private preview for users who want to \"bring your own\" fine-tuned LLM.\n\n<div className=\"changelog\">\n    - Host any fine-tuned Llama 2, Code Llama, Mixtral, or Mistral models.\n    - Run your fine-tuned model at the same cost and latency as the default models already on OctoAI.\n</div>\n\n\n"
      },
      "docs/release-notes/2023/december.mdx": {
        "markdown": "---\ntitle: December 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for December 2023\nslug: release-notes/2023/december\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## December 12, 2023\n\nOctoAI makes Mixtral 8x7B Instruct available on Text Gen Solution.\n\n<div className=\"changelog\">\n    - You can now run Mixtral 8x7B Instruct using the Text Gen Solution and benefit from high quality competitive with GPT 3.5, a unified API compatible with OpenAI, and a 4x lower price per token over GPT 3.5.\n\n</div>\n"
      },
      "docs/release-notes/2023/november.mdx": {
        "markdown": "---\ntitle: November 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for November 2023\nslug: release-notes/2023/november\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## November 27, 2023\n\nOctoAI launches it's new Text Gen Solution with Llama 2, Code Llama, and Mistral models.\n\n<div className=\"changelog\">\n    - Run inference against multiple sizes of Llama2 Chat, Code Llama Instruct, and Mistral Instruct all via one unified API.\n\n    - Reliably scale your app with OctoAI, which is already processing millions of inferences daily.\n\n</div>\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## November 20, 2023\n\nSDXL image generation has greatly been improved with the addition of SSD-1B, a distilled SDXL that is 50% faster, and LCM-LoRA, which enables image generation in less than 1 second.\n\n<div className=\"changelog\">\n    - SSD-1B is an OSS distilled SDXL that is 50% faster due to is smaller size. OctoAI applied our proprietary ML compiler to the model, and are able to generate SDXL images in 1.4 seconds using SSD-1B.\n\n    - LCM-LoRA is a custom asset that enables high-quality image output requiring as few as 4 steps to generate images in less than 1 second.\n\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width='14' height='14' noZoom />\n<span>Improved</span>\n</div>\n\n## November 16, 2023\n\nImage Gen Solution fine-tuning for SD 1.5 and SDXL via API or web UI now available.\n\n<div className=\"changelog\">\n    - Customers can create their own unique fine-tunes in the web UI with at least 3-6 images, or import custom assets from popular sources to generate one of a kind images. \n\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## November 8, 2023\n\nOctoAI Image Gen Solution launched.\n\n<div className=\"changelog\">\n    - The fastest and most customizable GenAI stack for production-grade image generation applications. The new solutions boasts SDXL images in less than 3 seconds, the ability to create or import fine-tuning assets, and reliable scale from a few to thousands of images.\n</div>\n"
      },
      "docs/release-notes/2023/october.mdx": {
        "markdown": "---\ntitle: October 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for October 2023\nslug: release-notes/2023/october\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width='14' height='14' noZoom />\n<span>Improved</span>\n</div>\n\n## October 31, 2023\n\nOctoAI is now generally available with two Solution offerings.\n\n<div className=\"changelog\">\n    - **OctoAI Image Gen Solution:** Build agaist an API endpoint to create, customize, and scale GenAI image generation for your use case.\n\n    - **Compute Service:** run your choice of OSS fine-tuned or custom models on the service for your use case.\n\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width='14' height='14' noZoom />\n<span>Improved</span>\n</div>\n\n## October 26, 2023\n\nOctoAI is now SOC 2 Type II certified.\n\n<div className=\"changelog\">\n    - Our most recent security enhancement showcases OctoAI provides processes and safeguards that secure customer data as verified by a third party auditor.\n\n</div>\n"
      },
      "docs/release-notes/2023/september.mdx": {
        "markdown": "---\ntitle: September 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for September 2023\nslug: release-notes/2023/september\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## September 20, 2023\n\nOctoAI made improvements to SDXL endpoint, and added support to multi-user accounts.\n\n<div className=\"changelog\">\n    - We have improved OctoAI's SDXL. Our latency-optimized SDXL endpoints now take about 2.8s to generate a 30-step image. We also have a cost-optimized SDXL endpoint that takes about 8s for 30 steps.\n    - Added support for multi-user accounts, which allows your team to manage endpoints, view logs & metrics, and securely share access to an account.\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## September 14, 2023\n\nOctoAI made an addition to it's Github repo to help users start building your own app on OctoAI, and a new audio generation endpoint. \n\n<div className=\"changelog\">\n    - Check out our [github repo](https://github.com/octoml/octoai-template-apps/tree/main) for template applications to help you get started on building your own app with OctoAI. Right now, we have an example using Python and deployable on Streamlit as well as one using TypeScript and deployable on Vercel.\n    - We also have a new audio generation endpoint available under private preview (e.g. Bark, Tortoise TTS).\n</div>\n\n\n"
      },
      "docs/release-notes/2023/august.mdx": {
        "markdown": "---\ntitle: August 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for August 2023\nslug: release-notes/2023/august\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## August 30, 2023\n\nOctoAI made several additions including: Llama 2 70B model, real-time streaming capabilities to Whisper, and updated the domain for newly created endpoints.\n\n<div className=\"changelog\">\n    - Added Llama2 70B quickstart template endpoint. We can also host custom Llama2 LoRAs/ checkpoints.\n\n    - Enabled users to upload data via URL in the authoring experience (CLI + Python SDK)\n\n    - Added real-time streaming capabilities to our Whisper audio flow, with a React hook called use Whisper for ease of integration into web/mobile apps. [Learn more about this change](https://github.com/octoml/octoai-template-apps/tree/main/real-time-audio-conversation).\n\n    - Changed the domain for all newly created endpoints from `octoai.cloud` to `octoai.run` Existing endpoints on `octoai.cloud` will still work, but we suggest that you start changing your code to call endpoints from `octoai.run` instead of `octoai.cloud`, since we'll also update existing endpoints in about a month.\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width='14' height='14' noZoom />\n<span>Improved</span>\n</div>\n\n## August 16, 2023\n\nThere were some new additions to our docs about Image Generation, some improvements in the backend, and a faster version of Stable Diffusion 1.5.\n\n<div className=\"changelog\">\n    - Added a new section in our Docs on Image Generation, including how to fine-tune and use Stable Diffusion.\n\n    - Reduced cold start substantially on endpoints created with our authoring experience (can be multiple minutes of improvement depending on the model). Upgrade to the latest version of the CLI and SDK and author new endpoints to get faster cold start for your custom models.\n\n    - Improved error boundaries in the UI. Users would be less likely to run into the \"Whoops Beta Mode engaged\" message in the UI.\n\n    - Enabled concurrency handling improvements to all new endpoints created from now on. We will also be gradually rolling out this change on previously created endpoints in upcoming weeks.\n\n    - A faster version of SD XL with dimension 1024x1024 is now available under private preview. We'd be gradually rolling out this new version over the next week or so.\n\n    - Reminder: OctoAI's quickstart template endpoints are for demo/testing purposes only. On these endpoints, we rate-limit to 15 inferences per hour. If you would like to exceed this limit for production use, please clone the endpoint to your own account.\n</div>\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## August 10, 2023\n\nThere have been some additions to the OctoAI platform: Stable Diffusion 1.5 template feature additions, Whisper feature additions, and private registry updates.\n\n<div className=\"changelog\">\n    - Whisper Template Feature Additions: Multi-hour long audio files are now supported. Furthermore, you can specify a URL to the audio input file (e.g. MP3, WAV, or MP4 formats), instead of uploading a file from your local environment.\n    - Private Registry: OctoAI's container authoring experience has been upgraded. Users are no longer required to provide registry credentials to get started. Images can be uploaded directly to a private OctoAI Registry. User uploaded images to OctoAI's Registry are accessible only to you and OctoAI services i.e. no other user can view or access your images.\n    - Stable Diffusion 1.5 Template Feature Additions: OctoAI's Stable Diffusion endpoint, running on A10Gs, has been upgraded to include the following features to help users customize styling and achieve higher-quality images:\n        - Popular Checkpoints like DreamShaper and Realistic Vision, Low Rank Adaptations (LoRAs), and Textual Inversions. Note: LoRA weights must sum up to 1.\n        - Additional image dimensions.\n        - We updated the web user interface.\n</div>\n"
      },
      "docs/release-notes/2023/july.mdx": {
        "markdown": "---\ntitle: July 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for July 2023\nslug: release-notes/2023/july\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## July 26, 2023\n\nOctoAI added several new things including better graceful concurrency handling, updated Python SDK, and diarization to Whisper model template.\n\n<div className=\"changelog\">\n    - Added more graceful concurrency handling: when users send more than N concurrent request to an endpoint with N replicas actively running, we will queue all extra requests instead of failing them. This queuing behavior has been activated for selected customers, and will be gradually rolled out over this week and next week. You will temporarily see a new replica spin up while the rollout is occurring on your endpoint.\n\n    - Updated our Python SDK from 0.1.2 to 0.2.0—it now support both streaming and async inference requests.\n\n    - Added diarization to our Whisper template endpoint and rectified the list of languages supported. Diarization enables use cases where you'd like to identify the speaker of each segment in a speech recording. You can view the full API specs in the Whisper demo template. Here's an example of how to use the template with diarization: \n\n    ```python\n        import requests\n        import base64\n\n        def download_file(url, filename):\n            response = requests.get(url)\n            if response.status_code == 200:\n                with open(filename, \"wb\") as f:\n                    f.write(response.content)\n                print(f\"File downloaded successfully as {filename}.\")\n            else:\n                print(f\"Failed to download the file. Status code: {response.status_code}\")\n\n\n        def make_post_request(filename):\n            with open(filename, \"rb\") as f:\n                encoded_audio = base64.b64encode(f.read()).decode(\"utf-8\")\n\n            headers = {\n                \"Content-Type\": \"application/json\"\n            }\n            data = {\n                \"audio\": encoded_audio,\n                \"task\": \"transcribe\",\n                \"diarize\": True\n            }\n\n            response = requests.post(\"https://whisper-demo-kk0powt97tmb.octoai.cloud/predict\", json=data, headers=headers)\n\n            if response.status_code == 200:\n                # Handle the successful response here\n                json_response = response.json()\n\n                for seg in json_response[\"response\"][\"segments\"]:\n                    print(seg)\n\n            else:\n                print(f\"Request failed with status code: {response.status_code}\")\n\n        if __name__ == \"__main__\":\n            url = \"<YOUR_FILE_HERE>.wav\"\n            filename = \"sample.wav\"\n\n            download_file(url, filename)\n\n            make_post_request(filename)\n    ```\n\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width='14' height='14' noZoom />\n<span>Improved</span>\n</div>\n\n## July 20, 2023\n\nAdded an OctoAI template for Llama2-7B Chat.\n\n<div className=\"changelog\">\n    - Added an OctoAI template for Llama2-7B Chat, which is an instruction-tuned model for chatbots.\n     Users can now work with this brand-new to the market LLM directly in the web UI with limited \n     token response or programmatically with additional optionality. A similar template for Llama2-70B is coming soon!\n</div>\n\n<div className='changelog-status'>\n<img src=\"file:ed68d643-84cd-40c7-8745-0557b4e9c857\" width='12' height='12' noZoom />\n<span>Fixed</span>\n</div>\n\n## July 18, 2023\n\nChanged the HTTP status code to 201 for the REST API calls for create secret and create registry credentials.  Previously, we returned 200 for these calls.\n\n<div className=\"changelog\">\n    - Changed the HTTP status code to 201 for the REST API calls for create secret and create registry credentials. Previously, we returned 200 for these calls. The behavior of the SDK and web frontend is not affected.\n</div>\n"
      },
      "docs/release-notes/2023/june.mdx": {
        "markdown": "---\ntitle: June 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for June 2023\nslug: release-notes/2023/june\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## June 27, 2023\n\nNew tutorials showing how to use Automatic1111's Stable Diffusion web UI and an updated Falcon template.\n\n<div className=\"changelog\">\n    - Released a Doc tutorial to show users how to use OctoAI's server class GPUs with Automatic1111 Stable Diffusion web user interface.\n\n    - Released a video tutorial to show users how to apply custom model checkpoints using Automatic1111's Stable Diffusion web user interface on OctoAI.\n\n    - Updated our Falcon template to use a different server implementation behind the scenes. The inference API is now available at /generate, but inferences at /predict will continue to work.\n</div>\n\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## June 14, 2023\n\nWe have launched OctoAI into general availability and made several updates to our models and endpoints.\n\n<div className=\"changelog\">\n    - With the launch of our service, changes will be made to our billing. You can find pricing plans and hardware options here. Changes and new user incentives taken into immediate effect are noted below:\n\n        - Tomorrow, June 13th, any existing endpoints will be set to min replicas=0 so that you are not billed for an instance unintentionally left active and running. Be prepared for a cold start before your first inference and reset to min replicas=1 if you prefer to keep the instance warm.\n\n        - Every user who logs in during public beta will receive credits for 2 free compute hrs on A100 (or 10+ hrs on A10!) to use in their first two weeks.\n\n        - The first 500 users to create a new endpoint will receive credits for 12 free compute hrs on A100 (or 50+ hrs on A10!) to use within their first month.\n\n    - You now have two options to integrate OctoAI endpoints into your application:\n        - Our new Python client (supports synchronous inference).\n\n        - Our HTTP REST API now supports both synchronous and asynchronous calls allowing users to request inference without persisting a connection, poll for status, and retrieve the completed prediction data. This is most effective when managing longer running requests.\n\n    - We've updated our Whisper model to be much faster.\n\n    - We've also added MPT 7B and Vicuña 7B as new quick-start templates as better alternatives to Dolly, which will be removed soon.\n</div>\n\n<div className='changelog-status'>\n<img src=\"file:a090b4d6-cbde-4b2b-ba94-e021f246f037\" width='12' height='12' noZoom />\n<span>Added</span>\n</div>\n\n## June 6, 2023\n\nSome additions to OctoAI on June 6, 2023. Added private registry and the ability for users to mount secrets and other environment variables.\n\n<div className=\"changelog\">\n    ### Private registry control\n    - Added the ability for users to pull containers from private registries by applying registry credentials to an endpoint. See Pulling containers from a private registry for a guide.\n\n    ### Secrets and environment variables\n    - Added the ability for users to mount secrets and other environment variables into their containers within an endpoint. See Setting up secrets or environment variables for your custom endpoints for a guide.\n\n    ### A100 GPUs\n    - NVIDIA A100s are back online as of 5pm PDT on June 6th. The A100s were temporarily taken down earlier this week as maintenance was being performed to update the version of CUDA. User requests and hardware options are now functioning business as usual.\n</div>\n\n\n"
      },
      "docs/release-notes/2023/may.mdx": {
        "markdown": "---\ntitle: May 2023 Release Notes\nsubtitle: OctoAI product updates and release notes for May 2023\nslug: release-notes/2023/may\n---\n\n\n<div className='changelog-status'>\n<img src=\"file:5679d19e-04a2-4ed2-ba89-1fb38e521adf\" width='14' height='14' noZoom />\n<span>Improved</span>\n</div>\n\n## May 31, 2023\n\nAdded support for NVIDIA A100s with 80GB of memory, and the ability for users to specify the health check server path.\n\n<div className=\"changelog\">\n    - Added support for NVIDIA A100s with 80GB of memory enabling faster inference and higher memory bandwidth. OctoAI's compute service allows users to start with a single A100 and scale up as traffic increases without paying for idle hardware.\n\n    - Released a video tutorial to show users how to apply custom model checkpoints using Automatic1111's Stable Diffusion web user interface on OctoAI.\n\n</div>\n"
      }
    },
    "search": {
      "type": "singleAlgoliaIndex",
      "value": {
        "type": "unversioned",
        "indexSegment": {
          "id": "seg_octoai.docs.buildwithfern.com/docs_a4a0dfa3-c30b-4c10-9bbf-a65283f5e879",
          "searchApiKey": "Nzg4MDI1NThmMTU5ZTQ2ZDkwNDQwZGNiMDc5ZTI3Y2Y3YWEwNGFmMTY3MTY4MjZmMGVhYWY2MWMxOTY1MmM4OGZpbHRlcnM9aW5kZXhTZWdtZW50SWQlM0FzZWdfb2N0b2FpLmRvY3MuYnVpbGR3aXRoZmVybi5jb20lMkZkb2NzX2E0YTBkZmEzLWMzMGItNGMxMC05YmJmLWE2NTI4M2Y1ZTg3OSZ2YWxpZFVudGlsPTE3MTcxMzI5MjE="
        }
      }
    },
    "id": "docs_definition_a0a48c18-f7ce-4984-8b10-806b7ed09ddb"
  },
  "lightModeEnabled": true
}
